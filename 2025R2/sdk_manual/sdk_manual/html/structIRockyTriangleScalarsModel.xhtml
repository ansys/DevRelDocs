<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.10.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Rocky solver SDK: IRockyTriangleScalarsModel Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/SVG"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Rocky solver SDK
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.10.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="getting_started.xhtml"><span>Getting&#160;started</span></a></li>
      <li><a href="module_specification.xhtml"><span>Module&#160;specification</span></a></li>
      <li><a href="solver_hooks.xhtml"><span>Solver&#160;hooks</span></a></li>
      <li><a href="macros_and_specifiers.xhtml"><span>Macros&#160;and&#160;specifiers</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Class&#160;reference</span></a></li>
      <li><a href="usage_examples.xhtml"><span>Usage&#160;examples</span></a></li>
      <li><a href="glossary.xhtml"><span>Glossary</span></a></li>
      <li><a href="changelog.xhtml"><span>Changelog</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="hierarchy.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('structIRockyTriangleScalarsModel.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle"><div class="title">IRockyTriangleScalarsModel Struct Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="rocky__triangle__scalars_8hpp_source.xhtml">rocky_triangle_scalars.hpp</a>&gt;</code></p>

<p>Inherits ScalarsModel&lt; rocky20::TriangleScalarsController &gt;.</p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:afc273a1e67e4995f848452fda3f71c31" id="r_afc273a1e67e4995f848452fda3f71c31"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afc273a1e67e4995f848452fda3f71c31">find</a> (const char *name)</td></tr>
<tr class="separator:afc273a1e67e4995f848452fda3f71c31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41b8986cbde7d37e0946a3a8a8361d19" id="r_a41b8986cbde7d37e0946a3a8a8361d19"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a41b8986cbde7d37e0946a3a8a8361d19">add</a> (const char *name, const char *unit, bool output=true)</td></tr>
<tr class="separator:a41b8986cbde7d37e0946a3a8a8361d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3e84af17e0dfaea602eab3a7a888b83" id="r_ac3e84af17e0dfaea602eab3a7a888b83"><td class="memTemplParams" colspan="2">template&lt;class data_type &gt; </td></tr>
<tr class="memitem:ac3e84af17e0dfaea602eab3a7a888b83"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac3e84af17e0dfaea602eab3a7a888b83">add_accumulation_scalar</a> (const char *name, const char *unit, bool output=true)</td></tr>
<tr class="separator:ac3e84af17e0dfaea602eab3a7a888b83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f5d565ed2b3fa05b52f9274d542d69" id="r_ae4f5d565ed2b3fa05b52f9274d542d69"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae4f5d565ed2b3fa05b52f9274d542d69">reset</a> (int scalar_index)</td></tr>
<tr class="separator:ae4f5d565ed2b3fa05b52f9274d542d69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02d862be5d91a62af18a1b1320286e7" id="r_aa02d862be5d91a62af18a1b1320286e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa02d862be5d91a62af18a1b1320286e7">set_dimension</a> (int scalar_index, double dimension_factor)</td></tr>
<tr class="separator:aa02d862be5d91a62af18a1b1320286e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01f4979062e25a0fb10b874f9f1f81d9" id="r_a01f4979062e25a0fb10b874f9f1f81d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a01f4979062e25a0fb10b874f9f1f81d9">enable_storage_of_exchanged_heat</a> ()</td></tr>
<tr class="separator:a01f4979062e25a0fb10b874f9f1f81d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe794fd133422249549fad8c56fee6eb" id="r_abe794fd133422249549fad8c56fee6eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abe794fd133422249549fad8c56fee6eb">reset_exchanged_heat</a> ()</td></tr>
<tr class="separator:abe794fd133422249549fad8c56fee6eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba5f06875d88bba1d66bd829c37fb52" id="r_acba5f06875d88bba1d66bd829c37fb52"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acba5f06875d88bba1d66bd829c37fb52">calculate_sum_over_geometries</a> (int scalar_index)</td></tr>
<tr class="separator:acba5f06875d88bba1d66bd829c37fb52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60ee5f18541c3104a7a286d244a5f896" id="r_a60ee5f18541c3104a7a286d244a5f896"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a60ee5f18541c3104a7a286d244a5f896">pull_scalar_from_devices</a> (int scalar_index)</td></tr>
<tr class="separator:a60ee5f18541c3104a7a286d244a5f896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1111ee6479b40ce1e086aec31c405e3e" id="r_a1111ee6479b40ce1e086aec31c405e3e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1111ee6479b40ce1e086aec31c405e3e">push_scalar_to_devices</a> (int scalar_index)</td></tr>
<tr class="separator:a1111ee6479b40ce1e086aec31c405e3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><code><a class="el" href="structIRockyTriangleScalarsModel.xhtml">IRockyTriangleScalarsModel</a></code> allows users to add new triangle scalars, find triangle scalars created in other modules or activate triangle scalars known to Rocky, during the setup phase of a module. Triangle scalars are special variables attached to boundary triangles, which are able to store values per triangle that are preserved between time iterations during a simulation. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a41b8986cbde7d37e0946a3a8a8361d19" name="a41b8986cbde7d37e0946a3a8a8361d19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41b8986cbde7d37e0946a3a8a8361d19">&#9670;&#160;</a></span>add()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int IRockyTriangleScalarsModel::add </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>name</em>, </span></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>unit</em>, </span></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>output</em><span class="paramdefsep"> = </span><span class="paramdefval">true</span></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p></p>
<dl class="section user"><dt>This method creates a new scalar variable of type <code>double</code></dt><dd>for storing custom values during a simulation, preserving them between time iterations.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name given to the scalar variable. The purpose of this name is twofold. First, it enables to find this scalar variable from other module, in order to share their values. Second, if the scalar variable can be displayed in a 3D window as a property, this name will identify it in the Rocky UI.</td></tr>
    <tr><td class="paramname">unit</td><td>A string specifying the unit in S.I. associated to the scalar variable.</td></tr>
    <tr><td class="paramname">output</td><td>Enables/disables the storage in disk at output times, for the visualization and post-processing of the scalar values.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The index that will uniquely identify the scalar variable during the execution of the simulation.   </dd></dl>

</div>
</div>
<a id="ac3e84af17e0dfaea602eab3a7a888b83" name="ac3e84af17e0dfaea602eab3a7a888b83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3e84af17e0dfaea602eab3a7a888b83">&#9670;&#160;</a></span>add_accumulation_scalar()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class data_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int IRockyTriangleScalarsModel::add_accumulation_scalar </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>name</em>, </span></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>unit</em>, </span></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>output</em><span class="paramdefsep"> = </span><span class="paramdefval">true</span></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section user"><dt>This method creates a new scalar variable of type defined by template parameter</dt><dd><code>data_type</code> for storing custom values during a simulation, preserving them between time iterations. The scalar added with this method has a special behavior defined for pulling data from devices in multi-gpu simulations: It will accumulate those values in the host memory.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name given to the scalar variable. The purpose of this name is twofold. First, it enables to find this scalar variable from other module, in order to share their values. Second, if the scalar variable can be displayed in a 3D window as a property, this name will identify it in the Rocky UI.</td></tr>
    <tr><td class="paramname">unit</td><td>A string specifying the unit in S.I. associated to the scalar variable.</td></tr>
    <tr><td class="paramname">output</td><td>Enables/disables the storage in disk at output times, for the visualization and post-processing of the scalar values.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The index that will uniquely identify the scalar variable during the execution of the simulation. </dd></dl>

</div>
</div>
<a id="acba5f06875d88bba1d66bd829c37fb52" name="acba5f06875d88bba1d66bd829c37fb52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acba5f06875d88bba1d66bd829c37fb52">&#9670;&#160;</a></span>calculate_sum_over_geometries()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; double &gt; IRockyTriangleScalarsModel::calculate_sum_over_geometries </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>scalar_index</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A vector of the size of geometries in a project, in which every value is the sum of the triangle scalar values associated to the triangles belonging to a geometry. Those values are ordered in the vector according to the indices assigned to the geometries in a project. The sums are performed only if the triangle scalars are of type <code>double</code> or <code><a class="el" href="structIRockyStatisticsAccumulator.xhtml">IRockyStatisticsAccumulator</a></code>. </dd></dl>

</div>
</div>
<a id="a01f4979062e25a0fb10b874f9f1f81d9" name="a01f4979062e25a0fb10b874f9f1f81d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01f4979062e25a0fb10b874f9f1f81d9">&#9670;&#160;</a></span>enable_storage_of_exchanged_heat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRockyTriangleScalarsModel::enable_storage_of_exchanged_heat </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section user"><dt>This method activates an internal triangle scalar that accumulates the heat </dt><dd>exchanged by geometry triangles with surrounding particles and/or SPH fluid elements during a simulation. The value of this scalar at each geometry triangle and at a given time will be equal to the sum of the heat received by the triangle from all particles and/or SPH elements that interacted with it since the last reset event, which is triggered by the <code><a class="el" href="#abe794fd133422249549fad8c56fee6eb">IRockyTriangleScalarsModel::reset_exchanged_heat()</a></code> function. </dd></dl>

</div>
</div>
<a id="afc273a1e67e4995f848452fda3f71c31" name="afc273a1e67e4995f848452fda3f71c31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc273a1e67e4995f848452fda3f71c31">&#9670;&#160;</a></span>find()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int IRockyTriangleScalarsModel::find </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>name</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p></p>
<dl class="section user"><dt>This method searches for a scalar variable already created by other modules,</dt><dd>in order to allow access to its values, or store new values on it, during the execution of the simulation.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name given to the scalar at the moment of its creation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The index that uniquely identifies the wanted scalar if it was actually found. It returns -1 otherwise.   </dd></dl>

</div>
</div>
<a id="a60ee5f18541c3104a7a286d244a5f896" name="a60ee5f18541c3104a7a286d244a5f896"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60ee5f18541c3104a7a286d244a5f896">&#9670;&#160;</a></span>pull_scalar_from_devices()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRockyTriangleScalarsModel::pull_scalar_from_devices </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>scalar_index</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the scalar values defined by scalar_index from the device memory to the host memory (DRAM). When running a simulation in multi-GPU, the values of different devices will be accumulated (summed) in the scalar host memory. This method can only be called for scalars added with add_accumulation_scalar in multi-gpu simulations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scalar_index</td><td>the index of the scalar we want to copy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1111ee6479b40ce1e086aec31c405e3e" name="a1111ee6479b40ce1e086aec31c405e3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1111ee6479b40ce1e086aec31c405e3e">&#9670;&#160;</a></span>push_scalar_to_devices()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRockyTriangleScalarsModel::push_scalar_to_devices </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>scalar_index</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Send the current scalar values defined by scalar_index located in host memory (DRAM) to the devices memory.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scalar_index</td><td>the index of the scalar we want to push to devices. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae4f5d565ed2b3fa05b52f9274d542d69" name="ae4f5d565ed2b3fa05b52f9274d542d69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4f5d565ed2b3fa05b52f9274d542d69">&#9670;&#160;</a></span>reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRockyTriangleScalarsModel::reset </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>scalar_index</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p></p>
<dl class="section user"><dt>This method resets to zero all values stored in a scalar variable.</dt><dd></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scalar_index</td><td>The index attributed to the scalar variable at the moment of its creation.   </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abe794fd133422249549fad8c56fee6eb" name="abe794fd133422249549fad8c56fee6eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe794fd133422249549fad8c56fee6eb">&#9670;&#160;</a></span>reset_exchanged_heat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRockyTriangleScalarsModel::reset_exchanged_heat </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section user"><dt>This method resets an internal triangle scalar that accumulates the heat </dt><dd>exchanged by geometry triangles with surrounding particles and/or SPH fluid elements. For example, this function may be called from within the <code>ROCKY_PLUGIN_BEGIN_ITERATION</code> hook. In that case, at the end of an iteration, a custom module can get the value of the total heat received by each triangle during the last timestep. </dd></dl>

</div>
</div>
<a id="aa02d862be5d91a62af18a1b1320286e7" name="aa02d862be5d91a62af18a1b1320286e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa02d862be5d91a62af18a1b1320286e7">&#9670;&#160;</a></span>set_dimension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRockyTriangleScalarsModel::set_dimension </td>
          <td>(</td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>scalar_index</em>, </span></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>dimension_factor</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p></p>
<dl class="section user"><dt>The purpose of this method is to associate a dimensional factor</dt><dd>to a scalar variable. This factor will be used to nondimensionalize their values. For instance, if the scalar represents a force, a force dimensional factor must be associated through this method. Dimensional factors for the fundamental magnitudes are provided by functions of a <code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a></code> object.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scalar_index</td><td>The index attributed to the scalar variable at the moment of its creation.</td></tr>
    <tr><td class="paramname">dimension_factor</td><td>The appropriate dimensional factor for the scalar variable.   </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="structIRockyTriangleScalarsModel.xhtml">IRockyTriangleScalarsModel</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.10.0 </li>
  </ul>
</div>
</body>
</html>
