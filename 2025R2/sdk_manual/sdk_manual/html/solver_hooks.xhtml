<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.10.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Rocky solver SDK: Solver hooks</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/SVG"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Rocky solver SDK
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.10.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="getting_started.xhtml"><span>Getting&#160;started</span></a></li>
      <li><a href="module_specification.xhtml"><span>Module&#160;specification</span></a></li>
      <li><a href="solver_hooks.xhtml"><span>Solver&#160;hooks</span></a></li>
      <li><a href="macros_and_specifiers.xhtml"><span>Macros&#160;and&#160;specifiers</span></a></li>
      <li><a href="annotated.xhtml"><span>Class&#160;reference</span></a></li>
      <li><a href="usage_examples.xhtml"><span>Usage&#160;examples</span></a></li>
      <li><a href="glossary.xhtml"><span>Glossary</span></a></li>
      <li><a href="changelog.xhtml"><span>Changelog</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('solver_hooks.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div><div class="header">
  <div class="headertitle"><div class="title">Solver hooks</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p><a class="anchor" id="md_docs_2sdk__manual_2solver__hooks"></a> The Rocky Solver SDK allows users to attach customized C++ code into strategic points of the code that executes a simulation in Rocky. At these points, which are named generically as <a class="el" href="glossary.xhtml#hook">hooks</a>, the Rocky Solver SDK will provide access to data relevant to the intended operation at that location, and also sometimes the means to send back data to the solver, in order to modify some specific behavior. As an illustration, Figure 3.1 shows the position of the main hooks provided by the Rocky Solver SDK in a very simplified flowchart of a simulation in Rocky.</p>
<div class="image">
<img src="hooks_flowchart.png" alt="" width="30%"/>
</div>
    <p><em>Figure 3.1: Position of the main hooks provided by the Rocky Solver SDK, relative to the main operations made during a simulation</em></p>
<p>This section describes the hooks a <a class="el" href="glossary.xhtml#module">module</a> can attach to during a simulation in order to execute custom C++ code. These hooks can be separated broadly into two groups: the ones that are executed only once, when Rocky starts or terminates the simulation, and the ones that are called several times during the simulation, as Rocky updates the state of the particulate system.</p>
<h2><a class="anchor" id="autotoc_md29"></a>
Initialization and termination hooks</h2>
<p>The following hooks are called once, when the simulation starts or terminates, as shown in the diagram of Figure 3.1.</p>
<h3><a class="anchor" id="autotoc_md30"></a>
ROCKY_PLUGIN_CONFIGURE</h3>
<p>At this point, Rocky parses the configuration settings of external modules. This hook is intended for a module to retrieve the custom input data that was set by the user through the Rocky UI and store it locally for later use. The specifications for custom input data is defined by a module through a Python file, as described in chapter Module Specification.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code>const <a class="el" href="classIRockyPluginData.xhtml">IRockyPluginData</a> &amp;input_data</code></p>
<p class="startli">Brings all the values of module parameters entered through the Rocky UI. For a description of the available methods for retrieving the values from <code><a class="el" href="classIRockyPluginData.xhtml">IRockyPluginData</a></code>, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *&amp;data</code></p>
<p class="startli">Accepts a generic pointer that is returned back by other hooks. The module may use this pointer to point to a local <code>struct</code>, in order to be able to access to custom data in other stages of the simulation.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md31"></a>
ROCKY_PLUGIN_SETUP</h3>
<p>During the setup, Rocky allocates resources that will be needed during the simulation. In this hook, a custom module may allocate memory or other resources for storing custom data.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation. For a list of the methods associated to <code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a></code>, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md32"></a>
ROCKY_PLUGIN_COMPUTE_TIMESTEP</h3>
<p>When a module implements a custom contact force model, it is possible that the model will need a special procedure for the calculation of a stable timestep. If that is the case, this is the hook where that calculation must be implemented. By default, this hook is only called once at the start of the simulation. However, if one wants to force it to be called more than once, the module may invoke <code><a class="el" href="structIRockyModel.xhtml#ada3d1d7b6e1de1d7e4ef0739a1f4dd8a">IRockyModel::trigger_update_timestep()</a></code>. A call to this method (preferably at the <code>ROCKY_PLUGIN_END_ITERATION</code> hook) signals to the solver that the timestep needs to be updated at the start of the next iteration.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="classIRockyTimestepData.xhtml">IRockyTimestepData</a> &amp;timestep_data</code></p>
<p class="startli">An object with basic methods for accessing material and materials interactions properties, as well as <a class="el" href="glossary.xhtml#particle-group">particle group</a> data, to let users implement a stable time step calculation. See chapter <a href="annotated.xhtml">Reference</a> for a complete description of <code><a class="el" href="classIRockyTimestepData.xhtml">IRockyTimestepData</a></code>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md33"></a>
ROCKY_PLUGIN_COMPUTE_ADHESIVE_DISTANCES</h3>
<p>Deprecated hook. In the current version of the Rocky Solver SDK, <a class="el" href="glossary.xhtml#adhesive-distance">adhesive distance</a> values can be set within any hook with access to a <code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a></code> object, by using the <code>set_adhesive_distance</code> method.</p>
<h3><a class="anchor" id="autotoc_md34"></a>
ROCKY_PLUGIN_INITIALIZE_PARTICLE</h3>
<p>This hook can be used to initialize particle <a class="el" href="glossary.xhtml#scalar">scalars</a> with values different from zero (the default value when a scalar variable in Rocky is created). The associated code is executed always in CPU, in a loop over all active particles in the simulation.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticleHost.xhtml">IRockyParticleHost</a> &amp;particle</code></p>
<p class="startli">An active particle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md35"></a>
ROCKY_PLUGIN_INITIALIZE_TRIANGLE</h3>
<p>This hook can be used to initialize triangle <a class="el" href="glossary.xhtml#scalar">scalars</a> with values different from zero (the default value when a scalar variable in Rocky is created). The associated code is executed always in CPU, in a loop over all geometry triangles in the project.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>IRockyTriangleHost &amp;triangle</code></p>
<p class="startli">A geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md36"></a>
ROCKY_PLUGIN_NON_DIMENSIONALIZE</h3>
<p>Internally, Rocky treats all variables as dimensionless in order to minimize roundoff errors. Therefore, all custom parameters defined in the module must be nondimensionalized at this stage in order to be used correctly during the later calculations.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation. For the nondimensionalization process, this object provides dimensional factors for each one of the fundamental magnitudes and some common derived ones. For a list of all the methods associated to <code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code>, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md37"></a>
ROCKY_PLUGIN_SETUP_OUTPUT_PROPERTIES</h3>
<p>This hook is intended for the setup of particle and/or geometry triangle properties that a module will deliver to Rocky at output times for visualization and/or post-processing. Within this hook, the data that Rocky will need for displaying each new property must be specified. For instance, the label that will identify the property within the UI, the associated S.I. unit, and a nondimensionalization factor, if necessary.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyOutputPropertyCollection.xhtml">IRockyOutputPropertyCollection</a> &amp;output_property_collection</code></p>
<p class="startli">This is an auxiliary object with methods for setting up custom particle and geometry properties. For a list of all associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md38"></a>
ROCKY_PLUGIN_INITIALIZE</h3>
<p>This hook is placed at the point when Rocky sets the initial state of the simulation. If necessary, the module may use that initial state as a basis to initialize its own custom data.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation. For a list of all the methods associated to <code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a></code>, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md39"></a>
ROCKY_PLUGIN_INITIALIZE_CUDA</h3>
<p>When a simulation must run in single or multi-GPU, Rocky needs to allocate memory and copy the initial state of the simulation to the GPU <a class="el" href="glossary.xhtml#device">devices</a>. This hook, called for each enabled GPU device, is intended for performing those operations with the custom data of a module.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *host_data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
<li><p class="startli"><code>int device_id</code></p>
<p class="startli">Identifier of an individual GPU.</p>
</li>
<li><p class="startli"><code>void *&amp;device_data</code></p>
<p class="startli">Accepts a generic pointer associated to the GPU device identified by <code>device_id</code>. The module must ensure in this hook that this pointer will point to a copy of the local <code>struct</code> in the GPU device, after allocating memory and performing the copy operation. Rocky will return back this pointer in all the iteration hooks that are executed in GPU, in order to be able to access custom data values at those places.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md40"></a>
ROCKY_PLUGIN_TEAR_DOWN</h3>
<p>When Rocky terminates a simulation, the module has the opportunity in this hook to perform final actions, such as deallocate memory used for custom data, gracefully close resources, and output final remarks about the simulation.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md41"></a>
ROCKY_PLUGIN_TEAR_DOWN_CUDA</h3>
<p>In this hook the module must free the memory allocated for custom data in the GPU devices during the execution of <code>ROCKY_PLUGIN_INITIALIZE_CUDA</code>.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>int device_id</code></p>
<p class="startli">Identifier of an individual GPU.</p>
</li>
<li><p class="startli"><code>void *device_data</code></p>
<p class="startli">Accepts a generic pointer associated with the GPU id that is returned back by other GPU-aware hooks. The module may use it as a mechanism to persist custom data between GPU devices during the simulation execution.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md42"></a>
General-purpose iteration hooks</h2>
<p>These hooks are called on each iteration during the simulation loop in which the motion of the particles and all the enabled models are solved. As they are not related to a specific type of model, these hooks can be used for different purposes, such as collecting relevant simulation data, calculating useful complementary magnitudes related to the simulation, pre-processing data needed by some custom model, etc.</p>
<h3><a class="anchor" id="autotoc_md43"></a>
ROCKY_PLUGIN_BEGIN_ITERATION</h3>
<p>The code attached to this hook is executed when a new cycle of calculations is initiated, corresponding to a new timestep, as depicted in Figure 3.1. At this point, a module may reset custom variables for a new iteration.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation. For a list of all the methods associated to <code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a></code>, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md44"></a>
ROCKY_PLUGIN_BEGIN_ITERATION_CUDA</h3>
<p>This hook is placed also at the beginning of a new cycle of calculations, but it is executed on each one of the active GPU devices, when a simulation runs in GPU.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *host_data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code> for pointing to a local <code>struct</code>.</p>
</li>
<li><p class="startli"><code>int device_id</code></p>
<p class="startli">Identifier of an individual GPU.</p>
</li>
<li><p class="startli"><code>void *&amp;device_data</code></p>
<p class="startli">The generic pointer pointing to a copy of a local <code>struct</code> in a GPU device, provided in <code>ROCKY_PLUGIN_INITIALIZE_CUDA</code>.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md45"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_CONTACTS</h3>
<p>The associated custom code will be executed before the calculation of contact forces, inside a loop over the active <a class="el" href="glossary.xhtml#frictional-contact">frictional contacts</a>. A closing <code>ROCKY_PLUGIN_PRE_FORCE_ON_CONTACTS_END()</code> statement must be inserted at the end of the custom code block.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">An active frictional contact object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md46"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_PARTICLES</h3>
<p>The associated custom code will be executed before the calculation of contact forces, inside a loop over the active particles in the simulation. A closing <code>ROCKY_PLUGIN_PRE_FORCE_ON_PARTICLES_END()</code> statement must be inserted at the end of the custom code block.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">An active particle object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md47"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_JOINTS</h3>
<p>The associated custom code will be executed before the calculation of joint forces, inside a loop over the joints in all active multi-element particles in a simulation. A <code>ROCKY_PLUGIN_PRE_FORCE_ON_JOINTS_END()</code> statement must be inserted at the end of the custom code block.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyJoint.xhtml">IRockyJoint</a> &amp;joint</code></p>
<p class="startli">An active joint object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md48"></a>
ROCKY_PLUGIN_POST_FORCE_ON_CONTACTS</h3>
<p>The associated custom code will be executed after the calculation of contact forces, inside a loop over the active frictional contacts. A closing <code>ROCKY_PLUGIN_POST_FORCE_ON_CONTACTS_END()</code> statement must be inserted at the end of the custom code block.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">An active frictional contact object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md49"></a>
ROCKY_PLUGIN_POST_FORCE_ON_PARTICLES</h3>
<p>The associated custom code will be executed after the calculation of contact forces and the corresponding forces over particles, inside a loop over the active particles in the simulation. A closing <code>ROCKY_PLUGIN_POST_FORCE_ON_PARTICLES_END()</code> statement must be inserted at the end of the custom code block.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">An active particle object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md50"></a>
ROCKY_PLUGIN_POST_FORCE_ON_JOINTS</h3>
<p>The associated custom code will be executed after the calculation of joint forces, inside a loop over the joints in all active multi-element particles in a simulation. A <code>ROCKY_PLUGIN_POST_FORCE_ON_JOINTS_END()</code> statement must be inserted at the end of the associated custom code.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyJoint.xhtml">IRockyJoint</a> &amp;joint</code></p>
<p class="startli">An active joint object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md51"></a>
ROCKY_PLUGIN_PRE_MOVE_PARTICLES</h3>
<p>The associated custom code is executed before Rocky updates the kinematic state of the particles. At the end of the custom code block, a closing <code>ROCKY_PLUGIN_PRE_MOVE_PARTICLES_END()</code> statement must be inserted.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">An active particle object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md52"></a>
ROCKY_PLUGIN_POST_MOVE_PARTICLES</h3>
<p>The associated custom code is executed after Rocky has updated the kinematic state of the particles. At this point, updated positions and velocities for all active particles are available. At the end of the custom code block, a closing <code>ROCKY_PLUGIN_POST_MOVE_PARTICLES_END()</code> statement must be inserted.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">An active particle object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md53"></a>
ROCKY_PLUGIN_PRE_SEARCH_ON_PARTICLES</h3>
<p>This hook is attached at a point before the first stage of contact detection, which is the search of neighbors for every active particle in the simulation (see the description of this operation on the <em>DEM Technical Manual</em>). This search operation is not executed at every time iteration. Its frequency depends on the dynamics of the particulate process being simulated, and it usually vary during a simulation. The code associated to this specific hook will be executed within a loop involving all the active particles. A closing <code>ROCKY_PLUGIN_PRE_SEARCH_ON_PARTICLES_END()</code> statement is required at the end of the code block.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">An active particle object. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md54"></a>
ROCKY_PLUGIN_COMPUTE_VICINITY_DISTANCE</h3>
<p>This hook must be used as a part of modules implementing a model of long range interactions between particles and/or between particles and geometry triangles. In the case of long range interactions between particles, any pair of particles whose centroids are located at a distance smaller than a specified value is considered to have an active interaction, or in the nomenclature used in Rocky, they form a vicinity pair. In the case of interactions between a particle and a geometry triangle, a vicinity pair is formed in similar way, that is, when the distance between their centroids is lower than a specified value. The purpose of this hook is, as a matter of fact, to specify the value of that limiting distance, which in Rocky is called vicinity distance. It can be calculated based on other simulation parameters, and also can vary with time.</p>
<p>At each time iteration, Rocky will determine all vicinity pairs based on the simple criterion described above. Then, the hooks <code>ROCKY_PLUGIN_PRE_FORCE_ON_PARTICLE_VICINITY_PAIR</code> and <code>ROCKY_PLUGIN_PRE_FORCE_ON_TRIANGLE_VICINITY_PAIR</code> to calculate forces, heat transfer rates or any other interaction magnitudes for all particle-to-particle and particle-to-triangle vicinity pairs, respectively. If a project has several modules that specify different values of vicinity distance, Rocky will use the largest one.</p>
<p>The code block associated to this hook must end with a return statement, returning the value of the current vicinity distance, followed by a closing <code>ROCKY_PLUGIN_COMPUTE_VICINITY_DISTANCE_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Object that provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md55"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_PARTICLE_VICINITY_PAIR</h3>
<p>This hook is intended for the calculation of long range particle-to-particle interaction magnitudes (forces, heat transfer rates, or other). A module implementing this kind of model must define previously the maximum distance at which the interaction is possible, by using the <code>ROCKY_PLUGIN_COMPUTE_VICINITY_DISTANCE</code> hook. Based on that distance, Rocky will determine all particle-to-particle vicinity pairs for which a long range interaction could be calculated within this hook. The code associated to this hook must end with a <code>ROCKY_PLUGIN_PRE_FORCE_ON_PARTICLE_VICINITY_PAIR_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyVicinityPair.xhtml">IRockyVicinityPair</a> &amp;vicinity_pair</code></p>
<p class="startli">A particle-to-particle vicinity pair. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md56"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_TRIANGLE_VICINITY_PAIR</h3>
<p>This hook is intended for the calculation of long range particle-to-triangle interaction magnitudes (forces, heat transfer rates, or other). A module implementing this kind of model must define previously the maximum distance at which the interaction is possible, by using the <code>ROCKY_PLUGIN_COMPUTE_VICINITY_DISTANCE</code> hook. Based on that distance, Rocky will determine all particle-to-triangle vicinity pairs for which a long range interaction could be calculated within this hook. The code associated to this hook must end with a <code>ROCKY_PLUGIN_PRE_FORCE_ON_TRIANGLE_VICINITY_PAIR_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyVicinityPair.xhtml">IRockyVicinityPair</a> &amp;vicinity_pair</code></p>
<p class="startli">A particle-to-triangle vicinity pair. For a complete list of the associated methods, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md57"></a>
Hooks associated to specific models</h2>
<p>The hooks described in this section must be used only by modules that add new models to Rocky.</p>
<h3><a class="anchor" id="autotoc_md58"></a>
ROCKY_PLUGIN_NORMAL_FORCE_ON_CONTACTS</h3>
<p>When a module implements a custom contact model, the calculation of the normal component of the contact force must be made in the code attached to this hook. The custom calculation implemented here will override any built-in normal contact force model in Rocky. It is mandatory that the attached custom code block be closed with a <code>ROCKY_PLUGIN_NORMAL_FORCE_ON_CONTACTS_END()</code> statement.</p>
<p><em>Note: Besides the hook implementation, the module's specification file must include the definition of the <code>normal_force_model</code> attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom normal force model.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">The frictional contact for which the normal force is being calculated.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactIntermediateData.xhtml">IRockyContactIntermediateData</a>&amp; intermediate_data</code></p>
<p class="startli">An object containing intermediate data useful for the calculation of contact forces. For a list of the available data in this object, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactOutputData.xhtml">IRockyContactOutputData</a>&amp; output_data</code></p>
<p class="startli">The object that will receive the values calculated by a custom contact model and will deliver them to Rocky.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md59"></a>
ROCKY_PLUGIN_TANGENTIAL_FORCE_ON_CONTACTS</h3>
<p>When a module implements a custom contact model, the calculation of the tangential component of the contact force must be made in the code attached to this hook. It is executed always after the calculation of the normal force component, either by a built-in model or by custom code in <code>ROCKY_PLUGIN_NORMAL_FORCE_ON_CONTACTS</code> (see Figure 3.2). Therefore, at this point, a value of the normal component of the contact force will be available for the calculation of the tangential component. If implemented in a module, the calculation in this hook will override any built-in tangential contact force model in Rocky. The custom code block must end with a closing <code>ROCKY_PLUGIN_TANGENTIAL_FORCE_ON_CONTACTS_END()</code> statement.</p>
<p><em>Note: Besides the hook implementation, the module's specification file must include the definition of the tangential_force_model attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom tangential force model</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">The frictional contact for which the tangential force is being calculated.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactIntermediateData.xhtml">IRockyContactIntermediateData</a>&amp; intermediate_data</code></p>
<p class="startli">An object containing intermediate data useful for the calculation of contact forces. For a list of the available data in this object, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactOutputData.xhtml">IRockyContactOutputData</a>&amp; output_data</code></p>
<p class="startli">An object that will receive the values calculated by a custom contact model and will deliver them to Rocky.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<div class="image">
<img src="hooks_contact.png" alt="" width="30%"/>
</div>
    <p><em>Figure 3.2: Hooks used for the implementation of a contact model. The code associated to the hooks is executed in the order ndicated in this diagram</em></p>
<h3><a class="anchor" id="autotoc_md60"></a>
ROCKY_PLUGIN_IMPACT_ENERGY_ON_CONTACTS</h3>
<p>Sometimes a custom contact model will require a special calculation of the impact energy, which is usually one of the main inputs for an <a class="el" href="glossary.xhtml#instantaneous-breakage">instantaneous breakage</a> model. If such calculation is required, it must be implemented in this hook.</p>
<p><em>Note: Besides the hook implementation, the module's specification file must include the definition of the impact_energy_model attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom tangential force model</em></p>
<p>As shown in Figure 3.2, it is always executed after the calculation of the normal and tangential components of the contact force, therefore, the availability of values of these forces for the impact energy calculation is guaranteed. The custom code block must end with a <code>ROCKY_PLUGIN_IMPACT_ENERGY_ON_CONTACTS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">The frictional contact for which the impact energy is being calculated.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactIntermediateData.xhtml">IRockyContactIntermediateData</a>&amp; intermediate_data</code></p>
<p class="startli">An object containing intermediate data useful for the calculation of contact forces. For a list of the available data in this object, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactOutputData.xhtml">IRockyContactOutputData</a>&amp; output_data</code></p>
<p class="startli">An object that will receive the values calculated by a custom contact model and will deliver them to Rocky.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md61"></a>
ROCKY_PLUGIN_ROLLING_RESISTANCE_ON_CONTACTS</h3>
<p>Besides implementing the calculation of the contact forces, a custom contact model may optionally calculate and set moments caused by rolling resistance. This hook, specifically designed for that purpose, is executed at the end of the contact model pipeline, as shown in Figure 3.2. The custom code block associated to this hook must end with a <code>ROCKY_PLUGIN_ROLLING_RESISTANCE_ON_CONTACTS_END()</code> statement.</p>
<p><em>Note: Besides the implementation of the calculation of rolling resistance moments in this hook, the module must include within its specification file the definition of the <code>rolling_resistance_model</code> attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom rolling resistance model.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">The frictional contact for which the rolling resistance moments must be calculated.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactIntermediateData.xhtml">IRockyContactIntermediateData</a>&amp; intermediate_data</code></p>
<p class="startli">An object containing intermediate data useful for the calculation of contact forces. For a list of the available data in this object, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContactOutputData.xhtml">IRockyContactOutputData</a>&amp; output_data</code></p>
<p class="startli">An object that will receive the values calculated by a custom contact model and will deliver them to Rocky.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md62"></a>
ROCKY_PLUGIN_COMPUTE_CONTACT_ADHESIVE_FORCES</h3>
<p>When a module implements a custom adhesion model, the adhesive force acting in an <a class="el" href="glossary.xhtml#adhesive-contact">adhesive contact</a> must be calculated in the associated block of code. That custom adhesion model will override any built-in adhesion model in Rocky. The block attached to this hook must end with a <code>ROCKY_PLUGIN_COMPUTE_CONTACT_ADHESIVE_FORCES_END()</code> statement.</p>
<p><em>Note: Besides the implementation of the calculation of rolling resistance moments in this hook, the module must include within its specification file the definition of the <code>adhesion_model</code> attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom rolling resistance model.</em></p>
<p>Normally, the adhesion force has only a component in the normal direction, but, for special cases, the custom code may calculate and deliver to Rocky a tangential component of the adhesion force as well. On the other hand, by convention in Rocky, adhesion forces are oriented in the same way that contact forces are oriented. Consequently, an attractive adhesion force must be prescribed with a negative sign.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">The adhesive contact for which the adhesive force is being calculated.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyAdhesionOutputData.xhtml">IRockyAdhesionOutputData</a> &amp;output_data</code></p>
<p class="startli">An object that will receive the values of the calculated components of the adhesion force and will deliver them to Rocky. It is mandatory to set the normal component of the adhesion force, but the tangential component is optional.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md63"></a>
ROCKY_PLUGIN_COMPUTE_JOINT_FORCES</h2>
<p>A module implementing a custom joint model must include the calculation joint forces and moments in this block of code, based on the linear and angular joint deformations. Currently, the implementation of custom joint models is supported only for flexible fibers and shells.</p>
<p>The block of code implementing a custom joint model must end with a <code>ROCKY_PLUGIN_COMPUTE_JOINT_FORCES_END()</code> statement.</p>
<p><em>Note: Besides the hook implementation, the module’s specification file must include the definition of the joint_model attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom joint model.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyJoint.xhtml">IRockyJoint</a> &amp;joint</code></p>
<p class="startli">The joint for which the forces and moments are being calculated.</p>
</li>
<li><p class="startli"><code>IRockyJointOutputData &amp;output_data</code></p>
<p class="startli">An object that will receive the values of the forces and moments and will deliver them to Rocky.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md64"></a>
ROCKY_PLUGIN_COMPUTE_JOINT_BREAKAGE</h2>
<p>This hook must be used to implement a new criterion of <a class="el" href="glossary.xhtml#discrete-breakage">discrete breakage</a> for multi-element flexible particles. If implemented, the associated code will be executed in a loop traversing the joints of all the multi-element particles enabled to break, after the calculation of joint forces and moments. When the custom criterion for breakage is satisfied, the boolean parameter that Rocky passes to the hook, <code>broken</code>, must be set to <code>true</code>. Only in this way Rocky will then disable the joint, effectively breaking up the link between the previously connected <a class="el" href="glossary.xhtml#element">elements</a>.</p>
<p>Currently, custom criteria for joint breakage is supported only for flexible fibers and shells. In the specific case of shells, a custom breakage criterion will be evaluated only at the center point of a joint. Therefore, when that criterion is satisfied, the joint will break instantaneously and completely. This behavior is different from the built-in joint breakage models in Rocky, in which a period of partial breakage may exist before the joint fully breaks, as described on the DEM Technical Manual.</p>
<p>The associated code block that implements a joint breakage criterion must end with a <code>ROCKY_PLUGIN_COMPUTE_JOINT_BREAKAGE_END()</code> statement.</p>
<p><em>Note: Besides the hook implementation, the module's specification file must include the definition of the joint_breakage_model attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom discrete breakage criterion.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyJoint.xhtml">IRockyJoint</a> &amp;joint</code></p>
<p class="startli">The joint that will be checked for breakage.</p>
</li>
<li><p class="startli"><code>bool &amp;broken</code></p>
<p class="startli">Its value must be set to <code>true</code> if the joint is supposed to break.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md65"></a>
ROCKY_PLUGIN_INITIALIZE_INSTANTANEOUS_BREAKAGE</h2>
<p>The code associated to this hook will be executed during the initialization of the simulation and after the generation of every new fragment at an instantaneous breakage event. It can be used for setting initial values for variables that a custom instantaneous breakage model may need.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyBreakableParticle.xhtml">IRockyBreakableParticle</a> &amp;breakable_particle</code></p>
<p class="startli">An abstraction of a particle that is able to break by instantaneous breakage. For a list of the available methods, please see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md66"></a>
ROCKY_PLUGIN_COMPUTE_INSTANTANEOUS_BREAKAGE</h2>
<p>This hook must be used to implement a new criterion for instantaneous breakage. If implemented, the associated code will be executed in a loop traversing all particles enabled to break, after the calculation of contact forces. At the moment the custom criterion for instantaneous breakage is satisfied, the boolean parameter passed by reference to the hook, <code>broken</code>, must be set to <code>true</code>. Later on in the same time iteration, Rocky will execute the fragmentation algorithm with the active fragment distribution model, for all particles that have satisfied that condition. The code block that implements a custom instantaneous breakage criterion must end with a closing <code>ROCKY_PLUGIN_COMPUTE_INSTANTANEOUS_BREAKAGE_END()</code> statement.</p>
<p><em>Note: Besides the hook implementation, the module's specification file must include the definition of the <code>instantaneous_breakage_model</code> attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom instantaneous breakage criterion</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle that will be checked for breakage.</p>
</li>
<li><p class="startli"><code>bool &amp;broken</code></p>
<p class="startli">Its value must be set to <code>true</code> if the calculations indicate that the particle is supposed to break.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md67"></a>
ROCKY_PLUGIN_INITIALIZE_FRAGMENTS_SIZE_DISTRIBUTION</h2>
<p>The code associated to this hook will be executed during the initialization of the simulation and after the generation of every new fragment at an instantaneous breakage event. It can be used for setting initial values for variables that a custom fragment size distribution model may need.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyBreakableParticle.xhtml">IRockyBreakableParticle</a> &amp;breakable_particle</code></p>
<p class="startli">An abstraction of a particle that is able to break by instantaneous breakage. For a list of the available methods, please see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md68"></a>
ROCKY_PLUGIN_COMPUTE_FRAGMENTS_SIZE_DISTRIBUTION</h2>
<p>This hook can be used to implement a new model for the calculation of the size distribution of fragments in an instantaneous breakage event. It can be used either as a complement to a custom instantaneous breakage criterion or in a standalone module devised to work with built-in instantaneous breakage models in Rocky. In the latter case, the only constraint is that the calculation must be based on the value of the \(t_{10}\) parameter, as in most of the built-in models in Rocky.</p>
<p><em>Note:Besides the hook implementation, the module’s specification file must include the definition of the <code>fragments_size_distribution_model</code> attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom fragments size distribution.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyBreakableParticle.xhtml">IRockyBreakableParticle</a> &amp;breakable_particle</code></p>
<p class="startli">An abstraction of a particle that is able to break by instantaneous breakage. For a list of the available methods, please see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>std::vector&lt;double&gt;&amp; distribution</code></p>
<p class="startli">A vector containing the sizes of the fragments resulting in a breakage event, arranged in descending order.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md69"></a>
ROCKY_PLUGIN_COMPUTE_BOUNDARIES_WEAR</h2>
<p>This hook can be used to implement a custom calculation of the surface wear caused by particle collisions on the boundaries (geometries) in a simulation. The associated code must calculate and deliver to Rocky the volume of <a class="el" href="glossary.xhtml#material">material</a> worn from a boundary triangle during a simulation timestep in a single particle-geometry contact. Then, Rocky will collect the worn volumes from all triangles that make up the boundaries and will execute the algorithm of grid deformation on them. The associated custom code must be closed by a <code>ROCKY_PLUGIN_COMPUTE_BOUNDARIES_WEAR_END()</code> statement.</p>
<p>*Note: Besides the hook implementation, the module's specification file must include also the definition of the <code>geometries_wear_model</code> attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements</p><ul>
<li><b>Parameters:</b></li>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;triangle_contact</code></p>
<p class="startli">A contact between a particle and a triangle from a wear-enabled geometry.</p>
</li>
<li><p class="startli"><code>double&amp; wear_volume</code></p>
<p class="startli">The module must set in this variable the volume of material worn from the geometry as a result of the action of the contact forces on the <code>triangle_contact</code>, during a single timestep.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md70"></a>
ROCKY_PLUGIN_COMPUTE_CONTACT_HEAT_CONDUCTION</h2>
<p>This hook can be used to implement a custom calculation of the heat transfer rate by conduction between two particles or between a particle and a <a class="el" href="glossary.xhtml#boundary">boundary</a>. The associated code block must be closed by a <code>ROCKY_PLUGIN_COMPUTE_CONTACT_HEAT_CONDUCTION_END()</code> statement.</p>
<p><em>Note: Besides the hook implementation, the module's specification file must include also the definition of the heat_conduction_model attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom contact heat conduction model.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">The frictional contact at which the heat transfer rate is being calculated.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md71"></a>
ROCKY_PLUGIN_COMPUTE_THERMAL_INTEGRATION</h2>
<p>This hook can be used to integrate the energy balance equation for a single particle, in order to update its temperature. This operation will require the use of the total heat transfer rate to the particle, calculated in previous steps (by conduction or any other mechanisms active in the simulation). The associated code block must be closed by a <code>ROCKY_PLUGIN_COMPUTE_THERMAL_INTEGRATION_END()</code> statement.</p>
<p><em>Note: Besides the hook implementation, the module's specification file must include also the definition of the thermal_integration_model attribute, as explained in chapter Module specification, in order to inform Rocky that the module implements a custom thermal integration procedure</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle whose temperature must be updated by integrating the energy balance equation.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md72"></a>
ROCKY_PLUGIN_COMPUTE_GEOMETRIES_MOTION</h3>
<p>This hook is intended for the implementation of a custom motion kernel. In Rocky, a motion kernel is responsible for moving geometries from one location in the domain to another during the simulation. The code associated to this hook will be executed at every Rocky timestep during the simulation. To work, the custom motion kernel must first know which geometries in the Rocky project are available for motion, which it gets from their Rocky IDs or names. Then at every timestep, it moves the proper geometries according to the custom motion kernel setup. No custom motion setup is done in Rocky; Rocky only provides in this hook the current position, orientation, translational and rotational velocities of the geometries and the forces and moments applied by the particles to the geometries, and then that information can be taken or not into account to calculate the next motion for the geometry.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a>&amp; model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyGeometriesMotionData.xhtml">IRockyGeometriesMotionData</a>&amp; motion</code></p>
<p class="startli">A data structure that holds motion information for all geometries in the Rocky project.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md73"></a>
CFD coupling hooks</h2>
<p>The Rocky Solver SDK includes a number a hooks intended for implementing new interaction models between particles and fluid flow. A custom model can implement one or several of those models, associating the corresponding code to appropriate hooks. It is worth noting, though, that the code related to all CFD coupling hooks used in a module must be grouped inside a block beginning with <code>ROCKY_PLUGIN_CFD_COUPLING()</code> and ending with <code>ROCKY_PLUGIN_CFD_COUPLING_END()</code>.</p>
<p>The code associated to CFD coupling hooks will have effect only on both constant and Fluent 1-way coupling modes, as well as on the Fluent 2-way coupling mode. For details about how the CFD coupling models are defined in Rocky, please refer to the DEM-CFD Coupling Technical Manual.</p>
<h2><a class="anchor" id="autotoc_md74"></a>
ROCKY_PLUGIN_CFD_COUPLING_DRAG_COEFFICIENT</h2>
<p>This hook is intended for the calculation of a custom drag coefficient, which, in turn, Rocky will use to calculate the drag force acting over a particle. This force will be calculated by means of equation 3.5 of the DEM-CFD Coupling Technical Manual. The associated code block must end with a <code>return</code> statement, returning the calculated coefficient value, followed by a closing <code>ROCKY_PLUGIN_CFD_COUPLING_DRAG_COEFFICIENT_END()</code> statement.</p>
<p><em>Note: In order to inform Rocky that a module implements a custom drag coefficient calculation, the module’s specification file must include the definition of the <code>cfd_drag_law_model</code> attribute, as explained in chapter Module specification.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle on which the calculated drag force will be applied.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the particle-fluid interactions. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md75"></a>
ROCKY_PLUGIN_CFD_COUPLING_LIFT_COEFFICIENT</h2>
<p>This hook is intended for the calculation of a custom lift coefficient, which, in turn, Rocky will use to calculate the lift force acting over a particle. This force will be calculated by means of equation 3.69 of the DEM-CFD Coupling Technical Manual. The associated code block must end with a <code>return</code> statement, returning the calculated coefficient value, followed by a closing <code>ROCKY_PLUGIN_CFD_COUPLING_LIFT_COEFFICIENT_END()</code> statement.</p>
<p><em>Note: In order to inform Rocky that a module implements a custom lift coefficient calculation, the module’s specification file must include the definition of the <code>cfd_lift_law_model</code> attribute, as explained in chapter Module specification.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle on which the calculated lift force will be applied.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md76"></a>
ROCKY_PLUGIN_CFD_COUPLING_VIRTUAL_MASS_COEFFICIENT</h2>
<p>This hook is intended for the calculation of a custom virtual mass coefficient, which, in turn, Rocky will use to calculate the virtual mass and the a ssociated force acting over a particle. This force will be calculated by means of equation 3.65 of the DEM-CFD Coupling Technical Manual. The associated code block must end with a <code>return</code> statement, returning the calculated coefficient value, followed by a closing <code>ROCKY_PLUGIN_CFD_COUPLING_VIRTUAL_MASS_COEFFICIENT_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle on which the calculated virtual mass force will be applied.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<p><em>Note: In order to inform Rocky that a module implements a custom virtual mass calculation, the module’s specification file must include the definition of the <code>cfd_virtual_mass_law_model</code> attribute, as explained in chapter Module specification</em></p>
<h2><a class="anchor" id="autotoc_md77"></a>
ROCKY_PLUGIN_CFD_COUPLING_TORQUE_COEFFICIENT</h2>
<p>This hook is intended for the calculation of a custom torque coefficient, which, in turn, Rocky will use to calculate the flow-generated torque acting over a particle. This force will be calculated by means of equation 3.78 of the DEM-CFD Coupling Technical Manual. The associated code block must end with a <code>return</code> statement, returning the calculated coefficient value, followed by a closing ROCKY_PLUGIN_CFD_COUPLING_TORQUE_COEFFICIENT_END()` statement.</p>
<p><em>Note: In order to inform Rocky that a module implements a custom torque coefficient calculation, the module’s specification file must include the definition of the <code>cfd_torque_law_model</code> attribute, as explained in chapter Module specification.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle on which the calculated torque will be applied.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md78"></a>
ROCKY_PLUGIN_CFD_COUPLING_NUSSELT_NUMBER</h2>
<p>This hook is intended for the calculation of a custom Nusselt number, which, in turn, Rocky will use to calculate the heat transfer rate between a particle and the surrounding fluid. The heat transfer coefficient based on the calculated Nusselt number will be obtained by means of equation 4.3 of the DEM-CFD Coupling Technical Manual. Afterwards, the convective heat transfer rate will be calculated with equation 4.2 of the referred manual. The code block associated to this hook must end with a <code>return</code> statement, returning the calculated coefficient value, followed by a closing <code>ROCKY_PLUGIN_CFD_COUPLING_LIFT_COEFFICIENT_END()</code> statement.</p>
<p><em>Note: In order to inform Rocky that a module implements a custom Nusselt number calculation, the module's specification file must include the definition of the <code>cfd_convection_law_model</code> attribute, as explained in chapter Module specification.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle to which the calculated the convective heat transfer rate is referred.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md79"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_FLUID</h3>
<p>The code associated to this hook will be executed before the calculation of the CFD coupling coefficients and the corresponding forces and heat transfer rates. It can be used for performing some pre-calculation needed in later hooks. The associated code block must be closed with a <code>ROCKY_PLUGIN_PRE_FORCE_ON_FLUID_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle to which the CFD coupling interaction properties are referred.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md80"></a>
ROCKY_PLUGIN_POST_FORCE_ON_FLUID</h3>
<p>The code associated to this hook will be executed after the calculation of the CFD coupling coefficients and the corresponding forces and heat transfer rates. The associated code block must be closed with a <code>ROCKY_PLUGIN_PRE_FORCE_ON_FLUID_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle to which the CFD coupling interaction properties are referred.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md81"></a>
ROCKY_PLUGIN_PRE_MOVE_ON_FLUID</h3>
<p>The code associated to this hook will be executed after the calculation of the CFD coupling forces and heat transfer rates, but before solving the motion equations for the particles. The associated code block must be closed with a <code>ROCKY_PLUGIN_PRE_MOVE_ON_FLUID_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle to which the CFD coupling interaction properties are referred.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md82"></a>
ROCKY_PLUGIN_POST_MOVE_ON_FLUID</h3>
<p>The code associated to this hook will be executed after the calculation of the CFD coupling forces and heat transfer rates, and after solving the motion equations for the particles. The associated code block must be closed with a <code>ROCKY_PLUGIN_POST_MOVE_ON_FLUID_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">General information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticle.xhtml">IRockyParticle</a> &amp;particle</code></p>
<p class="startli">The particle to which the CFD coupling interaction properties are referred.</p>
</li>
<li><p class="startli"><code>RockyCFDProperties &amp;cfd</code></p>
<p class="startli">A data structure containing data related to the fluid flow and the interaction particle-fluid. For list of the available data, please refer to chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md83"></a>
SPH hooks</h2>
<p>Latest versions of Rocky include a feature that implements the Smoothed Particle Hydrodynamics (SPH) method as a new option for adding fluid flow interacting with the particles in a simulation. Currently the Rocky Solver SDK includes some hooks, classes and methods specifically designed for the implementation of custom models that may override or complement the SPH model implemented within Rocky. This section describes the hooks that the current version includes for that effect.</p>
<p>Figure 3.3 shows schematically the points where the SPH hooks are located in relation to the regular hooks provided by the Rocky Solver SDK.</p>
<div class="image">
<img src="hooks_sph_flowchart.png" alt="" width="30%"/>
</div>
    <p><em>Figure 3.3: Position of the SPH hooks (in black) relative to the regular hooks (in green) and the main operations made during a simulation.</em></p>
<p>As shown in Figure 3.3, the calculation of SPH forces and the hooks related to that operation are executed after the calculation of the DEM forces. Moreover, the solution of the SPH motion equation is made also after the solution of the corresponding DEM motion equations. However, the SPH <code>PRE_MOVE</code> hooks are executed before the solution of the DEM motion equations.</p>
<p>It is important to note that in the implementation of a custom SPH module, all hooks related to SPH must be included in a block beginning with a <code>ROCKY_PLUGIN_SPH</code> instruction. Moreover, that block must be closed with a <code>ROCKY_PLUGIN_SPH_END</code> statement.</p>
<p>A feature only present on SPH hooks is the possibility of replicating a hook multiple times in order to implement short iterative subroutines. Unlike other calculations in Rocky, this iterative subroutines can be executed in the same time level in order to solve coupling between flow variables. As shown schematically in Figure 3.4, each new iteration must be attached to a new hook, which has the same name as the base-hook, but suffixed with an index.</p>
<p><em>Note: Currently, those indexes can go up to 4; therefore, these iterative subroutines may have up to 5 iterations altogether.</em></p>
<p>If defined in the code associated to a module, these indexed hooks will be executed in sequence before proceeding to the next step in the implemented algorithm. All the SPH hooks included in Figure 3.3 for <code>ROCKY_PLUGIN_INITIALIZE_SPH_ELEMENT</code>, <code>ROCKY_PLUGIN_FORCE_ON_SPH_ELEMENT_INTERACTIONS</code> and <code>ROCKY_PLUGIN_FORCE_ON_SPH_TRIANGLE_INTERACTIONS</code> can be indexed in the way indicated in Figure 3.4 for implementing short iterative subroutines. Currently, those indexes can go up to 4; therefore, these iterative subroutines may have up to 5 iterations altogether.</p>
<div class="image">
<img src="hooks_sph_detail.png" alt="" width="30%"/>
</div>
    <p><em>Figure 3.4: Replication of SPH hooks for the implementation of short iterative subroutines.</em></p>
<h3><a class="anchor" id="autotoc_md84"></a>
ROCKY_PLUGIN_INITIALIZE_SPH_ELEMENT</h3>
<p>This hook is designed for initializing SPH element scalars with values different from zero, which is the default value when they are created. Like all initialization hooks, this hook is executed always in CPU, within a loop over all SPH elements.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a>&amp; model</code></p>
<p class="startli">An object that provides data about the general configuration of the Rocky simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHModel.xhtml">IRockySPHModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about the general configuration of the flow model discretized with the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementHost.xhtml">IRockySPHElementHost</a>&amp; sph_element</code></p>
<p class="startli">An object representing a SPH element contained in the simulation.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md85"></a>
ROCKY_PLUGIN_FORCE_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>The purpose of this hook is to calculate forces that SPH elements exert on each other using custom models. If a custom module implements code associated to this hook, it will override the calculation of all forces between SPH elements made within Rocky's built-in SPH. This means that such custom module will take the responsibility of calculating pressure forces, viscous forces, and any other interaction forces that SPH elements could exert on each other. The resultant of those forces must be passed to Rocky by using the <code><a class="el" href="structIRockySPHElementInteraction.xhtml#a1ee1b8234e2660a09b7b1a7fe3ba0e07">IRockySPHElementInteraction::add_force</a></code> method in order to be applied to the interacting SPH elements. Alternatively, the module can pass custom calculated resultant accelerations to Rocky by using the <code><a class="el" href="structIRockySPHElementInteraction.xhtml#a713381036ee74bb8476435037c14124b">IRockySPHElementInteraction::add_acceleration</a></code> method. Additionally, the code block associated to this hook must be closed by a <code>ROCKY_PLUGIN_FORCE_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md86"></a>
ROCKY_PLUGIN_FORCE_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>This hook is intended for calculating the interaction forces between SPH elements and geometry triangles. If a custom module implements code associated to this hook, it will override the calculation of those forces made within Rocky's built-in SPH. The resultant of the interaction forces calculated within the code associated to this hook must be passed to Rocky by using the <code><a class="el" href="structIRockySPHTriangleInteraction.xhtml#a749ae0224b1bd279d33404b3d0b84010">IRockySPHTriangleInteraction::add_force</a></code> method in order to be applied to the respective SPH element and the geometry triangle. Alternatively, for the SPH element exclusively, the module can pass the calculated resultant acceleration to Rocky by using the <code><a class="el" href="structIRockySPHElementInteraction.xhtml#a713381036ee74bb8476435037c14124b">IRockySPHElementInteraction::add_acceleration</a></code> method. Additionally, the code block associated to this hook must end with a <code>ROCKY_PLUGIN_FORCE_ON_SPH_TRIANGLE_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHTriangleInteraction.xhtml">IRockySPHTriangleInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing an interacting pair SPH element-geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md87"></a>
ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_ELEMENTS</h3>
<p>This hook is intended for calculating forces due to surface tension within a loop over SPH elements. There is an alternative hook (<code>ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_ELEMENT_INTERACTIONS</code>) if the calculation of those forces needs to be done within a loop over SPH element interactions. As the surface tension force acts on the normal direction to a free surface, whenever a custom surface tension model is active in a simulation, a normal vector is calculated internally for all SPH elements according to the continuum approximation of interfaces. The calculated surface tension force must be passed to Rocky by using the <code><a class="el" href="structIRockySPHElement.xhtml#a0d51cf017a85bd175db6d18538c9d2e0">IRockySPHElement::add_force()</a></code> method. Alternatively, the module can pass the acceleration caused by that force, by using the <code><a class="el" href="structIRockySPHElement.xhtml#a2f90b3a2980c2fa73cd53e72ea277f76">IRockySPHElement::add_acceleration()</a></code> method. The code block associated to this hook must be closed by a <code>ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_ELEMENTS_END()</code> statement.</p>
<p><em>Note: Rocky must be informed that the module implements a surface tension model, by including the <code>sph_surface_tension_model</code> attribute in the module’s specification file. Please also note that a module implementing a custom surface tension model must include only code associated to the hook over SPH elements or to the hook over SPH element interactions, but not both.</em></p>
<p><em>Note: For additional details on the normal vector of the free surface calculation, please refer to the documentation of the <a class="el" href="structIRockySPHElement.xhtml#af2f5b34f666646f5d1f19207bac5cb2d">IRockySPHElement::get_normal()</a> method.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElement.xhtml">IRockySPHElement</a>&amp; sph_element</code></p>
<p class="startli">An object representing a SPH element.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code> for pointing to a local <code>struct</code> containing custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md88"></a>
ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>This hook is intended for calculating forces due to surface tension within a loop over SPH element interactions. There is an alternative hook (<code>ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_ELEMENTS</code>) if the calculation of those forces needs to be done within a loop over SPH elements. As the surface tension force acts on the normal direction to a free surface, whenever a custom surface tension model is active in a simulation, a normal vector is calculated internally for all SPH elements according to the continuum approximation of interfaces. The calculated surface tension force must be passed to Rocky by using the <code><a class="el" href="structIRockySPHElementInteraction.xhtml#a1ee1b8234e2660a09b7b1a7fe3ba0e07">IRockySPHElementInteraction::add_force()</a></code> method in order to be applied to the interacting SPH elements. Alternatively, the module can pass the acceleration caused by that force, by using the <code><a class="el" href="structIRockySPHElementInteraction.xhtml#a713381036ee74bb8476435037c14124b">IRockySPHElementInteraction::add_acceleration()</a></code> method. The code block associated to this hook must be closed by a <code>ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><em>Note: Rocky must be informed that the module implements a surface tension model, by including the <code>sph_surface_tension_model</code> attribute in the module's specification file. Please also note that a module implementing a custom surface tension model must include only code associated to the hook over SPH elements or to the hook over SPH element interactions, but not both.</em></p>
<p><em>Note: For additional details on the normal vector of the free surface calculation, please refer to the documentation of the <a class="el" href="structIRockySPHElement.xhtml#af2f5b34f666646f5d1f19207bac5cb2d">IRockySPHElement::get_normal()</a> method.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code> for pointing to a local <code>struct</code> containing custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md89"></a>
ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>Some surface tension models may need to apply forces associated to interactions between SPH elements and geometry triangles. This hook may be used for that purpose. If calculated, the force value must be passed to Rocky by using the <a class="el" href="structIRockySPHTriangleInteraction.xhtml#a749ae0224b1bd279d33404b3d0b84010">IRockySPHTriangleInteraction::add_force()</a><code>method in order to be applied to the respective SPH element and the geometry triangle. Alternatively, the module can pass the acceleration value caused by that force with the</code><a class="el" href="structIRockySPHTriangleInteraction.xhtml#a1578dfd6da083096eb169fe24913dd5b">IRockySPHTriangleInteraction::add_acceleration()</a><code>method. The code block associated to this hook must be closed with a</code>ROCKY_PLUGIN_SURFACE_TENSION_ON_SPH_TRIANGLE_INTERACTIONS_END()` statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHTriangleInteraction.xhtml">IRockySPHTriangleInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing an interacting pair SPH element-geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code> for pointing to a local <code>struct</code> containing custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md90"></a>
ROCKY_PLUGIN_VISCOUS_ACCELERATIONS_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>This hook is intended for overriding the built-in calculations of the accelerations caused by viscous forces in element-to-element interactions. When a custom module including code associated to this hook is active on a simulation, the internal calculation of the viscous forces is skipped and the value returned by the implemented code is used instead. Such code may be used for implementing a SPH discretization of the Newtonian viscous term different from the built-in alternatives in Rocky, or, otherwise, for introducing a specific non-Newtonian viscosity law. The associated code must end with a <code>return</code> statement that returns the calculated viscous acceleration, followed by a closing <code>ROCKY_PLUGIN_VISCOUS_ACCELERATIONS_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code> for pointing to a local <code>struct</code> containing custom data.</p>
</li>
</ul>
<p><em>Note: Rocky must be informed also that the module implements viscous accelerations, by including the <code>sph_viscous_force_model</code> attribute in the module’s specification file, as explained in chapter Module specification.</em></p>
<h3><a class="anchor" id="autotoc_md91"></a>
ROCKY_PLUGIN_VISCOUS_ACCELERATIONS_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>This hook is intended for overriding the built-in calculations of the accelerations caused by viscous forces in element-to-geometry-triangle interactions. When a custom module including code associated to this hook is active on a simulation, the internal calculation of the viscous forces is skipped and the value returned by the implemented code is used instead. Such code may be used for implementing a SPH discretization of the Newtonian viscous term different from the built-in alternatives in Rocky, or, otherwise, for introducing a specific non-Newtonian viscosity law. The associated code must end with a <code>return</code> statement that returns the calculated viscous acceleration, followed by a closing <code>ROCKY_PLUGIN_VISCOUS_ACCELERATIONS_ON_SPH_TRIANGLE_INTERACTIONS_END()</code> statement.</p>
<p><em>Note: Rocky must be informed also that the module implements viscous accelerations, by including the <code>sph_viscous_force_model</code> attribute in the module’s specification file, as explained in chapter Module specification</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code> An object representing a pair of SPH elements located within the support region of each other.</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code> for pointing to a local <code>struct</code> containing custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md92"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_SPH_ELEMENTS</h3>
<p>This is a general-purpose hook executed before the calculation of the SPH forces, inside a loop over all active SPH elements in a simulation. It can be used, for instance, for the calculation of element-related physical magnitudes needed in the subsequent calculation of the interaction SPH forces. The associated code block must be closed by a <code>ROCKY_PLUGIN_PRE_FORCE_ON_SPH_ELEMENTS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElement.xhtml">IRockySPHElement</a>&amp; sph_element</code></p>
<p class="startli">An object representing a SPH element.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md93"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>This is a general-purpose hook executed before the calculation of the SPH forces, inside a loop over all active SPH element pairs with force interactions. It can be used, for instance, for the calculation of physical magnitudes associated to SPH element pairs, needed in the subsequent calculation of the interaction SPH forces. The associated code block must be closed by a <code>ROCKY_PLUGIN_PRE_FORCE_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md94"></a>
ROCKY_PLUGIN_PRE_FORCE_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>This is a general-purpose hook executed before the calculation of the SPH forces, inside a loop over all active interactions between SPH elements and geometry triangles. It can be used, for instance, for the calculation of physical magnitudes associated to those interactions, needed in the subsequent calculation of the interaction SPH forces. The associated code block must be closed by a <code>ROCKY_PLUGIN_PRE_FORCE_ON_SPH_TRIANGLE_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHTriangleInteraction.xhtml">IRockySPHTriangleInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing an interacting pair SPH element-geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md95"></a>
ROCKY_PLUGIN_POST_FORCE_ON_SPH_ELEMENTS</h3>
<p>This is a general-purpose hook executed after the calculation of the SPH forces, inside a loop over all active SPH elements in a simulation. The associated code block must be closed by a <code>ROCKY_PLUGIN_POST_FORCE_ON_SPH_ELEMENTS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElement.xhtml">IRockySPHElement</a>&amp; sph_element</code></p>
<p class="startli">An object representing a SPH element.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md96"></a>
ROCKY_PLUGIN_POST_FORCE_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>This is a general-purpose hook executed after the calculation of the SPH forces, inside a loop over all active SPH element pairs with force interactions. The associated code block must be closed by a <code>ROCKY_PLUGIN_POST_FORCE_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md97"></a>
ROCKY_PLUGIN_POST_FORCE_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>This is a general-purpose hook executed after the calculation of the SPH forces, inside a loop over all active interactions between SPH elements and geometry triangles. The associated code must be closed by a <code>ROCKY_PLUGIN_PRE_FORCE_ON_SPH_TRIANGLE_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHTriangleInteraction.xhtml">IRockySPHTriangleInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing an interacting pair SPH element-geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md98"></a>
ROCKY_PLUGIN_PRE_MOVE_ON_SPH_ELEMENTS</h3>
<p>This is a general-purpose hook executed before the solution of the motion equations for the SPH elements, inside a loop over all active SPH elements in a simulation. The associated code block must be closed by a <code>ROCKY_PLUGIN_PRE_MOVE_ON_SPH_ELEMENTS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElement.xhtml">IRockySPHElement</a>&amp; sph_element</code></p>
<p class="startli">An object representing a SPH element.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md99"></a>
ROCKY_PLUGIN_PRE_MOVE_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>This is a general-purpose hook executed before the solution of the motion equations for the SPH elements, inside a loop over all active SPH element pairs with force interactions. The associated code must end with a <code>ROCKY_PLUGIN_PRE_MOVE_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md100"></a>
ROCKY_PLUGIN_PRE_MOVE_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>This is a general-purpose hook executed before the solution of the motion equations for the SPH elements, inside a loop over all active interactions between SPH elements and geometry triangles. The code must end with a <code>ROCKY_PLUGIN_PRE_MOVE_ON_SPH_TRIANGLE_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHTriangleInteraction.xhtml">IRockySPHTriangleInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing an interacting pair SPH element-geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md101"></a>
ROCKY_PLUGIN_POST_MOVE_ON_SPH_ELEMENTS</h3>
<p>This is a general-purpose hook executed after the solution of the motion equations for the SPH elements, inside a loop over all active SPH elements in a simulation. The associated code block must be closed by a <code>ROCKY_PLUGIN_POST_MOVE_ON_SPH_ELEMENTS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElement.xhtml">IRockySPHElement</a>&amp; sph_element</code></p>
<p class="startli">An object representing a SPH element.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md102"></a>
ROCKY_PLUGIN_POST_MOVE_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>This is a general-purpose hook executed after the solution of the motion equations for the SPH elements, inside a loop over all active SPH element pairs with force interactions. The associated code must end with a <code>ROCKY_PLUGIN_POST_MOVE_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md103"></a>
ROCKY_PLUGIN_POST_MOVE_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>This is a general-purpose hook executed after the solution of the motion equations for the SPH elements, inside a loop over all active interactions between SPH elements and geometry triangles. The code must end with a <code>ROCKY_PLUGIN_POST_MOVE_ON_SPH_TRIANGLE_INTERACTIONS_END()</code> statement.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHTriangleInteraction.xhtml">IRockySPHTriangleInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing an interacting pair SPH element-geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md104"></a>
ROCKY_PLUGIN_HEAT_TRANSFER_ON_SPH_ELEMENT_INTERACTIONS</h3>
<p>This is the hook that a custom module must use for overriding the built-in SPH element-to-element thermal calculations implemented within the Rocky solver.</p>
<p>The code associated to this hook will be executed before solving the motion equations of DEM particles and SPH elements, as shown in Figure 3.3. The custom code must calculate the heat transfer rate going from free SPH elements to other free SPH elements and also from free SPH elements to SPH elements linked to DEM particles. On the other hand, the thermal interaction between two linked SPH elements can be ignored, since the heat exchanged between DEM particles is handled by the code related to DEM. To work properly, a custom SPH thermal module must also implement the calculation of the SPH element-to-geometry-triangle heat transfer rate within the <code>ROCKY_PLUGIN_HEAT_TRANSFER_ON_SPH_TRIANGLE_INTERACTIONS</code> hook. The update of the temperature of all SPH particles will be made internally by the Rocky solver based on the balance of thermal energy.</p>
<p>The associated code must end with a <code>return</code> statement that returns the calculated heat transfer rate value, followed by a closing <code>ROCKY_PLUGIN_HEAT_TRANSFER_ON_SPH_ELEMENT_INTERACTIONS_END()</code> statement.</p>
<p><em>Note: The specification's file of such a module must include the definition of the <code>sph_heat_transfer_model</code> attribute, in order to be recognized as a module implementing a custom SPH thermal model.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElementInteraction.xhtml">IRockySPHElementInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing a pair of SPH elements located within the support region of each other.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md105"></a>
ROCKY_PLUGIN_HEAT_TRANSFER_ON_SPH_TRIANGLE_INTERACTIONS</h3>
<p>This is the hook that a custom module must use for overriding the built-in SPH element-to-geometry triangle thermal calculations implemented within the Rocky solver.</p>
<p>The code associated to this hook will be executed immediately after the <code>ROCKY_PLUGIN_HEAT_TRANSFER_ON_SPH_ELEMENT_INTERACTIONS</code> hook and before solving the motion equations of DEM particles and SPH elements, as shown in Figure 3.3. The custom code must calculate only the heat transfer rate exchanged between free SPH elements and geometry triangles. The thermal interaction between linked SPH elements and geometry triangles can be ignored, because it is handled by the DEM-related code.</p>
<p>The associated code must end with a <code>return</code> statement that returns the calculated heat transfer rate value, followed by a closing <code>ROCKY_PLUGIN_HEAT_TRANSFER_ON_SPH_TRIANGLE_INTERACTIONS_END()</code> statement.</p>
<p><em>Note: The specification's file of such a module must include the definition of the <code>sph_heat_transfer_model</code> attribute, in order to be recognized as a module implementing a custom SPH thermal model</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHTriangleInteraction.xhtml">IRockySPHTriangleInteraction</a>&amp; sph_interaction</code></p>
<p class="startli">An object representing an interacting pair SPH element-geometry triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md106"></a>
ROCKY_PLUGIN_MOLECULAR_VISCOSITY_ON_SPH_ELEMENTS</h3>
<p>This hook allows SDK users to override the viscosity value set in the UI. The code associated to this hook will be executed during initialization and on every iteration before the SPH viscous force calculations.</p>
<p>The associated code must end with a <code>return</code> statement that returns the calculated viscosity value, followed by a closing <code>ROCKY_PLUGIN_MOLECULAR_VISCOSITY_ON_SPH_ELEMENTS_END()</code> statement.</p>
<p><em>Note: The specification file of such a module must include the definition of the <code>sph_variable_molecular_viscosity</code> attribute, in order to be recognized as a module implementing a variable molecular viscosity model.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHElement.xhtml">IRockySPHElement</a>&amp; sph_element</code></p>
<p class="startli">An object representing an SPH element.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md107"></a>
ROCKY_PLUGIN_HEAT_TRANSFER_COEFFICIENT_CORRELATION_ON_TRIANGLES</h3>
<p>This hook allows SDK users to calculate the Heat Transfer Coefficient (HTC) on the triangles. The usage of this hook does not require thermal model to be enabled, since its main usage is to calculate HTC on a triangle through correlations, with average velocity and average fluid properties on the neighborhood of that triangle as inputs.</p>
<p>The code associated to this hook will be executed immediately before the output step, where the data will be saved in disk.</p>
<p>The associated code must end with a <code>return</code> statement that returns the calculated heat transfer coefficient value, followed by a closing <code>ROCKY_PLUGIN_HEAT_TRANSFER_COEFFICIENT_CORRELATION_ON_TRIANGLES_END()</code> statement.</p>
<p><em>Note: The specification file of such a module must include the definition of the <code>sph_heat_transfer_coefficient</code> attribute, in order to be recognized as a module implementing a variable molecular viscosity model.</em></p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a>&amp; model</code></p>
<p class="startli">An object that provides general information about the current state of the simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockySPHDeviceModel.xhtml">IRockySPHDeviceModel</a>&amp; sph_model</code></p>
<p class="startli">An object that provides data about current state of the flow model discretized using the SPH method.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyGeometryTriangle.xhtml">IRockyGeometryTriangle</a>&amp; triangle</code></p>
<p class="startli">An object representing a geometry triangle.</p>
</li>
<li><p class="startli"><code>const float3&amp; average_velocity</code></p>
<p class="startli">The average velocity of SPH on the neighborhood of the triangle.</p>
</li>
<li><p class="startli"><code>const float&amp; average_viscosity</code></p>
<p class="startli">The average viscosity on the neighborhood of the triangle.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md108"></a>
Output hooks</h2>
<p>The current version of the Rocky Solver SDK includes some hooks intended for enabling modules to deliver custom data to Rocky in order to be saved, visualized and post-processed. The output of custom data can be made only at output times, when Rocky's own data is stored in disk as well.</p>
<h3><a class="anchor" id="autotoc_md109"></a>
ROCKY_PLUGIN_PRE_OUTPUT_CUDA_SYNC_DATA</h3>
<p>When running a simulation in GPU, all custom data is copied to the GPU devices during the initialization stage and then processed entirely there. Therefore, when it is required to deliver portions of this data to Rocky for visualization and post-processing purposes, it has to be copied back to the CPU.</p>
<p><em>Note: The exception are the scalar variaables added by the module, which are synchronized and made available for visualization automatically by Rocky.However, any other custom data that will need to be outputted must be copied to the CPU within this hook.</em></p>
<p>This hook is intended primarily for performing that operation with custom data. The associated code will be executed at output times, before Rocky performs the output of its own data, as shown in Figure 3.1.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *host_data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
<li><p class="startli"><code>int device_id</code></p>
<p class="startli">Identifier of an individual GPU.</p>
</li>
<li><p class="startli"><code>void *device_data</code></p>
<p class="startli">The generic pointer pointing to a copy of a local <code>struct</code> in a GPU device, provided in <code>ROCKY_PLUGIN_INITIALIZE_CUDA</code>.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md110"></a>
ROCKY_PLUGIN_PRE_OUTPUT</h3>
<p>This hook must be used for performing operations on custom data that need to be done before Rocky begins the writing of output data on disk. An operation that may be done within this hook is the update of the datasets that are used to store data that Rocky will display as time curves and cross-plot curves.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md111"></a>
ROCKY_PLUGIN_PRE_OUTPUT_ON_CONTACTS</h3>
<p>The code associated to this hook will be executed within a loop including all active frictional contacts, at a point before the writing of output data on disk. This hook can be employed for transferring data stored in contact scalars to other data structures, as it is done, for instance, on collision statistics modules.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyDeviceModel.xhtml">IRockyDeviceModel</a> &amp;device_model</code></p>
<p class="startli">An object that provides data about the current state of the simulation, stored within a device.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyContact.xhtml">IRockyContact</a> &amp;contact</code></p>
<p class="startli">An active frictional contact object.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md112"></a>
ROCKY_PLUGIN_OUTPUT_PARTICLE_PROPERTY</h3>
<p>The purpose of this hook is to populate particle properties with values calculated by a custom module. Rocky will display these values per particle according to a color scale, in the same way as any built-in particle property.</p>
<p><em>Note: This operation is not needed for particle scalars, which are automatically displayed by Rocky as particle properties, if the parameter output is specified as true when creating the scalars with the method <code>add</code>.</em></p>
<p>The code associated to this hook will be executed within a nested loop involving all active particles and all custom particle properties defined previously within the <code>ROCKY_PLUGIN_SETUP_OUTPUT_PROPERTIES</code> hook.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticleHost.xhtml">IRockyParticleHost</a>&amp; particle</code></p>
<p class="startli">An active particle.</p>
</li>
<li><p class="startli"><code>int property_id</code></p>
<p class="startli">The index associated to the custom particle property for which values must be specified within the hook. The value of this index is assigned according to the order in which the particle properties were specified within the <code>ROCKY_PLUGIN_SETUP_OUTPUT_PROPERTIES</code> hook, starting at zero.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md113"></a>
ROCKY_PLUGIN_OUTPUT_TRIANGLE_PROPERTY</h3>
<p>The purpose of this hook is to populate geometry triangle properties with values calculated by a custom module. Rocky will display these values per geometry triangle according to a color scale, in the same way as any built-in geometry property.</p>
<p><em>Note: This operation is not needed for triangle scalars, which are automatically displayed by Rocky as geometry triangle properties, if the parameter output is specified as <code>true</code> when creating the scalars with the method <code>add</code>.</em></p>
<p>The code associated to this hook will be executed within a nested loop involving all active particles and all custom triangle properties defined previously within the <code>ROCKY_PLUGIN_SETUP_OUTPUT_PROPERTIES</code> hook.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code><a class="el" href="structIRockyParticleHost.xhtml">IRockyParticleHost</a>&amp; particle</code></p>
<p class="startli">An active particle.</p>
</li>
<li><p class="startli"><code>int property_id</code></p>
<p class="startli">The index associated to the custom triangle property for which values must be specified within the hook. The value of this index is assigned according to the order in which the triangle properties were specified within the <code>ROCKY_PLUGIN_SETUP_OUTPUT_PROPERTIES</code> hook, starting at zero.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md114"></a>
ROCKY_PLUGIN_POST_OUTPUT</h3>
<p>This hook must be used for performing simple operations on custom data after an output has been made, such as resetting counters or accumulators.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md115"></a>
ROCKY_PLUGIN_END_ITERATION</h3>
<p>The code attached to this hook is executed when the cycle of calculations for a time step ends, right before starting a new time step, in Figure 3.1.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation. For a list of all the methods associated to <code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a></code>, see chapter <a href="annotated.xhtml">Reference</a>.</p>
</li>
<li><p class="startli"><code>void *data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code>, pointing to the user's custom data.</p>
</li>
</ul>
<h3><a class="anchor" id="autotoc_md116"></a>
ROCKY_PLUGIN_END_ITERATION_CUDA</h3>
<p>This hook is placed also at the end of a cycle of calculations, but it is executed on each one of the active GPU devices, when a simulation runs in GPU.</p>
<p><b>Parameters:</b></p>
<ul>
<li><p class="startli"><code><a class="el" href="structIRockyModel.xhtml">IRockyModel</a> &amp;model</code></p>
<p class="startli">Provides data about the general configuration of a simulation.</p>
</li>
<li><p class="startli"><code>void *host_data</code></p>
<p class="startli">The generic pointer provided in <code>ROCKY_PLUGIN_CONFIGURE</code> for pointing to a local <code>struct</code>.</p>
</li>
<li><p class="startli"><code>int device_id</code></p>
<p class="startli">Identifier of an individual GPU.</p>
</li>
<li><p class="startli"><code>void *&amp;device_data</code></p>
<p class="startli">The generic pointer pointing to a copy of a local <code>struct</code> in a GPU device, provided in <code>ROCKY_PLUGIN_INITIALIZE_CUDA</code>. </p>
</li>
</ul>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.10.0 </li>
  </ul>
</div>
</body>
</html>
