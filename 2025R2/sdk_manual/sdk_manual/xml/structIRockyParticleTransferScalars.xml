<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyParticleTransferScalars" kind="struct" language="C++" prot="public">
    <compoundname>IRockyParticleTransferScalars</compoundname>
    <basecompoundref prot="public" virt="non-virtual">EntityScalars&lt; rocky20::ParticleTransferScalars &gt;</basecompoundref>
    <includes refid="rocky__particle__scalars_8hpp" local="no">rocky_particle_scalars.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1adb482691a11732335076edd8113087cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleTransferScalars::get_heat_transfer</definition>
        <argsstring>() const</argsstring>
        <name>get_heat_transfer</name>
        <qualifiedname>IRockyParticleTransferScalars::get_heat_transfer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the total heat transfer rate to the particle at a given time. This is a built-in particle scalar defined inside the solver, enabled whenever a thermal model is active in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="413" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="413" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1a3990cc0e8e9d91d57cb4dd5edfebc8c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleTransferScalars::set_heat_transfer</definition>
        <argsstring>(const double value)</argsstring>
        <name>set_heat_transfer</name>
        <qualifiedname>IRockyParticleTransferScalars::set_heat_transfer</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the heat transfer rate to the particle. This value</title><para>will be used in the thermal energy balance equation of the particle in order to update its temperature at the following timestep.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the heat transfer rate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="425" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="425" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1a698d33f0f3ed82cf1a62ff21c881fb74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleTransferScalars::add_heat_transfer</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_heat_transfer</name>
        <qualifiedname>IRockyParticleTransferScalars::add_heat_transfer</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a value to the current heat transfer rate to the particle.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value summed to the heat transfer rate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="435" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="435" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1a8f0eeb9e7c46b0a82b746c80f7bcc3c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleTransferScalars::add_heat_source</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_heat_source</name>
        <qualifiedname>IRockyParticleTransferScalars::add_heat_source</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method adds a value to the source term to the thermal energy balance</title><para>equation of a particle. The added value can be positive (heat is generated) or negative (heat is removed).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the thermal energy per unit time generated in or removed from the particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="448" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1aa840c5918e86e974c13e7d630251c5b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleTransferScalars::get_scalar</definition>
        <argsstring>(int scalar_index) const</argsstring>
        <name>get_scalar</name>
        <qualifiedname>IRockyParticleTransferScalars::get_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>the value currently stored can be accessed with this method.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value currently stored in the scalar variable.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="456" column="29"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1a32a00ee4ca40287266b284214e8a2c9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleTransferScalars::set_scalar</definition>
        <argsstring>(int scalar_index, double value) const</argsstring>
        <name>set_scalar</name>
        <qualifiedname>IRockyParticleTransferScalars::set_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to store a value on it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that must be stored.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="459" column="27"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1a20599ee8283e5adcb2af659ca7b60985" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleTransferScalars::add_scalar</definition>
        <argsstring>(int scalar_index, double value) const</argsstring>
        <name>add_scalar</name>
        <qualifiedname>IRockyParticleTransferScalars::add_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to sum a value to the current one stored in it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that must be summed to the current stored value.<linebreak/>
   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="462" column="26"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleTransferScalars_1a9cef39b6f42cca4284f2bd733ee4d173" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleTransferScalars::max_scalar</definition>
        <argsstring>(int scalar_index, double value) const</argsstring>
        <name>max_scalar</name>
        <qualifiedname>IRockyParticleTransferScalars::max_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to make the scalar store the maximum of a set of values. A common use of this method is, for instance, to find the maximum among a set of values associated to the contacts of a particle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A value that must be checked if it is greater than the current stored value.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="465" column="26"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>When running a simulation, an <computeroutput><ref refid="structIRockyParticleTransferScalars" kindref="compound">IRockyParticleTransferScalars</ref></computeroutput> gives access to all particle transfer scalars defined in the project. Particle transfer scalars are special particle scalars whose values are reset automatically to zero at the beginning of a new time iteration. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="406" column="1" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="407" bodyend="476"/>
    <listofallmembers>
      <member refid="structIRockyParticleTransferScalars_1a8f0eeb9e7c46b0a82b746c80f7bcc3c2" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>add_heat_source</name></member>
      <member refid="structIRockyParticleTransferScalars_1a698d33f0f3ed82cf1a62ff21c881fb74" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>add_heat_transfer</name></member>
      <member refid="structIRockyParticleTransferScalars_1a20599ee8283e5adcb2af659ca7b60985" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>add_scalar</name></member>
      <member refid="structIRockyParticleTransferScalars_1adb482691a11732335076edd8113087cd" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>get_heat_transfer</name></member>
      <member refid="structIRockyParticleTransferScalars_1aa840c5918e86e974c13e7d630251c5b4" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>get_scalar</name></member>
      <member refid="structIRockyParticleTransferScalars_1a9cef39b6f42cca4284f2bd733ee4d173" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>max_scalar</name></member>
      <member refid="structIRockyParticleTransferScalars_1a3990cc0e8e9d91d57cb4dd5edfebc8c1" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>set_heat_transfer</name></member>
      <member refid="structIRockyParticleTransferScalars_1a32a00ee4ca40287266b284214e8a2c9c" prot="public" virt="non-virtual"><scope>IRockyParticleTransferScalars</scope><name>set_scalar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
