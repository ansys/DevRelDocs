<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyParticleScalars" kind="struct" language="C++" prot="public">
    <compoundname>IRockyParticleScalars</compoundname>
    <basecompoundref prot="public" virt="non-virtual">EntityScalars&lt; rocky20::ParticleScalars &gt;</basecompoundref>
    <includes refid="rocky__particle__scalars_8hpp" local="no">rocky_particle_scalars.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyParticleScalars_1a4a64868ea5dae08ca841701423268d24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleScalars::get_temperature</definition>
        <argsstring>() const</argsstring>
        <name>get_temperature</name>
        <qualifiedname>IRockyParticleScalars::get_temperature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the current particle&apos;s temperature. Temperature is a built-in particle scalar defined in the solver, enabled whenever a thermal model is active in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="113" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a228debc629b2c74943a35a6411e85e34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleScalars::get_mass_increment</definition>
        <argsstring>() const</argsstring>
        <name>get_mass_increment</name>
        <qualifiedname>IRockyParticleScalars::get_mass_increment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the mass increment of the particle in relation to the initial mass at the time of entrance. Different physical processes can cause this mass increment. The mass increment is a built-in particle scalar defined in the solver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="123" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a07d6c5c74fe0291617efe4f1c5c0b530" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleScalars::get_volume_increment</definition>
        <argsstring>() const</argsstring>
        <name>get_volume_increment</name>
        <qualifiedname>IRockyParticleScalars::get_volume_increment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the volume increment of the particle in relation to the initial volume at the time of entrance. Different physical processes can cause this volume increment. The volume increment is a built-in particle scalar defined in the solver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="133" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a52baa075b4469ce9c99fb3598b1e3495" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::set_temperature</definition>
        <argsstring>(const double value)</argsstring>
        <name>set_temperature</name>
        <qualifiedname>IRockyParticleScalars::set_temperature</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the temperature of the particle.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the temperature. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="145" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1add3b52baa679fb29168078afd6f414c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::set_mass_increment</definition>
        <argsstring>(const double value)</argsstring>
        <name>set_mass_increment</name>
        <qualifiedname>IRockyParticleScalars::set_mass_increment</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the mass increment of the particle in relation</title><para>to the initial mass at the time of entrance.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the mass increment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="156" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a1cf60c38b7d56949f4bd938a71139b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::set_volume_increment</definition>
        <argsstring>(const double value)</argsstring>
        <name>set_volume_increment</name>
        <qualifiedname>IRockyParticleScalars::set_volume_increment</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the volume increment of the particle in relation</title><para>to the initial volume at the time of entrance.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the volume increment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="167" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1aae018069db36996a8d86fd9f6c18a0cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_temperature</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_temperature</name>
        <qualifiedname>IRockyParticleScalars::add_temperature</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a value to the current temperature of the particle.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value summed to the temperature. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="179" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1ad8f1693fb8d2e2f901791f0d55ffafd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_explicit_fluid_momentum</definition>
        <argsstring>(const double3 value)</argsstring>
        <name>add_explicit_fluid_momentum</name>
        <qualifiedname>IRockyParticleScalars::add_explicit_fluid_momentum</qualifiedname>
        <param>
          <type>const double3</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method adds the particle&apos;s explicit contribution into the CFD momentum equation</title><para>associated to the cell where the particle centroid is located. This operation is valid only for two-way DEM-CFD coupling (please refer to the DEM-CFD Coupling Technical Manual for more details).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The particle&apos;s explicit momentum contribution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="192" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a4ec6b9153716ae4de2399ce1cb148a35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_implicit_fluid_momentum</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_implicit_fluid_momentum</name>
        <qualifiedname>IRockyParticleScalars::add_implicit_fluid_momentum</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method adds the particle&apos;s implicit contribution into the CFD momentum equation</title><para>associated to the cell where the particle centroid is located. This operation is valid only for two-way DEM-CFD coupling (please refer to the DEM-CFD Coupling Technical Manual for more details).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficient associated to particle&apos;s implicit momentum contribution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="205" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a879d37039a8dac11578b008f69510232" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_explicit_fluid_heat_transfer_rate</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_explicit_fluid_heat_transfer_rate</name>
        <qualifiedname>IRockyParticleScalars::add_explicit_fluid_heat_transfer_rate</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method adds the particle&apos;s implicit contribution into the CFD thermal energy equation</title><para>associated to the cell where the particle centroid is located. This operation is valid only for thermal-enabled two-way DEM-CFD coupling (please refer to the DEM-CFD Coupling Technical Manual for more details).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The particle&apos;s explicit heat transfer rate contribution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="218" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1afc8afe09fcf6cbbc037884a382f40386" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_implicit_fluid_heat_transfer_rate</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_implicit_fluid_heat_transfer_rate</name>
        <qualifiedname>IRockyParticleScalars::add_implicit_fluid_heat_transfer_rate</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>// This method adds the particle&apos;s implicit contribution into the CFD thermal energy equation</title><para>associated to the cell where the particle centroid is located. This operation is valid only for thermal-enabled two-way DEM-CFD coupling (please refer to the DEM-CFD Coupling Technical Manual for more details).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The particle&apos;s implicit heat transfer rate contribution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="231" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1ae7c53f46ae9e8420e3546939841cb267" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_mass_increment</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_mass_increment</name>
        <qualifiedname>IRockyParticleScalars::add_mass_increment</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a value to the current mass increment of the particle.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value summed to the mass increment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="241" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a76d6d6d09083736d7e40bb09710bfa37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_volume_increment</definition>
        <argsstring>(const double value)</argsstring>
        <name>add_volume_increment</name>
        <qualifiedname>IRockyParticleScalars::add_volume_increment</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a value to the current volume increment of the particle.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value summed to the volume increment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="251" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a3c656901b88bf6938e16f0559e1f8554" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleScalars::get_thermal_conductivity</definition>
        <argsstring>() const</argsstring>
        <name>get_thermal_conductivity</name>
        <qualifiedname>IRockyParticleScalars::get_thermal_conductivity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the thermal conductivity of the particle. The Rocky solver has a built-in particle scalar that once enabled allow particles to have a variable thermal conductivity, which overrides the constant value specified for the particle&apos;s material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="262" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a2e9ff5092bd888f58d2441f26503717b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::set_thermal_conductivity</definition>
        <argsstring>(const double value)</argsstring>
        <name>set_thermal_conductivity</name>
        <qualifiedname>IRockyParticleScalars::set_thermal_conductivity</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the thermal conductivity for the associated particle, if</title><para>the corresponding built-in particle scalar was enabled. Otherwise, a segmentation fault will occur.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the particle&apos;s thermal conductivity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="274" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a2e527a39101f66c5b8107634655f7ac0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleScalars::get_specific_heat</definition>
        <argsstring>() const</argsstring>
        <name>get_specific_heat</name>
        <qualifiedname>IRockyParticleScalars::get_specific_heat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the specific heat of the particle. The Rocky solver has a built-in particle scalar that once enabled allow particles to have a variable specific heat, which overrides the constant value specified for the particle&apos;s material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="285" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a161b925c5cb9660521995eae19230b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::set_specific_heat</definition>
        <argsstring>(const double value)</argsstring>
        <name>set_specific_heat</name>
        <qualifiedname>IRockyParticleScalars::set_specific_heat</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the specific heat for the associated particle, if</title><para>the corresponding built-in particle scalar was enabled. Otherwise, a segmentation fault will occur.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the particle&apos;s specific heat. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="297" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1aa2e33b5ad44cf4487e8c28f69bab1bbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleScalars::get_poisson_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_poisson_ratio</name>
        <qualifiedname>IRockyParticleScalars::get_poisson_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the Poisson&apos;s ratio assigned to the particle. The Rocky solver has a built-in particle scalar that once enabled allow particles to have a variable Poisson&apos;s ratio, which overrides the constant value specified for the particle&apos;s material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="308" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a575c4ba7f23f9b8b0344964a5ddf4e01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::set_poisson_ratio</definition>
        <argsstring>(const double value)</argsstring>
        <name>set_poisson_ratio</name>
        <qualifiedname>IRockyParticleScalars::set_poisson_ratio</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the Poisson&apos;s ratio for the associated particle, if</title><para>the corresponding built-in particle scalar was enabled. Otherwise, a segmentation fault will occur.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the Poisson&apos;s ratio for the particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="320" column="33" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a22cb79d50006e74ccc257c1b7b7c65ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticleScalars::get_scalar</definition>
        <argsstring>(int scalar_index) const</argsstring>
        <name>get_scalar</name>
        <qualifiedname>IRockyParticleScalars::get_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>the value currently stored can be accessed with this method.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value currently stored in the scalar variable.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="328" column="29"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a18a2bdf028e0356b59e5c7bfa7d35a05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::set_scalar</definition>
        <argsstring>(int scalar_index, double value) const</argsstring>
        <name>set_scalar</name>
        <qualifiedname>IRockyParticleScalars::set_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to store a value on it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that must be stored.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="331" column="27"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a7583200a98dabab00cb51f19e90356a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::add_scalar</definition>
        <argsstring>(int scalar_index, double value) const</argsstring>
        <name>add_scalar</name>
        <qualifiedname>IRockyParticleScalars::add_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to sum a value to the current one stored in it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that must be summed to the current stored value.<linebreak/>
   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="334" column="26"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticleScalars_1a83a4b26c94d203d6b02708fa7ec52c65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticleScalars::max_scalar</definition>
        <argsstring>(int scalar_index, double value) const</argsstring>
        <name>max_scalar</name>
        <qualifiedname>IRockyParticleScalars::max_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to make the scalar store the maximum of a set of values. A common use of this method is, for instance, to find the maximum among a set of values associated to the contacts of a particle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A value that must be checked if it is greater than the current stored value.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="337" column="26"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>When running a simulation, an <computeroutput><ref refid="structIRockyParticleScalars" kindref="compound">IRockyParticleScalars</ref></computeroutput> gives access to all particle scalars defined in the project. These particle scalars can be built-in scalars defined in the Rocky solver, or custom particle scalars defined by the current module or other active modules. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_particle_scalars.hpp" line="104" column="1" bodyfile="source/c++/rocky20/api/rocky_particle_scalars.hpp" bodystart="105" bodyend="358"/>
    <listofallmembers>
      <member refid="structIRockyParticleScalars_1a879d37039a8dac11578b008f69510232" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_explicit_fluid_heat_transfer_rate</name></member>
      <member refid="structIRockyParticleScalars_1ad8f1693fb8d2e2f901791f0d55ffafd9" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_explicit_fluid_momentum</name></member>
      <member refid="structIRockyParticleScalars_1afc8afe09fcf6cbbc037884a382f40386" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_implicit_fluid_heat_transfer_rate</name></member>
      <member refid="structIRockyParticleScalars_1a4ec6b9153716ae4de2399ce1cb148a35" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_implicit_fluid_momentum</name></member>
      <member refid="structIRockyParticleScalars_1ae7c53f46ae9e8420e3546939841cb267" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_mass_increment</name></member>
      <member refid="structIRockyParticleScalars_1a7583200a98dabab00cb51f19e90356a4" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_scalar</name></member>
      <member refid="structIRockyParticleScalars_1aae018069db36996a8d86fd9f6c18a0cf" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_temperature</name></member>
      <member refid="structIRockyParticleScalars_1a76d6d6d09083736d7e40bb09710bfa37" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>add_volume_increment</name></member>
      <member refid="structIRockyParticleScalars_1a228debc629b2c74943a35a6411e85e34" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>get_mass_increment</name></member>
      <member refid="structIRockyParticleScalars_1aa2e33b5ad44cf4487e8c28f69bab1bbc" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>get_poisson_ratio</name></member>
      <member refid="structIRockyParticleScalars_1a22cb79d50006e74ccc257c1b7b7c65ce" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>get_scalar</name></member>
      <member refid="structIRockyParticleScalars_1a2e527a39101f66c5b8107634655f7ac0" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>get_specific_heat</name></member>
      <member refid="structIRockyParticleScalars_1a4a64868ea5dae08ca841701423268d24" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>get_temperature</name></member>
      <member refid="structIRockyParticleScalars_1a3c656901b88bf6938e16f0559e1f8554" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>get_thermal_conductivity</name></member>
      <member refid="structIRockyParticleScalars_1a07d6c5c74fe0291617efe4f1c5c0b530" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>get_volume_increment</name></member>
      <member refid="structIRockyParticleScalars_1a83a4b26c94d203d6b02708fa7ec52c65" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>max_scalar</name></member>
      <member refid="structIRockyParticleScalars_1add3b52baa679fb29168078afd6f414c4" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>set_mass_increment</name></member>
      <member refid="structIRockyParticleScalars_1a575c4ba7f23f9b8b0344964a5ddf4e01" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>set_poisson_ratio</name></member>
      <member refid="structIRockyParticleScalars_1a18a2bdf028e0356b59e5c7bfa7d35a05" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>set_scalar</name></member>
      <member refid="structIRockyParticleScalars_1a161b925c5cb9660521995eae19230b98" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>set_specific_heat</name></member>
      <member refid="structIRockyParticleScalars_1a52baa075b4469ce9c99fb3598b1e3495" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>set_temperature</name></member>
      <member refid="structIRockyParticleScalars_1a2e9ff5092bd888f58d2441f26503717b" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>set_thermal_conductivity</name></member>
      <member refid="structIRockyParticleScalars_1a1cf60c38b7d56949f4bd938a71139b3a" prot="public" virt="non-virtual"><scope>IRockyParticleScalars</scope><name>set_volume_increment</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
