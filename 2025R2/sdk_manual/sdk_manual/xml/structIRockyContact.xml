<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyContact" kind="struct" language="C++" prot="public">
    <compoundname>IRockyContact</compoundname>
    <includes refid="rocky__contact__api_8hpp" local="no">rocky_contact_api.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyContact_1ae1890c831f2bb90143d3459352dee316" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyMaterial IRockyContact::get_home_material</definition>
        <argsstring>() const</argsstring>
        <name>get_home_material</name>
        <qualifiedname>IRockyContact::get_home_material</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></computeroutput> object that gives access to the values of physical properties associated to the material from which particle labeled as <emphasis>home</emphasis> is made. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="53" column="36" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="515" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a8ec1a085944bc63f455c4007531aea61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyMaterial IRockyContact::get_near_material</definition>
        <argsstring>() const</argsstring>
        <name>get_near_material</name>
        <qualifiedname>IRockyContact::get_near_material</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></computeroutput> object that gives access to the values of physical properties associated to the material from which the <emphasis>near</emphasis> particle or triangle is made. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="60" column="36" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="520" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aff52effeb3fe2a5015ac05022df63731" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyMaterialInteraction" kindref="compound">IRockyMaterialInteraction</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyMaterialInteraction IRockyContact::get_material_interaction</definition>
        <argsstring>() const</argsstring>
        <name>get_material_interaction</name>
        <qualifiedname>IRockyContact::get_material_interaction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyMaterialInteraction" kindref="compound">IRockyMaterialInteraction</ref></computeroutput> object that gives access to the values of physical properties associated to the material interaction that corresponds to the contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="67" column="47" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="525" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ab05070dcc53936225c506abfc2645ff4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyContact::get_material_interaction_index</definition>
        <argsstring>() const</argsstring>
        <name>get_material_interaction_index</name>
        <qualifiedname>IRockyContact::get_material_interaction_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The internal index of the material interaction associated to the contact. Every pair of materials defined in a project has a unique index associated to it. Both built-in and custom material interactions are stored internally using the same indexes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="75" column="25" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="530" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aed9e6fcfa92276bc514e21564f0603fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyParticle" kindref="compound">IRockyParticle</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyParticle IRockyContact::get_home_particle</definition>
        <argsstring>() const</argsstring>
        <name>get_home_particle</name>
        <qualifiedname>IRockyContact::get_home_particle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticle" kindref="compound">IRockyParticle</ref></computeroutput> object representing the <emphasis>home</emphasis> particle. This object gives access to several instantaneous properties associated to that particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="82" column="36" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="555" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a2cd1c1e40befd0cf6910d663432c3695" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyContact::get_home_particle_group_index</definition>
        <argsstring>() const</argsstring>
        <name>get_home_particle_group_index</name>
        <qualifiedname>IRockyContact::get_home_particle_group_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index that uniquely identifies the particle group to which the home particle belongs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="88" column="25" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a6c85a39640365d283d22437792c51f0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyParticle" kindref="compound">IRockyParticle</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyParticle IRockyContact::get_near_particle</definition>
        <argsstring>() const</argsstring>
        <name>get_near_particle</name>
        <qualifiedname>IRockyContact::get_near_particle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticle" kindref="compound">IRockyParticle</ref></computeroutput> object representing the <emphasis>near</emphasis> particle in a particle-to-triangle contact. This object gives access to several instantaneous properties associated to that particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="95" column="36" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a244d24fa1cc78a23d6f4553d5797ab0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyContact::get_near_particle_group_index</definition>
        <argsstring>() const</argsstring>
        <name>get_near_particle_group_index</name>
        <qualifiedname>IRockyContact::get_near_particle_group_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index that uniquely identifies the particle group to which the near particle belongs, in a particle-to-particle contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="101" column="25" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aa2479a695d48de98b5caf29d52134b8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyGeometryTriangle" kindref="compound">IRockyGeometryTriangle</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyGeometryTriangle IRockyContact::get_near_triangle</definition>
        <argsstring>() const</argsstring>
        <name>get_near_triangle</name>
        <qualifiedname>IRockyContact::get_near_triangle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyGeometryTriangle" kindref="compound">IRockyGeometryTriangle</ref></computeroutput> object representing the <emphasis>near</emphasis> geometry triangle in a particle-to-triangle contact. This object gives access to some geometric properties associated to that triangle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="108" column="44" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="575" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a3f551f05cfe40b8c6b95b3df8a311ca4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyContact::get_near_geometry_index</definition>
        <argsstring>() const</argsstring>
        <name>get_near_geometry_index</name>
        <qualifiedname>IRockyContact::get_near_geometry_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The internal index that uniquely identifies the geometry to which belongs the geometry triangle in a particle-to-triangle contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="114" column="25" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a0a27611118aab7a27fb6c1e53939cba1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::is_particle_particle_contact</definition>
        <argsstring>() const</argsstring>
        <name>is_particle_particle_contact</name>
        <qualifiedname>IRockyContact::is_particle_particle_contact</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is a particle-to-particle contact, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="119" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="535" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a9de7fba112ea033f15e8ee1fb0305960" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::is_particle_triangle_contact</definition>
        <argsstring>() const</argsstring>
        <name>is_particle_triangle_contact</name>
        <qualifiedname>IRockyContact::is_particle_triangle_contact</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is a particle-to-triangle contact, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="124" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ae83dc410da7f54a0badbfb0c75fdaa4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::is_frictional</definition>
        <argsstring>() const</argsstring>
        <name>is_frictional</name>
        <qualifiedname>IRockyContact::is_frictional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is frictional, that is, the contacting entities are touching each other. The method returns false, otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="130" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a46453e5b227065edb55c7b67177584f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::is_adhesive</definition>
        <argsstring>() const</argsstring>
        <name>is_adhesive</name>
        <qualifiedname>IRockyContact::is_adhesive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is adhesive, which is the case for all contacts if an adhesive force model is active in the project. The method returns false, otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="136" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="550" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ab6c8fca161c75cf870eb059f9ed3b11c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_previous_overlap</definition>
        <argsstring>() const</argsstring>
        <name>get_previous_overlap</name>
        <qualifiedname>IRockyContact::get_previous_overlap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the overlap corresponding to the previous timestep. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="141" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a26aef3fac3655fe686283be4bd2fe7f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_overlap</definition>
        <argsstring>() const</argsstring>
        <name>get_overlap</name>
        <qualifiedname>IRockyContact::get_overlap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the current overlap, which is the small distance that a particle overlaps with another particle or a boundary, measured in the normal direction. In contact models, it is taken as a measurement of the total deformation of the contacting entities at any given time during a collision. Therefore, it is usually the main input parameter for calculating the normal contact force. For adhesive contacts in which physical contact has not been reached yet, this function will return a negative value. In this case, the absolute value of the overlap can be interpreted as the gap between the interacting entities, measured in the direction defined by the normal unit vector. It is common for adhesive forces to be functions of this gap distance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="156" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a04a9d6e5ba1478bc00d4955bcaa1a2fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::get_normal_unit_vector</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_unit_vector</name>
        <qualifiedname>IRockyContact::get_normal_unit_vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The unit normal vector in Cartesian coordinates. Conventionally, this vector is oriented always pointing to the <emphasis>home</emphasis> particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="162" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aafeae8748cf36743d08f4570b198f001" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::get_contact_position</definition>
        <argsstring>() const</argsstring>
        <name>get_contact_position</name>
        <qualifiedname>IRockyContact::get_contact_position</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Cartesian coordinates of the point at which the contact force is applied. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="168" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="600" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ad0940d0dcefd839aaba3770689a034bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_scale_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_scale_factor</name>
        <qualifiedname>IRockyContact::get_scale_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the scale factor, which is a reduction factor of the contact force attributed to an individual contact, in cases when multiple contacts points arise simultaneously between two entities. This factor is used also within collision statistics modules for determining the number of collisions based on the number of contacts registered, in cases when each collision has associated multiple contact points. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="177" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ab280ec2c5bc3fe90ca4822939514d3b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::just_started_frictional</definition>
        <argsstring>() const</argsstring>
        <name>just_started_frictional</name>
        <qualifiedname>IRockyContact::just_started_frictional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is frictional and it has begun at the current timestep, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="183" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="620" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a33e06ba2b8ca80ff15946ac27885dbd7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::just_started_adhesive</definition>
        <argsstring>() const</argsstring>
        <name>just_started_adhesive</name>
        <qualifiedname>IRockyContact::just_started_adhesive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is adhesive and it has begun at the current timestep, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="189" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1afbda49c86a367e9a4f20492ff5007333" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::just_finished_frictional</definition>
        <argsstring>() const</argsstring>
        <name>just_finished_frictional</name>
        <qualifiedname>IRockyContact::just_finished_frictional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is frictional and it has finished (the contacting entities stopped touching each other) at the current timestep.</para>
</simplesect>
<simplesect kind="attention"><para>This method will work properly only if called within the <computeroutput>ROCKY_PLUGIN_POST_FORCE_ON_FINISHED_CONTACTS</computeroutput> hook. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="198" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="630" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a52439d8dd07c36c9475eb248d7dcb38e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::just_finished_adhesive</definition>
        <argsstring>() const</argsstring>
        <name>just_finished_adhesive</name>
        <qualifiedname>IRockyContact::just_finished_adhesive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is adhesive and it has finished (the gap distance between the contacting entities became larger than the adhesive distance) at the current timestep.</para>
</simplesect>
<simplesect kind="attention"><para>This method will work properly only if called within the <computeroutput>ROCKY_PLUGIN_POST_FORCE_ON_FINISHED_CONTACTS</computeroutput> hook. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="207" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="635" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a395c9be7e50adea7317a808279faec0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::is_loading</definition>
        <argsstring>() const</argsstring>
        <name>is_loading</name>
        <qualifiedname>IRockyContact::is_loading</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is in a loading period (overlap increasing), false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="213" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="640" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1abe5cd05335fe5264bc05d9808b23a9fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::is_unloading</definition>
        <argsstring>() const</argsstring>
        <name>is_unloading</name>
        <qualifiedname>IRockyContact::is_unloading</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the contact is in a unloading period (overlap decreasing), false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="219" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="645" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a79c5a7fb09b962d62eefe61f27cddcd7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::is_positive_oriented</definition>
        <argsstring>() const</argsstring>
        <name>is_positive_oriented</name>
        <qualifiedname>IRockyContact::is_positive_oriented</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the topological orientation of the contact coincides with the conventional positive orientation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="225" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="663" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a6cc48e3759e515587e236d283d904f00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_current_time</definition>
        <argsstring>() const</argsstring>
        <name>get_current_time</name>
        <qualifiedname>IRockyContact::get_current_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current simulation time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="230" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a4cc9eb65e78d4eb4cbe34bb7c7baf85d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_timestep</definition>
        <argsstring>() const</argsstring>
        <name>get_timestep</name>
        <qualifiedname>IRockyContact::get_timestep</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The magnitude of the simulation timestep. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="235" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="615" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1af937221f53319cd4a30871829e3cc7e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyContactScalars" kindref="compound">IRockyContactScalars</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyContactScalars IRockyContact::get_particle_contact_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_particle_contact_scalars</name>
        <qualifiedname>IRockyContact::get_particle_contact_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyContactScalars" kindref="compound">IRockyContactScalars</ref></computeroutput> object that gives access to all particle-to-particle contact scalars defined in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="241" column="42" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ab14e84d2a580a95b2fbcb3d1f5c92a25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyContactScalars" kindref="compound">IRockyContactScalars</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyContactScalars IRockyContact::get_triangle_contact_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_triangle_contact_scalars</name>
        <qualifiedname>IRockyContact::get_triangle_contact_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyContactScalars" kindref="compound">IRockyContactScalars</ref></computeroutput> object that gives access to all particle-to-triangle contact scalars defined in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="247" column="42" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="766" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a1816640d165bb54d339ee9aaf2873046" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_home_stiffness</definition>
        <argsstring>() const</argsstring>
        <name>get_home_stiffness</name>
        <qualifiedname>IRockyContact::get_home_stiffness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the stiffness associated to the <emphasis>home</emphasis> particle. For more details about the definition of this parameter, refer to the DEM Technical Manual. The returned value is already multiplied by the numerical softening factor, which is commonly used as a practical way of increasing the simulation timestep. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="256" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aa49e3ddd3916fabf25a90e8fefb5cc4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_near_stiffness</definition>
        <argsstring>() const</argsstring>
        <name>get_near_stiffness</name>
        <qualifiedname>IRockyContact::get_near_stiffness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the stiffness associated to the <emphasis>near</emphasis> particle or the <emphasis>near</emphasis> triangle, depending on the contact type. The returned value is already multiplied by the numerical softening factor, which is commonly used as a practical way of increasing the simulation timestep. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="265" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="675" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aa373c6f200518285d6bb85817d12ccae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_equivalent_stiffness</definition>
        <argsstring>() const</argsstring>
        <name>get_equivalent_stiffness</name>
        <qualifiedname>IRockyContact::get_equivalent_stiffness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the equivalent stiffness for the contact. The returned value is already multiplied by the numerical softening factor, which is commonly used as a practical way of increasing the simulation timestep. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="273" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="680" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aff778f8122d9ea2f81da59e1ff279b45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_home_stiffness_fraction</definition>
        <argsstring>() const</argsstring>
        <name>get_home_stiffness_fraction</name>
        <qualifiedname>IRockyContact::get_home_stiffness_fraction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The fraction of the stiffness of the near entity to the sum of the stiffnesses of both entities in a contact. This fraction is used when splitting the work made by the contact force between the two contacting entities. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="281" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="685" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1acc8512372077732bfe12aa3483f2e35b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_reduced_young_modulus</definition>
        <argsstring>() const</argsstring>
        <name>get_reduced_young_modulus</name>
        <qualifiedname>IRockyContact::get_reduced_young_modulus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the reduced Young&apos;s modulus. This property is usually used in the Hertzian contact model and models derived from it. The returned value is already multiplied by the numerical softening factor, which is commonly used as a practical way of increasing the simulation timestep. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="290" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="690" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ae4f9b67c0a4577089b37854e9fa5fe9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_equivalent_mass</definition>
        <argsstring>() const</argsstring>
        <name>get_equivalent_mass</name>
        <qualifiedname>IRockyContact::get_equivalent_mass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the equivalent or effective mass for the contact. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="296" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="695" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a473c87b27145d22e24f15e67ab160d89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_equivalent_radius</definition>
        <argsstring>() const</argsstring>
        <name>get_equivalent_radius</name>
        <qualifiedname>IRockyContact::get_equivalent_radius</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the equivalent or effective radius for the contact. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="302" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="700" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a9e085d9bb5684b5d34c33525bb1d021c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_normal_contact_force</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_contact_force</name>
        <qualifiedname>IRockyContact::get_normal_contact_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the normal component of the contact force, calculated according to the active normal contact force model. Depending on the point from where this function is called, a different force value can be returned. If called from <computeroutput>ROCKY_PLUGIN_PRE_FORCE_ON_CONTACTS</computeroutput>, the returned value will correspond to the normal force component calculated during the previous timestep. On the other hand, if called from <computeroutput>ROCKY_PLUGIN_POST_FORCE_ON_CONTACTS</computeroutput>, the value will be the recently calculated normal force component for the current timestep. Moreover, this function is not supposed to be called from <computeroutput>ROCKY_PLUGIN_NORMAL_FORCE_ON_CONTACTS</computeroutput>, since this hook is meant to be used to calculate and set the normal force component for the contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="316" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="650" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aca5aae0a4d0c2033bbad4da067657704" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::get_tangential_contact_force</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_contact_force</name>
        <qualifiedname>IRockyContact::get_tangential_contact_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The tangential component of the contact force as a vector in Cartesian coordinates, calculated according to the active tangential contact force model. Conventionally, the returned tangential force is the one whose orientation coincides with the tangential force acting on the home particle. <linebreak/>
 If called from <computeroutput>ROCKY_PLUGIN_PRE_FORCE_ON_CONTACTS</computeroutput>, the returned value will correspond to the tangential force component calculated during the previous timestep. On the other hand, if called from <computeroutput>ROCKY_PLUGIN_POST_FORCE_ON_CONTACTS</computeroutput> or from other hooks executed after that point, the value will be the recently calculated tangential force component for the current timestep. Moreover, this function is not supposed to be called from <computeroutput>ROCKY_PLUGIN_TANGENTIAL_FORCE_ON_CONTACTS</computeroutput>, since this hook is meant to be used to calculate and set the tangential force component for the contact. For tangential force models other than the Linear Spring Coulomb Limit and Mindlin-Deresiewicz models, the storage of this force must be enabled explicitly by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1a5a65f842ce3bea36ee46b346a2741911" kindref="member">IRockyContactScalarsModel::enable_storage_tangential_contact_force</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="337" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="655" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1af05c086a0b75c761b13fa744061789e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::calculate_relative_velocity</definition>
        <argsstring>() const</argsstring>
        <name>calculate_relative_velocity</name>
        <qualifiedname>IRockyContact::calculate_relative_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method will calculate the relative velocity vector at the contact point.</title><para>This relative velocity is defined as the difference between the velocities of points located at the <emphasis>home</emphasis> particle and the <emphasis>near</emphasis> particle or geometry, both coincident instantaneously with the contact point.</para>
</simplesect>
<simplesect kind="attention"><para>Since this calculation can be costly, modules that need values of this relative velocity may alternatively enable the storage of its normal and tangential components. These components are calculated internally by Rocky during the contact force calculation stage, but discarded afterwards. However, by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1a30a72264168db13de798df7cdff440c5" kindref="member">IRockyContactScalarsModel::enable_storage_normal_relative_velocity</ref></computeroutput> and <computeroutput><ref refid="structIRockyContactScalarsModel_1ad8ba6db25bce594fbb62b415b0634a95" kindref="member">IRockyContactScalarsModel::enable_storage_tangential_relative_velocity</ref></computeroutput> methods, a module can activate the storage of those components in order to make them available at any point during a time iteration. <linebreak/>
</para>
</simplesect>
<simplesect kind="return"><para>The current relative velocity vector between two contacting particles or a particle and a geometry, at the contact point. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="358" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="705" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a6e335a5d032dded094c6b36ad5ea23c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_restitution_coefficient</definition>
        <argsstring>() const</argsstring>
        <name>get_restitution_coefficient</name>
        <qualifiedname>IRockyContact::get_restitution_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the coefficient of restitution associated to the contact. If the restitution coefficient is a variable property specified by a custom module, this method will return that value. Otherwise, it will return the value set through the Rocky UI for the corresponding material interaction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="366" column="24" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="807" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1ad5f45118ba3d4bdedd2194640fc4c79d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContact::set_restitution_coefficient</definition>
        <argsstring>(double value)</argsstring>
        <name>set_restitution_coefficient</name>
        <qualifiedname>IRockyContact::set_restitution_coefficient</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the coefficient of restitution for a collision. </title><para>It can be used only if the coefficient of restitution was defined as a variable property in the module&apos;s specification file. It is important to note that the value of the restitution coefficient must be set at the beginning of a contact, before the stage of contact forces calculation. Otherwise, the value set by this method will not be used in that calculation, causing unphysical behavior in the collisions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the coefficient of restitution that must be used in the contact. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="379" column="22" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="812" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a00daba07ec1b0b1df0be1e8d761a408e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_dynamic_friction_coefficient</definition>
        <argsstring>() const</argsstring>
        <name>get_dynamic_friction_coefficient</name>
        <qualifiedname>IRockyContact::get_dynamic_friction_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the coefficient of dynamic or kinetic friction associated to the contact. If this coefficient is defined as a variable property and its value is specified by a custom module, this method will return that value. Otherwise, it will return the value set through the Rocky UI for the corresponding material interaction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="387" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="787" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1aaa4594d0c921983edc1d1033661c6500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContact::set_dynamic_friction_coefficient</definition>
        <argsstring>(double value)</argsstring>
        <name>set_dynamic_friction_coefficient</name>
        <qualifiedname>IRockyContact::set_dynamic_friction_coefficient</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the coefficient of dynamic friction at a frictional</title><para>contact. It can be used only if that coefficient was defined as a variable property in the module&apos;s specification file. It is important to note that the value of this coefficient must be set at the beginning of a contact, before the stage of contact forces calculation. Otherwise, the value set by this method will not be used in that calculation, causing undefined behavior in the collisions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the coefficient of dynamic friction that must be used in the contact. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="400" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="797" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a9b6c747c62166e351d363d693e18c46a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_static_friction_coefficient</definition>
        <argsstring>() const</argsstring>
        <name>get_static_friction_coefficient</name>
        <qualifiedname>IRockyContact::get_static_friction_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the coefficient of static friction associated to the contact. If this coefficient is defined as a variable property and its value is specified by a custom module, this method will return that value. Otherwise, it will return the value set through the Rocky UI for the corresponding material interaction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="408" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="792" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a5a3233239461058a2f33a9f49494666c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContact::set_static_friction_coefficient</definition>
        <argsstring>(double value)</argsstring>
        <name>set_static_friction_coefficient</name>
        <qualifiedname>IRockyContact::set_static_friction_coefficient</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the coefficient of static friction at a frictional contact. </title><para>It can be used only if that coefficient was defined as a variable property in the module&apos;s specification file. It is important to note that the value of this coefficient must be set at the beginning of a contact, before the stage of contact forces calculation. Otherwise, the value set by this method will not be used in that calculation, causing unphysical behavior in the collisions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the coefficient of static friction that must be used in the contact. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="421" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="802" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1afe041153be8e43d3e5d7c7a500a49501" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_sliding_distance</definition>
        <argsstring>() const</argsstring>
        <name>get_sliding_distance</name>
        <qualifiedname>IRockyContact::get_sliding_distance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the sliding distance calculated during the most recent simulation timestep. The value of this distance will be available only if its storage was enabled during the setup of the module by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1a8e8fb75a47341a734ee04707a58f658f" kindref="member">IRockyContactScalarsModel::enable_storage_sliding_distance</ref></computeroutput> method. A segmentation fault will occur otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="430" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="817" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a1acfe6d4f8e36c9fd417a658aac1c041" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyContact::get_is_sliding_marker</definition>
        <argsstring>() const</argsstring>
        <name>get_is_sliding_marker</name>
        <qualifiedname>IRockyContact::get_is_sliding_marker</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the sliding marker registered during the most recent calculation of the tangential component of the contact force. This value will be available only if its storage was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1a2a383fbe3de38c7aab855c0b775a293b" kindref="member">IRockyContactScalarsModel::enable_storage_is_sliding_marker</ref></computeroutput> method. A segmentation fault will occur otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="439" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="822" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a379476b7b01576be8fc0eb3f0dde7a1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_normal_relative_velocity</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_relative_velocity</name>
        <qualifiedname>IRockyContact::get_normal_relative_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the normal component of the contact&apos;s relative velocity calculated during the last contact force calculation stage executed. This value will be available only if its storage was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1a30a72264168db13de798df7cdff440c5" kindref="member">IRockyContactScalarsModel::enable_storage_normal_relative_velocity</ref></computeroutput> method. A segmentation fault will occur otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="448" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="827" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a9fab3f0e6f78ea64e96209fbbd540b85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::get_tangential_relative_velocity</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_relative_velocity</name>
        <qualifiedname>IRockyContact::get_tangential_relative_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the tangential component of the contact&apos;s relative velocity calculated during the last contact force calculation stage executed. This value will be available only if its storage was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1ad8ba6db25bce594fbb62b415b0634a95" kindref="member">IRockyContactScalarsModel::enable_storage_tangential_relative_velocity</ref></computeroutput> method. A segmentation fault will occur otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="457" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="832" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a21587a9de6f69f4af1d215c3879fca66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContact::get_normal_adhesion_force</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_adhesion_force</name>
        <qualifiedname>IRockyContact::get_normal_adhesion_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the normal component of the adhesion force calculated during the last adhesion force calculation stage executed. This value will be available only if its storage was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1a0b773628077520e21f189ab64b8b1e69" kindref="member">IRockyContactScalarsModel::enable_storage_normal_adhesion_force</ref></computeroutput> method. A segmentation fault will occur otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="466" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="837" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a20d7ffad55e1c1c28c848eb3b09c41f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::get_tangential_adhesion_force</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_adhesion_force</name>
        <qualifiedname>IRockyContact::get_tangential_adhesion_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the tangential component of the adhesion force calculated during the last adhesion force calculation stage executed. This value will be available only if its storage was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1ab390c75dee689878d04d1db89be3fb95" kindref="member">IRockyContactScalarsModel::enable_storage_tangential_adhesion_force</ref></computeroutput> method. A segmentation fault will occur otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="475" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="842" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1afa684887b3dcfad056850ccfdf399ec3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::get_previous_normal_vector</definition>
        <argsstring>() const</argsstring>
        <name>get_previous_normal_vector</name>
        <qualifiedname>IRockyContact::get_previous_normal_vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the contact&apos;s normal unit vector recorded during the previous time iteration. This value will be available only if its automatic storage was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1a36a468305e9a49ba36de61846260c1f1" kindref="member">IRockyContactScalarsModel::enable_storage_previous_normal_vector</ref></computeroutput> method. A segmentation fault will occur otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="483" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="771" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a4d10fc8ec36500e0a8f6673f3e7628fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContact::get_previous_moment_vector</definition>
        <argsstring>() const</argsstring>
        <name>get_previous_moment_vector</name>
        <qualifiedname>IRockyContact::get_previous_moment_vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value the previous rolling resistance moment stored by a custom module that implements a custom rolling resistance model. This moment will be available only if a corresponding scalar was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1ab2927b1c13fc4325a5bd28ba97e15230" kindref="member">IRockyContactScalarsModel::enable_previous_moment_vector</ref></computeroutput> method and the module explicitly stored its value in the previous iteration, by using the <computeroutput><ref refid="structIRockyContact_1a302215189897e9ad39f8d7a3ff571d6c" kindref="member">IRockyContact::set_previous_moment_vector</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="493" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="776" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContact_1a302215189897e9ad39f8d7a3ff571d6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContact::set_previous_moment_vector</definition>
        <argsstring>(double3 value)</argsstring>
        <name>set_previous_moment_vector</name>
        <qualifiedname>IRockyContact::set_previous_moment_vector</qualifiedname>
        <param>
          <type>double3</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method allows a module implementing a custom rolling resistance model</title><para>to store the value of the rolling resistance moment for availability in the next time iteration. It can be used only if the corresponding contact scalar was enabled by using the <computeroutput><ref refid="structIRockyContactScalarsModel_1ab2927b1c13fc4325a5bd28ba97e15230" kindref="member">IRockyContactScalarsModel::enable_previous_moment_vector</ref></computeroutput> method. The difference of the contact scalar that stores this moment in relation to a regular contact scalar is that the orientation of the stored vector is always preserved, regardless of possible internal changes in the topology of the contact.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the rolling resistance moment just calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="507" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="781" bodyend="784"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structIRockyContact" kindref="compound">IRockyContact</ref></computeroutput> is an interface for the internal contact object in Rocky. A contact object is the code representation of the relationship between two particles or between a particle and a geometry triangle that have a force interaction at a given time. In the first case, it will be a <emphasis>particle-to-particle contact</emphasis> (sometimes abbreviated to particle-contact), whereas in the latter case, it will be a <emphasis>particle-to-triangle contact</emphasis> (sometimes abbreviated to triangle-contact).</para>
<para>A contact in which there exists an actual overlap between the entities is referred to as a <emphasis>frictional contact</emphasis>. If an adhesive model is active, an adhesive force might exist even if the entities are not physically touching each other. In that case, an <emphasis>adhesive contact</emphasis> will be established between those entities.</para>
<para>In a particle-to-particle contact, one of the particles is identified as <emphasis>home</emphasis> particle, whereas the other is identified as <emphasis>near</emphasis> particle. There is no special rule for labeling particles in this type of contacts, any of the two particles can be labeled as <emphasis>home</emphasis> or <emphasis>near</emphasis>. On the other hand, in a particle-to-triangle contact, the particle is always referred to as <emphasis>home</emphasis> particle, while the triangle is referred to as <emphasis>near</emphasis> triangle. Whenever it is necessary to distinguish between two contacting entities, the prefixes <emphasis>home</emphasis> and <emphasis>near</emphasis> are used in the associated method names. The normal unit vector associated to a contact is always constructed pointing to the home particle.</para>
<para>Contact scalars are special variables that store values per contact that are preserved between time iterations. The preservation of those values is guaranteed during the whole lifetime of a contact. Internally, contact scalars are stored separately for particle-to-particle contacts and for particle-to-triangle contacts. In order to differentiate them, the former are named <emphasis>particle contact scalars</emphasis>, whereas the latter are named <emphasis>triangle contact scalars</emphasis> </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_contact_api.hpp" line="46" column="1" bodyfile="source/c++/rocky20/api/rocky_contact_api.hpp" bodystart="47" bodyend="513"/>
    <listofallmembers>
      <member refid="structIRockyContact_1af05c086a0b75c761b13fa744061789e4" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>calculate_relative_velocity</name></member>
      <member refid="structIRockyContact_1aafeae8748cf36743d08f4570b198f001" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_contact_position</name></member>
      <member refid="structIRockyContact_1a6cc48e3759e515587e236d283d904f00" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_current_time</name></member>
      <member refid="structIRockyContact_1a00daba07ec1b0b1df0be1e8d761a408e" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_dynamic_friction_coefficient</name></member>
      <member refid="structIRockyContact_1ae4f9b67c0a4577089b37854e9fa5fe9b" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_equivalent_mass</name></member>
      <member refid="structIRockyContact_1a473c87b27145d22e24f15e67ab160d89" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_equivalent_radius</name></member>
      <member refid="structIRockyContact_1aa373c6f200518285d6bb85817d12ccae" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_equivalent_stiffness</name></member>
      <member refid="structIRockyContact_1ae1890c831f2bb90143d3459352dee316" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_home_material</name></member>
      <member refid="structIRockyContact_1aed9e6fcfa92276bc514e21564f0603fb" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_home_particle</name></member>
      <member refid="structIRockyContact_1a2cd1c1e40befd0cf6910d663432c3695" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_home_particle_group_index</name></member>
      <member refid="structIRockyContact_1a1816640d165bb54d339ee9aaf2873046" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_home_stiffness</name></member>
      <member refid="structIRockyContact_1aff778f8122d9ea2f81da59e1ff279b45" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_home_stiffness_fraction</name></member>
      <member refid="structIRockyContact_1a1acfe6d4f8e36c9fd417a658aac1c041" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_is_sliding_marker</name></member>
      <member refid="structIRockyContact_1aff52effeb3fe2a5015ac05022df63731" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_material_interaction</name></member>
      <member refid="structIRockyContact_1ab05070dcc53936225c506abfc2645ff4" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_material_interaction_index</name></member>
      <member refid="structIRockyContact_1a3f551f05cfe40b8c6b95b3df8a311ca4" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_near_geometry_index</name></member>
      <member refid="structIRockyContact_1a8ec1a085944bc63f455c4007531aea61" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_near_material</name></member>
      <member refid="structIRockyContact_1a6c85a39640365d283d22437792c51f0f" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_near_particle</name></member>
      <member refid="structIRockyContact_1a244d24fa1cc78a23d6f4553d5797ab0b" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_near_particle_group_index</name></member>
      <member refid="structIRockyContact_1aa49e3ddd3916fabf25a90e8fefb5cc4c" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_near_stiffness</name></member>
      <member refid="structIRockyContact_1aa2479a695d48de98b5caf29d52134b8a" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_near_triangle</name></member>
      <member refid="structIRockyContact_1a21587a9de6f69f4af1d215c3879fca66" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_normal_adhesion_force</name></member>
      <member refid="structIRockyContact_1a9e085d9bb5684b5d34c33525bb1d021c" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_normal_contact_force</name></member>
      <member refid="structIRockyContact_1a379476b7b01576be8fc0eb3f0dde7a1e" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_normal_relative_velocity</name></member>
      <member refid="structIRockyContact_1a04a9d6e5ba1478bc00d4955bcaa1a2fd" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_normal_unit_vector</name></member>
      <member refid="structIRockyContact_1a26aef3fac3655fe686283be4bd2fe7f0" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_overlap</name></member>
      <member refid="structIRockyContact_1af937221f53319cd4a30871829e3cc7e0" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_particle_contact_scalars</name></member>
      <member refid="structIRockyContact_1a4d10fc8ec36500e0a8f6673f3e7628fd" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_previous_moment_vector</name></member>
      <member refid="structIRockyContact_1afa684887b3dcfad056850ccfdf399ec3" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_previous_normal_vector</name></member>
      <member refid="structIRockyContact_1ab6c8fca161c75cf870eb059f9ed3b11c" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_previous_overlap</name></member>
      <member refid="structIRockyContact_1acc8512372077732bfe12aa3483f2e35b" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_reduced_young_modulus</name></member>
      <member refid="structIRockyContact_1a6e335a5d032dded094c6b36ad5ea23c1" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_restitution_coefficient</name></member>
      <member refid="structIRockyContact_1ad0940d0dcefd839aaba3770689a034bb" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_scale_factor</name></member>
      <member refid="structIRockyContact_1afe041153be8e43d3e5d7c7a500a49501" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_sliding_distance</name></member>
      <member refid="structIRockyContact_1a9b6c747c62166e351d363d693e18c46a" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_static_friction_coefficient</name></member>
      <member refid="structIRockyContact_1a20d7ffad55e1c1c28c848eb3b09c41f2" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_tangential_adhesion_force</name></member>
      <member refid="structIRockyContact_1aca5aae0a4d0c2033bbad4da067657704" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_tangential_contact_force</name></member>
      <member refid="structIRockyContact_1a9fab3f0e6f78ea64e96209fbbd540b85" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_tangential_relative_velocity</name></member>
      <member refid="structIRockyContact_1a4cc9eb65e78d4eb4cbe34bb7c7baf85d" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_timestep</name></member>
      <member refid="structIRockyContact_1ab14e84d2a580a95b2fbcb3d1f5c92a25" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>get_triangle_contact_scalars</name></member>
      <member refid="structIRockyContact_1a46453e5b227065edb55c7b67177584f9" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>is_adhesive</name></member>
      <member refid="structIRockyContact_1ae83dc410da7f54a0badbfb0c75fdaa4b" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>is_frictional</name></member>
      <member refid="structIRockyContact_1a395c9be7e50adea7317a808279faec0c" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>is_loading</name></member>
      <member refid="structIRockyContact_1a0a27611118aab7a27fb6c1e53939cba1" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>is_particle_particle_contact</name></member>
      <member refid="structIRockyContact_1a9de7fba112ea033f15e8ee1fb0305960" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>is_particle_triangle_contact</name></member>
      <member refid="structIRockyContact_1a79c5a7fb09b962d62eefe61f27cddcd7" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>is_positive_oriented</name></member>
      <member refid="structIRockyContact_1abe5cd05335fe5264bc05d9808b23a9fe" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>is_unloading</name></member>
      <member refid="structIRockyContact_1a52439d8dd07c36c9475eb248d7dcb38e" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>just_finished_adhesive</name></member>
      <member refid="structIRockyContact_1afbda49c86a367e9a4f20492ff5007333" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>just_finished_frictional</name></member>
      <member refid="structIRockyContact_1a33e06ba2b8ca80ff15946ac27885dbd7" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>just_started_adhesive</name></member>
      <member refid="structIRockyContact_1ab280ec2c5bc3fe90ca4822939514d3b5" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>just_started_frictional</name></member>
      <member refid="structIRockyContact_1aaa4594d0c921983edc1d1033661c6500" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>set_dynamic_friction_coefficient</name></member>
      <member refid="structIRockyContact_1a302215189897e9ad39f8d7a3ff571d6c" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>set_previous_moment_vector</name></member>
      <member refid="structIRockyContact_1ad5f45118ba3d4bdedd2194640fc4c79d" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>set_restitution_coefficient</name></member>
      <member refid="structIRockyContact_1a5a3233239461058a2f33a9f49494666c" prot="public" virt="non-virtual"><scope>IRockyContact</scope><name>set_static_friction_coefficient</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
