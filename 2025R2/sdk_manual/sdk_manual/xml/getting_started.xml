<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="getting_started" kind="page">
    <compoundname>getting_started</compoundname>
    <title>Getting started</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="getting_started_1md_docs_2sdk__manual_2getting__started"/></para>
<para>The Rocky Solver SDK is supported for the following operating systems:</para>
<para><itemizedlist>
<listitem><para>Windows 10 64-bit</para>
</listitem><listitem><para>Rocky Linux 8 Linux 64-bit</para>
</listitem></itemizedlist>
</para>
<para>This manual assumes that your system is one of the above and Rocky can perform a simulation successfully in this system.</para>
<para><emphasis>Note: Refer to the <ulink url="https://ansyshelp.ansys.com/account/secured?returnurl=/Views/Secured/prod_page.html?pn=Rocky&amp;pid=rockydem&amp;lang=en">Rocky User Manual</ulink> or search on the Rocky support channels if you were unable to run Rocky.</emphasis></para>
<para>The Rocky Solver SDK package for both supported operating systems can be downloaded from Ansys Customer Portal.</para>
<para>It is assumed that users of the Rocky Solver SDK have basic knowledge of the C++ and Python programming languages.</para>
<sect2 id="getting_started_1autotoc_md7">
<title>Prerequisites for Linux</title><para>Unzip the Rocky Solver SDK for Linux in a folder of your choice. Set the environment variable <computeroutput>RockySDK_DIR</computeroutput> with the location of the unzipped <computeroutput>sdk</computeroutput> subdirectory.</para>
<para>The version of the Rocky Solver SDK is identified in the name of its zip file. It is paramount that you install a Rocky Solver SDK of the same version as the Rocky application upon which your module is designed to run.</para>
<para><emphasis>Note: The version of Rocky can be discovered by choosing Help → About in the application menus.</emphasis></para>
<para>Install the <ref refid="glossary_1cuda" kindref="member">CUDA</ref> toolkit 12.8.0 for x86_64 Rocky Linux 8. Set the environment variable <computeroutput>CUDA_PATH_V12_8</computeroutput> with the location of the installed CUDA toolkit. Example: <computeroutput>CUDA_PATH_V12_8=/usr/local/cuda-12.8/</computeroutput>.</para>
</sect2>
<sect2 id="getting_started_1autotoc_md8">
<title>Build tools - Linux</title><para>Install Miniforge 3 for Linux 64-bit, then, activate a conda prompt and install the following packages:</para>
<para><itemizedlist>
<listitem><para>make</para>
</listitem><listitem><para>cmake</para>
</listitem><listitem><para>&quot;gxx_linux-64&gt;=13,&lt;14&quot;</para>
</listitem></itemizedlist>
</para>
<para>The conda prompt now contains a minimum set of tools required to build Rocky modules.</para>
</sect2>
<sect2 id="getting_started_1autotoc_md9">
<title>Prerequisites for Windows 10</title><para>Unzip the Rocky SDK for Windows in a folder of your choice. Set the environment variable <computeroutput>RockySDK_DIR</computeroutput> with the location of the unzipped <computeroutput>sdk</computeroutput> subdirectory.</para>
<para>The version of the Rocky SDK is identified in the name of its zip file. It is paramount that you install a Rocky SDK of the same version as the Rocky application upon which your module is designed to run.</para>
<para><emphasis>Note: The version of Rocky can be discovered by choosing Help → About in the application menus.</emphasis></para>
<para>Install <ref refid="glossary_1cuda" kindref="member">CUDA</ref> toolkit 12.8.0 for Windows 10. Set the environment variable <computeroutput>CUDA_PATH_V12_8</computeroutput> with the location of the CUDA toolkit. Example: <computeroutput>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8</computeroutput>. Ensure that the Visual Studio Integration is enabled during the installation of the CUDA Toolkit.</para>
<para>After installing the CUDA Toolkit, copy the contents of the <computeroutput>MSBuildExtensions</computeroutput> directory from the CUDA Toolkit installation to the <computeroutput>BuildCustomizations</computeroutput> directory in your Microsoft Visual Studio installation. This can be done by opening a PowerShell window and running the following command: <programlisting><codeline><highlight class="normal">cp<sp/>&quot;C:\Program<sp/>Files\NVIDIA<sp/>GPU<sp/>Computing<sp/>Toolkit\CUDA\v12.8\extras\visual_studio_integration\MSBuildExtensions\*&quot;<sp/>&quot;C:\Program<sp/>Files<sp/>(x86)\Microsoft<sp/>Visual<sp/>Studio\2022\BuildTools\MSBuild\Microsoft\VC\v170\BuildCustomizations&quot;<sp/>-r<sp/>-force</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="getting_started_1autotoc_md10">
<title>Build tools - Windows</title><para>Install Visual Studio Build Tools 2022, version 17.6.17.</para>
<para>You can obtain the URL for this specific version by clicking the &quot;Build Tools&quot; link in the corresponding row of the <bold>Fixed Version Bootstrappers</bold> table at the following link:</para>
<para><ulink url="https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-history#fixed-version-bootstrappers">https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-history#fixed-version-bootstrappers</ulink></para>
<para>Be sure to install the <computeroutput>Desktop development with C++</computeroutput> workload with at least the following components:</para>
<para><itemizedlist>
<listitem><para>VC++ 2022 version latest tools</para>
</listitem><listitem><para>Windows 10 SDK</para>
</listitem><listitem><para>Visual C++ tools for CMake </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <location file="docs/sdk_manual/getting_started.md"/>
  </compounddef>
</doxygen>
