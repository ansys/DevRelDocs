<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyContactOutputData" kind="struct" language="C++" prot="public">
    <compoundname>IRockyContactOutputData</compoundname>
    <includes refid="rocky__contact__output__data__api_8hpp" local="no">rocky_contact_output_data_api.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyContactOutputData_1a396b63164b3e2d7792bca3c7ba1ae274" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_normal_force</definition>
        <argsstring>(double value)</argsstring>
        <name>set_normal_force</name>
        <qualifiedname>IRockyContactOutputData::set_normal_force</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the normal component of the contact force calculated by a custom</title><para>contact model. Rocky will sum this force to both entities associated to the contact (two particles or a particle and a geometry triangle) using the appropriate signs. This method is intended to be called from <computeroutput>ROCKY_PLUGIN_NORMAL_FORCE_ON_CONTACTS</computeroutput>, since this hook is meant to be used to calculate and set the normal force component for the contact. Using it outside this hook can lead to undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The normal component of the contact force just calculated using a custom model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="52" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1abaf1043a614caad9555e2c909eb21e12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_tangential_force</definition>
        <argsstring>(double3 value)</argsstring>
        <name>set_tangential_force</name>
        <qualifiedname>IRockyContactOutputData::set_tangential_force</qualifiedname>
        <param>
          <type>double3</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the tangential component of the contact force calculated by a</title><para>custom contact model. Rocky will sum this force to both entities associated to the contact (two particles or a particle and a geometry triangle) using the appropriate signs. This method is intended to be called from <computeroutput>ROCKY_PLUGIN_TANGENTIAL_FORCE_ON_CONTACTS</computeroutput>, since this hook is meant to be used to calculate and set the tangential force component for the contact. Using it outside this hook can lead to undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The tangential component of the contact force just calculated using a custom model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="66" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1a6fa45c11ca5a3dc0e2e7ba76cceca590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_home_impact_energy</definition>
        <argsstring>(double value)</argsstring>
        <name>set_home_impact_energy</name>
        <qualifiedname>IRockyContactOutputData::set_home_impact_energy</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method must be used if users want to specify an impact energy obtained by means of a</title><para>special calculation scheme, different from the one defined in the DEM Technical Manual. The impact energy value specified by this method for the home particle will be used in Rocky for processing instantaneous breakage, energy spectra and collision statistics. In the specific case of instantaneous breakage, Rocky will sum the impact energies from all contacts associated to a particle in order to quantify the damage on the particle. This method is intended to be called from <computeroutput>ROCKY_PLUGIN_IMPACT_ENERGY_ON_CONTACTS</computeroutput>, since this hook is the one designed for calculating and setting the impact energy values. Using it outside this hook can lead to undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The impact energy for the home particle just calculated using a custom model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="83" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1afaf9777156ccff17bad6b754bd9ec0e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_near_impact_energy</definition>
        <argsstring>(double value)</argsstring>
        <name>set_near_impact_energy</name>
        <qualifiedname>IRockyContactOutputData::set_near_impact_energy</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method must be used if users want to specify an impact energy obtained by means of a</title><para>special calculation scheme, different from the one defined in the DEM Technical Manual. The impact energy value specified by this method for the near particle will be used in Rocky for processing instantaneous breakage, energy spectra and collision statistics. In the specific case of instantaneous breakage, Rocky will sum the impact energies from all contacts associated to a particle in order to quantify the damage on the particle. This method is intended to be called from <computeroutput>ROCKY_PLUGIN_IMPACT_ENERGY_ON_CONTACTS</computeroutput>, since this hook is the one designed for calculating and setting the impact energy values. Using it outside this hook can lead to undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The impact energy for the near particle just calculated using a custom model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="101" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1ae0f380ec4f65945e54d4e3b939116979" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_sliding</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_sliding</name>
        <qualifiedname>IRockyContactOutputData::set_sliding</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method must be used by a module implementing a custom tangential</title><para>contact force model as it specifies whether the particles (or the particle and the triangle) involved in the contact are sliding on each other. This method is intended to be called from <computeroutput>ROCKY_PLUGIN_TANGENTIAL_FORCE_ON_CONTACTS</computeroutput>, since this hook is meant to be used to calculate and set the tangential force component for the contact. Using it outside this hook can lead to undefined behavior. Not defining the sliding status of the contact inside the hook can also lead to unexpected results.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The sliding status of the contact just calculated using a custom contact model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="118" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1a4016d11738ce592f4e0b2853c552db13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_home_moment</definition>
        <argsstring>(double3 value)</argsstring>
        <name>set_home_moment</name>
        <qualifiedname>IRockyContactOutputData::set_home_moment</qualifiedname>
        <param>
          <type>double3</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the rolling resistance moment that must be applied to the</title><para>particle labeled as <emphasis>home</emphasis> particle at a contact. This method is intended to be called from <computeroutput>ROCKY_PLUGIN_ROLLING_RESISTANCE_ON_CONTACTS</computeroutput>, as this hook is designed specifically to be used by a module implementing a custom rolling resistance model, to calculate and set the rolling resistance moments acting on the particles at a contact. Using this method outside that hook can lead to undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The rolling resistance moment vector acting over the home particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="131" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1a7eea9b368237f35e06d1e3381fef9a13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_near_moment</definition>
        <argsstring>(double3 value)</argsstring>
        <name>set_near_moment</name>
        <qualifiedname>IRockyContactOutputData::set_near_moment</qualifiedname>
        <param>
          <type>double3</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the rolling resistance moment that must be applied to the</title><para>particle labeled as <emphasis>near</emphasis> particle at a particle-to-particle contact. This method is intended to be called from <computeroutput>ROCKY_PLUGIN_ROLLING_RESISTANCE_ON_CONTACTS</computeroutput>, as this hook is designed specifically to be used by a module implementing a custom rolling resistance model, to calculate and set the rolling resistance moments acting on the particles at a contact. Using this method outside that hook can lead to undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The rolling resistance moment vector acting over the near particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="145" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1ad957c62e9c6bb92c8e13ef28ea8e0a3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyContactOutputData::set_rolling_dissipated_power</definition>
        <argsstring>(double value)</argsstring>
        <name>set_rolling_dissipated_power</name>
        <qualifiedname>IRockyContactOutputData::set_rolling_dissipated_power</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the value of the instantaneous power dissipated at a contact, due</title><para>to the action of the rolling resistance moments calculated by a custom rolling resistance model. The value of this power will be used exclusively by collision statistics and energy spectra modules, if they are active in a simulation. Because of that, the use of this method by a module implementing such a rolling resistance model is optional. If a power value is not provided and the aforementioned statistics modules need it, the Rocky solver will calculate it using a first-order accurate approximation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The instantaneous power dissipated at a contact by rolling resistance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="159" column="26" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="263" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1adfb7782976874a10981521e52742a015" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContactOutputData::get_normal_force</definition>
        <argsstring>()</argsstring>
        <name>get_normal_force</name>
        <qualifiedname>IRockyContactOutputData::get_normal_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The normal component of the contact force calculated during the current iteration. This method is intended to be called after the normal force is calculated from the contact model pipeline (<computeroutput>ROCKY_PLUGIN_NORMAL_FORCE_ON_CONTACTS</computeroutput> in a custom implementation). If called before the moment when the normal force is set for the current contact in the current iteration, the value returned is undetermined.</para>
</simplesect>
<simplesect kind="attention"><para>Note that the value returned by this method may differ from the value returned by <computeroutput><ref refid="structIRockyContact_1a9e085d9bb5684b5d34c33525bb1d021c" kindref="member">IRockyContact::get_normal_contact_force</ref></computeroutput>, as the latter returns the current normal force value in memory, which is usually zero (for new contacts) or the value calculated in the last normal force step for this contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="178" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1a25aeef724bbfb9eb24d8297df024f208" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContactOutputData::get_tangential_force</definition>
        <argsstring>()</argsstring>
        <name>get_tangential_force</name>
        <qualifiedname>IRockyContactOutputData::get_tangential_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The tangential component of the contact force calculated at the current iteration as a vector in Cartesian coordinates. This method is intended to be called after the tangential force calculation step from the contact model pipeline (<computeroutput>ROCKY_PLUGIN_TANGENTIAL_FORCE_ON_CONTACTS</computeroutput> in a custom implementation). If called before the moment when the tangential force is set for the current contact in the current iteration, the value returned is undetermined.</para>
</simplesect>
<simplesect kind="attention"><para>Note that the value returned from this method may differ from the value returned by <computeroutput><ref refid="structIRockyContact_1aca5aae0a4d0c2033bbad4da067657704" kindref="member">IRockyContact::get_tangential_contact_force</ref></computeroutput>, as the latter returns the current tangential force vector in memory, which is usually zero (for new contacts) or the value calculated in the last tangential force step for this contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="197" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1adb3a62ea0f7da835ebeec3ec48d72214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyContactOutputData::get_normal_relative_velocity</definition>
        <argsstring>()</argsstring>
        <name>get_normal_relative_velocity</name>
        <qualifiedname>IRockyContactOutputData::get_normal_relative_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The normal component of the relative velocity at the contact point. This relative velocity is defined as the difference between the absolute velocities of points on the home particle and the near particle or boundary that instantaneously coincide with the contact point. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="206" column="28" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactOutputData_1aff6677ca9cfa1f58ae87e308d7b19286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyContactOutputData::get_tangential_relative_velocity</definition>
        <argsstring>()</argsstring>
        <name>get_tangential_relative_velocity</name>
        <qualifiedname>IRockyContactOutputData::get_tangential_relative_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The tangential component of the relative velocity at the contact point. This relative velocity is defined as the difference between the absolute velocities of points on the home particle and the near particle or boundary that instantaneously coincide with the contact point. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="214" column="29" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structIRockyContactOutputData" kindref="compound">IRockyContactOutputData</ref></computeroutput> is an interface to define some property values related to a contact, which are needed during the calculation steps of a custom contact model. The values defined through this interface can include normal and tangential forces, and impact energy.</para>
<para>Each <computeroutput>set</computeroutput> method present in this interface is intended to be used at a different calculation step of the contact model:</para>
<para><itemizedlist>
<listitem><para>Normal contact force calculation within the code associated to the <linebreak/>
 <computeroutput>ROCKY_PLUGIN_NORMAL_FORCE_ON_CONTACTS</computeroutput> hook:<itemizedlist>
<listitem><para><computeroutput><ref refid="structIRockyContactOutputData_1a396b63164b3e2d7792bca3c7ba1ae274" kindref="member">IRockyContactOutputData::set_normal_force</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Tangential contact force calculation within the code associated to the <linebreak/>
 <computeroutput>ROCKY_PLUGIN_TANGENTIAL_FORCE_ON_CONTACTS</computeroutput> hook:<itemizedlist>
<listitem><para><computeroutput><ref refid="structIRockyContactOutputData_1abaf1043a614caad9555e2c909eb21e12" kindref="member">IRockyContactOutputData::set_tangential_force</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="structIRockyContactOutputData_1ae0f380ec4f65945e54d4e3b939116979" kindref="member">IRockyContactOutputData::set_sliding</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Impact energy calculation within the code associated to the <linebreak/>
 <computeroutput>ROCKY_PLUGIN_IMPACT_ENERGY_ON_CONTACTS</computeroutput> hook:<itemizedlist>
<listitem><para><computeroutput><ref refid="structIRockyContactOutputData_1a6fa45c11ca5a3dc0e2e7ba76cceca590" kindref="member">IRockyContactOutputData::set_home_impact_energy</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="structIRockyContactOutputData_1afaf9777156ccff17bad6b754bd9ec0e2" kindref="member">IRockyContactOutputData::set_near_impact_energy</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>It is mandatory that the values of the properties above be defined in the respective method. If not defined, the behavior of the particles during the simulation can become indeterminate. Please refer to the individual methods&apos; documentation for further details about each of them. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" line="37" column="1" bodyfile="source/c++/rocky20/api/rocky_contact_output_data_api.hpp" bodystart="38" bodyend="225"/>
    <listofallmembers>
      <member refid="structIRockyContactOutputData_1adfb7782976874a10981521e52742a015" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>get_normal_force</name></member>
      <member refid="structIRockyContactOutputData_1adb3a62ea0f7da835ebeec3ec48d72214" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>get_normal_relative_velocity</name></member>
      <member refid="structIRockyContactOutputData_1a25aeef724bbfb9eb24d8297df024f208" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>get_tangential_force</name></member>
      <member refid="structIRockyContactOutputData_1aff6677ca9cfa1f58ae87e308d7b19286" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>get_tangential_relative_velocity</name></member>
      <member refid="structIRockyContactOutputData_1a6fa45c11ca5a3dc0e2e7ba76cceca590" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_home_impact_energy</name></member>
      <member refid="structIRockyContactOutputData_1a4016d11738ce592f4e0b2853c552db13" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_home_moment</name></member>
      <member refid="structIRockyContactOutputData_1afaf9777156ccff17bad6b754bd9ec0e2" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_near_impact_energy</name></member>
      <member refid="structIRockyContactOutputData_1a7eea9b368237f35e06d1e3381fef9a13" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_near_moment</name></member>
      <member refid="structIRockyContactOutputData_1a396b63164b3e2d7792bca3c7ba1ae274" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_normal_force</name></member>
      <member refid="structIRockyContactOutputData_1ad957c62e9c6bb92c8e13ef28ea8e0a3d" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_rolling_dissipated_power</name></member>
      <member refid="structIRockyContactOutputData_1ae0f380ec4f65945e54d4e3b939116979" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_sliding</name></member>
      <member refid="structIRockyContactOutputData_1abaf1043a614caad9555e2c909eb21e12" prot="public" virt="non-virtual"><scope>IRockyContactOutputData</scope><name>set_tangential_force</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
