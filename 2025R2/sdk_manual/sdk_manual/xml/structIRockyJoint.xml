<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyJoint" kind="struct" language="C++" prot="public">
    <compoundname>IRockyJoint</compoundname>
    <includes refid="rocky__joint__api_8hpp" local="no">rocky_joint_api.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyJoint_1ab006cbc3b38064611dfa5dae2cbdf672" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_elastic_force</definition>
        <argsstring>() const</argsstring>
        <name>get_elastic_force</name>
        <qualifiedname>IRockyJoint::get_elastic_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the resultant force according to the linear elastic model</title><para>described in the DEM Technical Manual. This is useful when the custom module is going to implement a new model only for joint moments, while using the standard linear elastic model for the joint force. The force provided by this method is defined as positive in relation to the home element, and negative in relation to the near element.</para>
</simplesect>
<simplesect kind="return"><para>A vector in Cartesian coordinates, obtained as the vector sum of the normal and tangential forces, as defined in the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="53" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a3447c9a4ef194097e8c3898b25ebe942" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double3 &gt;</type>
        <definition>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double3 &gt; IRockyJoint::get_moments_due_to_force</definition>
        <argsstring>(double3 force) const</argsstring>
        <name>get_moments_due_to_force</name>
        <qualifiedname>IRockyJoint::get_moments_due_to_force</qualifiedname>
        <param>
          <type>double3</type>
          <declname>force</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the moments of the joint force on the two linked elements.</title><para>As the lever arm of the joint force can be different for the two elements, the corresponding moment on each one of them can have different magnitude. This method must be called always after calculating the joint force.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>The joint force as a vector in Cartesian coordinates.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple of two vectors in Cartesian coordinates, the first one is the moment on the home element, the second one is the moment on the near element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="72" column="19" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a8eeb46a9210aeaf532467ecb77c580e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_elastic_moment</definition>
        <argsstring>() const</argsstring>
        <name>get_elastic_moment</name>
        <qualifiedname>IRockyJoint::get_elastic_moment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the resultant moment according to the linear elastic model</title><para>described in section 3.2.1 of the DEM Technical Manual. This is useful when the custom module is going to implement a new model only for the joint forces, while using the standard linear elastic model for the joint moments. The moment provided by this method is defined as positive in relation to the home element, and negative in relation to the near element.</para>
</simplesect>
<simplesect kind="return"><para>A vector in Cartesian coordinates, obtained as the vector sum of the moments defined in equations 3.5, 3.6 and 3.7 of the DEM Technical Manual. When the flexible particle is a fiber, equation 3.7 is disregarded, because only one bending moment exists in that case. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="95" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a7c2d0b63f577c279227b2df8daffbf5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_damping_force</definition>
        <argsstring>() const</argsstring>
        <name>get_damping_force</name>
        <qualifiedname>IRockyJoint::get_damping_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates a viscous force proportional to the linear deformation</title><para>velocity of the joint. The addition of this force introduces a mechanism of energy dissipation that may help to attenuate internal vibrations between elements in a flexible particle. The force provided by this method is defined as positive in relation to the home element, and negative in relation to the near element.</para>
</simplesect>
<simplesect kind="return"><para>A vector in Cartesian coordinates, obtained as the vector sum of the forces defined in equations 3.18 and 3.19 of the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="115" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a71de79fea3ed20ae451b5cb36d2b6349" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_damping_moment</definition>
        <argsstring>() const</argsstring>
        <name>get_damping_moment</name>
        <qualifiedname>IRockyJoint::get_damping_moment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates a viscous moment proportional to the angular deformation velocity</title><para>of the joint. The addition of this moment introduces a mechanism of energy dissipation that may help to attenuate internal angular oscillations between elements in a flexible particle.</para>
</simplesect>
<simplesect kind="return"><para>A vector in Cartesian coordinates, obtained as the vector sum of the moments defined in equations 3.20, 3.21 and 3.22 of the DEM Technical Manual. When the flexible particle is a fiber, equation 3.22 is disregarded because bending occurs in only one direction in that case. The moment provided by this method is defined as positive in relation to the home element, and negative in relation to the near element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="138" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1add47e1c2a985abef3a9fef24c44902e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_normal_deformation</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_deformation</name>
        <qualifiedname>IRockyJoint::get_normal_deformation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the normal component of the linear deformation of the joint.</title><para>The joint linear deformation is defined as the relative displacement vector between the joint center points in the two linked elements. This vector is oriented pointing from the home element to the near element.</para>
</simplesect>
<simplesect kind="return"><para>A vector in Cartesian coordinates, calculated as the product of the magnitude given and the normal unit vector. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="160" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a3d324dbcee8a4366284a5fb84547dd9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_tangential_deformation</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_deformation</name>
        <qualifiedname>IRockyJoint::get_tangential_deformation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the tangential component of the linear deformation of the joint.</title><para>The joint linear deformation is defined as the relative displacement vector between the joint center points in the two linked elements.</para>
</simplesect>
<simplesect kind="return"><para>A vector in Cartesian coordinates. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="177" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1abd22a485b99c59a2141dff07e6f9b9e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_normal_deformation_velocity</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_deformation_velocity</name>
        <qualifiedname>IRockyJoint::get_normal_deformation_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the normal component of the linear deformation</title><para>velocity of the joint. This velocity is the time derivative of the relative displacement vector between the center points associated to the joint in the two linked elements. The decomposition of this vector into normal and tangential directions is analogous to the one depicted in figure 3.3 of the DEM Technical Manual.</para>
</simplesect>
<simplesect kind="return"><para>The normal component of the linear deformation velocity, expressed in Cartesian coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="198" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a35e3299e0b5a35128aff0ca6f7604e38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_tangential_deformation_velocity</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_deformation_velocity</name>
        <qualifiedname>IRockyJoint::get_tangential_deformation_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the tangential component of the linear deformation</title><para>velocity of the joint. This velocity is the time derivative of the relative displacement vector between the center points associated to the joint in the two linked elements. The decomposition of this vector into normal and tangential directions is analogous to the one depicted in figure 3.3 of the DEM Technical Manual.</para>
</simplesect>
<simplesect kind="return"><para>The tangential component of the linear deformation velocity, expressed in Cartesian coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="219" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a7c84ef4dad6d9e1f38b2d227ac1f083a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyJoint::get_number_angular_deformations</definition>
        <argsstring>() const</argsstring>
        <name>get_number_angular_deformations</name>
        <qualifiedname>IRockyJoint::get_number_angular_deformations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An integer representing the number of possible angular deformations. For joints in a flexible fiber, it will return 2 (torsion and bending), while for joints in the other particle types, it will return 3 (torsion and two bending directions). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="233" column="9" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a46c8b6ca5aa8e78f55cb6c0a70f1cc6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_angular_deformation</definition>
        <argsstring>(int deformation_direction) const</argsstring>
        <name>get_angular_deformation</name>
        <qualifiedname>IRockyJoint::get_angular_deformation</qualifiedname>
        <param>
          <type>int</type>
          <declname>deformation_direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the angular deformation of the joint in one of the</title><para>possible three mutually orthogonal directions. Figure 3.7 of the DEM Technical Manual illustrates those angles and directions for the shell case.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deformation_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer index that identifies the deformation direction. The three possible values for this parameter are: 0 <ndash/> torsion direction, 1 <ndash/> first bending direction, 2 <ndash/> second bending direction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the angle for the given direction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="254" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a1be4ec6e88935d14a4b900d09fdbfadf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_angular_deformation_velocity</definition>
        <argsstring>(int deformation_direction) const</argsstring>
        <name>get_angular_deformation_velocity</name>
        <qualifiedname>IRockyJoint::get_angular_deformation_velocity</qualifiedname>
        <param>
          <type>int</type>
          <declname>deformation_direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the angular deformation velocity of the joint</title><para>in one of the possible three mutually orthogonal directions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deformation_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer index that identifies the deformation direction. The three possible values for this parameter are: 0 <ndash/> torsion, 1 <ndash/> first bending direction, 2 <ndash/> second bending direction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The magnitude of the angular deformation velocity for the given direction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="274" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1ae4c1028eba2077ae552c21aba43ce638" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_angular_deformation_direction</definition>
        <argsstring>(int deformation_direction) const</argsstring>
        <name>get_angular_deformation_direction</name>
        <qualifiedname>IRockyJoint::get_angular_deformation_direction</qualifiedname>
        <param>
          <type>int</type>
          <declname>deformation_direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Returns the unit vector in one of the three mutually orthogonal</title><para>directions that define the joint local framework.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deformation_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer index that identifies the deformation direction. The three possible values for this parameter are: 0 <ndash/> torsion, 1 <ndash/> first bending direction, 2 <ndash/> second bending direction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The unit vector in Cartesian coordinates associated to for the given direction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="294" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a47718a93f4aa6bffe9ef0e03bfff3fa9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_normal_stiffness</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_stiffness</name>
        <qualifiedname>IRockyJoint::get_normal_stiffness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the stiffness value for computing the joint normal</title><para>force according to the linear elastic model. This stiffness can be used as a reference stiffness value for calculating the joint normal force with a custom joint model.</para>
</simplesect>
<simplesect kind="return"><para>The stiffness value calculated. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="315" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a48e95a4cc7245305980339ea8ddf43b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_tangential_stiffness</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_stiffness</name>
        <qualifiedname>IRockyJoint::get_tangential_stiffness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the stiffness value for computing the joint tangential</title><para>force according to the linear elastic model. This stiffness can be used as a reference stiffness value for calculating the joint tangential force with a custom joint model.</para>
</simplesect>
<simplesect kind="return"><para>The stiffness value calculated. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="332" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a299b8659e8bb2ddba28de92d18055e5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_angular_stiffness</definition>
        <argsstring>(int deformation_direction) const</argsstring>
        <name>get_angular_stiffness</name>
        <qualifiedname>IRockyJoint::get_angular_stiffness</qualifiedname>
        <param>
          <type>int</type>
          <declname>deformation_direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the stiffness value for computing a joint moment</title><para>in one of the three orthogonal local directions, according to the linear elastic model. This stiffness can be used as a reference stiffness value for calculating a joint moment with a custom joint model.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deformation_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer index that identifies the deformation direction. The three possible values for this parameter are: 0 <ndash/> torsion, 1 <ndash/> first bending direction, 2 <ndash/> second bending direction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A stiffness value calculated with one of the following equations of the DEM Technical Manual: equation 3.10 if deformation_direction = 0, equation 3.11 if deformation_direction = 1, or equation 3.12 if deformation_direction = 2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="357" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="357" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1ad55375a544cfd11a0c0fb52986b1fc74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_normal_damping_coefficient</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_damping_coefficient</name>
        <qualifiedname>IRockyJoint::get_normal_damping_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the damping coefficient for computing the normal</title><para>component of the viscous force.</para>
</simplesect>
<simplesect kind="return"><para>The damping coefficient calculated. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="375" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a25c86f76033636ab37b3ff19ba60b41a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_tangential_damping_coefficient</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_damping_coefficient</name>
        <qualifiedname>IRockyJoint::get_tangential_damping_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the damping coefficient for computing the tangential</title><para>component of the viscous force.</para>
</simplesect>
<simplesect kind="return"><para>The damping coefficient calculated. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="390" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a83db4989103e17e6158b6e96a030457d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_angular_damping_coefficient</definition>
        <argsstring>(int deformation_direction) const</argsstring>
        <name>get_angular_damping_coefficient</name>
        <qualifiedname>IRockyJoint::get_angular_damping_coefficient</qualifiedname>
        <param>
          <type>int</type>
          <declname>deformation_direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Calculates the damping coefficient for computing a viscous moment</title><para>in one of the three orthogonal local directions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deformation_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer index that identifies the deformation direction. The three possible values for this parameter are: 0 <ndash/> torsion, 1 <ndash/> first bending direction, 2 <ndash/> second bending direction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A damping coefficient calculated with one of the following equations of the DEM Technical Manual: equation 3.25 if deformation_direction = 0, equation 3.26 if deformation_direction = 1, or equation 3.27 if deformation_direction = 2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="413" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="413" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1af300e95bee5d2a332c3085e6fad91af2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_normal_vector</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_vector</name>
        <qualifiedname>IRockyJoint::get_normal_vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The unit normal vector associated to the joint. This vector is defined as indicated in Figure 3.2. It is oriented pointing always to the home element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="432" column="13" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="432" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1af2ea637b5ce30f553c19f973411ef451" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_area</definition>
        <argsstring>() const</argsstring>
        <name>get_area</name>
        <qualifiedname>IRockyJoint::get_area</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The cross sectional area associated to the joint. For fibers, it will be the area of the circular section of the element with smaller diameter between the two connected by the joint. For shells, it will be the area of the rectangle whose dimensions are the shell thickness and the length of the corresponding triangle&apos;s edge. For polyhedra, it will be the area of the triangular face common to the two tetrahedral elements connected by the joint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="446" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="446" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a22573a85d220d9db4afa1b0f67337196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_area_moment_of_inertia</definition>
        <argsstring>(int deformation_direction) const</argsstring>
        <name>get_area_moment_of_inertia</name>
        <qualifiedname>IRockyJoint::get_area_moment_of_inertia</qualifiedname>
        <param>
          <type>int</type>
          <declname>deformation_direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deformation_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer index that identifies the deformation direction. The three possible values for this parameter are: 0 <ndash/> torsion, 1 <ndash/> first bending direction, 2 <ndash/> second bending direction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The area moment of inertia of the cross section of the joint associated to deformation_direction. If deformation_direction = 0, the polar area moment of inertia is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="461" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="461" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a2d57d8f171e77be4e1de3f2eb2b10fb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_young_modulus</definition>
        <argsstring>() const</argsstring>
        <name>get_young_modulus</name>
        <qualifiedname>IRockyJoint::get_young_modulus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the Young&apos;s modulus specified in the Rocky UI for the material associated to the particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="473" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a09693f2837c14dfb1a0fa4d40373553f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_poisson_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_poisson_ratio</name>
        <qualifiedname>IRockyJoint::get_poisson_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the Poisson&apos;s ratio specified in the Rocky UI for the material associated to the particle. If Poisson&apos;s ratio is configured as a variable property (i.e. each particle have a Poisson&apos;s ratio value), then the ratio is the average between home and near elements ratios. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="486" column="35" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="486" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a0912316f01b3785c5f711aad2a3ebde1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_normal_elastic_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_elastic_ratio</name>
        <qualifiedname>IRockyJoint::get_normal_elastic_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>The normal elastic ratio is defined as the ratio between the Young&apos;s modulus</title><para>employed for calculating the stiffness in the normal direction to the Young&apos;s modulus specified for the particle&apos;s material.</para>
</simplesect>
<simplesect kind="return"><para>If the [Anisotropic] option is enabled in the Rocky UI, it will return the value specified for the elastic ratio in the normal direction. Otherwise, it is assumed an isotropic behavior and it will return the value specified for the only elastic ratio that appears in the Rocky UI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="518" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="518" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1aeeae504e7d95c787e088c8dd5a55c83c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_tangential_elastic_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_elastic_ratio</name>
        <qualifiedname>IRockyJoint::get_tangential_elastic_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>The tangential elastic ratio is defined as the ratio between the Young&apos;s modulus</title><para>employed for calculating the stiffness in the tangential direction to the Young&apos;s modulus specified for the particle&apos;s material.</para>
</simplesect>
<simplesect kind="return"><para>If the [Anisotropic] option is enabled in the Rocky UI, it will return the value specified for the elastic ratio in the tangential direction. Otherwise, it is assumed an isotropic behavior and it will return the value specified for the only elastic ratio that appears in the Rocky UI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="536" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="536" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a23fa06ce00c95412142f49e82825bca1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_torsion_elastic_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_torsion_elastic_ratio</name>
        <qualifiedname>IRockyJoint::get_torsion_elastic_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>The torsion elastic ratio is defined as the ratio between the Young&apos;s modulus</title><para>employed for calculating the stiffness for torsional deformations to the Young&apos;s modulus specified for the particle&apos;s material.</para>
</simplesect>
<simplesect kind="return"><para>If the [Anisotropic] option is enabled in the Rocky UI, it will return the value specified for the elastic ratio for torsional deformations. Otherwise, it is assumed an isotropic behavior and it will return the value specified for the only elastic ratio that appears in the Rocky UI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="554" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="554" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a83474e7ee11615ca201de8fec94c8c22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_bending_elastic_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_bending_elastic_ratio</name>
        <qualifiedname>IRockyJoint::get_bending_elastic_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>The bending elastic ratio is defined as the ratio between the Young&apos;s modulus</title><para>employed for calculating the stiffness for bending deformations to the Young&apos;s modulus specified for the particle&apos;s material.</para>
</simplesect>
<simplesect kind="return"><para>If the [Anisotropic] option is enabled in the Rocky UI, it will return the value specified for the elastic ratio for bending deformations. Otherwise, it is assumed an isotropic behavior and it will return the value specified for the only elastic ratio that appears in the Rocky UI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="572" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a997ad60ff60b99d485c1d3d2fce74ff2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_joint_damping_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_joint_damping_ratio</name>
        <qualifiedname>IRockyJoint::get_joint_damping_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the damping ratio specified for the joint, used in the joint damping model. This is a user input parameter with values between 0 and 1, which specifies the intensity of the damping applied to the joints. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="586" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="586" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a200f5da4324981ce63eeca693082ce3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_angle_scaling_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_angle_scaling_factor</name>
        <qualifiedname>IRockyJoint::get_angle_scaling_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>When the number of elements making up a flexible particle is increased,</title><para>the bending deformation angles tend to decrease, for the same configuration of external forces acting on the particle. This is a side effect of the discretized representation of a flexible particle. In order to prevent the abnormal influence of this phenomenon on models that have a bending angle as a parameter (for instance a threshold angle for the change of regime), that angle can be multiplied by the scaling factor provided by this function. This scaling factor is defined as the inverse of the number of elements of the particle, when it is a fiber. For shells, it is defined as the inverse of the square root of the number of elements.</para>
</simplesect>
<simplesect kind="return"><para>The angle scaling factor defined above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="608" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="608" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a53d243061f43d6e0a291de65afec3b3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_equivalent_mass</definition>
        <argsstring>() const</argsstring>
        <name>get_equivalent_mass</name>
        <qualifiedname>IRockyJoint::get_equivalent_mass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The equivalent or effective mass used for calculating joint damping coefficients as indicated, for instance. For more details, please refer to the DEM Technical Manual. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="618" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1ad78b35364784e0ffe09508d99facd5a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_normal_stiffness_per_area</definition>
        <argsstring>() const</argsstring>
        <name>get_normal_stiffness_per_area</name>
        <qualifiedname>IRockyJoint::get_normal_stiffness_per_area</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the normal stiffness per area unit associated to the joint. Please refer to the DEM Technical Manual for an explanation of how this parameter is calculated for different flexible particle shapes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="632" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a1444e28a82d898d15775180373952ee1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_tangential_stiffness_per_area</definition>
        <argsstring>() const</argsstring>
        <name>get_tangential_stiffness_per_area</name>
        <qualifiedname>IRockyJoint::get_tangential_stiffness_per_area</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the tangential stiffness per area unit associated to the joint. Please refer to the DEM Technical Manual for an explanation of how this parameter is calculated for different flexible particle shapes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="646" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="646" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a2f87ef623553e934f8fdca19d163669a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyJoint::get_young_modulus_multiplier</definition>
        <argsstring>() const</argsstring>
        <name>get_young_modulus_multiplier</name>
        <qualifiedname>IRockyJoint::get_young_modulus_multiplier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>For custom fibers only, this will return the factor in the right-hand side of equation 3.15 in the DEM Technical Manual. For any other particle type, it will return 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="659" column="12" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="659" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1af78ec40df8e4715343434772668bf70d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyJointScalars" kindref="compound">IRockyJointScalars</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyJointScalars IRockyJoint::get_scalars</definition>
        <argsstring>()</argsstring>
        <name>get_scalars</name>
        <qualifiedname>IRockyJoint::get_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a scalar variable was defined during the setup of the module,</title><para>this method can be used access such variables. Joint scalars are special variables that store custom values per joint, in order to preserve them between time iterations.</para>
</simplesect>
<simplesect kind="return"><para>The class to manipulate joint&apos;s scalars </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="675" column="24" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="675" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1acd6105a244aacfbbc5a833760c7ca1b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double &gt;</type>
        <definition>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double &gt; IRockyJoint::get_home_element_orientation</definition>
        <argsstring>() const</argsstring>
        <name>get_home_element_orientation</name>
        <qualifiedname>IRockyJoint::get_home_element_orientation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A tuple whose two components define the axis-angle <emphasis>home</emphasis> element orientation. The first one is a three dimensional vector representing the orientation axis, the second one is a single value representing the angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="689" column="35" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1addfb58409bb1dc5703d9d3ab64b3e458" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double &gt;</type>
        <definition>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double &gt; IRockyJoint::get_near_element_orientation</definition>
        <argsstring>() const</argsstring>
        <name>get_near_element_orientation</name>
        <qualifiedname>IRockyJoint::get_near_element_orientation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A tuple whose two components define the axis-angle <emphasis>near</emphasis> element orientation. The first one is a three dimensional vector representing the orientation axis, the second one is a single value representing the angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="699" column="35" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="699" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a4422c62fbad4e4f34c011d683fc0d859" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_home_element_centroid_position</definition>
        <argsstring>() const</argsstring>
        <name>get_home_element_centroid_position</name>
        <qualifiedname>IRockyJoint::get_home_element_centroid_position</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The joint <emphasis>home element</emphasis> center point coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="707" column="29" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="707" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a3a804cfa90d13e065de6d983d7a35caf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_near_element_centroid_position</definition>
        <argsstring>() const</argsstring>
        <name>get_near_element_centroid_position</name>
        <qualifiedname>IRockyJoint::get_near_element_centroid_position</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The joint <emphasis>near element</emphasis> center point coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="715" column="29" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="715" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a86a5ed840cdc8b276f3ff65ad8148a3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_home_arm</definition>
        <argsstring>() const</argsstring>
        <name>get_home_arm</name>
        <qualifiedname>IRockyJoint::get_home_arm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The vector that joins the <emphasis>home element</emphasis> center to the joint center. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="723" column="29" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="723" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a4129719851a851ff1ac7d0190d834ad3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyJoint::get_near_arm</definition>
        <argsstring>() const</argsstring>
        <name>get_near_arm</name>
        <qualifiedname>IRockyJoint::get_near_arm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The vector that joins the <emphasis>near element</emphasis> center to the joint center. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="731" column="29" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyJoint_1a37e1bd3fb20a03cf9be8a2d4dd317d22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS thrust::tuple&lt; int, int &gt;</type>
        <definition>ROCKY_FUNCTIONS thrust::tuple&lt; int, int &gt; IRockyJoint::get_element_tags</definition>
        <argsstring>() const</argsstring>
        <name>get_element_tags</name>
        <qualifiedname>IRockyJoint::get_element_tags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The values of custom tags (integer values) assigned to the two elements attached to the joint. These tags are inherited from tags assigned to the segments that define the center line of a custom fiber. The values of those tags must be specified in the column labeled &quot;tag&quot; in the csv file that defines the geometry of a custom fiber. If tags are not defined for a custom fiber or if this function is used with flexible particles other than custom fibers, this function will return two values equal to -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="744" column="35" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="744" bodyend="747"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structIRockyJoint" kindref="compound">IRockyJoint</ref></computeroutput> is an interface for the internal joint object in Rocky. It contains methods that give access to joint physical properties and geometric data, in order to implement a custom model for the response of a joint to deformations. All property and variable values made available through <computeroutput><ref refid="structIRockyJoint" kindref="compound">IRockyJoint</ref></computeroutput> are dimensionless.</para>
<para>When it is necessary to distinguish between the two elements linked by a joint, one is referred to as <emphasis>home element</emphasis>, whereas the other is referred to as <emphasis>near element</emphasis>. The local coordinate framework associated to a joint has the normal unit vector always pointing from the home element to the near element. Whenever the name of a method or object associated to a joint includes the prefix <emphasis>home</emphasis> or <emphasis>near</emphasis>, that means the method or object is related to the home or near element. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_joint_api.hpp" line="32" column="1" bodyfile="source/c++/rocky20/api/rocky_joint_api.hpp" bodystart="33" bodyend="758"/>
    <listofallmembers>
      <member refid="structIRockyJoint_1a200f5da4324981ce63eeca693082ce3f" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_angle_scaling_factor</name></member>
      <member refid="structIRockyJoint_1a83db4989103e17e6158b6e96a030457d" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_angular_damping_coefficient</name></member>
      <member refid="structIRockyJoint_1a46c8b6ca5aa8e78f55cb6c0a70f1cc6d" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_angular_deformation</name></member>
      <member refid="structIRockyJoint_1ae4c1028eba2077ae552c21aba43ce638" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_angular_deformation_direction</name></member>
      <member refid="structIRockyJoint_1a1be4ec6e88935d14a4b900d09fdbfadf" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_angular_deformation_velocity</name></member>
      <member refid="structIRockyJoint_1a299b8659e8bb2ddba28de92d18055e5b" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_angular_stiffness</name></member>
      <member refid="structIRockyJoint_1af2ea637b5ce30f553c19f973411ef451" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_area</name></member>
      <member refid="structIRockyJoint_1a22573a85d220d9db4afa1b0f67337196" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_area_moment_of_inertia</name></member>
      <member refid="structIRockyJoint_1a83474e7ee11615ca201de8fec94c8c22" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_bending_elastic_ratio</name></member>
      <member refid="structIRockyJoint_1a7c2d0b63f577c279227b2df8daffbf5c" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_damping_force</name></member>
      <member refid="structIRockyJoint_1a71de79fea3ed20ae451b5cb36d2b6349" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_damping_moment</name></member>
      <member refid="structIRockyJoint_1ab006cbc3b38064611dfa5dae2cbdf672" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_elastic_force</name></member>
      <member refid="structIRockyJoint_1a8eeb46a9210aeaf532467ecb77c580e7" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_elastic_moment</name></member>
      <member refid="structIRockyJoint_1a37e1bd3fb20a03cf9be8a2d4dd317d22" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_element_tags</name></member>
      <member refid="structIRockyJoint_1a53d243061f43d6e0a291de65afec3b3c" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_equivalent_mass</name></member>
      <member refid="structIRockyJoint_1a86a5ed840cdc8b276f3ff65ad8148a3c" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_home_arm</name></member>
      <member refid="structIRockyJoint_1a4422c62fbad4e4f34c011d683fc0d859" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_home_element_centroid_position</name></member>
      <member refid="structIRockyJoint_1acd6105a244aacfbbc5a833760c7ca1b9" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_home_element_orientation</name></member>
      <member refid="structIRockyJoint_1a997ad60ff60b99d485c1d3d2fce74ff2" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_joint_damping_ratio</name></member>
      <member refid="structIRockyJoint_1a3447c9a4ef194097e8c3898b25ebe942" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_moments_due_to_force</name></member>
      <member refid="structIRockyJoint_1a4129719851a851ff1ac7d0190d834ad3" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_near_arm</name></member>
      <member refid="structIRockyJoint_1a3a804cfa90d13e065de6d983d7a35caf" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_near_element_centroid_position</name></member>
      <member refid="structIRockyJoint_1addfb58409bb1dc5703d9d3ab64b3e458" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_near_element_orientation</name></member>
      <member refid="structIRockyJoint_1ad55375a544cfd11a0c0fb52986b1fc74" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_normal_damping_coefficient</name></member>
      <member refid="structIRockyJoint_1add47e1c2a985abef3a9fef24c44902e2" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_normal_deformation</name></member>
      <member refid="structIRockyJoint_1abd22a485b99c59a2141dff07e6f9b9e0" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_normal_deformation_velocity</name></member>
      <member refid="structIRockyJoint_1a0912316f01b3785c5f711aad2a3ebde1" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_normal_elastic_ratio</name></member>
      <member refid="structIRockyJoint_1a47718a93f4aa6bffe9ef0e03bfff3fa9" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_normal_stiffness</name></member>
      <member refid="structIRockyJoint_1ad78b35364784e0ffe09508d99facd5a3" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_normal_stiffness_per_area</name></member>
      <member refid="structIRockyJoint_1af300e95bee5d2a332c3085e6fad91af2" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_normal_vector</name></member>
      <member refid="structIRockyJoint_1a7c84ef4dad6d9e1f38b2d227ac1f083a" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_number_angular_deformations</name></member>
      <member refid="structIRockyJoint_1a09693f2837c14dfb1a0fa4d40373553f" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_poisson_ratio</name></member>
      <member refid="structIRockyJoint_1af78ec40df8e4715343434772668bf70d" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_scalars</name></member>
      <member refid="structIRockyJoint_1a25c86f76033636ab37b3ff19ba60b41a" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_tangential_damping_coefficient</name></member>
      <member refid="structIRockyJoint_1a3d324dbcee8a4366284a5fb84547dd9d" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_tangential_deformation</name></member>
      <member refid="structIRockyJoint_1a35e3299e0b5a35128aff0ca6f7604e38" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_tangential_deformation_velocity</name></member>
      <member refid="structIRockyJoint_1aeeae504e7d95c787e088c8dd5a55c83c" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_tangential_elastic_ratio</name></member>
      <member refid="structIRockyJoint_1a48e95a4cc7245305980339ea8ddf43b3" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_tangential_stiffness</name></member>
      <member refid="structIRockyJoint_1a1444e28a82d898d15775180373952ee1" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_tangential_stiffness_per_area</name></member>
      <member refid="structIRockyJoint_1a23fa06ce00c95412142f49e82825bca1" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_torsion_elastic_ratio</name></member>
      <member refid="structIRockyJoint_1a2d57d8f171e77be4e1de3f2eb2b10fb3" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_young_modulus</name></member>
      <member refid="structIRockyJoint_1a2f87ef623553e934f8fdca19d163669a" prot="public" virt="non-virtual"><scope>IRockyJoint</scope><name>get_young_modulus_multiplier</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
