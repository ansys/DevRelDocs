<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyTriangleScalarsModel" kind="struct" language="C++" prot="public">
    <compoundname>IRockyTriangleScalarsModel</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ScalarsModel&lt; rocky20::TriangleScalarsController &gt;</basecompoundref>
    <includes refid="rocky__triangle__scalars_8hpp" local="no">rocky_triangle_scalars.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1afc273a1e67e4995f848452fda3f71c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyTriangleScalarsModel::find</definition>
        <argsstring>(const char *name)</argsstring>
        <name>find</name>
        <qualifiedname>IRockyTriangleScalarsModel::find</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method searches for a scalar variable already created by other modules,</title><para>in order to allow access to its values, or store new values on it, during the execution of the simulation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the scalar at the moment of its creation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that uniquely identifies the wanted scalar if it was actually found. It returns -1 otherwise.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="31" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1a41b8986cbde7d37e0946a3a8a8361d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyTriangleScalarsModel::add</definition>
        <argsstring>(const char *name, const char *unit, bool output=true)</argsstring>
        <name>add</name>
        <qualifiedname>IRockyTriangleScalarsModel::add</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>output</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method creates a new scalar variable of type <computeroutput>double</computeroutput></title><para>for storing custom values during a simulation, preserving them between time iterations.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the scalar variable. The purpose of this name is twofold. First, it enables to find this scalar variable from other module, in order to share their values. Second, if the scalar variable can be displayed in a 3D window as a property, this name will identify it in the Rocky UI.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>A string specifying the unit in S.I. associated to the scalar variable.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables/disables the storage in disk at output times, for the visualization and post-processing of the scalar values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that will uniquely identify the scalar variable during the execution of the simulation.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="34" column="9" bodyfile="source/c++/rocky20/api/rocky_triangle_scalars.cpp" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1ac3e84af17e0dfaea602eab3a7a888b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class data_type</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int IRockyTriangleScalarsModel::add_accumulation_scalar</definition>
        <argsstring>(const char *name, const char *unit, bool output=true)</argsstring>
        <name>add_accumulation_scalar</name>
        <qualifiedname>IRockyTriangleScalarsModel::add_accumulation_scalar</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>output</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method creates a new scalar variable of type defined by template parameter</title><para><computeroutput>data_type</computeroutput> for storing custom values during a simulation, preserving them between time iterations. The scalar added with this method has a special behavior defined for pulling data from devices in multi-gpu simulations: It will accumulate those values in the host memory.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the scalar variable. The purpose of this name is twofold. First, it enables to find this scalar variable from other module, in order to share their values. Second, if the scalar variable can be displayed in a 3D window as a property, this name will identify it in the Rocky UI.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>A string specifying the unit in S.I. associated to the scalar variable.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables/disables the storage in disk at output times, for the visualization and post-processing of the scalar values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that will uniquely identify the scalar variable during the execution of the simulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="59" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1ae4f5d565ed2b3fa05b52f9274d542d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyTriangleScalarsModel::reset</definition>
        <argsstring>(int scalar_index)</argsstring>
        <name>reset</name>
        <qualifiedname>IRockyTriangleScalarsModel::reset</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method resets to zero all values stored in a scalar variable.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index attributed to the scalar variable at the moment of its creation.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="62" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1aa02d862be5d91a62af18a1b1320286e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyTriangleScalarsModel::set_dimension</definition>
        <argsstring>(int scalar_index, double dimension_factor)</argsstring>
        <name>set_dimension</name>
        <qualifiedname>IRockyTriangleScalarsModel::set_dimension</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dimension_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>The purpose of this method is to associate a dimensional factor</title><para>to a scalar variable. This factor will be used to nondimensionalize their values. For instance, if the scalar represents a force, a force dimensional factor must be associated through this method. Dimensional factors for the fundamental magnitudes are provided by functions of a <computeroutput><ref refid="structIRockyModel" kindref="compound">IRockyModel</ref></computeroutput> object.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index attributed to the scalar variable at the moment of its creation.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate dimensional factor for the scalar variable.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="65" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1a01f4979062e25a0fb10b874f9f1f81d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyTriangleScalarsModel::enable_storage_of_exchanged_heat</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_of_exchanged_heat</name>
        <qualifiedname>IRockyTriangleScalarsModel::enable_storage_of_exchanged_heat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method activates an internal triangle scalar that accumulates the heat </title><para>exchanged by geometry triangles with surrounding particles and/or SPH fluid elements during a simulation. The value of this scalar at each geometry triangle and at a given time will be equal to the sum of the heat received by the triangle from all particles and/or SPH elements that interacted with it since the last reset event, which is triggered by the <computeroutput><ref refid="structIRockyTriangleScalarsModel_1abe794fd133422249549fad8c56fee6eb" kindref="member">IRockyTriangleScalarsModel::reset_exchanged_heat()</ref></computeroutput> function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="77" column="10" bodyfile="source/c++/rocky20/api/rocky_triangle_scalars.cpp" bodystart="8" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1abe794fd133422249549fad8c56fee6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyTriangleScalarsModel::reset_exchanged_heat</definition>
        <argsstring>()</argsstring>
        <name>reset_exchanged_heat</name>
        <qualifiedname>IRockyTriangleScalarsModel::reset_exchanged_heat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method resets an internal triangle scalar that accumulates the heat </title><para>exchanged by geometry triangles with surrounding particles and/or SPH fluid elements. For example, this function may be called from within the <computeroutput>ROCKY_PLUGIN_BEGIN_ITERATION</computeroutput> hook. In that case, at the end of an iteration, a custom module can get the value of the total heat received by each triangle during the last timestep. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="87" column="10" bodyfile="source/c++/rocky20/api/rocky_triangle_scalars.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1acba5f06875d88bba1d66bd829c37fb52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; IRockyTriangleScalarsModel::calculate_sum_over_geometries</definition>
        <argsstring>(int scalar_index)</argsstring>
        <name>calculate_sum_over_geometries</name>
        <qualifiedname>IRockyTriangleScalarsModel::calculate_sum_over_geometries</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A vector of the size of geometries in a project, in which every value is the sum of the triangle scalar values associated to the triangles belonging to a geometry. Those values are ordered in the vector according to the indices assigned to the geometries in a project. The sums are performed only if the triangle scalars are of type <computeroutput>double</computeroutput> or <computeroutput><ref refid="structIRockyStatisticsAccumulator" kindref="compound">IRockyStatisticsAccumulator</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="96" column="17" bodyfile="source/c++/rocky20/api/rocky_triangle_scalars.cpp" bodystart="46" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1a60ee5f18541c3104a7a286d244a5f896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyTriangleScalarsModel::pull_scalar_from_devices</definition>
        <argsstring>(int scalar_index)</argsstring>
        <name>pull_scalar_from_devices</name>
        <qualifiedname>IRockyTriangleScalarsModel::pull_scalar_from_devices</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies the scalar values defined by scalar_index from the device memory to the host memory (DRAM). When running a simulation in multi-GPU, the values of different devices will be accumulated (summed) in the scalar host memory. This method can only be called for scalars added with add_accumulation_scalar in multi-gpu simulations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the scalar we want to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="107" column="10" bodyfile="source/c++/rocky20/api/rocky_triangle_scalars.cpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyTriangleScalarsModel_1a1111ee6479b40ce1e086aec31c405e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyTriangleScalarsModel::push_scalar_to_devices</definition>
        <argsstring>(int scalar_index)</argsstring>
        <name>push_scalar_to_devices</name>
        <qualifiedname>IRockyTriangleScalarsModel::push_scalar_to_devices</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send the current scalar values defined by scalar_index located in host memory (DRAM) to the devices memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the scalar we want to push to devices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="115" column="10" bodyfile="source/c++/rocky20/api/rocky_triangle_scalars.cpp" bodystart="88" bodyend="95"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structIRockyTriangleScalarsModel" kindref="compound">IRockyTriangleScalarsModel</ref></computeroutput> allows users to add new triangle scalars, find triangle scalars created in other modules or activate triangle scalars known to Rocky, during the setup phase of a module. Triangle scalars are special variables attached to boundary triangles, which are able to store values per triangle that are preserved between time iterations during a simulation. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_triangle_scalars.hpp" line="25" column="1" bodyfile="source/c++/rocky20/api/rocky_triangle_scalars.hpp" bodystart="26" bodyend="146"/>
    <listofallmembers>
      <member refid="structIRockyTriangleScalarsModel_1a41b8986cbde7d37e0946a3a8a8361d19" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>add</name></member>
      <member refid="structIRockyTriangleScalarsModel_1ac3e84af17e0dfaea602eab3a7a888b83" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>add_accumulation_scalar</name></member>
      <member refid="structIRockyTriangleScalarsModel_1acba5f06875d88bba1d66bd829c37fb52" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>calculate_sum_over_geometries</name></member>
      <member refid="structIRockyTriangleScalarsModel_1a01f4979062e25a0fb10b874f9f1f81d9" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>enable_storage_of_exchanged_heat</name></member>
      <member refid="structIRockyTriangleScalarsModel_1afc273a1e67e4995f848452fda3f71c31" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>find</name></member>
      <member refid="structIRockyTriangleScalarsModel_1a60ee5f18541c3104a7a286d244a5f896" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>pull_scalar_from_devices</name></member>
      <member refid="structIRockyTriangleScalarsModel_1a1111ee6479b40ce1e086aec31c405e3e" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>push_scalar_to_devices</name></member>
      <member refid="structIRockyTriangleScalarsModel_1ae4f5d565ed2b3fa05b52f9274d542d69" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>reset</name></member>
      <member refid="structIRockyTriangleScalarsModel_1abe794fd133422249549fad8c56fee6eb" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>reset_exchanged_heat</name></member>
      <member refid="structIRockyTriangleScalarsModel_1aa02d862be5d91a62af18a1b1320286e7" prot="public" virt="non-virtual"><scope>IRockyTriangleScalarsModel</scope><name>set_dimension</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
