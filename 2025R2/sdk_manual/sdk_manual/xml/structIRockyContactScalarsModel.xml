<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyContactScalarsModel" kind="struct" language="C++" prot="public">
    <compoundname>IRockyContactScalarsModel</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ScalarsModel&lt; rocky20::BaseContactScalarsController &gt;</basecompoundref>
    <includes refid="rocky__contact__scalars_8hpp" local="no">rocky_contact_scalars.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyContactScalarsModel_1ad35ceabceb6ec8d839a3e89086643f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyContactScalarsModel::find</definition>
        <argsstring>(const char *name)</argsstring>
        <name>find</name>
        <qualifiedname>IRockyContactScalarsModel::find</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method searches for a scalar variable already created by other modules,</title><para>in order to allow access to its values, or store new values on it, during the execution of the simulation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the scalar at the moment of its creation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that uniquely identifies the wanted scalar if it was actually found. It returns -1 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="35" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a5066c63ea6e2b3b4791f4812b206a65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::reset</definition>
        <argsstring>(int scalar_index)</argsstring>
        <name>reset</name>
        <qualifiedname>IRockyContactScalarsModel::reset</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method resets to zero all values stored in a scalar variable.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index attributed to the scalar variable at the moment of its creation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="43" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a95938d3b140e2fbf6b3f417ad88cefd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::set_dimension</definition>
        <argsstring>(int scalar_index, double dimension_factor)</argsstring>
        <name>set_dimension</name>
        <qualifiedname>IRockyContactScalarsModel::set_dimension</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dimension_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>The purpose of this method is to associate a dimensional factor</title><para>to a scalar variable. This factor will be used to nondimensionalize their values. For instance, if the scalar represents a force, a force dimensional factor must be associated through this method. Dimensional factors for the fundamental magnitudes are provided by functions of a <computeroutput><ref refid="structIRockyModel" kindref="compound">IRockyModel</ref></computeroutput> object.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index attributed to the scalar variable at the moment of its creation.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate dimensional factor for the scalar variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="59" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a00693cfaa879794cda713e943549644f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyContactScalarsModel::add</definition>
        <argsstring>(const char *name, const char *unit, bool output=true)</argsstring>
        <name>add</name>
        <qualifiedname>IRockyContactScalarsModel::add</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>output</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method creates a new scalar variable of type <computeroutput>double</computeroutput></title><para>for storing custom values during a simulation, preserving them between time iterations.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the scalar variable. The purpose of this name is twofold. First, it enables to find this scalar variable from other module, in order to share their values. Second, if the scalar variable can be displayed in a 3D window as a property, this name will identify it in the Rocky UI.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>A string specifying the unit in S.I. associated to the scalar variable.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables/disables the storage in disk at output times, for the visualization and post-processing of the scalar values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that will uniquely identify the scalar variable during the execution of the simulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="80" column="9" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a295989b18e690130d92c31881a61ba76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class data_type</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int IRockyContactScalarsModel::add</definition>
        <argsstring>(const char *name, const char *unit, bool output)</argsstring>
        <name>add</name>
        <qualifiedname>IRockyContactScalarsModel::add</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method creates a new scalar variable of type <computeroutput>data_type</computeroutput></title><para>for storing custom values during a simulation, preserving them between time iterations.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the scalar variable. The purpose of this name is twofold. First, it enables to find this scalar variable from other module, in order to share their values. Second, if the scalar variable can be displayed in a 3D window as a property, this name will identify it in the Rocky UI.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>A string specifying the unit in S.I. associated to the scalar variable.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables/disables the storage in disk at output times, for the visualization and post-processing of the scalar values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that will uniquely identify the scalar variable during the execution of the simulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="102" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1afd6b2a12584b9aca0884eef45b372e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_variable_dynamic_friction_coefficient</definition>
        <argsstring>()</argsstring>
        <name>enable_variable_dynamic_friction_coefficient</name>
        <qualifiedname>IRockyContactScalarsModel::enable_variable_dynamic_friction_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables the dynamic coefficient of friction as a variable property for contacts</title><para>that will override the constant values specified per material interaction in the Rocky UI. When a custom module enables this variable property, it becomes responsible for setting a custom value for every contact in the simulation by using the <computeroutput><ref refid="structIRockyContact_1aaa4594d0c921983edc1d1033661c6500" kindref="member">IRockyContact::set_dynamic_friction_coefficient</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="113" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a3a8d067f500bb3b7d39f1cb96f993f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_variable_static_friction_coefficient</definition>
        <argsstring>()</argsstring>
        <name>enable_variable_static_friction_coefficient</name>
        <qualifiedname>IRockyContactScalarsModel::enable_variable_static_friction_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables the static coefficient of friction as a variable property for contacts</title><para>that will override the constant values specified per material interaction in the Rocky UI. When a custom module enables this variable property, it becomes responsible for setting a custom value for every contact in the simulation by using the <computeroutput><ref refid="structIRockyContact_1a5a3233239461058a2f33a9f49494666c" kindref="member">IRockyContact::set_static_friction_coefficient</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="122" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a7c098d6a1bb42017f323521a267459bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_variable_restitution_coefficient</definition>
        <argsstring>()</argsstring>
        <name>enable_variable_restitution_coefficient</name>
        <qualifiedname>IRockyContactScalarsModel::enable_variable_restitution_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that defines the restitution coefficient as a variable </title><para>property at contacts. When this scalar is enabled, a different value of the restitution coefficient can be specified for each contact that arises in a simulation, using the <computeroutput><ref refid="structIRockyContact_1ad5f45118ba3d4bdedd2194640fc4c79d" kindref="member">IRockyContact::set_restitution_coefficient</ref></computeroutput> method. In this case, that value will override the constant values specified for this property through the Rocky UI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="131" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a8e8fb75a47341a734ee04707a58f658f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_sliding_distance</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_sliding_distance</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_sliding_distance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that stores the value calculated for the sliding </title><para>distance during the processing of the contact forces. In this way, that value will be accessible to custom models that may need it for their own calculations. The sliding distance is the distance that a contact point moves parallel to the tangential contact plane during a timestep. When its storage has been enabled, the value of the sliding distance can be accessed by using the <computeroutput><ref refid="structIRockyContact_1afe041153be8e43d3e5d7c7a500a49501" kindref="member">IRockyContact::get_sliding_distance</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="141" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a2a383fbe3de38c7aab855c0b775a293b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_is_sliding_marker</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_is_sliding_marker</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_is_sliding_marker</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that will store a marker that indicates whether a contact</title><para>is sliding or not at a given moment. Normally this marker is used only internally in Rocky, but this method can make it available to custom models that may need that information. When that storage has been enabled, the value of the marker for sliding can be accessed by using the <computeroutput><ref refid="structIRockyContact_1a1acfe6d4f8e36c9fd417a658aac1c041" kindref="member">IRockyContact::get_is_sliding_marker</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="150" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a5a65f842ce3bea36ee46b346a2741911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_tangential_contact_force</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_tangential_contact_force</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_tangential_contact_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that makes available to custom modules the tangential</title><para>force vector that is calculated by any contact tangential force model active in a simulation. The value of this force is not always automatically accessible by custom models. For instance, if users want to use the tangential force value when the Coulomb Limit or any other custom contact tangential force model is active, they will need to enable its storage using this method. When that storage has been enabled, the value of the tangential force vector can be accessed by using the <computeroutput><ref refid="structIRockyContact_1aca5aae0a4d0c2033bbad4da067657704" kindref="member">IRockyContact::get_tangential_contact_force</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="162" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a30a72264168db13de798df7cdff440c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_normal_relative_velocity</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_normal_relative_velocity</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_normal_relative_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that stores the value of the normal component of the </title><para>relative velocity at a contact. In this way that value, which is normally calculated internally by the Rocky solver and used on its own calculations, will be made available for custom modules as well. This can be preferable to the use of the <computeroutput><ref refid="structIRockyContact_1af05c086a0b75c761b13fa744061789e4" kindref="member">IRockyContact::calculate_relative_velocity</ref></computeroutput> method, since that calculation may be expensive. When its storage has been enabled, the value of the normal relative velocity component can be accessed by using the <computeroutput><ref refid="structIRockyContact_1a379476b7b01576be8fc0eb3f0dde7a1e" kindref="member">IRockyContact::get_normal_relative_velocity</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="173" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1ad8ba6db25bce594fbb62b415b0634a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_tangential_relative_velocity</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_tangential_relative_velocity</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_tangential_relative_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that stores the value of the normal component of the</title><para>relative velocity at a contact. In this way that value, which is normally calculated internally by the Rocky solver and used on its own calculations, will be made available for custom modules as well. This can be preferable to the use of the <computeroutput><ref refid="structIRockyContact_1af05c086a0b75c761b13fa744061789e4" kindref="member">IRockyContact::calculate_relative_velocity</ref></computeroutput> method, since that calculation may be expensive. When its storage has been enabled, the value of the tangential relative velocity vector can be accessed by using the <computeroutput><ref refid="structIRockyContact_1a9fab3f0e6f78ea64e96209fbbd540b85" kindref="member">IRockyContact::get_tangential_relative_velocity</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="184" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a0b773628077520e21f189ab64b8b1e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_normal_adhesion_force</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_normal_adhesion_force</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_normal_adhesion_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that stores the value of the normal component of the</title><para>adhesion force. In this way, if an adhesive force model is active in a simulation, a custom module will have access to the value of that force. When that storage has been enabled, the value of the normal adhesion force can be accessed by using the <computeroutput><ref refid="structIRockyContact_1a21587a9de6f69f4af1d215c3879fca66" kindref="member">IRockyContact::get_normal_adhesion_force</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="193" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1ab390c75dee689878d04d1db89be3fb95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_tangential_adhesion_force</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_tangential_adhesion_force</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_tangential_adhesion_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that stores the value of the tangential component of the</title><para>adhesion force. Only some external modules, such as the Liquid Bridge Model module, implement a model in which the adhesion force may have a tangential component. If one of such modules is active in a simulation, a custom module will have access to the value of that force when its storage has been enabled with this method. Then, during the simulation, the value of the tangential adhesion force can be accessed by using the <computeroutput><ref refid="structIRockyContact_1a20d7ffad55e1c1c28c848eb3b09c41f2" kindref="member">IRockyContact::get_tangential_adhesion_force</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="204" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a36a468305e9a49ba36de61846260c1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_storage_previous_normal_vector</definition>
        <argsstring>()</argsstring>
        <name>enable_storage_previous_normal_vector</name>
        <qualifiedname>IRockyContactScalarsModel::enable_storage_previous_normal_vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables a known-scalar that stores automatically the value of the contact&apos;s</title><para>normal unit vector at the end of a time iteration, with the purpose of making it available during the next time iteration. If the storage of this vector has been enabled, it can be accessed during a simulation by using the <computeroutput><ref refid="structIRockyContact_1afa684887b3dcfad056850ccfdf399ec3" kindref="member">IRockyContact::get_previous_normal_vector</ref></computeroutput> method. By comparing this vector to the current normal unit vector, a custom module will be able to determine if a change on the contact&apos;s normal direction has occurred between iterations. The Rocky solver will correct the orientation of this vector automatically if the contact topology is altered because of an internal reorganization of the array of contacts (a regular contact scalar will not be corrected in such an event). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="218" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1ab2927b1c13fc4325a5bd28ba97e15230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::enable_previous_moment_vector</definition>
        <argsstring>()</argsstring>
        <name>enable_previous_moment_vector</name>
        <qualifiedname>IRockyContactScalarsModel::enable_previous_moment_vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method is intended for modules implementing a custom rolling resistance model</title><para>in which the rolling resistance is updated on each time iteration. It enables a contact scalar that can be used by a module for storing the moment calculated at a given time iteration in order to make it available in the following iteration. It is highly recommended to use that contact scalar instead of a regular contact scalar, because the Rocky solver will correct the orientation of the stored vector automatically if the contact topology is altered because of an internal reorganization of the array of contacts (a regular contact scalar will not be corrected in such an event). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="230" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyContactScalarsModel_1a29e181ff7eef3349c42038e6b7f9541a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyContactScalarsModel::mark_scalar_as_history_dependent</definition>
        <argsstring>(int scalar_index)</argsstring>
        <name>mark_scalar_as_history_dependent</name>
        <qualifiedname>IRockyContactScalarsModel::mark_scalar_as_history_dependent</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method must be used to inform Rocky that a given particle-to-particle contact</title><para>scalar stores a 3D vector whose value depends on the history of the contact. Typical cases are 3D vectors whose values are obtained incrementally over time, or a 3D vector whose value is stored for the next time iteration in order to approximate its time derivative. When such scalars are marked using this method, Rocky takes care of preserving the orientation of the vector whenever an internal reordering of the particle indices causes a topological reversal of the contact. If a particle-to-particle contact scalar depending on time is not marked with this method, contact reversals may destabilize the simulation or may lead to completely incorrect results.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index that identifies the specific contact scalar that must be marked as dependent on history. Only particle-to-particle contact scalars of type <computeroutput>double3</computeroutput> are able to be marked with this method. Any other scalar type will not be affected by contact reversals. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="248" column="10" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.cpp" bodystart="111" bodyend="121"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>During the setup phase of a module, an <computeroutput><ref refid="structIRockyContactScalarsModel" kindref="compound">IRockyContactScalarsModel</ref></computeroutput> object allows users to add new contact scalars, find contact scalars created in other modules, or activate contact scalars known to Rocky. Contact scalars are special variables attached to contacts that store per-contact values preserved between time iterations during a simulation. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_contact_scalars.hpp" line="20" column="1" bodyfile="source/c++/rocky20/api/rocky_contact_scalars.hpp" bodystart="21" bodyend="266"/>
    <listofallmembers>
      <member refid="structIRockyContactScalarsModel_1a00693cfaa879794cda713e943549644f" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>add</name></member>
      <member refid="structIRockyContactScalarsModel_1a295989b18e690130d92c31881a61ba76" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>add</name></member>
      <member refid="structIRockyContactScalarsModel_1ab2927b1c13fc4325a5bd28ba97e15230" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_previous_moment_vector</name></member>
      <member refid="structIRockyContactScalarsModel_1a2a383fbe3de38c7aab855c0b775a293b" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_is_sliding_marker</name></member>
      <member refid="structIRockyContactScalarsModel_1a0b773628077520e21f189ab64b8b1e69" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_normal_adhesion_force</name></member>
      <member refid="structIRockyContactScalarsModel_1a30a72264168db13de798df7cdff440c5" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_normal_relative_velocity</name></member>
      <member refid="structIRockyContactScalarsModel_1a36a468305e9a49ba36de61846260c1f1" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_previous_normal_vector</name></member>
      <member refid="structIRockyContactScalarsModel_1a8e8fb75a47341a734ee04707a58f658f" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_sliding_distance</name></member>
      <member refid="structIRockyContactScalarsModel_1ab390c75dee689878d04d1db89be3fb95" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_tangential_adhesion_force</name></member>
      <member refid="structIRockyContactScalarsModel_1a5a65f842ce3bea36ee46b346a2741911" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_tangential_contact_force</name></member>
      <member refid="structIRockyContactScalarsModel_1ad8ba6db25bce594fbb62b415b0634a95" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_storage_tangential_relative_velocity</name></member>
      <member refid="structIRockyContactScalarsModel_1afd6b2a12584b9aca0884eef45b372e1c" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_variable_dynamic_friction_coefficient</name></member>
      <member refid="structIRockyContactScalarsModel_1a7c098d6a1bb42017f323521a267459bd" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_variable_restitution_coefficient</name></member>
      <member refid="structIRockyContactScalarsModel_1a3a8d067f500bb3b7d39f1cb96f993f78" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>enable_variable_static_friction_coefficient</name></member>
      <member refid="structIRockyContactScalarsModel_1ad35ceabceb6ec8d839a3e89086643f99" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>find</name></member>
      <member refid="structIRockyContactScalarsModel_1a29e181ff7eef3349c42038e6b7f9541a" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>mark_scalar_as_history_dependent</name></member>
      <member refid="structIRockyContactScalarsModel_1a5066c63ea6e2b3b4791f4812b206a65f" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>reset</name></member>
      <member refid="structIRockyContactScalarsModel_1a95938d3b140e2fbf6b3f417ad88cefd8" prot="public" virt="non-virtual"><scope>IRockyContactScalarsModel</scope><name>set_dimension</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
