<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockySPHElementScalars" kind="struct" language="C++" prot="public">
    <compoundname>IRockySPHElementScalars</compoundname>
    <basecompoundref prot="public" virt="non-virtual">EntityScalars&lt; rocky20::SPHParticleScalars &gt;</basecompoundref>
    <includes refid="rocky__sph__element__scalars_8hpp" local="no">rocky_sph_element_scalars.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockySPHElementScalars_1acf45b1ddd0d68df837ec264d2758693f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _data_type</type>
            <defval>float</defval>
          </param>
        </templateparamlist>
        <type>ROCKY_FUNCTIONS _data_type</type>
        <definition>ROCKY_FUNCTIONS _data_type IRockySPHElementScalars::get_scalar</definition>
        <argsstring>(int scalar_index) const</argsstring>
        <name>get_scalar</name>
        <qualifiedname>IRockySPHElementScalars::get_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>the value currently stored can be accessed with this method.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value currently stored in the scalar variable.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="145" column="32" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1af70cf6bb3041f4c5e9a8c336ea47b201" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS float</type>
        <definition>ROCKY_FUNCTIONS float IRockySPHElementScalars::get_turbulent_viscosity</definition>
        <argsstring>() const</argsstring>
        <name>get_turbulent_viscosity</name>
        <qualifiedname>IRockySPHElementScalars::get_turbulent_viscosity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the turbulent viscosity. Turbulent viscosity is a built-in SPH element scalar defined in the Rocky solver, whose values can be calculated either by a built-in model or by a custom module. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="155" column="34" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1aa7d031c763a7c8c643ec7a86c07ae6d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS float</type>
        <definition>ROCKY_FUNCTIONS float IRockySPHElementScalars::get_temperature</definition>
        <argsstring>() const</argsstring>
        <name>get_temperature</name>
        <qualifiedname>IRockySPHElementScalars::get_temperature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the temperature of the SPH element. Temperature is a built-in SPH element scalar defined by the Rocky solver, which is activated when a thermal model is enabled in a project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="165" column="34" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1a8a1580996da5f171f535de7e7487fe01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS float</type>
        <definition>ROCKY_FUNCTIONS float IRockySPHElementScalars::get_heat_transfer</definition>
        <argsstring>() const</argsstring>
        <name>get_heat_transfer</name>
        <qualifiedname>IRockySPHElementScalars::get_heat_transfer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the total heat transfer rate towards/from the SPH element. Heat transfer rate is a built-in SPH element scalar defined by the Rocky solver, which is activated when a thermal model is enabled in a project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="175" column="34" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1a21d991fe945a35f8c7a1f4dffd7c5fe4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS float3</type>
        <definition>ROCKY_FUNCTIONS float3 IRockySPHElementScalars::get_velocity_gradient_x</definition>
        <argsstring>() const</argsstring>
        <name>get_velocity_gradient_x</name>
        <qualifiedname>IRockySPHElementScalars::get_velocity_gradient_x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The gradient of the component of the SPH element velocity along the X-axis. Velocity gradients are built-in SPH element scalars defined by the Rocky solver, which is activated manually when a module calls <computeroutput>IRockySPHElementScalarsModel::enable_gradient_velocity()</computeroutput> at setup hook. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="186" column="35" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1a0b6e39222f53c9977ed3cdcf74cb4a9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS float3</type>
        <definition>ROCKY_FUNCTIONS float3 IRockySPHElementScalars::get_velocity_gradient_y</definition>
        <argsstring>() const</argsstring>
        <name>get_velocity_gradient_y</name>
        <qualifiedname>IRockySPHElementScalars::get_velocity_gradient_y</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The gradient of the component of the SPH element velocity along the Y-axis. Velocity gradients are built-in SPH element scalars defined by the Rocky solver, which is activated manually when a module calls <computeroutput>IRockySPHElementScalarsModel::enable_gradient_velocity()</computeroutput> at setup hook. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="197" column="35" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1ace9533abcbc59ad7581a97d988d4c880" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS float3</type>
        <definition>ROCKY_FUNCTIONS float3 IRockySPHElementScalars::get_velocity_gradient_z</definition>
        <argsstring>() const</argsstring>
        <name>get_velocity_gradient_z</name>
        <qualifiedname>IRockySPHElementScalars::get_velocity_gradient_z</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The gradient of the component of the SPH element velocity along the Z-axis. Velocity gradients are built-in SPH element scalars defined by the Rocky solver, which is activated manually when a module calls <computeroutput>IRockySPHElementScalarsModel::enable_gradient_velocity()</computeroutput> at setup hook. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="208" column="35" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1a5dae91ede893e406367059aae00764d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _data_type</type>
            <defval>float</defval>
          </param>
        </templateparamlist>
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::set_scalar</definition>
        <argsstring>(int scalar_index, _data_type value) const</argsstring>
        <name>set_scalar</name>
        <qualifiedname>IRockySPHElementScalars::set_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>_data_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to store a value on it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that must be stored.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="217" column="26" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1aebb2bc65cb47b22517249ce65c8728a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::set_turbulent_viscosity</definition>
        <argsstring>(const float value)</argsstring>
        <name>set_turbulent_viscosity</name>
        <qualifiedname>IRockySPHElementScalars::set_turbulent_viscosity</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method can be used by a custom module implementing a turbulent model in order to</title><para>set the value of the turbulent viscosity for later use in the flow equations.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the turbulent viscosity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="228" column="33" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1aa04f956ddd857b6b6fd7e2a6fe44a494" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::set_temperature</definition>
        <argsstring>(const float value)</argsstring>
        <name>set_temperature</name>
        <qualifiedname>IRockySPHElementScalars::set_temperature</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method can be used by a custom module implementing a thermal model in order to</title><para>set the value of the temperature of a SPH element.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the temperature to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="239" column="33" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1af40e66b6c4bbea654f110c9d42b3a72f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::set_heat_transfer</definition>
        <argsstring>(const float value)</argsstring>
        <name>set_heat_transfer</name>
        <qualifiedname>IRockySPHElementScalars::set_heat_transfer</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method can be used by a custom module implementing a thermal model in order to</title><para>set the calculated value of the total heat transfer towards/from a SPH element.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the heat transfer rate to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="250" column="33" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1a72d99d6c1f69b32a5e9e77325974b1f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _data_type</type>
            <defval>float</defval>
          </param>
        </templateparamlist>
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::add_scalar</definition>
        <argsstring>(int scalar_index, _data_type value) const</argsstring>
        <name>add_scalar</name>
        <qualifiedname>IRockySPHElementScalars::add_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>_data_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to sum a value to the current one stored in it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that must be summed to the current stored value.<linebreak/>
   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="259" column="26" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1a22c42af1b9c839d1693a42ac889a09df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::add_turbulent_viscosity</definition>
        <argsstring>(const float value)</argsstring>
        <name>add_turbulent_viscosity</name>
        <qualifiedname>IRockySPHElementScalars::add_turbulent_viscosity</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a value to the current turbulent viscosity stored for the SPH element.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value summed to the turbulent viscosity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="269" column="33" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1ae6f55ad8e1a6915cccbade3f199315a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::add_temperature</definition>
        <argsstring>(const float value)</argsstring>
        <name>add_temperature</name>
        <qualifiedname>IRockySPHElementScalars::add_temperature</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a value to the current temperature of a SPH element.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be added to the temperature. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="279" column="33" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1ace6ee0291cca05f39eb04ba4c760afe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::add_heat_transfer</definition>
        <argsstring>(const float value)</argsstring>
        <name>add_heat_transfer</name>
        <qualifiedname>IRockySPHElementScalars::add_heat_transfer</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method can be used for accumulating the heat transfer rate values that a</title><para>SPH element interchanges with the surrounding SPH elements, DEM elements and geometries.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The heat transfer rate value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="291" column="33" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="structIRockySPHElementScalars_1af020615c90124b8fe6d7168e964515b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _data_type</type>
            <defval>float</defval>
          </param>
        </templateparamlist>
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockySPHElementScalars::max_scalar</definition>
        <argsstring>(int scalar_index, _data_type value) const</argsstring>
        <name>max_scalar</name>
        <qualifiedname>IRockySPHElementScalars::max_scalar</qualifiedname>
        <param>
          <type>int</type>
          <declname>scalar_index</declname>
        </param>
        <param>
          <type>_data_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>If a custom scalar variable was defined during the setup of the module,</title><para>this method can be used to make the scalar store the maximum of a set of values. A common use of this method is, for instance, to find the maximum among a set of values associated to the contacts of a particle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer index that was associated to the scalar variable during the setup of the module.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A value that must be checked if it is greater than the current stored value.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="300" column="26" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="300" bodyend="303"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>When running a simulation, an <computeroutput><ref refid="structIRockySPHElementScalars" kindref="compound">IRockySPHElementScalars</ref></computeroutput> object gives access to all SPH element scalars defined in the project. These SPH element scalars can be built-in scalars defined within the Rocky solver, or custom SPH element scalars defined by the current module or other active modules. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" line="135" column="1" bodyfile="source/c++/rocky20/api/sph/rocky_sph_element_scalars.hpp" bodystart="136" bodyend="314"/>
    <listofallmembers>
      <member refid="structIRockySPHElementScalars_1ace6ee0291cca05f39eb04ba4c760afe0" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>add_heat_transfer</name></member>
      <member refid="structIRockySPHElementScalars_1a72d99d6c1f69b32a5e9e77325974b1f1" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>add_scalar</name></member>
      <member refid="structIRockySPHElementScalars_1ae6f55ad8e1a6915cccbade3f199315a4" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>add_temperature</name></member>
      <member refid="structIRockySPHElementScalars_1a22c42af1b9c839d1693a42ac889a09df" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>add_turbulent_viscosity</name></member>
      <member refid="structIRockySPHElementScalars_1a8a1580996da5f171f535de7e7487fe01" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>get_heat_transfer</name></member>
      <member refid="structIRockySPHElementScalars_1acf45b1ddd0d68df837ec264d2758693f" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>get_scalar</name></member>
      <member refid="structIRockySPHElementScalars_1aa7d031c763a7c8c643ec7a86c07ae6d3" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>get_temperature</name></member>
      <member refid="structIRockySPHElementScalars_1af70cf6bb3041f4c5e9a8c336ea47b201" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>get_turbulent_viscosity</name></member>
      <member refid="structIRockySPHElementScalars_1a21d991fe945a35f8c7a1f4dffd7c5fe4" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>get_velocity_gradient_x</name></member>
      <member refid="structIRockySPHElementScalars_1a0b6e39222f53c9977ed3cdcf74cb4a9f" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>get_velocity_gradient_y</name></member>
      <member refid="structIRockySPHElementScalars_1ace9533abcbc59ad7581a97d988d4c880" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>get_velocity_gradient_z</name></member>
      <member refid="structIRockySPHElementScalars_1af020615c90124b8fe6d7168e964515b6" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>max_scalar</name></member>
      <member refid="structIRockySPHElementScalars_1af40e66b6c4bbea654f110c9d42b3a72f" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>set_heat_transfer</name></member>
      <member refid="structIRockySPHElementScalars_1a5dae91ede893e406367059aae00764d5" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>set_scalar</name></member>
      <member refid="structIRockySPHElementScalars_1aa04f956ddd857b6b6fd7e2a6fe44a494" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>set_temperature</name></member>
      <member refid="structIRockySPHElementScalars_1aebb2bc65cb47b22517249ce65c8728a8" prot="public" virt="non-virtual"><scope>IRockySPHElementScalars</scope><name>set_turbulent_viscosity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
