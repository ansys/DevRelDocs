<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyModel" kind="struct" language="C++" prot="public">
    <compoundname>IRockyModel</compoundname>
    <includes refid="rocky__api_8h" local="no">rocky_api.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyModel_1a5dcfa443dbca79a9c34001fca9873b93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double3</type>
        <definition>double3 IRockyModel::get_gravity</definition>
        <argsstring>() const</argsstring>
        <name>get_gravity</name>
        <qualifiedname>IRockyModel::get_gravity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This functions returns the current gravity acceleration</title><para>in the simulation.</para>
</simplesect>
<simplesect kind="return"><para>A <computeroutput>double3</computeroutput> value representing the current gravity acceleration vector in Cartesian Coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="69" column="13" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a4ae85b1a5081581bd5c758d347d7e31c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyModel::set_gravity</definition>
        <argsstring>(const double3 &amp;gravity)</argsstring>
        <name>set_gravity</name>
        <qualifiedname>IRockyModel::set_gravity</qualifiedname>
        <param>
          <type>const double3 &amp;</type>
          <declname>gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This function sets the gravity acceleration to be used</title><para>globally in the simulation from that time onward.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gravity</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>double3</computeroutput> value representing the gravity acceleration vector in Cartesian Coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="78" column="10" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a3caea658ae1557e11ed4e72dc80fb0a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_softening_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_softening_factor</name>
        <qualifiedname>IRockyModel::get_softening_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the numerical softening factor, which is a global reduction factor that multiplies all stiffness values computed throughout a simulation. This factor is commonly used to increase the timestep and, therefore, speed up the execution of simulations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="86" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a6c0be64519ddd583f26570ece5a4aee1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_timestep</definition>
        <argsstring>() const</argsstring>
        <name>get_timestep</name>
        <qualifiedname>IRockyModel::get_timestep</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current value of the simulation timestep. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="91" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ada3d1d7b6e1de1d7e4ef0739a1f4dd8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyModel::trigger_update_timestep</definition>
        <argsstring>() const</argsstring>
        <name>trigger_update_timestep</name>
        <qualifiedname>IRockyModel::trigger_update_timestep</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called, enable the timestep update calculation at the beginning of the next iteration. If the module implements the <computeroutput>ROCKY_PLUGIN_COMPUTE_TIMESTEP</computeroutput> method it will be called during the update process, changing the solver timestep if the new computed timestep is smaller than the current one.</para>
<para><simplesect kind="attention"><para>If timestep is set using the advanced parameters, the update timestep calculation will be ignored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="102" column="10" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ac1f146615e6b930769ff4008c4a0bb6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IRockyModel::is_thermal_simulation</definition>
        <argsstring>() const</argsstring>
        <name>is_thermal_simulation</name>
        <qualifiedname>IRockyModel::is_thermal_simulation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the thermal option is enabled in the current Rocky project, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="107" column="10" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a021623b1b816354c3fe778f6de07c2e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IRockyModel::has_adhesion</definition>
        <argsstring>() const</argsstring>
        <name>has_adhesion</name>
        <qualifiedname>IRockyModel::has_adhesion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the current Rocky project has enabled some adhesion model. Adhesive contacts will exist in a simulation only if that condition is met. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="113" column="10" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ac9dd7ca3cdad5289325c080a10bf2ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyModel::set_adhesive_distance</definition>
        <argsstring>(int home_index, int near_index, double adhesive_distance)</argsstring>
        <name>set_adhesive_distance</name>
        <qualifiedname>IRockyModel::set_adhesive_distance</qualifiedname>
        <param>
          <type>int</type>
          <declname>home_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>near_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>adhesive_distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets a value of the adhesive distance per material interaction,</title><para>for a custom adhesive force model. Whenever a new value set for an adhesive distance is greater than the previous maximum adhesive distance among all material interactions, a new neighbors search operation will be triggered. For this reason, if adhesive distances are increased too frequently, the simulation performance can be compromised.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the first material in the material interaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>near_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the second material in the material interaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adhesive_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the adhesive distance for contacts involving entities with the specified combination of materials. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="128" column="10" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="274" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a8c30579eb47a2e20abd0fc393b3b2532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyModel::set_minimum_restitution_coefficient</definition>
        <argsstring>(int home_index, int near_index, double minimum_restitution)</argsstring>
        <name>set_minimum_restitution_coefficient</name>
        <qualifiedname>IRockyModel::set_minimum_restitution_coefficient</qualifiedname>
        <param>
          <type>int</type>
          <declname>home_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>near_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minimum_restitution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method is intended to be used by a module implementing a variable restitution</title><para>coefficient model. It allows the module to set the minimum expected value of the restitution coefficient associated to a given material interaction. The Rocky solver will use these values to calculate the stable timestep for the simulation. Every time the value of the minimum restitution coefficient of any material interaction is changed, a timestep calculation will be triggered. For this reason, if the restitution coefficient changes too frequently, the simulation performance can be compromised. The timestep will be changed only if the new calculated timestep is smaller than the previous one.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the first material in the material interaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>near_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the second material in the material interaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimum_restitution</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum expected value for the restitution coefficient in a collision involving entities with the specified combination of materials. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="146" column="10" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="311" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ac9a1e9a6ac20f978dd08f6fc67fd0904" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIRockyInteractionCalculationsData" kindref="compound">IRockyInteractionCalculationsData</ref></type>
        <definition>IRockyInteractionCalculationsData IRockyModel::get_interactions_data</definition>
        <argsstring>() const</argsstring>
        <name>get_interactions_data</name>
        <qualifiedname>IRockyModel::get_interactions_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <ref refid="classIRockyInteractionCalculationsData" kindref="compound">IRockyInteractionCalculationsData</ref> object, which can be used to access data and methods related to materials, materials interactions and particle groups. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="156" column="39" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a4f71066b464f74b32fb560c8a58dd030" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyContactDataRecorder" kindref="compound">IRockyContactDataRecorder</ref></type>
        <definition>IRockyContactDataRecorder IRockyModel::get_contact_data_recorder</definition>
        <argsstring>() const</argsstring>
        <name>get_contact_data_recorder</name>
        <qualifiedname>IRockyModel::get_contact_data_recorder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyContactDataRecorder" kindref="compound">IRockyContactDataRecorder</ref></computeroutput> object which allows a module to configure which physical magnitudes the internal contact data recorder will record for use in statistics processing later on. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="163" column="31" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a1b8fe53d49b68f6097261e884fa769c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_particle_groups</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_particle_groups</name>
        <qualifiedname>IRockyModel::get_number_of_particle_groups</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of particle groups defined in the Rocky project. A particle group is a category of particles of the same shape and material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="172" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a1c6cf48153d8b8278bcc67c3f31eff7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_particles</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_particles</name>
        <qualifiedname>IRockyModel::get_number_of_particles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of individual particles in a whole simulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="177" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a54b2c41da7a4f9f719ac76fb83f0eb0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_geometries</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_geometries</name>
        <qualifiedname>IRockyModel::get_number_of_geometries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of boundaries defined in the Rocky project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="182" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a56c275ba379255adc3b2fc2af8ea83d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_materials</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_materials</name>
        <qualifiedname>IRockyModel::get_number_of_materials</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of materials defined in the Rocky project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="187" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a59425e7004ad5636d9a6dc06e31e288d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_material_interactions</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_material_interactions</name>
        <qualifiedname>IRockyModel::get_number_of_material_interactions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of material interactions that it is possible to define with the current materials defined in the Rocky project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="193" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a7fb2a67e2e5126c5140ce80ede04b713" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string IRockyModel::get_geometry_name</definition>
        <argsstring>(int geometry_index) const</argsstring>
        <name>get_geometry_name</name>
        <qualifiedname>IRockyModel::get_geometry_name</qualifiedname>
        <param>
          <type>int</type>
          <declname>geometry_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The name given in the Rocky UI the geometry identified by <computeroutput>geometry_index</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="199" column="17" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a04e185eee0bdd70cc84ad48459584823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string IRockyModel::get_particle_group_name</definition>
        <argsstring>(int particle_group_index) const</argsstring>
        <name>get_particle_group_name</name>
        <qualifiedname>IRockyModel::get_particle_group_name</qualifiedname>
        <param>
          <type>int</type>
          <declname>particle_group_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The name given in the Rocky UI the particle group identified by <computeroutput>particle_group_index</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="205" column="17" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1afa6751b1d56262ace6eab52f3bdcee42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>EBoundaryType</type>
        <definition>EBoundaryType IRockyModel::get_geometry_type</definition>
        <argsstring>(int geometry_index) const</argsstring>
        <name>get_geometry_type</name>
        <qualifiedname>IRockyModel::get_geometry_type</qualifiedname>
        <param>
          <type>int</type>
          <declname>geometry_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An enum key indicating the type of a geometry contained in a project. The possible values are:<linebreak/>
 <computeroutput>btReceivingConveyor = 1</computeroutput><linebreak/>
 <computeroutput>btFeedConveyor = 2</computeroutput><linebreak/>
 <computeroutput>btCustom = 3</computeroutput><linebreak/>
 <computeroutput>btInlet = 4</computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index that identifies a geometry within the Rocky solver. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="218" column="19" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a4788543c01a10a60e17c3623a6847708" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyParticleScalarsModel" kindref="compound">IRockyParticleScalarsModel</ref></type>
        <definition>IRockyParticleScalarsModel IRockyModel::get_particle_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_particle_scalars</name>
        <qualifiedname>IRockyModel::get_particle_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticleScalarsModel" kindref="compound">IRockyParticleScalarsModel</ref></computeroutput> object, which allows users to add new particle scalars or activate particle scalars known to Rocky during the setup of a module. Particle scalars are special variables attached to particles that are able to store values per particle that are preserved between time iterations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="229" column="32" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a9c78ff441fc0220adf389ae4b733c808" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyParticleTransferScalarsModel" kindref="compound">IRockyParticleTransferScalarsModel</ref></type>
        <definition>IRockyParticleTransferScalarsModel IRockyModel::get_particle_transfer_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_particle_transfer_scalars</name>
        <qualifiedname>IRockyModel::get_particle_transfer_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticleTransferScalarsModel" kindref="compound">IRockyParticleTransferScalarsModel</ref></computeroutput> object, which allows users to add new particle transfer scalars or activate particle transfer scalars known to Rocky during the setup of a module. Particle transfer scalars are special particle scalars whose values are reset automatically to zero at the beginning of a new time iteration. Their typical use is the accumulation of values from all contacts or joints associated to a particle or an element at a given time iteration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="240" column="40" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a1076a0e1ada498f29c18caf6840e520a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyParticleBreakageScalarsModel" kindref="compound">IRockyParticleBreakageScalarsModel</ref></type>
        <definition>IRockyParticleBreakageScalarsModel IRockyModel::get_particle_breakage_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_particle_breakage_scalars</name>
        <qualifiedname>IRockyModel::get_particle_breakage_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticleBreakageScalarsModel" kindref="compound">IRockyParticleBreakageScalarsModel</ref></computeroutput> object, which allows users to add new particle breakage scalars or activate particle breakage scalars known to Rocky during the setup of a module. Particle breakage scalars are special particle scalars used in conjunction with instantaneous breakage models, in order to transfer values calculated at a breakage event to the point at which the fragments size distribution is determined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="250" column="40" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ac6b0ba79dc72914434cfce14b9807e22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyJointScalarsModel" kindref="compound">IRockyJointScalarsModel</ref></type>
        <definition>IRockyJointScalarsModel IRockyModel::get_joint_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_joint_scalars</name>
        <qualifiedname>IRockyModel::get_joint_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyJointScalarsModel" kindref="compound">IRockyJointScalarsModel</ref></computeroutput> object, which allows users to add new joint scalars during a setup of a module. Joint scalars are special variables attached to joints in flexible particles that are able to store values that are preserved between time iterations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="260" column="29" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a2fe828d3fb961280069bb549d49a52bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyPairScalarsModel" kindref="compound">IRockyPairScalarsModel</ref></type>
        <definition>IRockyPairScalarsModel IRockyModel::get_pair_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_pair_scalars</name>
        <qualifiedname>IRockyModel::get_pair_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyPairScalarsModel" kindref="compound">IRockyPairScalarsModel</ref></computeroutput> object, which allows users to add new pair scalars during a setup of a module. Pair scalars are special variables that associate values to all combinations of particle groups and combinations of particle groups and geometries within a project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="269" column="28" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a43441eb2d02d3dc9c691328eef5e99b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyGeometryScalarsModel" kindref="compound">IRockyGeometryScalarsModel</ref></type>
        <definition>IRockyGeometryScalarsModel IRockyModel::get_geometry_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_geometry_scalars</name>
        <qualifiedname>IRockyModel::get_geometry_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyGeometryScalarsModel" kindref="compound">IRockyGeometryScalarsModel</ref></computeroutput> object, which allows users to add new boundary scalars during a setup of a module. Boundary scalars are special variables that associate values to all geometries within a project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="277" column="32" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a8a3d81fcb670ecba5ab7ca97e520f0a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyTriangleScalarsModel" kindref="compound">IRockyTriangleScalarsModel</ref></type>
        <definition>IRockyTriangleScalarsModel IRockyModel::get_triangle_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_triangle_scalars</name>
        <qualifiedname>IRockyModel::get_triangle_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyTriangleScalarsModel" kindref="compound">IRockyTriangleScalarsModel</ref></computeroutput> object, which allows users to add new triangle scalars during a setup of a module. Triangle scalars are special variables attached to geometry triangles that are able to store values that are preserved between time iterations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="285" column="32" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a552edce9a8cb94fc20d5286f43f2185b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyContactScalarsModel" kindref="compound">IRockyContactScalarsModel</ref></type>
        <definition>IRockyContactScalarsModel IRockyModel::get_particle_contact_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_particle_contact_scalars</name>
        <qualifiedname>IRockyModel::get_particle_contact_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyContactScalarsModel" kindref="compound">IRockyContactScalarsModel</ref></computeroutput> object, which allows users to add new (particle-to-particle) contact scalars during the setup phase of a module. Contact scalars are special variables attached to contacts that are able to store values that are preserved between time iterations.<linebreak/>
 For handling scalars related to particle-to-triangle contacts, please consult the <linebreak/>
 <computeroutput><ref refid="structIRockyModel_1a5d2028ca0b20101281cf8124a54509f1" kindref="member">IRockyModel::get_triangle_contact_scalars</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="295" column="31" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a5d2028ca0b20101281cf8124a54509f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyContactScalarsModel" kindref="compound">IRockyContactScalarsModel</ref></type>
        <definition>IRockyContactScalarsModel IRockyModel::get_triangle_contact_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_triangle_contact_scalars</name>
        <qualifiedname>IRockyModel::get_triangle_contact_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyContactScalarsModel" kindref="compound">IRockyContactScalarsModel</ref></computeroutput> object, which allows users to add new (particle-to-triangle) contact scalars during the setup phase of a module. Contact scalars are special variables attached to contacts that are able to store values that are preserved between time iterations.<linebreak/>
 For handling scalars for particle-to-particle contacts, please consult the <linebreak/>
 <computeroutput><ref refid="structIRockyModel_1a552edce9a8cb94fc20d5286f43f2185b" kindref="member">IRockyModel::get_particle_contact_scalars</ref></computeroutput> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="305" column="31" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a93ef35ae1eb9cf50ca77ab2070a769ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_current_time</definition>
        <argsstring>() const</argsstring>
        <name>get_current_time</name>
        <qualifiedname>IRockyModel::get_current_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the current simulation time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="312" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ae98c232add53267e07db794e37304a25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_output_interval</definition>
        <argsstring>() const</argsstring>
        <name>get_output_interval</name>
        <qualifiedname>IRockyModel::get_output_interval</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the simulation output interval. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="317" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a38a15145f4f2bb47b79ab785f50d8277" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_active_particles</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_active_particles</name>
        <qualifiedname>IRockyModel::get_number_of_active_particles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current number of active particles in the simulation. This number can vary throughout a simulation because new particles are injected and/or some particles leave the solution domain. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="324" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a4bfb9f69ea26364b55aaad33463de669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_active_triangles</definition>
        <argsstring>()</argsstring>
        <name>get_number_of_active_triangles</name>
        <qualifiedname>IRockyModel::get_number_of_active_triangles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current number of active triangles in the simulation. This number can vary throughout a simulation because the active particle region changes due to particles moving, which will active or de-active triangles that are inside or outside the active region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="332" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a5e03d46944ec6e42596ee5f2d5f8aaeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_processes</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_processes</name>
        <qualifiedname>IRockyModel::get_number_of_processes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of allowed parallel processes when the simulation runs in CPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="340" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a1fd1011aa809fe64647e9cacf1956a11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_number_of_devices</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_devices</name>
        <qualifiedname>IRockyModel::get_number_of_devices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of devices set to run the simulation when using multi-GPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="348" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ae8f8865c809a31988291f9180d7cda2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::get_device_id</definition>
        <argsstring>(int device_index) const</argsstring>
        <name>get_device_id</name>
        <qualifiedname>IRockyModel::get_device_id</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index that identifies a given device when running a simulation in multi-GPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="354" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ae4797d71a2b43ae408fe83e317f818b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::find_point_cloud</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>find_point_cloud</name>
        <qualifiedname>IRockyModel::find_point_cloud</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method searches for a point cloud dataset in the project, by name.</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the point cloud in the Rocky UI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that uniquely identifies the wanted point cloud, if it was actually found. It returns -1 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="366" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1aabdba4a3eee5c51c75c45345f6cf6839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IRockyModel::find_point_cloud_property</definition>
        <argsstring>(int point_cloud_index, const std::string &amp;property_name)</argsstring>
        <name>find_point_cloud_property</name>
        <qualifiedname>IRockyModel::find_point_cloud_property</qualifiedname>
        <param>
          <type>int</type>
          <declname>point_cloud_index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method searches for a specific property name in a point cloud dataset </title><para>imported into Rocky.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point_cloud_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index that uniquely identifies the point cloud.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name given to the property in the file defining the point cloud.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index that uniquely identifies the wanted point cloud property, if it was actually found. It returns -1 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="380" column="9" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a8c57d2cafc46d41dd8477e2521d62b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IRockyModel::set_point_cloud_property_dimension</definition>
        <argsstring>(int point_cloud_index, int property_index, double dimension)</argsstring>
        <name>set_point_cloud_property_dimension</name>
        <qualifiedname>IRockyModel::set_point_cloud_property_dimension</qualifiedname>
        <param>
          <type>int</type>
          <declname>point_cloud_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>property_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>The purpose of this method is to associate a dimensional factor</title><para>to a point cloud property. This factor will be used to nondimensionalize all the associated values. For instance, if the property represents a force, a force dimensional factor must be associated through this method. Dimensional factors for the fundamental magnitudes are provided by functions of an <computeroutput><ref refid="structIRockyModel" kindref="compound">IRockyModel</ref></computeroutput> object.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point_cloud_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index that uniquely identifies the point cloud.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index that uniquely identifies the point cloud property.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate dimensional factor for the point cloud property. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="396" column="10" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a65411ff4a85f74e96457979f8158eccd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structIRockyCurveCollectionData" kindref="compound">IRockyCurveCollectionData</ref></type>
        <definition>IRockyCurveCollectionData IRockyModel::get_curve_collections</definition>
        <argsstring>() const</argsstring>
        <name>get_curve_collections</name>
        <qualifiedname>IRockyModel::get_curve_collections</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyCurveCollectionData" kindref="compound">IRockyCurveCollectionData</ref></computeroutput> object which allows to create and manage custom time curves and/or custom cross-plot curves that can be displayed in the Rocky UI. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="404" column="31" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1acdec4e25234fe0304e441d82ccfc3192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_length_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_length_factor</name>
        <qualifiedname>IRockyModel::get_length_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The length factor in meters, used to nondimensionalize length parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="411" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1ae8c9acf215323ada8de9ff9344b1db94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_mass_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_mass_factor</name>
        <qualifiedname>IRockyModel::get_mass_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The length factor in kilograms, used to nondimensionalize mass parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="416" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1aadaee25a53bade557d45bf633e995690" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_time_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_time_factor</name>
        <qualifiedname>IRockyModel::get_time_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The time factor in seconds, used to nondimensionalize time parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="421" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1aa12e90812c32e8092c0a67c28b5cc21b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_viscosity_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_viscosity_factor</name>
        <qualifiedname>IRockyModel::get_viscosity_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The viscosity factor in Pa.s, used to nondimensionalize viscosity parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="426" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1afdf327f827860b500a82c511492d2f1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_temperature_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_temperature_factor</name>
        <qualifiedname>IRockyModel::get_temperature_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The temperature factor in Kelvin, used to nondimensionalize temperature parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="431" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a8800430b5e336d3fd04d0fce83f83883" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_force_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_force_factor</name>
        <qualifiedname>IRockyModel::get_force_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The force factor in Newton, used to nondimensionalize force parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="436" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1abb53bd424c9e2d61065410a0b2d53b8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_pressure_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_pressure_factor</name>
        <qualifiedname>IRockyModel::get_pressure_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pressure factor in Pascal, used to nondimensionalize pressure parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="441" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a9fba76aa437dad8ff9674eedb0b6acc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_energy_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_energy_factor</name>
        <qualifiedname>IRockyModel::get_energy_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The energy factor in Joule, used to nondimensionalize energy parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="446" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyModel_1a33a082f281ae2ca159cdb420d2fabbb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IRockyModel::get_power_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_power_factor</name>
        <qualifiedname>IRockyModel::get_power_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The energy factor in Watts, used to nondimensionalize power parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_api.h" line="451" column="12" bodyfile="source/c++/rocky20/api/rocky_api.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structIRockyModel" kindref="compound">IRockyModel</ref></computeroutput> includes auxiliary functions for setting up a custom module. Most of the preprocessing methods (such as <computeroutput>ROCKY_PLUGIN_SETUP</computeroutput>, <computeroutput>ROCKY_PLUGIN_INITIALIZE</computeroutput>, <computeroutput>ROCKY_PLUGIN_NON_DIMENSIONALIZE</computeroutput>, etc) provide an <computeroutput><ref refid="structIRockyModel" kindref="compound">IRockyModel</ref></computeroutput> object as an argument. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_api.h" line="57" column="1" bodyfile="source/c++/rocky20/api/rocky_api.h" bodystart="58" bodyend="467"/>
    <listofallmembers>
      <member refid="structIRockyModel_1ae4797d71a2b43ae408fe83e317f818b7" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>find_point_cloud</name></member>
      <member refid="structIRockyModel_1aabdba4a3eee5c51c75c45345f6cf6839" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>find_point_cloud_property</name></member>
      <member refid="structIRockyModel_1a4f71066b464f74b32fb560c8a58dd030" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_contact_data_recorder</name></member>
      <member refid="structIRockyModel_1a93ef35ae1eb9cf50ca77ab2070a769ab" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_current_time</name></member>
      <member refid="structIRockyModel_1a65411ff4a85f74e96457979f8158eccd" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_curve_collections</name></member>
      <member refid="structIRockyModel_1ae8f8865c809a31988291f9180d7cda2b" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_device_id</name></member>
      <member refid="structIRockyModel_1a9fba76aa437dad8ff9674eedb0b6acc0" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_energy_factor</name></member>
      <member refid="structIRockyModel_1a8800430b5e336d3fd04d0fce83f83883" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_force_factor</name></member>
      <member refid="structIRockyModel_1a7fb2a67e2e5126c5140ce80ede04b713" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_geometry_name</name></member>
      <member refid="structIRockyModel_1a43441eb2d02d3dc9c691328eef5e99b5" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_geometry_scalars</name></member>
      <member refid="structIRockyModel_1afa6751b1d56262ace6eab52f3bdcee42" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_geometry_type</name></member>
      <member refid="structIRockyModel_1a5dcfa443dbca79a9c34001fca9873b93" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_gravity</name></member>
      <member refid="structIRockyModel_1ac9a1e9a6ac20f978dd08f6fc67fd0904" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_interactions_data</name></member>
      <member refid="structIRockyModel_1ac6b0ba79dc72914434cfce14b9807e22" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_joint_scalars</name></member>
      <member refid="structIRockyModel_1acdec4e25234fe0304e441d82ccfc3192" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_length_factor</name></member>
      <member refid="structIRockyModel_1ae8c9acf215323ada8de9ff9344b1db94" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_mass_factor</name></member>
      <member refid="structIRockyModel_1a38a15145f4f2bb47b79ab785f50d8277" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_active_particles</name></member>
      <member refid="structIRockyModel_1a4bfb9f69ea26364b55aaad33463de669" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_active_triangles</name></member>
      <member refid="structIRockyModel_1a1fd1011aa809fe64647e9cacf1956a11" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_devices</name></member>
      <member refid="structIRockyModel_1a54b2c41da7a4f9f719ac76fb83f0eb0a" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_geometries</name></member>
      <member refid="structIRockyModel_1a59425e7004ad5636d9a6dc06e31e288d" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_material_interactions</name></member>
      <member refid="structIRockyModel_1a56c275ba379255adc3b2fc2af8ea83d7" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_materials</name></member>
      <member refid="structIRockyModel_1a1b8fe53d49b68f6097261e884fa769c5" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_particle_groups</name></member>
      <member refid="structIRockyModel_1a1c6cf48153d8b8278bcc67c3f31eff7b" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_particles</name></member>
      <member refid="structIRockyModel_1a5e03d46944ec6e42596ee5f2d5f8aaeb" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_number_of_processes</name></member>
      <member refid="structIRockyModel_1ae98c232add53267e07db794e37304a25" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_output_interval</name></member>
      <member refid="structIRockyModel_1a2fe828d3fb961280069bb549d49a52bc" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_pair_scalars</name></member>
      <member refid="structIRockyModel_1a1076a0e1ada498f29c18caf6840e520a" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_particle_breakage_scalars</name></member>
      <member refid="structIRockyModel_1a552edce9a8cb94fc20d5286f43f2185b" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_particle_contact_scalars</name></member>
      <member refid="structIRockyModel_1a04e185eee0bdd70cc84ad48459584823" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_particle_group_name</name></member>
      <member refid="structIRockyModel_1a4788543c01a10a60e17c3623a6847708" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_particle_scalars</name></member>
      <member refid="structIRockyModel_1a9c78ff441fc0220adf389ae4b733c808" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_particle_transfer_scalars</name></member>
      <member refid="structIRockyModel_1a33a082f281ae2ca159cdb420d2fabbb8" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_power_factor</name></member>
      <member refid="structIRockyModel_1abb53bd424c9e2d61065410a0b2d53b8b" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_pressure_factor</name></member>
      <member refid="structIRockyModel_1a3caea658ae1557e11ed4e72dc80fb0a2" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_softening_factor</name></member>
      <member refid="structIRockyModel_1afdf327f827860b500a82c511492d2f1e" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_temperature_factor</name></member>
      <member refid="structIRockyModel_1aadaee25a53bade557d45bf633e995690" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_time_factor</name></member>
      <member refid="structIRockyModel_1a6c0be64519ddd583f26570ece5a4aee1" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_timestep</name></member>
      <member refid="structIRockyModel_1a5d2028ca0b20101281cf8124a54509f1" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_triangle_contact_scalars</name></member>
      <member refid="structIRockyModel_1a8a3d81fcb670ecba5ab7ca97e520f0a7" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_triangle_scalars</name></member>
      <member refid="structIRockyModel_1aa12e90812c32e8092c0a67c28b5cc21b" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>get_viscosity_factor</name></member>
      <member refid="structIRockyModel_1a021623b1b816354c3fe778f6de07c2e5" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>has_adhesion</name></member>
      <member refid="structIRockyModel_1ac1f146615e6b930769ff4008c4a0bb6c" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>is_thermal_simulation</name></member>
      <member refid="structIRockyModel_1ac9dd7ca3cdad5289325c080a10bf2ad7" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>set_adhesive_distance</name></member>
      <member refid="structIRockyModel_1a4ae85b1a5081581bd5c758d347d7e31c" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>set_gravity</name></member>
      <member refid="structIRockyModel_1a8c30579eb47a2e20abd0fc393b3b2532" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>set_minimum_restitution_coefficient</name></member>
      <member refid="structIRockyModel_1a8c57d2cafc46d41dd8477e2521d62b12" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>set_point_cloud_property_dimension</name></member>
      <member refid="structIRockyModel_1ada3d1d7b6e1de1d7e4ef0739a1f4dd8a" prot="public" virt="non-virtual"><scope>IRockyModel</scope><name>trigger_update_timestep</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
