<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structIRockyParticle" kind="struct" language="C++" prot="public">
    <compoundname>IRockyParticle</compoundname>
    <includes refid="rocky__particle__api_8hpp" local="no">rocky_particle_api.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structIRockyParticle_1a39ab5586c7a893cbe156d211a10c5efd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyMaterial IRockyParticle::get_material</definition>
        <argsstring>() const</argsstring>
        <name>get_material</name>
        <qualifiedname>IRockyParticle::get_material</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></computeroutput> object that gives access to the values of physical properties associated to the material from which the particle is made.</para>
</simplesect>
<simplesect kind="attention"><para>Invoking this method on assembly particles results on undefined behavior, as assembly particles may have multiple materials. Prefer to use <computeroutput><ref refid="structIRockyParticle_1a1a737fd34952d960d93f4f8940fd804e" kindref="member">IRockyParticle::get_assembly_part_material</ref></computeroutput> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="38" column="36" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1ab6a1844166c571196740d7cb3e8331a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyParticle::get_centroid_position</definition>
        <argsstring>() const</argsstring>
        <name>get_centroid_position</name>
        <qualifiedname>IRockyParticle::get_centroid_position</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Cartesian coordinates of the current position of the particle&apos;s centroid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="44" column="29" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a9acf8ddfc5a9c3974e19e616193de571" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_mass</definition>
        <argsstring>() const</argsstring>
        <name>get_mass</name>
        <qualifiedname>IRockyParticle::get_mass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current value of the particle&apos;s mass. This value will be different from the original particle&apos;s mass only if the mass increment particle scalar is enabled in the simulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="51" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a0239b6fe520fb1bc69196cf4c7c298ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_original_mass</definition>
        <argsstring>() const</argsstring>
        <name>get_original_mass</name>
        <qualifiedname>IRockyParticle::get_original_mass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The original value of the mass of a particle when it enters into the simulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="57" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a702b4bce44c268065cf9961ea88375c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_size</definition>
        <argsstring>() const</argsstring>
        <name>get_size</name>
        <qualifiedname>IRockyParticle::get_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current value of the particle&apos;s size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="62" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1af2ebac6fa5a5f9dbb5c37423ef96c471" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_release_time</definition>
        <argsstring>() const</argsstring>
        <name>get_release_time</name>
        <qualifiedname>IRockyParticle::get_release_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The time at which the particle was released. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="67" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1ad931e6e8afe554323408148c245a537e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_cgm_scale_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_cgm_scale_factor</name>
        <qualifiedname>IRockyParticle::get_cgm_scale_factor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The particle&apos;s Coarse-grain Modeling (CGM) scale factor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="72" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a9a1df9319687462ce0c43b10e691299f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_volume</definition>
        <argsstring>() const</argsstring>
        <name>get_volume</name>
        <qualifiedname>IRockyParticle::get_volume</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current value of the particle&apos;s volume. If the particle is porous (porosity &gt; 0), the volume returned is the particle&apos;s total or bulk volume, that is the volume obtained by summing the solid volume and the pore volume. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="79" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a0fac38fa13ec5aa6495119247b8aa5d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_solid_volume</definition>
        <argsstring>() const</argsstring>
        <name>get_solid_volume</name>
        <qualifiedname>IRockyParticle::get_solid_volume</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current value of the particle&apos;s solid volume. If the particle is porous (porosity &gt; 0), the solid volume is the volume of the solid matrix. Otherwise, the volume returned by this function will coincide with the one returned by the <computeroutput>get_volume</computeroutput> function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="87" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="435" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a2200149822388403dfd42afe5574f1f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_surface_area</definition>
        <argsstring>() const</argsstring>
        <name>get_surface_area</name>
        <qualifiedname>IRockyParticle::get_surface_area</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current value of the particle&apos;s surface area. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="92" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a5951469e0997dab052087895e2ebd95c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_equivalent_diameter</definition>
        <argsstring>() const</argsstring>
        <name>get_equivalent_diameter</name>
        <qualifiedname>IRockyParticle::get_equivalent_diameter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The equivalent diameter of the particle, which is defined as the diameter of a sphere of volume equal to the particle&apos;s volume. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="98" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1ad60e62be9c1084b624f690d94ce0474b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_sphericity</definition>
        <argsstring>() const</argsstring>
        <name>get_sphericity</name>
        <qualifiedname>IRockyParticle::get_sphericity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The particle&apos;s sphericity value, which is defined as the ratio of <formula id="0">$A_s$</formula> to <formula id="1">$A_p$</formula>, where <formula id="0">$A_s$</formula> is the surface area of a sphere with the same volume as the particle, whereas <formula id="1">$A_p$</formula> is the surface area of the particle itself. In general terms, the sphericity measures how closely the particle&apos;s actual shape resembles the shape of a perfect sphere. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="107" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="460" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a38420bd69fec1d3a803cbc5d79ea0197" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyParticle::get_translational_velocity</definition>
        <argsstring>() const</argsstring>
        <name>get_translational_velocity</name>
        <qualifiedname>IRockyParticle::get_translational_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current particle&apos;s translational velocity vector expressed in Cartesian coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="113" column="29" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a1520d3fc8a40e54ad4c47ddb428fddff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyParticle::get_rotational_velocity</definition>
        <argsstring>() const</argsstring>
        <name>get_rotational_velocity</name>
        <qualifiedname>IRockyParticle::get_rotational_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current particle&apos;s rotational velocity vector expressed in Cartesian coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="119" column="29" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a35881133856b678e30b00dfa1c604b96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_impact_energy</definition>
        <argsstring>() const</argsstring>
        <name>get_impact_energy</name>
        <qualifiedname>IRockyParticle::get_impact_energy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The sum of the impact energy registered in all active contacts on the surface of the particle until the current time.</para>
</simplesect>
<simplesect kind="attention"><para>This value will be available only if an instantaneous breakage model is enabled in the simulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="128" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a3479e29c70b861ee7724b3dec473f126" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_strength</definition>
        <argsstring>() const</argsstring>
        <name>get_strength</name>
        <qualifiedname>IRockyParticle::get_strength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A random value between 0 and 1 assigned to a particle at the time of generation. This value can be related to the breakage probability in a custom instantaneous breakage model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="135" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="450" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a42a986a1659cf8a4374bf43ef6a53f63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyParticle::get_gravity</definition>
        <argsstring>() const</argsstring>
        <name>get_gravity</name>
        <qualifiedname>IRockyParticle::get_gravity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The gravitational acceleration vector in Cartesian coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="141" column="29" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="425" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a063a7d183c621dfffd7fdd644635e51a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyParticle::get_particle_group_index</definition>
        <argsstring>() const</argsstring>
        <name>get_particle_group_index</name>
        <qualifiedname>IRockyParticle::get_particle_group_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index that uniquely identifies the particle group to which the particle belongs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="147" column="25" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a42f25fc898697efc23ee5576b936efa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyParticle::get_material_index</definition>
        <argsstring>() const</argsstring>
        <name>get_material_index</name>
        <qualifiedname>IRockyParticle::get_material_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The material index associated to that particle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="152" column="25" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="470" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1ad9ba593e2adb58a8273b23214b14b60b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_rolling_resistance_coefficient</definition>
        <argsstring>() const</argsstring>
        <name>get_rolling_resistance_coefficient</name>
        <qualifiedname>IRockyParticle::get_rolling_resistance_coefficient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The particle&apos;s rolling resistance coefficient </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="157" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="474" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1adf12c219fb518212af2932b99c39ae52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double &gt;</type>
        <definition>ROCKY_FUNCTIONS thrust::tuple&lt; double3, double &gt; IRockyParticle::get_orientation_axis_angle</definition>
        <argsstring>() const</argsstring>
        <name>get_orientation_axis_angle</name>
        <qualifiedname>IRockyParticle::get_orientation_axis_angle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A tuple whose two components define the axis-angle particle orientation. The first one is a three dimensional vector representing the orientation axis, the second one is a single value representing the angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="164" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="493" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1afd3262f90c7304197e8915b4d40a58f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double4</type>
        <definition>ROCKY_FUNCTIONS double4 IRockyParticle::get_orientation_quaternion</definition>
        <argsstring>() const</argsstring>
        <name>get_orientation_quaternion</name>
        <qualifiedname>IRockyParticle::get_orientation_quaternion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The quaternion that represents the particle&apos;s orientation, expressed as a four-dimensional array <formula id="2">$(q_r, q_i, q_j, q_k)$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="170" column="29" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="478" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1ac520e2ca9342f42a1260d42bb1f882a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyParticle::get_resultant_force</definition>
        <argsstring>() const</argsstring>
        <name>get_resultant_force</name>
        <qualifiedname>IRockyParticle::get_resultant_force</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resultant force vector acting on the particle, in Cartesian coordinates. This force is a combination of the forces calculated during the current time iteration that are applied on the particle, including contact forces, joint forces, fluid forces, and other forces coming from custom modules. If this method is called before the force calculation stage it will return a zero vector.</para>
</simplesect>
<simplesect kind="attention"><para>The force of gravity acting on the particle is not included in this resultant force. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="181" column="29" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a58a9a71f0e2cd25a475c5681682a8c7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double3</type>
        <definition>ROCKY_FUNCTIONS double3 IRockyParticle::get_resultant_moment</definition>
        <argsstring>() const</argsstring>
        <name>get_resultant_moment</name>
        <qualifiedname>IRockyParticle::get_resultant_moment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resultant moment vector applied to the particle, in Cartesian coordinates. The resultant moment is the combination of all moments caused by the forces acting upon the particle, including contact forces, joint forces, fluid forces, and other forces coming from custom modules. If this method is called before the force calculation stage it will return a zero vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="189" column="29" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="488" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a8c3db18d0afb4ebe6d4654d833d904cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_thermal_conductivity</definition>
        <argsstring>() const</argsstring>
        <name>get_thermal_conductivity</name>
        <qualifiedname>IRockyParticle::get_thermal_conductivity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The particle&apos;s thermal conductivity. If this property was defined as variable in the module&apos;s specification file, the method will return the value specifically assigned to the particle. Otherwise, it will return the value specified in the Rocky UI for the particle&apos;s associated material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="197" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a876773eeef5269e1335ae8a43cbb2d97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::set_thermal_conductivity</definition>
        <argsstring>(double value)</argsstring>
        <name>set_thermal_conductivity</name>
        <qualifiedname>IRockyParticle::set_thermal_conductivity</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the thermal conductivity value for the particle. This operation will</title><para>be allowed only if thermal conductivity was defined as a variable property for particles in the module&apos;s specification file. Otherwise, a segmentation fault will occur.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The thermal conductivity to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="206" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a6d11bc8367e406b7a56f98d92871f059" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_poisson_ratio</definition>
        <argsstring>() const</argsstring>
        <name>get_poisson_ratio</name>
        <qualifiedname>IRockyParticle::get_poisson_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The particle&apos;s Poisson&apos;s ratio value. If this property was defined as variable in the module&apos;s specification file, the method will return the value specifically assigned to the particle. Otherwise, it will return the value specified in the Rocky UI for the particle&apos;s associated material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="214" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a7225418a496fdaae3dc3ba7bc3d7ebca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::set_poisson_ratio</definition>
        <argsstring>(double value)</argsstring>
        <name>set_poisson_ratio</name>
        <qualifiedname>IRockyParticle::set_poisson_ratio</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the Poisson&apos;s ratio value for the particle. This operation will</title><para>be allowed only if Poisson&apos;s ratio was defined as a variable property for particles in the module&apos;s specification file. Otherwise, a segmentation fault will occur.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The Poisson&apos;s ratio to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="223" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a5007ecaea7e26cfe50579a959ba91c07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS double</type>
        <definition>ROCKY_FUNCTIONS double IRockyParticle::get_specific_heat</definition>
        <argsstring>() const</argsstring>
        <name>get_specific_heat</name>
        <qualifiedname>IRockyParticle::get_specific_heat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The particle&apos;s specific heat value. If this property was defined as variable in the module&apos;s specification file, the method will return the value specifically assigned to the particle. Otherwise, it will return the value specified in the Rocky UI for the particle&apos;s associated material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="231" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a2949c9bf228226090d1e7cf95b63c38f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS int</type>
        <definition>ROCKY_FUNCTIONS int IRockyParticle::get_tag</definition>
        <argsstring>() const</argsstring>
        <name>get_tag</name>
        <qualifiedname>IRockyParticle::get_tag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The tag value inherited from the tags assigned to the segments of a custom fiber, if the <computeroutput><ref refid="structIRockyParticle" kindref="compound">IRockyParticle</ref></computeroutput> object represents an element of a custom fiber. The values of those tags must be specified in the column labeled &quot;tag&quot; in the csv file that defines the geometry of a custom fiber. All elements that arise from the subdivision of a given segment inherit the tag value assigned to that segment. If tags are not defined for a custom fiber or if this function is used with particles which are not elements of a custom fiber, this function will return -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="242" column="25" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a6ea5a3cc6356d1b80b3e8cde1fe43211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::set_specific_heat</definition>
        <argsstring>(double value)</argsstring>
        <name>set_specific_heat</name>
        <qualifiedname>IRockyParticle::set_specific_heat</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the specific heat value for the particle. This operation will</title><para>be allowed only if Poisson&apos;s ratio was defined as a variable property for particles in the module&apos;s specification file. Otherwise, a segmentation fault will occur.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific heat to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="251" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a305fe472ba945e793d450053dc3b092f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyParticleScalars" kindref="compound">IRockyParticleScalars</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyParticleScalars IRockyParticle::get_scalars</definition>
        <argsstring>()</argsstring>
        <name>get_scalars</name>
        <qualifiedname>IRockyParticle::get_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticleScalars" kindref="compound">IRockyParticleScalars</ref></computeroutput> object, that gives access to all particle scalars variables defined in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="257" column="43" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="536" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a0899498770cbebb4b538cbc736e82231" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS const <ref refid="structIRockyParticleScalars" kindref="compound">IRockyParticleScalars</ref></type>
        <definition>ROCKY_FUNCTIONS const IRockyParticleScalars IRockyParticle::get_scalars</definition>
        <argsstring>() const</argsstring>
        <name>get_scalars</name>
        <qualifiedname>IRockyParticle::get_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const <computeroutput><ref refid="structIRockyParticleScalars" kindref="compound">IRockyParticleScalars</ref></computeroutput> object, that gives access to all particle scalars variables defined in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="263" column="49" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="541" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1af1bcfda3336619839953a01fbe7828ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyParticleTransferScalars" kindref="compound">IRockyParticleTransferScalars</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyParticleTransferScalars IRockyParticle::get_transfer_scalars</definition>
        <argsstring>()</argsstring>
        <name>get_transfer_scalars</name>
        <qualifiedname>IRockyParticle::get_transfer_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticleTransferScalars" kindref="compound">IRockyParticleTransferScalars</ref></computeroutput> object, that gives access to all particle transfer scalars variables defined in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="269" column="51" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a9efea10efd70526b3ffe3f723253e44e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyParticleBreakageScalars" kindref="compound">IRockyParticleBreakageScalars</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyParticleBreakageScalars IRockyParticle::get_breakage_scalars</definition>
        <argsstring>()</argsstring>
        <name>get_breakage_scalars</name>
        <qualifiedname>IRockyParticle::get_breakage_scalars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyParticleBreakageScalars" kindref="compound">IRockyParticleBreakageScalars</ref></computeroutput> object, that gives access to all particle breakage scalars variables defined in the project. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="275" column="51" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="551" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a2fdb4c9362bd6b650aba18ad2fb6c66d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::remove</definition>
        <argsstring>()</argsstring>
        <name>remove</name>
        <qualifiedname>IRockyParticle::remove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method removes permanently the particle from the simulation.</title><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="280" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1aebc83f532d4bd643046c1c8a93e09f1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::add_force</definition>
        <argsstring>(const double3 &amp;force)</argsstring>
        <name>add_force</name>
        <qualifiedname>IRockyParticle::add_force</qualifiedname>
        <param>
          <type>const double3 &amp;</type>
          <declname>force</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a custom calculated force to the contact and body forces</title><para>acting on the particle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>The custom force vector in Cartesian coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="288" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a8bb789078434998231949cc5c7c5f3b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::add_moment</definition>
        <argsstring>(const double3 &amp;moment)</argsstring>
        <name>add_moment</name>
        <qualifiedname>IRockyParticle::add_moment</qualifiedname>
        <param>
          <type>const double3 &amp;</type>
          <declname>moment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sums a custom calculated moment to the moments</title><para>acting on the particle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>moment</parametername>
</parameternamelist>
<parameterdescription>
<para>The custom moment vector in Cartesian coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="296" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1ae6c885d84af14576949205c3b9fb5bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::set_frozen</definition>
        <argsstring>(bool frozen)</argsstring>
        <name>set_frozen</name>
        <qualifiedname>IRockyParticle::set_frozen</qualifiedname>
        <param>
          <type>bool</type>
          <declname>frozen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method sets the frozen state of a particle. When the frozen state of a particle</title><para>is set to <computeroutput>true</computeroutput>, the solution of the motion equations for this particle are skipped afterwards.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frozen</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the particle should be frozen, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="305" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="575" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a98c502d7e6af16bbefdb1ff769810980" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::disable_related_particle_contacts</definition>
        <argsstring>()</argsstring>
        <name>disable_related_particle_contacts</name>
        <qualifiedname>IRockyParticle::disable_related_particle_contacts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method activates the conditional disabling of particle-to-particle contacts detection.</title><para>A given particle-to-particle contact will be ignored during the detection stage only if this method has been applied to both particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="312" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a964a3f27bd8217bbff4301539ecbc1fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::enable_related_particle_contacts</definition>
        <argsstring>()</argsstring>
        <name>enable_related_particle_contacts</name>
        <qualifiedname>IRockyParticle::enable_related_particle_contacts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method deactivates the conditional disabling of particle-to-particle contact detection,</title><para>previously activated using the <computeroutput><ref refid="structIRockyParticle_1a98c502d7e6af16bbefdb1ff769810980" kindref="member">IRockyParticle::disable_related_particle_contacts</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="318" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a1c445981cc6ac5392560d863927b4211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::disable_related_triangle_contacts</definition>
        <argsstring>()</argsstring>
        <name>disable_related_triangle_contacts</name>
        <qualifiedname>IRockyParticle::disable_related_triangle_contacts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method disables the detection of particle-to-triangle contacts for the particle.</title><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="323" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a6d87618d43d29b5d2dcd7f5946e1d0f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::enable_related_triangle_contacts</definition>
        <argsstring>()</argsstring>
        <name>enable_related_triangle_contacts</name>
        <qualifiedname>IRockyParticle::enable_related_triangle_contacts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables the detection of particle-to-triangle contacts for the particle.</title><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="328" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a0ddf76406051617c1cf3ad5602230e74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS const double3</type>
        <definition>ROCKY_FUNCTIONS const double3 IRockyParticle::get_moment_of_inertia</definition>
        <argsstring>() const</argsstring>
        <name>get_moment_of_inertia</name>
        <qualifiedname>IRockyParticle::get_moment_of_inertia</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A 3D vector whose components are the principal values of the particle&apos;s moment of inertia tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="333" column="35" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="600" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a0ede768e89206dcba2b8929eefa961e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyParticle::is_element</definition>
        <argsstring>() const</argsstring>
        <name>is_element</name>
        <qualifiedname>IRockyParticle::is_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the given particle is an element within a flexible particle, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="338" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a7324f759e40ff9147728dd7e666f9816" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS bool</type>
        <definition>ROCKY_FUNCTIONS bool IRockyParticle::is_assembly</definition>
        <argsstring>() const</argsstring>
        <name>is_assembly</name>
        <qualifiedname>IRockyParticle::is_assembly</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the given particle is an assembly, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="343" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a7174efcf1264a05c6bd5cabe2e927148" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS size_t</type>
        <definition>ROCKY_FUNCTIONS size_t IRockyParticle::get_number_of_assembly_parts</definition>
        <argsstring>() const</argsstring>
        <name>get_number_of_assembly_parts</name>
        <qualifiedname>IRockyParticle::get_number_of_assembly_parts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of parts that compose the assembly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="348" column="28" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="615" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1a1a737fd34952d960d93f4f8940fd804e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS <ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></type>
        <definition>ROCKY_FUNCTIONS IRockyMaterial IRockyParticle::get_assembly_part_material</definition>
        <argsstring>(size_t part_id) const</argsstring>
        <name>get_assembly_part_material</name>
        <qualifiedname>IRockyParticle::get_assembly_part_material</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>part_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of an assembly part. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="structIRockyMaterial" kindref="compound">IRockyMaterial</ref></computeroutput> object that gives access to the values of physical properties associated to the material from which the assembly part referent to <computeroutput>part_id</computeroutput> is made. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="356" column="36" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1af4d25f3ada35c955fd0fe7ba24a244c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::remove_from_contacts_search</definition>
        <argsstring>()</argsstring>
        <name>remove_from_contacts_search</name>
        <qualifiedname>IRockyParticle::remove_from_contacts_search</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method disables the detection of all contacts for the particle.</title><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="361" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="626" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="structIRockyParticle_1afe35f545701281de61b805237f4c5d8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ROCKY_FUNCTIONS void</type>
        <definition>ROCKY_FUNCTIONS void IRockyParticle::add_to_contacts_search</definition>
        <argsstring>()</argsstring>
        <name>add_to_contacts_search</name>
        <qualifiedname>IRockyParticle::add_to_contacts_search</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>This method enables the detection of all contacts for the particle.</title><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="366" column="26" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="631" bodyend="634"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structIRockyParticle" kindref="compound">IRockyParticle</ref></computeroutput> is an interface for the internal particle object in Rocky. A particle object is the code representation of an individual particle in a Rocky simulation. It has several access methods to particle-related properties, as well as <emphasis>particle scalars</emphasis>, which are special variables that store values per particle that are preserved between time iterations. Values of <emphasis>particle scalars</emphasis> can be displayed in a 3D window as any other built-in particle property in Rocky. All property and variable values made available through <computeroutput><ref refid="structIRockyParticle" kindref="compound">IRockyParticle</ref></computeroutput> are dimensionless. </para>
    </detaileddescription>
    <location file="source/c++/rocky20/api/rocky_particle_api.hpp" line="27" column="1" bodyfile="source/c++/rocky20/api/rocky_particle_api.hpp" bodystart="28" bodyend="373"/>
    <listofallmembers>
      <member refid="structIRockyParticle_1aebc83f532d4bd643046c1c8a93e09f1d" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>add_force</name></member>
      <member refid="structIRockyParticle_1a8bb789078434998231949cc5c7c5f3b4" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>add_moment</name></member>
      <member refid="structIRockyParticle_1afe35f545701281de61b805237f4c5d8f" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>add_to_contacts_search</name></member>
      <member refid="structIRockyParticle_1a98c502d7e6af16bbefdb1ff769810980" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>disable_related_particle_contacts</name></member>
      <member refid="structIRockyParticle_1a1c445981cc6ac5392560d863927b4211" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>disable_related_triangle_contacts</name></member>
      <member refid="structIRockyParticle_1a964a3f27bd8217bbff4301539ecbc1fc" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>enable_related_particle_contacts</name></member>
      <member refid="structIRockyParticle_1a6d87618d43d29b5d2dcd7f5946e1d0f4" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>enable_related_triangle_contacts</name></member>
      <member refid="structIRockyParticle_1a1a737fd34952d960d93f4f8940fd804e" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_assembly_part_material</name></member>
      <member refid="structIRockyParticle_1a9efea10efd70526b3ffe3f723253e44e" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_breakage_scalars</name></member>
      <member refid="structIRockyParticle_1ab6a1844166c571196740d7cb3e8331a2" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_centroid_position</name></member>
      <member refid="structIRockyParticle_1ad931e6e8afe554323408148c245a537e" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_cgm_scale_factor</name></member>
      <member refid="structIRockyParticle_1a5951469e0997dab052087895e2ebd95c" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_equivalent_diameter</name></member>
      <member refid="structIRockyParticle_1a42a986a1659cf8a4374bf43ef6a53f63" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_gravity</name></member>
      <member refid="structIRockyParticle_1a35881133856b678e30b00dfa1c604b96" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_impact_energy</name></member>
      <member refid="structIRockyParticle_1a9acf8ddfc5a9c3974e19e616193de571" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_mass</name></member>
      <member refid="structIRockyParticle_1a39ab5586c7a893cbe156d211a10c5efd" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_material</name></member>
      <member refid="structIRockyParticle_1a42f25fc898697efc23ee5576b936efa4" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_material_index</name></member>
      <member refid="structIRockyParticle_1a0ddf76406051617c1cf3ad5602230e74" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_moment_of_inertia</name></member>
      <member refid="structIRockyParticle_1a7174efcf1264a05c6bd5cabe2e927148" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_number_of_assembly_parts</name></member>
      <member refid="structIRockyParticle_1adf12c219fb518212af2932b99c39ae52" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_orientation_axis_angle</name></member>
      <member refid="structIRockyParticle_1afd3262f90c7304197e8915b4d40a58f6" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_orientation_quaternion</name></member>
      <member refid="structIRockyParticle_1a0239b6fe520fb1bc69196cf4c7c298ac" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_original_mass</name></member>
      <member refid="structIRockyParticle_1a063a7d183c621dfffd7fdd644635e51a" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_particle_group_index</name></member>
      <member refid="structIRockyParticle_1a6d11bc8367e406b7a56f98d92871f059" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_poisson_ratio</name></member>
      <member refid="structIRockyParticle_1af2ebac6fa5a5f9dbb5c37423ef96c471" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_release_time</name></member>
      <member refid="structIRockyParticle_1ac520e2ca9342f42a1260d42bb1f882a0" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_resultant_force</name></member>
      <member refid="structIRockyParticle_1a58a9a71f0e2cd25a475c5681682a8c7e" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_resultant_moment</name></member>
      <member refid="structIRockyParticle_1ad9ba593e2adb58a8273b23214b14b60b" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_rolling_resistance_coefficient</name></member>
      <member refid="structIRockyParticle_1a1520d3fc8a40e54ad4c47ddb428fddff" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_rotational_velocity</name></member>
      <member refid="structIRockyParticle_1a305fe472ba945e793d450053dc3b092f" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_scalars</name></member>
      <member refid="structIRockyParticle_1a0899498770cbebb4b538cbc736e82231" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_scalars</name></member>
      <member refid="structIRockyParticle_1a702b4bce44c268065cf9961ea88375c3" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_size</name></member>
      <member refid="structIRockyParticle_1a0fac38fa13ec5aa6495119247b8aa5d6" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_solid_volume</name></member>
      <member refid="structIRockyParticle_1a5007ecaea7e26cfe50579a959ba91c07" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_specific_heat</name></member>
      <member refid="structIRockyParticle_1ad60e62be9c1084b624f690d94ce0474b" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_sphericity</name></member>
      <member refid="structIRockyParticle_1a3479e29c70b861ee7724b3dec473f126" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_strength</name></member>
      <member refid="structIRockyParticle_1a2200149822388403dfd42afe5574f1f9" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_surface_area</name></member>
      <member refid="structIRockyParticle_1a2949c9bf228226090d1e7cf95b63c38f" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_tag</name></member>
      <member refid="structIRockyParticle_1a8c3db18d0afb4ebe6d4654d833d904cb" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_thermal_conductivity</name></member>
      <member refid="structIRockyParticle_1af1bcfda3336619839953a01fbe7828ea" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_transfer_scalars</name></member>
      <member refid="structIRockyParticle_1a38420bd69fec1d3a803cbc5d79ea0197" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_translational_velocity</name></member>
      <member refid="structIRockyParticle_1a9a1df9319687462ce0c43b10e691299f" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>get_volume</name></member>
      <member refid="structIRockyParticle_1a7324f759e40ff9147728dd7e666f9816" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>is_assembly</name></member>
      <member refid="structIRockyParticle_1a0ede768e89206dcba2b8929eefa961e7" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>is_element</name></member>
      <member refid="structIRockyParticle_1a2fdb4c9362bd6b650aba18ad2fb6c66d" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>remove</name></member>
      <member refid="structIRockyParticle_1af4d25f3ada35c955fd0fe7ba24a244c4" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>remove_from_contacts_search</name></member>
      <member refid="structIRockyParticle_1ae6c885d84af14576949205c3b9fb5bd5" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>set_frozen</name></member>
      <member refid="structIRockyParticle_1a7225418a496fdaae3dc3ba7bc3d7ebca" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>set_poisson_ratio</name></member>
      <member refid="structIRockyParticle_1a6ea5a3cc6356d1b80b3e8cde1fe43211" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>set_specific_heat</name></member>
      <member refid="structIRockyParticle_1a876773eeef5269e1335ae8a43cbb2d97" prot="public" virt="non-virtual"><scope>IRockyParticle</scope><name>set_thermal_conductivity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
