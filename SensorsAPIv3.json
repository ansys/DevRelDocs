{
  "openapi": "3.0.1",
  "info": {
    "title": "Sensors",
    "version": "v3"
  },
  "paths": {
    "/avx-sensorlabs/v3/sensors/{id}": {
      "delete": {
        "tags": [
          "Sensors"
        ],
        "summary": "Delete a sensor from the library.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the sensor in the library.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the sensor in the library.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorRead.SensorId"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Read the sensor with the given id.",
        "description": "The existing identifiers in the library can be seen in <code>SensorLibrary -> GET: /sensors</code>.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the sensor in the library.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the sensor in the library.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorEdit.SensorEditorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sensors"
        ],
        "summary": "Update the sensor given by its id with the information in the body",
        "description": "<br>\r\n                    Some properties of the sensor are mutually exclusive, so they should be set to null and only set the desired one.\r\n                \r\n<br>To get the correct json structure, use the <code>GET: /sensoreditor/{id}</code> service.\r\n<br>Example: At the highest level of the json, there can be either a camera or a lidar or a radar, so if a camera is updated, lidar and radar should be set to null.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of sensor in the library.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of sensor in the library.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Json containing all properties of the sensor.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorProps.SensorData"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorProps.SensorData"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorProps.SensorData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorProps.SensorData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorEdit.SensorEditorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/avx-sensorlabs/v3/sensors": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "List all sensors available in the library.",
        "description": "<br>Valid sensors will be displayed under validSensors, with their id, type and name.\r\n<br>\r\n                    If there are any corrupted sensors, they are deleted from the library and their names will appear in corruptedSensorNames,\r\n                    or if the name cannot be retrieved, the flag anyDeleted will be set to true.\r\n                ",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Number of initial sensors to skip.",
            "schema": {
              "type": "integer",
              "description": "Number of initial sensors to skip.",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of sensors to retrieve.",
            "schema": {
              "type": "integer",
              "description": "Number of sensors to retrieve.",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "sortByType",
            "in": "query",
            "description": "Should sensors be sorted by type.",
            "schema": {
              "type": "boolean",
              "description": "Should sensors be sorted by type.",
              "default": true
            }
          },
          {
            "name": "sortByName",
            "in": "query",
            "description": "Should sensors be sorted by name.",
            "schema": {
              "type": "boolean",
              "description": "Should sensors be sorted by name.",
              "default": true
            }
          },
          {
            "name": "pattern",
            "in": "query",
            "description": "Filter sensors by names containing pattern substring.",
            "schema": {
              "type": "string",
              "description": "Filter sensors by names containing pattern substring.",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search sensors matching name.",
            "schema": {
              "type": "string",
              "description": "Search sensors matching name.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dom.SensorLibraryRepository.ListSensorResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sensors"
        ],
        "summary": "Create a new sensor with default values for each of its properties.",
        "parameters": [
          {
            "name": "copyOf",
            "in": "query",
            "description": "Create a copy of the sensor with the given id. In this case the POST body should contain the desired name.",
            "schema": {
              "type": "string",
              "description": "Create a copy of the sensor with the given id. In this case the POST body should contain the desired name.",
              "format": "uuid",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "<br>\r\n                    Information needed for sensor creation: type of sensor to create and its name.\r\n                \r\n<remarks>\r\n  <br>\r\n                        Accepted types: Camera, FishEyeCamera, RotatingLidar, FlashingLidar, Radar.\r\n                        Example: {\"type\":\"FlashingLidar\", \"name\": \"my_lidar\"}\r\n                    \r\n</remarks>",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorCreate.SensorInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorCreate.SensorInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorCreate.SensorInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorCreate.SensorInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorCreate.SensorId"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/avx-sensorlabs/v3/sensors/{id}/packed": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Download the sensor to a file with the specified name.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of sensor in the library.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of sensor in the library.",
              "format": "uuid"
            }
          },
          {
            "name": "packedSensorName",
            "in": "query",
            "description": "Desired name for the packed sensor file.",
            "schema": {
              "type": "string",
              "description": "Desired name for the packed sensor file.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/avx-sensorlabs/v3/sensors/{id}/externalfiles/{property}": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Download the external file.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of sensor in the library.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of sensor in the library.",
              "format": "uuid"
            }
          },
          {
            "name": "property",
            "in": "path",
            "description": "Field describing which property is targeted. Accepted properties are :\r\n<br>\r\n    for Camera: <code>CfaTransmissionR, CfaTransmissionG, CfaTransmissionB, QuantumEfficiency, LensTransmission, LensDistortion, FragmentShader</code><br>\r\n    for Lidar: <code>ScanningSequenceIdentity, IntensityFilePath, LensDistortion</code>",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Field describing which property is targeted. Accepted properties are :\r\n<br>\r\n    for Camera: <code>CfaTransmissionR, CfaTransmissionG, CfaTransmissionB, QuantumEfficiency, LensTransmission, LensDistortion, FragmentShader</code><br>\r\n    for Lidar: <code>ScanningSequenceIdentity, IntensityFilePath, LensDistortion</code>",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/avx-sensorlabs/v3/sensors/packed": {
      "post": {
        "tags": [
          "Sensors"
        ],
        "summary": "Upload multiple packed sensors and add them to the library",
        "description": "Conflicts might appear if a sensor with the same name already exists in the library.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Files to be uploaded.",
                    "nullable": true
                  },
                  "sensorUpdatesJson": {
                    "type": "string",
                    "description": "Json structure with a list of actions for each conflicting sensor that is referenced in the layout.\r\nContains: new name, should replace sensor or not.\r\n<br>Replace : [{\"name\":\"Camera\",\"newName\":\"\",\"overwrite\":true}]<br>Rename  : [{\"name\":\"Camera\",\"newName\":\"NewCamera\",\"overwrite\":false}]",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "files": {
                  "style": "form"
                },
                "sensorUpdatesJson": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/avx-sensorlabs/v3/sensors/{id}/externalfiles": {
      "put": {
        "tags": [
          "Sensors"
        ],
        "summary": "Update the sensor definition by uploading an external file.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of sensor in the library.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of sensor in the library.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to upload.",
                    "format": "binary",
                    "nullable": true
                  },
                  "externalFileInfo": {
                    "type": "string",
                    "description": "<br>Additional information needed for the file upload.\r\n<br>Example:\r\n<br>\r\n                    for lidar: <code> { \"lidarInfo\": { \"propertyEnum\": \"FiringSequenceFilePath\", }, \"antennaInfo\": null, \"cameraInfo\": null } </code>\r\n<br>\r\n                    for radar: <code> { \"lidarInfo\": null, \"antennaInfo\": { \"id\": \"0\",\"antennaType\": \"Tx\"}, \"cameraInfo\": null } </code>\r\n<br>\r\n                    for camera: <code> { \"lidarInfo\": null, \"antennaInfo\": null, \"cameraInfo\": {CameraSpectrumEnum: 'CfaTransmissionR'} } </code>\r\n<br>Accepted properties are :\r\n<br>\r\n                    for Camera in \"CameraSpectrumEnum\" field: <code>CfaTransmissionR, CfaTransmissionG, CfaTransmissionB, QuantumEfficiency, LensTransmission, LensDistortion, FragmentShader</code>\r\n<br>\r\n                    for Lidar in \"propertyEnum\" field : <code>FiringSequenceFilePath, IntensityFilePath, LensDistortion</code>",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                },
                "externalFileInfo": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorEdit.Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response.ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SensorRead.SensorId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Response.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "SensorEdit.SensorTypeEnum": {
        "enum": [
          "Camera",
          "FishEyeCamera",
          "RotatingLidar",
          "FlashingLidar",
          "Radar"
        ],
        "type": "string"
      },
      "SensorProps.Compatibility": {
        "enum": [
          "Speos",
          "Avx",
          "AvxAndSpeos"
        ],
        "type": "string",
        "description": "Compatability range of the sensor."
      },
      "SensorProps.Metadata": {
        "type": "object",
        "properties": {
          "modelName": {
            "type": "string",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "sensorType": {
            "$ref": "#/components/schemas/SensorEdit.SensorTypeEnum"
          },
          "compatibility": {
            "$ref": "#/components/schemas/SensorProps.Compatibility"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.Components.ThermalCamera": {
        "type": "object",
        "additionalProperties": false,
        "description": "Represents thermal camera."
      },
      "System.Tuple`2[System.Decimal,System.Double]": {
        "type": "object",
        "properties": {
          "item1": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "item2": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.Lens.PhysicsBased.CircularAperture": {
        "type": "object",
        "properties": {
          "apertureArea": {
            "type": "number",
            "description": "Area of the diaphragm (mm²).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Circular aperture."
      },
      "SensorProps.Camera.Lens.PhysicsBased.RegularConvexPolygonAperture": {
        "type": "object",
        "properties": {
          "apertureArea": {
            "type": "number",
            "description": "Area of the diaphragm (mm²).",
            "format": "double"
          },
          "offsetAngle": {
            "type": "number",
            "description": "Angle between the diaphragm and the optical axis of the camera (rad).",
            "format": "double"
          },
          "edgeNumber": {
            "type": "integer",
            "description": "F-number or Effective Aperture (F = Focal length / diameter of the aperture area).",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Regular Convex Polygon aperture."
      },
      "SensorProps.Camera.Lens.PhysicsBased.LensMaterial": {
        "enum": [
          "BorosilicateCrownGlassBk7"
        ],
        "type": "string",
        "description": "Lens material."
      },
      "SensorProps.Camera.Lens.LensPhysicsBased": {
        "type": "object",
        "properties": {
          "coatingTransmissionDistribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Tuple`2[System.Decimal,System.Double]"
            },
            "description": "Coating transmission (%).",
            "nullable": true,
            "readOnly": true
          },
          "wavelengthOfFocalLength": {
            "type": "number",
            "description": "Focal length of the lens system (mm).",
            "format": "double"
          },
          "circularAperture": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.PhysicsBased.CircularAperture"
          },
          "regularConvexPolygonAperture": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.PhysicsBased.RegularConvexPolygonAperture"
          },
          "lensMaterial": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.PhysicsBased.LensMaterial"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.Lens.Common.FisheyePolynomialDistortion": {
        "type": "object",
        "properties": {
          "a1": {
            "type": "number",
            "description": "Fisheye distortion coefficient A1 value.",
            "format": "double"
          },
          "a2": {
            "type": "number",
            "description": "Fisheye distortion coefficient A2 value.",
            "format": "double"
          },
          "a3": {
            "type": "number",
            "description": "Fisheye distortion coefficient A3 value.",
            "format": "double"
          },
          "a4": {
            "type": "number",
            "description": "Fisheye distortion coefficient A4 value.",
            "format": "double"
          },
          "a5": {
            "type": "number",
            "description": "Fisheye distortion coefficient A5 value.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Fisheye distortion coefficient."
      },
      "SensorProps.Camera.Lens.Common.BrownDistortion": {
        "type": "object",
        "properties": {
          "k1": {
            "type": "number",
            "description": "Radial distortion K1 value.",
            "format": "double"
          },
          "k2": {
            "type": "number",
            "description": "Radial distortion K2 value.",
            "format": "double"
          },
          "k3": {
            "type": "number",
            "description": "Radial distortion K3 value.",
            "format": "double"
          },
          "p1": {
            "type": "number",
            "description": "Tangential distortion P1 value.",
            "format": "double"
          },
          "p2": {
            "type": "number",
            "description": "Tangential distortion P2 value.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Lens distortion coefficients."
      },
      "SensorProps.Camera.Lens.Common.Windshield": {
        "type": "object",
        "properties": {
          "upDownCurvature": {
            "type": "number",
            "description": "Vertical curvature of the windshield (rad/m).",
            "format": "double"
          },
          "rightLeftCurvature": {
            "type": "number",
            "description": "Horizontal curvature of the windshield (rad/m).",
            "format": "double"
          },
          "distanceFromCamera": {
            "type": "number",
            "description": "Distance from camera (mm).",
            "format": "double"
          },
          "thickness": {
            "type": "number",
            "description": "Windshield thickness (mm).",
            "format": "double"
          },
          "inclination": {
            "type": "number",
            "description": "Windshield Inclination (deg).",
            "format": "double"
          },
          "spectralTransmissionDistribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Tuple`2[System.Decimal,System.Double]"
            },
            "description": "Spectral transmission (%).",
            "nullable": true
          },
          "refractiveIndexDistribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Tuple`2[System.Decimal,System.Double]"
            },
            "description": "Refractive index.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Windshield model."
      },
      "SensorProps.Camera.Lens.LensCommon": {
        "type": "object",
        "properties": {
          "fisheyeDistortion": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.Common.FisheyePolynomialDistortion"
          },
          "brownDistortion": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.Common.BrownDistortion"
          },
          "lensTransmission": {
            "type": "string",
            "description": "Total transmission of a light ray file(.spectrum).",
            "nullable": true
          },
          "focalLength": {
            "type": "number",
            "description": "Focal length of the lens system (mm).",
            "format": "double"
          },
          "lensDistortionPath": {
            "type": "string",
            "description": "Lens distortion file (.OPTDistortion).",
            "nullable": true
          },
          "windshield": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.Common.Windshield"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.Imager.PhysicsBased.CfaTransmittance": {
        "type": "object",
        "properties": {
          "redPixelTransmission": {
            "type": "string",
            "nullable": true
          },
          "greenPixelTransmission": {
            "type": "string",
            "nullable": true
          },
          "bluePixelTransmission": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Color filter array - CFA (.spectrum)."
      },
      "SensorProps.Camera.Imager.PhysicsBased.ReadoutNoise": {
        "type": "object",
        "properties": {
          "readoutNoiseAverage": {
            "type": "number",
            "description": "Readout noise - Average (e-).",
            "format": "double"
          },
          "readoutNoiseStandard": {
            "type": "number",
            "description": "Readout noise - Standard (e-).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Average electronic noise within the imager."
      },
      "SensorProps.Camera.Imager.PhysicsBased.ThermalNoiseSimpleModel": {
        "type": "object",
        "properties": {
          "darkCurrentAverageValue": {
            "type": "number",
            "description": "Average dark current (e-/s).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Thermal noise simple model."
      },
      "SensorProps.Camera.Imager.PhysicsBased.ThermalNoiseAdvancedModel": {
        "type": "object",
        "properties": {
          "darkCurrentReferenceValue": {
            "type": "number",
            "description": "Dark current reference value (e-/s).",
            "format": "double"
          },
          "darkCurrentReferenceTemperature": {
            "type": "number",
            "description": "Dark current reference temperature (Kelvin - °K).",
            "format": "double"
          },
          "imagerTemperature": {
            "type": "number",
            "description": "Temperature of imager (Kelvin - °K).",
            "format": "double"
          },
          "darkCurrentCoefficient": {
            "type": "number",
            "description": "Dark current temperature coefficient (Kelvin - °K).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Thermal noise advance model."
      },
      "SensorProps.Camera.Imager.ImagerPhysicsBased": {
        "type": "object",
        "properties": {
          "quantumEfficiencyDistribution": {
            "type": "string",
            "description": "Quantum efficiency (.spectrum).",
            "nullable": true
          },
          "bits": {
            "type": "integer",
            "description": "Native bit depth.",
            "format": "int32"
          },
          "exposureTime": {
            "type": "number",
            "description": "Exposure time (ms).",
            "format": "double"
          },
          "fullWellCapacity": {
            "type": "number",
            "description": "Full well capacity.",
            "format": "double"
          },
          "capacitance": {
            "type": "number",
            "description": "Capacitance (µF).",
            "format": "double"
          },
          "antiBloomingEfficiency": {
            "type": "number",
            "description": "Anti-blooming efficiency (%).",
            "format": "double"
          },
          "cfaTransmittance": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.PhysicsBased.CfaTransmittance"
          },
          "readoutNoise": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.PhysicsBased.ReadoutNoise"
          },
          "overallPixelFillFactor": {
            "type": "number",
            "description": "Overall pixel fill factor (%).",
            "format": "double"
          },
          "thermalNoiseSimple": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.PhysicsBased.ThermalNoiseSimpleModel"
          },
          "thermalNoiseAdvanced": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.PhysicsBased.ThermalNoiseAdvancedModel"
          }
        },
        "additionalProperties": false,
        "description": "Imager physics based."
      },
      "SensorProps.Camera.Imager.Common.Size": {
        "type": "object",
        "properties": {
          "width": {
            "type": "number",
            "description": "Horizontal imager (mm).",
            "format": "double"
          },
          "height": {
            "type": "number",
            "description": "Vertical imager (mm).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Imager dimensions."
      },
      "SensorProps.Camera.Imager.Common.Resolution": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "description": "Horizontal.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Vertical.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Native resolution (pixels)."
      },
      "SensorProps.Camera.Imager.ImagerCommon": {
        "type": "object",
        "properties": {
          "size": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.Common.Size"
          },
          "resolution": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.Common.Resolution"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.Electronics.PhysicsBased.InjectionTimeEncoding": {
        "type": "object",
        "properties": {
          "row": {
            "type": "integer",
            "description": "Row index of the pixel.",
            "format": "int32"
          },
          "column": {
            "type": "integer",
            "description": "Column index of the pixel.",
            "format": "int32"
          },
          "injectionTime": {
            "type": "integer",
            "description": "Injection time.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Time encoding."
      },
      "SensorProps.Camera.Electronics.PhysicsBased.Injection": {
        "type": "object",
        "properties": {
          "timeEncoding": {
            "$ref": "#/components/schemas/SensorProps.Camera.Electronics.PhysicsBased.InjectionTimeEncoding"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.Electronics.PhysicsBased.Demosaicing": {
        "type": "object",
        "properties": {
          "bitDepthReduction": {
            "type": "integer",
            "description": "Bit depth reduction.",
            "format": "int32"
          },
          "gammaCorrection": {
            "type": "number",
            "description": "Gamma correction for output image.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Demosaicing."
      },
      "SensorProps.Camera.Electronics.ElectronicsPhysicsBased": {
        "type": "object",
        "properties": {
          "injectionConversion": {
            "$ref": "#/components/schemas/SensorProps.Camera.Electronics.PhysicsBased.Injection"
          },
          "gain": {
            "type": "number",
            "description": "Gain to amplify the whole signal (decibel - dB).",
            "format": "double"
          },
          "demosaicingConversion": {
            "$ref": "#/components/schemas/SensorProps.Camera.Electronics.PhysicsBased.Demosaicing"
          },
          "frameRate": {
            "type": "number",
            "description": "Frame rate (FPS).",
            "format": "double"
          },
          "diffractionSpike": {
            "type": "boolean",
            "description": "Activation of diffraction spike."
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.SensorOutput.SensorOutput": {
        "enum": [
          "CameraOutput",
          "ImagerOutput",
          "LensOutput"
        ],
        "type": "string",
        "description": "Define the level of output for the camera simulation."
      },
      "SensorProps.Camera.CustomPostProcessing.OutputEncodingFormat": {
        "enum": [
          "Gray8",
          "RGB24",
          "RGBA32",
          "Float32",
          "Float64",
          "Float128"
        ],
        "type": "string",
        "description": "Define the level of output for the camera simulation."
      },
      "SensorProps.Camera.CustomPostProcessing.CustomPostProcessing": {
        "type": "object",
        "properties": {
          "fragmentShader": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "outputEncodingFormat": {
            "$ref": "#/components/schemas/SensorProps.Camera.CustomPostProcessing.OutputEncodingFormat"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Camera.Components.PhysicsBasedCamera": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "lensPhysicsBased": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.LensPhysicsBased"
          },
          "lensCommon": {
            "$ref": "#/components/schemas/SensorProps.Camera.Lens.LensCommon"
          },
          "imagerPhysicsBased": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.ImagerPhysicsBased"
          },
          "imagerCommon": {
            "$ref": "#/components/schemas/SensorProps.Camera.Imager.ImagerCommon"
          },
          "electronics": {
            "$ref": "#/components/schemas/SensorProps.Camera.Electronics.ElectronicsPhysicsBased"
          },
          "sensorOutput": {
            "$ref": "#/components/schemas/SensorProps.Camera.SensorOutput.SensorOutput"
          },
          "customPostProcessing": {
            "$ref": "#/components/schemas/SensorProps.Camera.CustomPostProcessing.CustomPostProcessing"
          }
        },
        "additionalProperties": false,
        "description": "Represents physics based camera."
      },
      "SensorProps.Camera.Camera": {
        "type": "object",
        "properties": {
          "thermalCameraModel": {
            "$ref": "#/components/schemas/SensorProps.Camera.Components.ThermalCamera"
          },
          "physicsBasedCameraModel": {
            "$ref": "#/components/schemas/SensorProps.Camera.Components.PhysicsBasedCamera"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Lidar.Flashing.Emitter.BeamDivergence": {
        "type": "object",
        "properties": {
          "horizontal": {
            "type": "number",
            "description": "Horizontal divergence (deg).",
            "format": "double"
          },
          "vertical": {
            "type": "number",
            "description": "Vertical divergence (deg).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Beam divergence."
      },
      "SensorProps.Lidar.Common.GaussianBeamShape": {
        "type": "object",
        "properties": {
          "divergence": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Emitter.BeamDivergence"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Lidar.Rotating.Emitter.RotatingLidarEmitter": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "number",
            "description": "Firing frequency (Hz).",
            "format": "double"
          },
          "wavelength": {
            "type": "number",
            "description": "Wavelength of the laser beam (nm).",
            "format": "double"
          },
          "extinctionCoefficient": {
            "type": "number",
            "description": "Atmospheric extinction (m⁻¹).",
            "format": "double"
          },
          "beamShape": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.GaussianBeamShape"
          },
          "firingSequenceFilePath": {
            "type": "string",
            "description": "Firing sequence file path (.txt).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rotating lidar emitter."
      },
      "SensorProps.Lidar.Common.Photodetector": {
        "type": "object",
        "properties": {
          "responsivity": {
            "type": "number",
            "description": "Responsivity (A/W).",
            "format": "double"
          },
          "maxCurrent": {
            "type": "number",
            "description": "Max current (mA).",
            "format": "double"
          },
          "noiseStandardDeviation": {
            "type": "number",
            "description": "Noise standard deviation (nA).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Photodetector."
      },
      "SensorProps.Lidar.Common.AnalogToDigitalConverter": {
        "type": "object",
        "properties": {
          "samplingFrequency": {
            "type": "number",
            "description": "Sampling frequency (GHz).",
            "format": "double"
          },
          "bitResolution": {
            "type": "integer",
            "description": "Number of bits used for the waveform.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Analog to digital converter."
      },
      "SensorProps.Lidar.Common.Processor": {
        "type": "object",
        "properties": {
          "analogToDigitalConverter": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.AnalogToDigitalConverter"
          },
          "maxReturns": {
            "type": "integer",
            "description": "Max returns.",
            "format": "int32"
          },
          "maxRange": {
            "type": "number",
            "description": "Maximum range of the LiDAR (m).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Processor."
      },
      "SensorProps.Lidar.Rotating.Receiver.RotatingLidarReceiver": {
        "type": "object",
        "properties": {
          "apertureArea": {
            "type": "number",
            "description": "Aperture area (mm²).",
            "format": "double"
          },
          "photodetector": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.Photodetector"
          },
          "processor": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.Processor"
          },
          "lensDistortionPath": {
            "type": "string",
            "description": "Lens distortion path (.OPTDistortion).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rotating lidar receiver."
      },
      "SensorProps.Lidar.Common.SensorOutput": {
        "enum": [
          "LidarOutput",
          "ADCOutput",
          "LensOutput"
        ],
        "type": "string",
        "description": "Define the level of output for the LiDAR simulation."
      },
      "SensorProps.Lidar.Rotating.RotatingLidar": {
        "type": "object",
        "properties": {
          "rotationSpeed": {
            "type": "number",
            "description": "Rotation per second (Hz).",
            "format": "double"
          },
          "emitter": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Rotating.Emitter.RotatingLidarEmitter"
          },
          "receiver": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Rotating.Receiver.RotatingLidarReceiver"
          },
          "sensorOutput": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.SensorOutput"
          }
        },
        "additionalProperties": false,
        "description": "Rotating Lidar."
      },
      "SensorProps.Lidar.Flashing.PulseShape": {
        "enum": [
          "Gaussian",
          "Rectangle",
          "Triangle"
        ],
        "type": "string",
        "description": "Pulse shapes."
      },
      "SensorProps.Lidar.Flashing.Pulse": {
        "type": "object",
        "properties": {
          "shape": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.PulseShape"
          },
          "peakPower": {
            "type": "number",
            "description": "Maximum power emitted by laser pulse (W).",
            "format": "double"
          },
          "duration": {
            "type": "number",
            "description": "Pulse duration (ns).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Laser pulse."
      },
      "SensorProps.Lidar.Flashing.Emitter.BeamShapeIdentity": {
        "type": "object",
        "properties": {
          "intensityFilePath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Intensity file path (.ies, .xmp, .intensity)."
      },
      "SensorProps.Lidar.Flashing.Emitter.FlashLidarEmitter": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "number",
            "description": "Firing frequency (Hz).",
            "format": "double",
            "readOnly": true
          },
          "laserPulse": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Pulse"
          },
          "wavelength": {
            "type": "number",
            "description": "Wavelength of laser beam (nm).",
            "format": "double",
            "readOnly": true
          },
          "extinctionCoefficient": {
            "type": "number",
            "description": "Atmospheric extinction (m⁻¹).",
            "format": "double",
            "readOnly": true
          },
          "gaussianBeamShape": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.GaussianBeamShape"
          },
          "beamShapeIdentity": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Emitter.BeamShapeIdentity"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Lidar.Flashing.Receiver.FieldOfView": {
        "type": "object",
        "properties": {
          "horizontal": {
            "type": "number",
            "description": "Horizontal FOV of the receiver (deg).",
            "format": "double"
          },
          "vertical": {
            "type": "number",
            "description": "Vertical FOV of the receiver (deg).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Field of view (FOV)."
      },
      "SensorProps.Lidar.Flashing.Receiver.BrownRadialDistortion": {
        "type": "object",
        "properties": {
          "k1": {
            "type": "number",
            "description": "K1 value.",
            "format": "double"
          },
          "k2": {
            "type": "number",
            "description": "K2 value.",
            "format": "double"
          },
          "k3": {
            "type": "number",
            "description": "K3 value.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Radial distortion."
      },
      "SensorProps.Lidar.Flashing.Receiver.BrownTangentialDistortion": {
        "type": "object",
        "properties": {
          "p1": {
            "type": "number",
            "description": "P1 value.",
            "format": "double"
          },
          "p2": {
            "type": "number",
            "description": "P2 value.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Tangential distortion"
      },
      "SensorProps.Lidar.Flashing.Receiver.LidarBrownDistortion": {
        "type": "object",
        "properties": {
          "radialDistortion": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Receiver.BrownRadialDistortion"
          },
          "tangentialDistortion": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Receiver.BrownTangentialDistortion"
          },
          "lensDistortionPath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Lidar.Flashing.Receiver.LensSystem": {
        "type": "object",
        "properties": {
          "apertureArea": {
            "type": "number",
            "description": "Aperture are of the receiver (mm²).",
            "format": "double"
          },
          "fieldOfView": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Receiver.FieldOfView"
          },
          "lensDistortion": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Receiver.LidarBrownDistortion"
          }
        },
        "additionalProperties": false,
        "description": "Lens system."
      },
      "SensorProps.Lidar.Flashing.Receiver.LidarResolution": {
        "type": "object",
        "properties": {
          "horizontal": {
            "type": "integer",
            "description": "Horizontal resolution (pixels).",
            "format": "int32"
          },
          "vertical": {
            "type": "integer",
            "description": "Vertical resolution (pixels).",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Lidar resolution."
      },
      "SensorProps.Lidar.Flashing.Receiver.FlashLidarReceiver": {
        "type": "object",
        "properties": {
          "lensSystem": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Receiver.LensSystem"
          },
          "lidarResolutionInPixels": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Receiver.LidarResolution"
          },
          "photodetector": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.Photodetector"
          },
          "processor": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.Processor"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Lidar.Flashing.FlashLidar": {
        "type": "object",
        "properties": {
          "emitter": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Emitter.FlashLidarEmitter"
          },
          "receiver": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.Receiver.FlashLidarReceiver"
          },
          "sensorOutput": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Common.SensorOutput"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Lidar.Lidar": {
        "type": "object",
        "properties": {
          "rotatingLidar": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Rotating.RotatingLidar"
          },
          "flashLidar": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Flashing.FlashLidar"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.Antennas.Polarization": {
        "enum": [
          "Vertical",
          "Horizontal",
          "LeftHandedCircular",
          "RightHandedCircular"
        ],
        "type": "string",
        "description": "Polarization."
      },
      "SensorProps.Radar.Antennas.Beam": {
        "type": "object",
        "properties": {
          "polarization": {
            "$ref": "#/components/schemas/SensorProps.Radar.Antennas.Polarization"
          },
          "halfPowerHorizontalWidth": {
            "type": "number",
            "description": "Horizontal half power beam width (deg).",
            "format": "double"
          },
          "halfPowerVerticalWidth": {
            "type": "number",
            "description": "Vertical half power beam width (deg).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Parametric Beam."
      },
      "SensorProps.Radar.Antennas.PatternIdentity": {
        "type": "object",
        "properties": {
          "antennaPatternFilePath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pattern table file path."
      },
      "SensorProps.Radar.Antennas.Antenna": {
        "type": "object",
        "properties": {
          "beam": {
            "$ref": "#/components/schemas/SensorProps.Radar.Antennas.Beam"
          },
          "patternIdentity": {
            "$ref": "#/components/schemas/SensorProps.Radar.Antennas.PatternIdentity"
          },
          "realizedPeakGain": {
            "type": "number",
            "description": "Activate Realized peak gain.",
            "format": "double",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.Antennas.Position": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "X value (m).",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Y value (m).",
            "format": "double"
          },
          "z": {
            "type": "number",
            "description": "Z value (m).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Position of antenna."
      },
      "SensorProps.Radar.Antennas.Orientation": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "X value (deg).",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Y value (deg).",
            "format": "double"
          },
          "z": {
            "type": "number",
            "description": "Z value (deg).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Orientation of antenna."
      },
      "SensorProps.Radar.Antennas.DeviceAntenna": {
        "type": "object",
        "properties": {
          "antenna": {
            "$ref": "#/components/schemas/SensorProps.Radar.Antennas.Antenna"
          },
          "position": {
            "$ref": "#/components/schemas/SensorProps.Radar.Antennas.Position"
          },
          "orientation": {
            "$ref": "#/components/schemas/SensorProps.Radar.Antennas.Orientation"
          }
        },
        "additionalProperties": false
      },
      "System.Tuple`2[System.Int32,SensorProps.Radar.Antennas.DeviceAntenna]": {
        "type": "object",
        "properties": {
          "item1": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "item2": {
            "$ref": "#/components/schemas/SensorProps.Radar.Antennas.DeviceAntenna"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.Waveforms.SystemPulseDopplerWaveform": {
        "type": "object",
        "properties": {
          "centerFrequency": {
            "type": "number",
            "description": "Center frequency in the waveform spectrum (GHz).",
            "format": "double"
          },
          "bandwidth": {
            "type": "number",
            "description": "Radar bandwidth (MHz).",
            "format": "double"
          },
          "numberOfFrequencySamples": {
            "type": "integer",
            "description": "Number of frequency samples.",
            "format": "int32"
          },
          "pulseInterval": {
            "type": "number",
            "description": "Pulse interval (µs).",
            "format": "double"
          },
          "numberOfPulsesInCoherentProcessingInterval": {
            "type": "integer",
            "description": "Number of Chirps in Coherent Processing Interval.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "System pulse doppler waveform."
      },
      "SensorProps.Radar.Waveforms.Performance": {
        "type": "object",
        "properties": {
          "rangeResolution": {
            "type": "number",
            "description": "Range resolution of the range doppler map image (m).",
            "format": "double"
          },
          "velocityResolution": {
            "type": "number",
            "description": "Velocity resolution of the range doppler map image (m/s).",
            "format": "double"
          },
          "rangeAmbiguity": {
            "type": "number",
            "description": "Range ambiguity (m).",
            "format": "double"
          },
          "velocityAmbiguity": {
            "type": "number",
            "description": "Velocity ambiguity (m/s).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Performance."
      },
      "SensorProps.Radar.Waveforms.PerformancePulseDopplerWaveform": {
        "type": "object",
        "properties": {
          "centerFrequency": {
            "type": "number",
            "description": "Center frequency in the waveform spectrum (GHz).",
            "format": "double"
          },
          "performance": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.Performance"
          }
        },
        "additionalProperties": false,
        "description": "Performance pulse doppler waveform."
      },
      "SensorProps.Radar.Waveforms.PulseDopplerWaveform": {
        "type": "object",
        "properties": {
          "systemPulseDopplerWaveform": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.SystemPulseDopplerWaveform"
          },
          "performancePulseDopplerWaveform": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.PerformancePulseDopplerWaveform"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.Waveforms.FrequencySlope": {
        "enum": [
          "Positive",
          "Negative"
        ],
        "type": "string",
        "description": "Frequency slope."
      },
      "SensorProps.Radar.Waveforms.RxComponents": {
        "enum": [
          "InPhase",
          "InPhaseAndQuadrature"
        ],
        "type": "string",
        "description": "RxComponents."
      },
      "SensorProps.Radar.Waveforms.SystemFrequencyModulatedContinuousWaveform": {
        "type": "object",
        "properties": {
          "centerFrequency": {
            "type": "number",
            "description": "Center frequency in the waveform spectrum (GHz).",
            "format": "double"
          },
          "bandwidth": {
            "type": "number",
            "description": "Radar bandwidth (MHz).",
            "format": "double"
          },
          "samplingRate": {
            "type": "number",
            "description": "Sampling frequency of the analog to digital converter (MHz).",
            "format": "double"
          },
          "frequencySlope": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.FrequencySlope"
          },
          "numberOfSamplesPerChirp": {
            "type": "integer",
            "description": "Number of samples per Chirp.",
            "format": "int32"
          },
          "chirpInterval": {
            "type": "number",
            "description": "Chirp interval (µs).",
            "format": "double"
          },
          "numberOfChirpsInCoherentProcessingInterval": {
            "type": "integer",
            "description": "Number of Chirps in Coherent Processing Interval.",
            "format": "int32"
          },
          "rxComponents": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.RxComponents"
          }
        },
        "additionalProperties": false,
        "description": "System frequency modulated continuous waveform."
      },
      "SensorProps.Radar.Waveforms.PerformanceFrequencyModulatedContinuousWaveform": {
        "type": "object",
        "properties": {
          "centerFrequency": {
            "type": "number",
            "description": "Center frequency in the waveform (GHz).",
            "format": "double"
          },
          "samplingRate": {
            "type": "number",
            "description": "Sampling frequency of the analog to digital converter (MHz).",
            "format": "double"
          },
          "frequencySlope": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.FrequencySlope"
          },
          "performance": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.Performance"
          },
          "rxComponents": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.RxComponents"
          }
        },
        "additionalProperties": false,
        "description": "Performance frequency modulated continuous waveform."
      },
      "SensorProps.Radar.Waveforms.FrequencyModulatedContinuousWaveform": {
        "type": "object",
        "properties": {
          "systemFrequencyModulatedContinuousWaveform": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.SystemFrequencyModulatedContinuousWaveform"
          },
          "performanceFrequencyModulatedContinuousWaveform": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.PerformanceFrequencyModulatedContinuousWaveform"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.Waveforms.Waveform": {
        "type": "object",
        "properties": {
          "pulseDopplerWaveform": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.PulseDopplerWaveform"
          },
          "frequencyModulatedContinuousWaveform": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.FrequencyModulatedContinuousWaveform"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.Modes.GainType": {
        "enum": [
          "Auto",
          "Manual"
        ],
        "type": "string",
        "description": "Gain type(Manual, Auto)."
      },
      "SensorProps.Radar.RangeDopplerProcessors.FlatWindow": {
        "type": "object",
        "additionalProperties": false
      },
      "SensorProps.Radar.RangeDopplerProcessors.HammingWindow": {
        "type": "object",
        "additionalProperties": false
      },
      "SensorProps.Radar.RangeDopplerProcessors.HannWindow": {
        "type": "object",
        "additionalProperties": false
      },
      "SensorProps.Radar.RangeDopplerProcessors.SideLobeLevel": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "lobe level value (dB).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Side lobe level."
      },
      "SensorProps.Radar.RangeDopplerProcessors.TaylorWindow": {
        "type": "object",
        "properties": {
          "sideLobeLevel": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.SideLobeLevel"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.RangeDopplerProcessors.Window": {
        "type": "object",
        "properties": {
          "flatWindow": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.FlatWindow"
          },
          "hammingWindow": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.HammingWindow"
          },
          "hannWindow": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.HannWindow"
          },
          "taylorWindow": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.TaylorWindow"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.RangeDopplerProcessors.RadarProcessor": {
        "type": "object",
        "properties": {
          "rangePixels": {
            "type": "integer",
            "description": "Range resolution.",
            "format": "int32"
          },
          "velocityPixels": {
            "type": "integer",
            "description": "Velocity resolution.",
            "format": "int32"
          },
          "rangeWindow": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.Window"
          },
          "velocityWindow": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.Window"
          },
          "centerVelocity": {
            "type": "number",
            "description": "Center value of the velocity range (m/s).",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Range doppler map."
      },
      "SensorProps.Radar.Modes.Mode": {
        "type": "object",
        "properties": {
          "txAntennas": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "TxAntennas.",
            "nullable": true
          },
          "rxAntennas": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "RxAntennas.",
            "nullable": true
          },
          "startDelay": {
            "type": "number",
            "description": "Start delay (ms).",
            "format": "double"
          },
          "waveform": {
            "$ref": "#/components/schemas/SensorProps.Radar.Waveforms.Waveform"
          },
          "transmissionPower": {
            "type": "number",
            "description": "Input power of the transmitting antenna (W).",
            "format": "double"
          },
          "gainType": {
            "$ref": "#/components/schemas/SensorProps.Radar.Modes.GainType"
          },
          "gain": {
            "type": "number",
            "description": "Gain value applied on the model level.",
            "format": "double",
            "nullable": true
          },
          "noiseStandardDeviation": {
            "type": "number",
            "description": "Thermal noise standard deviation (dBW).",
            "format": "double",
            "nullable": true
          },
          "rangeDopplerProcessor": {
            "$ref": "#/components/schemas/SensorProps.Radar.RangeDopplerProcessors.RadarProcessor"
          }
        },
        "additionalProperties": false,
        "description": "Mode"
      },
      "System.Tuple`2[System.Int32,SensorProps.Radar.Modes.Mode]": {
        "type": "object",
        "properties": {
          "item1": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "item2": {
            "$ref": "#/components/schemas/SensorProps.Radar.Modes.Mode"
          }
        },
        "additionalProperties": false
      },
      "SensorEdit.AntennaTypeEnum": {
        "enum": [
          "Rx",
          "Tx"
        ],
        "type": "string"
      },
      "SensorEdit.AntennaCopyParameters": {
        "type": "object",
        "properties": {
          "antennaType": {
            "$ref": "#/components/schemas/SensorEdit.AntennaTypeEnum"
          },
          "sourceAntenna": {
            "type": "integer",
            "format": "int32"
          },
          "destinationAntenna": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.Radar.Radar": {
        "type": "object",
        "properties": {
          "txAntennas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Tuple`2[System.Int32,SensorProps.Radar.Antennas.DeviceAntenna]"
            },
            "nullable": true
          },
          "rxAntennas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Tuple`2[System.Int32,SensorProps.Radar.Antennas.DeviceAntenna]"
            },
            "nullable": true
          },
          "modes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Tuple`2[System.Int32,SensorProps.Radar.Modes.Mode]"
            },
            "nullable": true
          },
          "antennaCopyParameters": {
            "$ref": "#/components/schemas/SensorEdit.AntennaCopyParameters"
          }
        },
        "additionalProperties": false
      },
      "SensorProps.SensorData": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/SensorProps.Metadata"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "cameraModel": {
            "$ref": "#/components/schemas/SensorProps.Camera.Camera"
          },
          "lidarModel": {
            "$ref": "#/components/schemas/SensorProps.Lidar.Lidar"
          },
          "radarModel": {
            "$ref": "#/components/schemas/SensorProps.Radar.Radar"
          }
        },
        "additionalProperties": false
      },
      "SensorEdit.WaveformStatus": {
        "enum": [
          "Correct",
          "Violating",
          "Wrong"
        ],
        "type": "string",
        "description": "Radar waveform validation status."
      },
      "SensorEdit.RadarWaveformWarning": {
        "type": "object",
        "properties": {
          "modeId": {
            "type": "integer",
            "format": "int32"
          },
          "waveformStatus": {
            "$ref": "#/components/schemas/SensorEdit.WaveformStatus"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "warningCode": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SensorEdit.AdditionalInfo": {
        "type": "object",
        "properties": {
          "waveformWarnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorEdit.RadarWaveformWarning"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SensorEdit.SensorEditorResponse": {
        "type": "object",
        "properties": {
          "sensorData": {
            "$ref": "#/components/schemas/SensorProps.SensorData"
          },
          "additionalInfo": {
            "$ref": "#/components/schemas/SensorEdit.AdditionalInfo"
          }
        },
        "additionalProperties": false
      },
      "SensorRead.SensorType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SensorRead.SensorInfo": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SensorRead.SensorId"
          },
          "type": {
            "$ref": "#/components/schemas/SensorRead.SensorType"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SensorRead.SensorsInformation": {
        "type": "object",
        "properties": {
          "totalSensorCount": {
            "type": "integer",
            "format": "int32"
          },
          "validSensors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorRead.SensorInfo"
            },
            "nullable": true
          },
          "anyDeleted": {
            "type": "boolean"
          },
          "corruptedSensorNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SensorRead.WaveformStatus": {
        "enum": [
          "Correct",
          "Violating",
          "Wrong"
        ],
        "type": "string",
        "description": "Radar waveform validation status."
      },
      "Dom.SensorLibraryRepository.ListSensorResult": {
        "type": "object",
        "properties": {
          "sensorsInformation": {
            "$ref": "#/components/schemas/SensorRead.SensorsInformation"
          },
          "relaxedWaveforms": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SensorRead.WaveformStatus"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SensorCreate.SensorInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SensorCreate.SensorId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SensorEdit.Identifier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      }
    }
  }
}