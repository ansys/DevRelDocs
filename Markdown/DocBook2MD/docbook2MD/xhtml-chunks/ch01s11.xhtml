<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>gRPC Scalar Value Types</title><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="home" href="index.xhtml" title="Chapter 1. API Services"/><link rel="up" href="index.xhtml" title="Chapter 1. API Services"/><link rel="prev" href="ch01s10.xhtml" title="Sherlock Stackup Service- SherlockStackupService.proto"/></head><body><div class="navheader"><table width="100%" summary="Navigation header"><tr><th colspan="3" align="center">gRPC Scalar Value Types</th></tr><tr><td width="20%" align="left"><a accesskey="p" href="ch01s10.xhtml">Prev</a> </td><th width="60%" align="center"> </th><td width="20%" align="right"> </td></tr></table><hr/></div><div class="sect1" title="gRPC Scalar Value Types"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sherlock_ug_scalar_value_types"/>gRPC Scalar Value Types</h2></div></div></div><p>For C++, Java, Python, and Go, refer to the table immediately below, <a class="xref" href="ch01s11.xhtml#sherlock_ug_table_gRPC_scalar_C_plus_java" title="Table 1.218. gRPC Scalar Value Types (A)">Table 1.218, “gRPC Scalar Value Types (A)”</a></p><p>For C#, PHP, and Ruby, refer to the table which follows, <a class="xref" href="ch01s11.xhtml#sherlock_ug_table_gRPC_scalar_Types_B" title="Table 1.219. gRPC Scalar Value Types (B)">Table 1.219, “gRPC Scalar Value Types (B)”</a></p><div class="table"><a id="sherlock_ug_table_gRPC_scalar_C_plus_java"/><p class="title"><strong>Table 1.218. gRPC Scalar Value Types (A)</strong></p><div class="table-contents"><table summary="gRPC Scalar Value Types (A)" border="1"><colgroup><col width="0.8in" class="col1"/><col width="2.28in" class="col2"/><col width="0.88in" class="col3"/><col width="0.94in" class="col4"/><col width="0.77in" class="col5"/><col width="0.8in" class="col6"/></colgroup><thead><tr><th align="center"><span class="bold"><strong>.proto Type</strong></span></th><th align="center"><span class="bold"><strong>Notes</strong></span></th><th align="center"><span class="bold"><strong>C++</strong></span></th><th align="center"><span class="bold"><strong>Java</strong></span></th><th align="center"><span class="bold"><strong>Python</strong></span></th><th align="center"><span class="bold"><strong>Go</strong></span></th></tr></thead><tbody><tr><td>double</td><td> </td><td>double</td><td>double</td><td>float</td><td>float64</td></tr><tr><td>float</td><td> </td><td>float</td><td>float</td><td>float</td><td>float32</td></tr><tr><td>int32</td><td>Uses variable-length encoding. Inefficient for encoding negative numbers –
              if your field is likely to have negative values, use sint32 instead.</td><td>int32</td><td>int</td><td>int</td><td>int32</td></tr><tr><td>int64</td><td>Uses variable-length encoding. Inefficient for encoding negative numbers –
              if your field is likely to have negative values, use sint64 instead.</td><td>int64</td><td>long</td><td>int/long</td><td>int64</td></tr><tr><td>uint32</td><td>Uses variable-length encoding.</td><td>uint32</td><td>int</td><td>int/long</td><td>uint32</td></tr><tr><td>uint64</td><td>Uses variable-length encoding.</td><td>uint64</td><td>long</td><td>int/long</td><td>uint64</td></tr><tr><td>sint32</td><td>Uses variable-length encoding. Signed int value. These more efficiently encode
              negative numbers than regular int32s.</td><td>int32</td><td>int</td><td>int</td><td>int32</td></tr><tr><td>sint64</td><td>Uses variable-length encoding. Signed int value. These more efficiently encode
              negative numbers than regular int64s.</td><td>int64</td><td>long</td><td>int/long</td><td>int64</td></tr><tr><td>fixed32</td><td>Always four bytes. More efficient than uint32 if values are often greater than
              2^28.</td><td>uint32</td><td>int</td><td>int</td><td>uint32</td></tr><tr><td>fixed64</td><td>Always eight bytes. More efficient than uint64 if values are often greater than
              2^56.</td><td>uint64</td><td>long</td><td>int/long</td><td>uint64</td></tr><tr><td>sfixed32</td><td>Always four bytes.</td><td>int32</td><td>int</td><td>int</td><td>int32</td></tr><tr><td>sfixed64</td><td>Always eight bytes.</td><td>int64</td><td>long</td><td>int/long</td><td>int64</td></tr><tr><td>bool</td><td> </td><td>bool</td><td>boolean</td><td>boolean</td><td>bool</td></tr><tr><td>string</td><td>A string must always contain UTF-8 encoded or 7-bit ASCII text.</td><td>string</td><td>string</td><td>str/ unicode</td><td>string</td></tr><tr><td>bytes</td><td>May contain any arbitrary sequence of bytes.</td><td>string</td><td>ByteString</td><td>str</td><td>[]byte</td></tr></tbody></table></div></div><br class="table-break"/><div class="table"><a id="sherlock_ug_table_gRPC_scalar_Types_B"/><p class="title"><strong>Table 1.219. gRPC Scalar Value Types (B)</strong></p><div class="table-contents"><table summary="gRPC Scalar Value Types (B)" border="1"><colgroup><col width="0.8in" class="col1"/><col width="2.72in" class="col2"/><col width="0.94in" class="col7"/><col width="0.77in" class="col8"/><col width="1.25in" class="col9"/></colgroup><thead><tr><th align="center"><span class="bold"><strong>.proto Type</strong></span></th><th align="center"><span class="bold"><strong>Notes</strong></span></th><th align="center"><span class="bold"><strong>C#</strong></span></th><th align="center"><span class="bold"><strong>PHP</strong></span></th><th align="center"><span class="bold"><strong>Ruby</strong></span></th></tr></thead><tbody><tr><td>double</td><td> </td><td>double</td><td>float</td><td>Float</td></tr><tr><td>float</td><td> </td><td>float</td><td>float</td><td>Float</td></tr><tr><td>int32</td><td>Uses variable-length encoding. Inefficient for encoding negative numbers –
              if your field is likely to have negative values, use sint32 instead.</td><td>int</td><td>integer</td><td>Bignum or Fixnum (as required)</td></tr><tr><td>int64</td><td>Uses variable-length encoding. Inefficient for encoding negative numbers –
              if your field is likely to have negative values, use sint64 instead.</td><td>long</td><td>integer/ string</td><td>Bignum</td></tr><tr><td>uint32</td><td>Uses variable-length encoding.</td><td>uint</td><td>integer</td><td>Bignum or Fixnum (as required)</td></tr><tr><td>uint64</td><td>Uses variable-length encoding.</td><td>ulong</td><td>integer/ string</td><td>Bignum or Fixnum (as required)</td></tr><tr><td>sint32</td><td>Uses variable-length encoding. Signed int value. These more efficiently encode
              negative numbers than regular int32s.</td><td>int</td><td>integer</td><td>Bignum or Fixnum (as required)</td></tr><tr><td>sint64</td><td>Uses variable-length encoding. Signed int value. These more efficiently encode
              negative numbers than regular int64s.</td><td>long</td><td>integer/ string</td><td>Bignum</td></tr><tr><td>fixed32</td><td>Always four bytes. More efficient than uint32 if values are often greater than
              2^28.</td><td>uint</td><td>integer</td><td>Bignum or Fixnum (as required)</td></tr><tr><td>fixed64</td><td>Always eight bytes. More efficient than uint64 if values are often greater than
              2^56.</td><td>ulong</td><td>integer/ string</td><td>Bignum</td></tr><tr><td>sfixed32</td><td>Always four bytes.</td><td>int</td><td>integer</td><td>Bignum or Fixnum (as required)</td></tr><tr><td>sfixed64</td><td>Always eight bytes.</td><td>long</td><td>integer/ string</td><td>Bignum</td></tr><tr><td>bool</td><td> </td><td>bool</td><td>boolean</td><td>TrueClass/ FalseClass</td></tr><tr><td>string</td><td>A string must always contain UTF-8 encoded or 7-bit ASCII text.</td><td>string</td><td>string</td><td>String (UTF-8)</td></tr><tr><td>bytes</td><td>May contain any arbitrary sequence of bytes.</td><td>ByteString</td><td>string</td><td>String (ASCII-8BIT)</td></tr></tbody></table></div></div><br class="table-break"/><p><a class="link" href="ch01s02.xhtml" title="Index to the Sherlock APIs">Click here to return to the main index to
        Sherlock's APIs.</a></p></div><div class="navfooter"><hr/><table width="100%" summary="Navigation footer"><tr><td width="40%" align="left"><a accesskey="p" href="ch01s10.xhtml">Prev</a> </td><td width="20%" align="center"> </td><td width="40%" align="right"> </td></tr><tr><td width="40%" align="left" valign="top">Sherlock Stackup Service- SherlockStackupService.proto </td><td width="20%" align="center"><a accesskey="h" href="index.xhtml">Home</a></td><td width="40%" align="right" valign="top"> </td></tr></table></div></body></html>