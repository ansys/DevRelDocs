<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: DVS::IMeshChunk Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>DVS</b></li><li class="navelem"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">IMeshChunk</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_d_v_s_1_1_i_mesh_chunk-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">DVS::IMeshChunk Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml">dvs_mesh_chunk_interface.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for DVS::IMeshChunk:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_d_v_s_1_1_i_mesh_chunk.png" usemap="#DVS::IMeshChunk_map" alt=""/>
  <map id="DVS::IMeshChunk_map" name="DVS::IMeshChunk_map">
<area href="class_d_v_s_1_1_i_hash.xhtml" title="Interface to get hash information from DVS objects." alt="DVS::IHash" shape="rect" coords="0,0,114,24"/>
<area href="class_d_v_s_1_1_i_var_hash.xhtml" title="Interface to get variable hash information from DVS objects." alt="DVS::IVarHash" shape="rect" coords="124,0,238,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a8b7de1a1e47e05ab63f6bb41ccf5144a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144a">MeshType</a> { <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aaa98ab1208c4de624d1af2488ea342b15">UNKNOWN</a> = 0
, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e">UNSTRUCTURED</a> = 1
, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aa95416cf06dfb48f6331a1f7c5c2704d2">PARALLELEPIPED</a> = 2
, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013">CURVILINEAR</a> = 3
 }</td></tr>
<tr class="separator:a8b7de1a1e47e05ab63f6bb41ccf5144a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37105a87f7c965d7519eb02f4f63c3d8"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a37105a87f7c965d7519eb02f4f63c3d8">Axis</a> { <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a37105a87f7c965d7519eb02f4f63c3d8a5f586336dff689b95a213ae63d5d971d">X</a> = 0
, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a37105a87f7c965d7519eb02f4f63c3d8aa51d837ff28664b76eb076c405cad710">Y</a> = 1
, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a37105a87f7c965d7519eb02f4f63c3d8a91a3b034071a3ac6c0da72aaac13f1ed">Z</a> = 2
 }</td></tr>
<tr class="separator:a37105a87f7c965d7519eb02f4f63c3d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6cc89750bc8c47e7a70c6cbfe48b0b61"><td class="memItemLeft" align="right" valign="top"><a id="a6cc89750bc8c47e7a70c6cbfe48b0b61" name="a6cc89750bc8c47e7a70c6cbfe48b0b61"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IMeshChunk</b> ()=default</td></tr>
<tr class="separator:a6cc89750bc8c47e7a70c6cbfe48b0b61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04a72e7afdfd35926aa815b2c9178e0c"><td class="memItemLeft" align="right" valign="top"><a id="a04a72e7afdfd35926aa815b2c9178e0c" name="a04a72e7afdfd35926aa815b2c9178e0c"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IMeshChunk</b> ()=default</td></tr>
<tr class="separator:a04a72e7afdfd35926aa815b2c9178e0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7797bab216c4358dfb3c834e95e35376"><td class="memItemLeft" align="right" valign="top"><a id="a7797bab216c4358dfb3c834e95e35376" name="a7797bab216c4358dfb3c834e95e35376"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IMeshChunk</b> (<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">IMeshChunk</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a7797bab216c4358dfb3c834e95e35376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb80ee1e5b1fa35ec218a31a68416716"><td class="memItemLeft" align="right" valign="top"><a id="abb80ee1e5b1fa35ec218a31a68416716" name="abb80ee1e5b1fa35ec218a31a68416716"></a>
<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">IMeshChunk</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">IMeshChunk</a> &amp;&amp;)=default</td></tr>
<tr class="separator:abb80ee1e5b1fa35ec218a31a68416716"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a920089a626f93778aa3c1f0ab8e3f1d1"><td class="memItemLeft" align="right" valign="top"><a id="a920089a626f93778aa3c1f0ab8e3f1d1" name="a920089a626f93778aa3c1f0ab8e3f1d1"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IMeshChunk</b> (const <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">IMeshChunk</a> &amp;)=default</td></tr>
<tr class="separator:a920089a626f93778aa3c1f0ab8e3f1d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a411d4e4e9ccb75ea6beba16885b4fdb2"><td class="memItemLeft" align="right" valign="top"><a id="a411d4e4e9ccb75ea6beba16885b4fdb2" name="a411d4e4e9ccb75ea6beba16885b4fdb2"></a>
<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">IMeshChunk</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">IMeshChunk</a> &amp;)=default</td></tr>
<tr class="separator:a411d4e4e9ccb75ea6beba16885b4fdb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab025d1550b2b3cd77faefecec5199852"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144a">MeshType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ab025d1550b2b3cd77faefecec5199852">get_type</a> () const =0</td></tr>
<tr class="separator:ab025d1550b2b3cd77faefecec5199852"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb13b29450a5ccfaa9027cfda3ceb108"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abb13b29450a5ccfaa9027cfda3ceb108">get_object</a> () const =0</td></tr>
<tr class="separator:abb13b29450a5ccfaa9027cfda3ceb108"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32ad562394805327fbabffa322643701"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a32ad562394805327fbabffa322643701">get_time</a> () const =0</td></tr>
<tr class="separator:a32ad562394805327fbabffa322643701"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c520674083999e99bdf77b2b1eaacf8"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6c520674083999e99bdf77b2b1eaacf8">get_rank</a> () const =0</td></tr>
<tr class="separator:a6c520674083999e99bdf77b2b1eaacf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b894c57bfd1e70168290ce69ecc5af4"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6b894c57bfd1e70168290ce69ecc5af4">get_chunk</a> () const =0</td></tr>
<tr class="separator:a6b894c57bfd1e70168290ce69ecc5af4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fe402e619754256a19e0087b76e2c53"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53">get_coords_size</a> (uint32_t &amp;component_size)=0</td></tr>
<tr class="separator:a0fe402e619754256a19e0087b76e2c53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7738e954570e849462ff493ec875bc80"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7738e954570e849462ff493ec875bc80">get_coords</a> (float *x_coords, float *y_coords, float *z_coords)=0</td></tr>
<tr class="separator:a7738e954570e849462ff493ec875bc80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39c2d8cc95f14ecbe9789908881c92a0"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a39c2d8cc95f14ecbe9789908881c92a0">get_coords_interleaved</a> (float *coords)=0</td></tr>
<tr class="separator:a39c2d8cc95f14ecbe9789908881c92a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b1069fc8737730efa0fc01a0698fbd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a70b1069fc8737730efa0fc01a0698fbd">get_coords_curv_size</a> (uint32_t &amp;component_size)=0</td></tr>
<tr class="separator:a70b1069fc8737730efa0fc01a0698fbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8da90ca355541bf876fa23ed267f94cb"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8da90ca355541bf876fa23ed267f94cb">get_coords_curv</a> (float local_ijk_min[3], float local_ijk_max[3], float global_ijk_max[3], float *x_coords, float *y_coords, float *z_coords)=0</td></tr>
<tr class="separator:a8da90ca355541bf876fa23ed267f94cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c191e3ec6d65a527fc1f3224f84d503"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5c191e3ec6d65a527fc1f3224f84d503">get_coords_curv_interleaved</a> (float local_ijk_min[3], float local_ijk_max[3], float global_ijk_max[3], float *coords)=0</td></tr>
<tr class="separator:a5c191e3ec6d65a527fc1f3224f84d503"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abda21734e2f506b982b65007d17c92fd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abda21734e2f506b982b65007d17c92fd">get_coords_parallele_size</a> (uint32_t &amp;i_vals_size, uint32_t &amp;j_vals_size, uint32_t &amp;k_vals_size)=0</td></tr>
<tr class="separator:abda21734e2f506b982b65007d17c92fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a959ecd945a3e46b25b4e816a35eb4123"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123">get_coords_parallele</a> (float origin[3], float dir_vec_i[3], float dir_vec_j[3], float dir_vec_k[3], float local_ijk_min[3], float local_ijk_max[3], float global_ijk_max[3], float *i_vals, float *j_vals, float *k_vals)=0</td></tr>
<tr class="separator:a959ecd945a3e46b25b4e816a35eb4123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b819acf4a968957e8ba90876dd880d9"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9">get_num_variables</a> (uint32_t &amp;num_vars, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a0b819acf4a968957e8ba90876dd880d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fbe50455053f953a39707671d8b3ab3"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3">get_variable</a> (uint32_t index, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a3fbe50455053f953a39707671d8b3ab3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d0e7efa6c204cbb7730ef1bf4024fbc"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc">get_variable_size</a> (uint32_t index, uint32_t &amp;num_values, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a6d0e7efa6c204cbb7730ef1bf4024fbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad7ddb41a24c6108c245ed1189595816"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#aad7ddb41a24c6108c245ed1189595816">get_variable_size</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, uint32_t &amp;num_values) const =0</td></tr>
<tr class="separator:aad7ddb41a24c6108c245ed1189595816"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7fe3d3b75e14f1cdd0d810e30a35fe0"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ae7fe3d3b75e14f1cdd0d810e30a35fe0">get_variable_data</a> (uint32_t index, float *array) const =0</td></tr>
<tr class="separator:ae7fe3d3b75e14f1cdd0d810e30a35fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5364c963d939e919c73623834c89c471"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5364c963d939e919c73623834c89c471">get_variable_data</a> (uint32_t index, int64_t *array) const =0</td></tr>
<tr class="separator:a5364c963d939e919c73623834c89c471"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fd35c1ebfad0967ff6a7bc3f62c81f5"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a2fd35c1ebfad0967ff6a7bc3f62c81f5">get_variable_data</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, float *array) const =0</td></tr>
<tr class="separator:a2fd35c1ebfad0967ff6a7bc3f62c81f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea8ffa951b66f338d13704a06648ac27"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#aea8ffa951b66f338d13704a06648ac27">get_variable_data</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, int64_t *array) const =0</td></tr>
<tr class="separator:aea8ffa951b66f338d13704a06648ac27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab72dfdd09b4258da7de7308ef48cb1fc"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ab72dfdd09b4258da7de7308ef48cb1fc">get_variable_data</a> (uint32_t index, uint32_t *num_values, float *array)=0</td></tr>
<tr class="separator:ab72dfdd09b4258da7de7308ef48cb1fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada793fcafd36d800dc3c4249b193318c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ada793fcafd36d800dc3c4249b193318c">get_variable_data</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, uint32_t *num_values, float *array)=0</td></tr>
<tr class="separator:ada793fcafd36d800dc3c4249b193318c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f3772e845d3ffe73c4a6525d78ab2ad"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5f3772e845d3ffe73c4a6525d78ab2ad">get_num_element_blocks</a> (uint32_t &amp;num_elem_blocks) const =0</td></tr>
<tr class="separator:a5f3772e845d3ffe73c4a6525d78ab2ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44a916bcd71f4d6b33661b249d52c61b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a44a916bcd71f4d6b33661b249d52c61b">get_element_block_types</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> *element_types) const =0</td></tr>
<tr class="separator:a44a916bcd71f4d6b33661b249d52c61b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af45268cbc0f5284d4a7fe41afab5c42b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">DVS::IElementBlock</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#af45268cbc0f5284d4a7fe41afab5c42b">get_element_block</a> (uint32_t index)=0</td></tr>
<tr class="separator:af45268cbc0f5284d4a7fe41afab5c42b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ca84ad8d766514684790bacd31803fc"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">DVS::IElementBlock</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7ca84ad8d766514684790bacd31803fc">get_element_block_by_type</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type)=0</td></tr>
<tr class="separator:a7ca84ad8d766514684790bacd31803fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_d_v_s_1_1_i_hash"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_d_v_s_1_1_i_hash')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_d_v_s_1_1_i_hash.xhtml">DVS::IHash</a></td></tr>
<tr class="memitem:a2f73d1292c0162a03bd29e9094567a77 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a2f73d1292c0162a03bd29e9094567a77" name="a2f73d1292c0162a03bd29e9094567a77"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IHash</b> ()=default</td></tr>
<tr class="separator:a2f73d1292c0162a03bd29e9094567a77 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e08d37be2095880bcb7d77b365ebde3 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a2e08d37be2095880bcb7d77b365ebde3" name="a2e08d37be2095880bcb7d77b365ebde3"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IHash</b> ()=default</td></tr>
<tr class="separator:a2e08d37be2095880bcb7d77b365ebde3 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41019f8e16b485b73c1a832df9c21665 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a41019f8e16b485b73c1a832df9c21665" name="a41019f8e16b485b73c1a832df9c21665"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IHash</b> (<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a41019f8e16b485b73c1a832df9c21665 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8c71b16b66a50b92918028b8bbc0d66 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="af8c71b16b66a50b92918028b8bbc0d66" name="af8c71b16b66a50b92918028b8bbc0d66"></a>
<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:af8c71b16b66a50b92918028b8bbc0d66 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17952af3cbc7170e37f882b17e800b3f inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a17952af3cbc7170e37f882b17e800b3f" name="a17952af3cbc7170e37f882b17e800b3f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IHash</b> (const <a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;)=default</td></tr>
<tr class="separator:a17952af3cbc7170e37f882b17e800b3f inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaed8c50d66653ffe2a16f2d39278734 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="aeaed8c50d66653ffe2a16f2d39278734" name="aeaed8c50d66653ffe2a16f2d39278734"></a>
<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;)=default</td></tr>
<tr class="separator:aeaed8c50d66653ffe2a16f2d39278734 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0dedeb8d9dfd442d49d16cb4ddfb221 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_hash.xhtml#ac0dedeb8d9dfd442d49d16cb4ddfb221">get_hash_size</a> () const =0</td></tr>
<tr class="separator:ac0dedeb8d9dfd442d49d16cb4ddfb221 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51eaee86a6e2db4dda7f4326daa33874 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_hash.xhtml#a51eaee86a6e2db4dda7f4326daa33874">get_hash</a> (char *hash) const =0</td></tr>
<tr class="separator:a51eaee86a6e2db4dda7f4326daa33874 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_d_v_s_1_1_i_var_hash"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_d_v_s_1_1_i_var_hash')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">DVS::IVarHash</a></td></tr>
<tr class="memitem:a9b1a7d92f3c9c67d25be7b2cc4658b95 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a9b1a7d92f3c9c67d25be7b2cc4658b95" name="a9b1a7d92f3c9c67d25be7b2cc4658b95"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IVarHash</b> ()=default</td></tr>
<tr class="separator:a9b1a7d92f3c9c67d25be7b2cc4658b95 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b2a92106ec38f910d49a1c179419871 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a7b2a92106ec38f910d49a1c179419871" name="a7b2a92106ec38f910d49a1c179419871"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IVarHash</b> ()=default</td></tr>
<tr class="separator:a7b2a92106ec38f910d49a1c179419871 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9c19f92692dee9f5d287ebc6e059dfb inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="ae9c19f92692dee9f5d287ebc6e059dfb" name="ae9c19f92692dee9f5d287ebc6e059dfb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IVarHash</b> (<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:ae9c19f92692dee9f5d287ebc6e059dfb inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53d713fd8e14a28ad11fefb30c2fda03 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a53d713fd8e14a28ad11fefb30c2fda03" name="a53d713fd8e14a28ad11fefb30c2fda03"></a>
<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a53d713fd8e14a28ad11fefb30c2fda03 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a056227972d92b22777ee19f60e1794f6 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a056227972d92b22777ee19f60e1794f6" name="a056227972d92b22777ee19f60e1794f6"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IVarHash</b> (const <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;)=default</td></tr>
<tr class="separator:a056227972d92b22777ee19f60e1794f6 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aba4bc5fbf125a434cbb88f94a0dfb2 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a6aba4bc5fbf125a434cbb88f94a0dfb2" name="a6aba4bc5fbf125a434cbb88f94a0dfb2"></a>
<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;)=default</td></tr>
<tr class="separator:a6aba4bc5fbf125a434cbb88f94a0dfb2 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85c3ade756029207e15b1c8de8cd5c1b inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a> (uint32_t index, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a85c3ade756029207e15b1c8de8cd5c1b inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81cd99bbf69ccc0d50e8bcb7dd291046 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a81cd99bbf69ccc0d50e8bcb7dd291046">get_var_hash_size</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var) const =0</td></tr>
<tr class="separator:a81cd99bbf69ccc0d50e8bcb7dd291046 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17fff1548eb276edd326a0af08f6a7c4 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a> (uint32_t index, char *hash, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a17fff1548eb276edd326a0af08f6a7c4 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7348be86da47ac034252a68949b21007 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a7348be86da47ac034252a68949b21007">get_var_hash</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, char *hash) const =0</td></tr>
<tr class="separator:a7348be86da47ac034252a68949b21007 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A mesh chunk in DVS contains the underlying mesh coordinates and nodal variable information for a specific timestep/rank/chunk. It also is the parent object for <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml" title="Element Block Interface for DVS Reader API.">IElementBlock</a> objects which contain the element / connectivity information. Mesh chucks can be unstructured or structured (paralellepiped or curvilinear). See <a class="el" href="class_d_v_s_1_1_i_hash.xhtml" title="Interface to get hash information from DVS objects.">DVS::IHash</a> and <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml" title="Interface to get variable hash information from DVS objects.">DVS::IVarHash</a> for the hash object interface. </p>

<p class="definition">Definition at line <a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml#l00048">48</a> of file <a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml">dvs_mesh_chunk_interface.h</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a37105a87f7c965d7519eb02f4f63c3d8" name="a37105a87f7c965d7519eb02f4f63c3d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37105a87f7c965d7519eb02f4f63c3d8">&#9670;&#160;</a></span>Axis</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a37105a87f7c965d7519eb02f4f63c3d8">DVS::IMeshChunk::Axis</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The AXIS or IJK component to request. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a37105a87f7c965d7519eb02f4f63c3d8a5f586336dff689b95a213ae63d5d971d" name="a37105a87f7c965d7519eb02f4f63c3d8a5f586336dff689b95a213ae63d5d971d"></a>X&#160;</td><td class="fielddoc"><p>The X axis (or i component for structured parts) </p>
</td></tr>
<tr><td class="fieldname"><a id="a37105a87f7c965d7519eb02f4f63c3d8aa51d837ff28664b76eb076c405cad710" name="a37105a87f7c965d7519eb02f4f63c3d8aa51d837ff28664b76eb076c405cad710"></a>Y&#160;</td><td class="fielddoc"><p>The X axis (or j component for structured parts) </p>
</td></tr>
<tr><td class="fieldname"><a id="a37105a87f7c965d7519eb02f4f63c3d8a91a3b034071a3ac6c0da72aaac13f1ed" name="a37105a87f7c965d7519eb02f4f63c3d8a91a3b034071a3ac6c0da72aaac13f1ed"></a>Z&#160;</td><td class="fielddoc"><p>The Z axis (or k component for structured parts) </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml#l00075">75</a> of file <a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml">dvs_mesh_chunk_interface.h</a>.</p>

</div>
</div>
<a id="a8b7de1a1e47e05ab63f6bb41ccf5144a" name="a8b7de1a1e47e05ab63f6bb41ccf5144a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b7de1a1e47e05ab63f6bb41ccf5144a">&#9670;&#160;</a></span>MeshType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144a">DVS::IMeshChunk::MeshType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The different mesh types allowed. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a8b7de1a1e47e05ab63f6bb41ccf5144aaa98ab1208c4de624d1af2488ea342b15" name="a8b7de1a1e47e05ab63f6bb41ccf5144aaa98ab1208c4de624d1af2488ea342b15"></a>UNKNOWN&#160;</td><td class="fielddoc"><p>Unknown, a problem occurred. </p>
</td></tr>
<tr><td class="fieldname"><a id="a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e" name="a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e"></a>UNSTRUCTURED&#160;</td><td class="fielddoc"><p>Unstructured mesh data. </p>
</td></tr>
<tr><td class="fieldname"><a id="a8b7de1a1e47e05ab63f6bb41ccf5144aa95416cf06dfb48f6331a1f7c5c2704d2" name="a8b7de1a1e47e05ab63f6bb41ccf5144aa95416cf06dfb48f6331a1f7c5c2704d2"></a>PARALLELEPIPED&#160;</td><td class="fielddoc"><p>Parallelepiped structured mesh data. </p>
</td></tr>
<tr><td class="fieldname"><a id="a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013" name="a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013"></a>CURVILINEAR&#160;</td><td class="fielddoc"><p>Curvilinear structured mesh data. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml#l00063">63</a> of file <a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml">dvs_mesh_chunk_interface.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a6b894c57bfd1e70168290ce69ecc5af4" name="a6b894c57bfd1e70168290ce69ecc5af4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b894c57bfd1e70168290ce69ecc5af4">&#9670;&#160;</a></span>get_chunk()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint32_t DVS::IMeshChunk::get_chunk </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the chunk for this mesh chunk. </p>
<dl class="section return"><dt>Returns</dt><dd>uint32_t the chunk this mesh chunk is associated with (zero based) </dd></dl>

</div>
</div>
<a id="a7738e954570e849462ff493ec875bc80" name="a7738e954570e849462ff493ec875bc80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7738e954570e849462ff493ec875bc80">&#9670;&#160;</a></span>get_coords()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>x_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>y_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>z_coords</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the coordinates for an unstructured mesh. </p>
<p>Retrieves the coordinates for an unstructured mesh. To get the coordinates interleaved in a single array call <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a39c2d8cc95f14ecbe9789908881c92a0" title="Get the coords for a unstructured meshes interleaved in a single array.">get_coords_interleaved()</a>.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_PARAM_NULL: nullptr passed into method, method did nothing</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e" title="Unstructured mesh data.">DVS::IMeshChunk::MeshType::UNSTRUCTURED</a></li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">x_coords</td><td>output array for x coordinates (must not be nullptr) size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53" title="Get the size of each coordinate component for unstructured meshes.">get_coords_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">y_coords</td><td>output array for y coordinates (must not be nullptr) size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53" title="Get the size of each coordinate component for unstructured meshes.">get_coords_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">z_coords</td><td>output array for z coordiantes (must not be nullptr) size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53" title="Get the size of each coordinate component for unstructured meshes.">get_coords_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, see method documentation for errors </dd></dl>

</div>
</div>
<a id="a8da90ca355541bf876fa23ed267f94cb" name="a8da90ca355541bf876fa23ed267f94cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8da90ca355541bf876fa23ed267f94cb">&#9670;&#160;</a></span>get_coords_curv()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords_curv </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>local_ijk_min</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>local_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>global_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>x_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>y_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>z_coords</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get coordinate data for a structured curvilinear mesh. </p>
<p>Structured curvilinear meshes have the XYZ information for every node in the IJK array for flexibility in defining the nodes. The connectivity for the mesh is implied so there are no connectivity arrays in the DVS::IElemBlock. If you'd like the XYZ coordinates interleaved in a single array call <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5c191e3ec6d65a527fc1f3224f84d503" title="Get the coords for structured curvilinear meshes interleaved in a single array.">get_coords_curv_interleaved()</a>.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_PARAM_NULL: nullptr passed into method, method did nothing</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013" title="Curvilinear structured mesh data.">DVS::IMeshChunk::MeshType::CURVILINEAR</a></li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data.</li>
<li>DVS_INVALID_STRUCTURED_DATA: Invalid structured data. There is a problem with the data.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">local_ijk_min</td><td>array of size 3, returns 0 based ijk min for this chunk </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">local_ijk_max</td><td>array of size 3, returns 0 based ijk max for this chunk </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">global_ijk_max</td><td>array of size 3, returns 1 based global ijk max, this is the total ijk dimension across all mesh chunks </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">x_coords</td><td>output array for x coordinates (must not be nullptr) size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a70b1069fc8737730efa0fc01a0698fbd" title="Get the size of each coordinate component for structured curvilinear meshes.">get_coords_curv_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">y_coords</td><td>output array for y coordinates (must not be nullptr) size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a70b1069fc8737730efa0fc01a0698fbd" title="Get the size of each coordinate component for structured curvilinear meshes.">get_coords_curv_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">z_coords</td><td>output array for z coordinates (must not be nullptr) size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a70b1069fc8737730efa0fc01a0698fbd" title="Get the size of each coordinate component for structured curvilinear meshes.">get_coords_curv_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, see method documentation for errors </dd></dl>

</div>
</div>
<a id="a5c191e3ec6d65a527fc1f3224f84d503" name="a5c191e3ec6d65a527fc1f3224f84d503"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c191e3ec6d65a527fc1f3224f84d503">&#9670;&#160;</a></span>get_coords_curv_interleaved()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords_curv_interleaved </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>local_ijk_min</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>local_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>global_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>coords</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the coords for structured curvilinear meshes interleaved in a single array. </p>
<p>Structured curvilinear meshes have the XYZ information for every node in the IJK array for flexibility in defining the nodes. The connectivity for the mesh is implied so there are no connectivity arrays in the DVS::IElemBlock. This method returns the XYZ coordinates interleaved in a single array of the format [X0 Y0 Z0 X1 Y1 Z1]. If you'd like the XYZ coordinates in separate x,y,z arrays call <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8da90ca355541bf876fa23ed267f94cb" title="Get coordinate data for a structured curvilinear mesh.">get_coords_curv()</a>.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_PARAM_NULL: nullptr passed into method, method did nothing</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013" title="Curvilinear structured mesh data.">DVS::IMeshChunk::MeshType::CURVILINEAR</a></li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data.</li>
<li>DVS_INVALID_STRUCTURED_DATA: Invalid structured data. There is a problem with the data.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">local_ijk_min</td><td>array of size 3, returns 0 based ijk min for this chunk </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">local_ijk_max</td><td>array of size 3, returns 0 based ijk max for this chunk </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">global_ijk_max</td><td>array of size 3, returns 1 based global ijk max, this is the total ijk dimension across all mesh chunks </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">coords</td><td>output array of interleaved coords for form [X0 Y0 Z0 X1 Y0 Z0] size to allocate component_size*3 from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53" title="Get the size of each coordinate component for unstructured meshes.">get_coords_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, see method documentation for errors </dd></dl>

</div>
</div>
<a id="a70b1069fc8737730efa0fc01a0698fbd" name="a70b1069fc8737730efa0fc01a0698fbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70b1069fc8737730efa0fc01a0698fbd">&#9670;&#160;</a></span>get_coords_curv_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords_curv_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>component_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size of each coordinate component for structured curvilinear meshes. </p>
<p>Returns the size of each component of a curvilinear mesh. This is used with the method <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8da90ca355541bf876fa23ed267f94cb" title="Get coordinate data for a structured curvilinear mesh.">get_coords_curv()</a>. For <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5c191e3ec6d65a527fc1f3224f84d503" title="Get the coords for structured curvilinear meshes interleaved in a single array.">get_coords_curv_interleaved()</a> use the size component_size*3 to allocate the array.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013" title="Curvilinear structured mesh data.">DVS::IMeshChunk::MeshType::CURVILINEAR</a></li>
<li>DVS_INVALID_STRUCTURED_DATA: Structured data is invalid, should not happen</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">component_size</td><td>the size of each x/y/z coordinate components </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, see method documentation for errors </dd></dl>

</div>
</div>
<a id="a39c2d8cc95f14ecbe9789908881c92a0" name="a39c2d8cc95f14ecbe9789908881c92a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39c2d8cc95f14ecbe9789908881c92a0">&#9670;&#160;</a></span>get_coords_interleaved()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords_interleaved </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>coords</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the coords for a unstructured meshes interleaved in a single array. </p>
<p>Retrieves the coordinates for an unstructured mesh interleaved ([X0 Y0 Z0 X1 Y1 Z1]) instead of as separate X Y Z arrays as the method <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7738e954570e849462ff493ec875bc80" title="Get the coordinates for an unstructured mesh.">get_coords()</a> returns. The coords array should be of size component_size*3 returned from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53" title="Get the size of each coordinate component for unstructured meshes.">get_coords_size()</a>.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_PARAM_NULL: nullptr passed into method, method did nothing</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e" title="Unstructured mesh data.">DVS::IMeshChunk::MeshType::UNSTRUCTURED</a></li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data. <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">coords</td><td>output array of interleaved coords for form [X0 Y0 Z0 X1 Y0 Z0] size to allocate component_size*3 from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53" title="Get the size of each coordinate component for unstructured meshes.">get_coords_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, see method documentation for errors </dd></dl>
</li>
</ul>

</div>
</div>
<a id="a959ecd945a3e46b25b4e816a35eb4123" name="a959ecd945a3e46b25b4e816a35eb4123"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a959ecd945a3e46b25b4e816a35eb4123">&#9670;&#160;</a></span>get_coords_parallele()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords_parallele </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>origin</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>dir_vec_i</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>dir_vec_j</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>dir_vec_k</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>local_ijk_min</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>local_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>global_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>i_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>j_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>k_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the ijk mesh information for structured parallelepiped mesh chunks. </p>
<p>Retrieves the mesh information for a structured parallelepiped mush chunk. Parallelepiped structured meshes are described by an origin, XYZ direction vectors for each dimension and the amount of distance between the origin at each I, K and K increment. To get the size to allocate for i_vals, j_vals, and k_vals call <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abda21734e2f506b982b65007d17c92fd" title="Get the size of each ijk component for structured parallelpiped meshes.">get_coords_parallele_size()</a>.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_PARAM_NULL: nullptr passed into method, method did nothing</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013" title="Curvilinear structured mesh data.">DVS::IMeshChunk::MeshType::CURVILINEAR</a></li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data.</li>
<li>DVS_INVALID_STRUCTURED_DATA: Invalid structured data. There is a problem with the data.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">origin</td><td>The XYZ origin of the mesh </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dir_vec_i</td><td>array of size 3, returns the XYZ direction vector for I dimension </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dir_vec_j</td><td>array of size 3, returns the XYZ direction vector for J dimension </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dir_vec_k</td><td>array of size 3, returns the XYZ direction vector for K dimension </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">local_ijk_min</td><td>array of size 3, returns 0 based ijk min for this chunk </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">local_ijk_max</td><td>array of size 3, returns 0 based ijk max for this chunk </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">global_ijk_max</td><td>array of size 3, returns 1 based global ijk max, this is the total ijk dimension across all mesh chunks </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">i_vals</td><td>the distance at each I increment from the origin size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abda21734e2f506b982b65007d17c92fd" title="Get the size of each ijk component for structured parallelpiped meshes.">get_coords_parallele_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">j_vals</td><td>the distance at each J increment from the origin size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abda21734e2f506b982b65007d17c92fd" title="Get the size of each ijk component for structured parallelpiped meshes.">get_coords_parallele_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">k_vals</td><td>the distance at each K increment from the origin size to allocate from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abda21734e2f506b982b65007d17c92fd" title="Get the size of each ijk component for structured parallelpiped meshes.">get_coords_parallele_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, see method documentation for errors </dd></dl>

</div>
</div>
<a id="abda21734e2f506b982b65007d17c92fd" name="abda21734e2f506b982b65007d17c92fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abda21734e2f506b982b65007d17c92fd">&#9670;&#160;</a></span>get_coords_parallele_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords_parallele_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>i_vals_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>j_vals_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>k_vals_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size of each ijk component for structured parallelpiped meshes. </p>
<p>Returns the size of each component of a parallelpiped mesh. This is used with the method <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123" title="Get the ijk mesh information for structured parallelepiped mesh chunks.">get_coords_parallele()</a>. Use the sizes returned to allocate the arrays for <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123" title="Get the ijk mesh information for structured parallelepiped mesh chunks.">get_coords_parallele()</a>.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013" title="Curvilinear structured mesh data.">DVS::IMeshChunk::MeshType::CURVILINEAR</a></li>
<li>DVS_INVALID_STRUCTURED_DATA: Structured data is invalid, There is a problem with the data.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i_vals_size</td><td>size of the i dimension array to allocate for <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123" title="Get the ijk mesh information for structured parallelepiped mesh chunks.">get_coords_parallele()</a> </td></tr>
    <tr><td class="paramname">j_vals_size</td><td>size of the j dimension array to allocate for <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123" title="Get the ijk mesh information for structured parallelepiped mesh chunks.">get_coords_parallele()</a> </td></tr>
    <tr><td class="paramname">k_vals_size</td><td>size of the k dimension array to allocate for <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123" title="Get the ijk mesh information for structured parallelepiped mesh chunks.">get_coords_parallele()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, see method documentation for errors </dd></dl>

</div>
</div>
<a id="a0fe402e619754256a19e0087b76e2c53" name="a0fe402e619754256a19e0087b76e2c53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fe402e619754256a19e0087b76e2c53">&#9670;&#160;</a></span>get_coords_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_coords_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>component_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size of each coordinate component for unstructured meshes. </p>
<p>Used for unstructured meshes. Returns the size of each x/y/z coordinate array to be used with <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7738e954570e849462ff493ec875bc80" title="Get the coordinates for an unstructured mesh.">get_coords()</a> or component_size*3 for <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a39c2d8cc95f14ecbe9789908881c92a0" title="Get the coords for a unstructured meshes interleaved in a single array.">get_coords_interleaved()</a>.</p>
<p>Errors:</p><ul>
<li>DVS_NO_DATA: No data for this mesh, not an error</li>
<li>DVS_INVALID_MESH_TYPE: Mesh type is not <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e" title="Unstructured mesh data.">DVS::IMeshChunk::MeshType::UNSTRUCTURED</a></li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">component_size</td><td>the size of each x/y/z coordinate components </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, see method documentation for errors </dd></dl>

</div>
</div>
<a id="af45268cbc0f5284d4a7fe41afab5c42b" name="af45268cbc0f5284d4a7fe41afab5c42b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af45268cbc0f5284d4a7fe41afab5c42b">&#9670;&#160;</a></span>get_element_block()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">DVS::IElementBlock</a> * DVS::IMeshChunk::get_element_block </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the element block by index. </p>
<p>Get the element block according to it's index in the mesh chunk. This range is from [0, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5f3772e845d3ffe73c4a6525d78ab2ad" title="Get the number of element blocks for this mesh chunk.">get_num_element_blocks()</a>-1]. Every mesh chunk has a number of element blocks for each element type it has data for.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>the zero based index of the element block range: [0, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5f3772e845d3ffe73c4a6525d78ab2ad" title="Get the number of element blocks for this mesh chunk.">get_num_element_blocks()</a>-1] </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml" title="Element Block Interface for DVS Reader API.">DVS::IElementBlock</a>* nullptr if index is out of bounds, otherwise the element block </dd></dl>

</div>
</div>
<a id="a7ca84ad8d766514684790bacd31803fc" name="a7ca84ad8d766514684790bacd31803fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ca84ad8d766514684790bacd31803fc">&#9670;&#160;</a></span>get_element_block_by_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">DVS::IElementBlock</a> * DVS::IMeshChunk::get_element_block_by_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the element block by element type. </p>
<p>Get the element block by dvs_element_type from this mesh chunk, the valid types for this mesh chunk may be obtained via the method <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a44a916bcd71f4d6b33661b249d52c61b" title="Get an array of the element block types for this mesh chunk.">get_element_block_types()</a>.</p>
<p>Every mesh chunk has an element block for each element type it has data available for. These types are defined by the enum dvs_element_type in <a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a> with a macro FOREACH_ELEM_ENUM.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the type of element block to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml" title="Element Block Interface for DVS Reader API.">DVS::IElementBlock</a>* nullptr if invalid, otherwise the element block </dd></dl>

</div>
</div>
<a id="a44a916bcd71f4d6b33661b249d52c61b" name="a44a916bcd71f4d6b33661b249d52c61b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44a916bcd71f4d6b33661b249d52c61b">&#9670;&#160;</a></span>get_element_block_types()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_element_block_types </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> *&#160;</td>
          <td class="paramname"><em>element_types</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get an array of the element block types for this mesh chunk. </p>
<p>This returns an array of dvs_element_type for every block this mesh chunk contains. These types are defined by the enum dvs_element_type in <a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a> with a macro FOREACH_ELEM_ENUM.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">element_types</td><td>an array of size <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5f3772e845d3ffe73c4a6525d78ab2ad" title="Get the number of element blocks for this mesh chunk.">get_num_element_blocks()</a> to fill out </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no errors, DVS_PARAM_NULL if element types nullptr </dd></dl>

</div>
</div>
<a id="a5f3772e845d3ffe73c4a6525d78ab2ad" name="a5f3772e845d3ffe73c4a6525d78ab2ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f3772e845d3ffe73c4a6525d78ab2ad">&#9670;&#160;</a></span>get_num_element_blocks()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_num_element_blocks </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_elem_blocks</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of element blocks for this mesh chunk. </p>
<p>Every mesh chunk has an element block for each element type it has data available for. These types are defined by the enum dvs_element_type in <a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a> with a macro FOREACH_ELEM_ENUM.</p>
<p>Errors:</p><ul>
<li>DVS_NONE: Success</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">num_elem_blocks</td><td>if success, returns number of element blocks for this mesh chunk </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="a0b819acf4a968957e8ba90876dd880d9" name="a0b819acf4a968957e8ba90876dd880d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b819acf4a968957e8ba90876dd880d9">&#9670;&#160;</a></span>get_num_variables()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_num_variables </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_vars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code>VAR_TYPE::FLOAT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of nodal variables this mesh chunk has data for, based on the specified type. </p>
<p>This method is intended to be used in conjunction with <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3" title="Get the variable definition associates with the nodal variable for this index and the specified type.">get_variable()</a> and <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ae7fe3d3b75e14f1cdd0d810e30a35fe0" title="Get the variable data by index.">get_variable_data()</a> to retrieve nodal variable data.</p>
<p>Errors:</p><ul>
<li>DVS_NONE: Success</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">num_vars</td><td>if success, returns the number of nodal variables for this mesh chunk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>The enum type. By default, VAR_TYPE::FLOAT </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE if success, else see method description </dd></dl>

</div>
</div>
<a id="abb13b29450a5ccfaa9027cfda3ceb108" name="abb13b29450a5ccfaa9027cfda3ceb108"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb13b29450a5ccfaa9027cfda3ceb108">&#9670;&#160;</a></span>get_object()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a> * DVS::IMeshChunk::get_object </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the object definiton this mesh chunk is associated with. </p>
<dl class="section return"><dt>Returns</dt><dd>const <a class="el" href="class_d_v_s_1_1_i_object.xhtml" title="Interface for part/plot objects for DVS Reader API.">DVS::IObject</a>* the object definition </dd></dl>

</div>
</div>
<a id="a6c520674083999e99bdf77b2b1eaacf8" name="a6c520674083999e99bdf77b2b1eaacf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c520674083999e99bdf77b2b1eaacf8">&#9670;&#160;</a></span>get_rank()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint32_t DVS::IMeshChunk::get_rank </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the rank for the mesh chunk. </p>
<dl class="section return"><dt>Returns</dt><dd>uint32_t the rank this mesh chunk is associated with (zero based) </dd></dl>

</div>
</div>
<a id="a32ad562394805327fbabffa322643701" name="a32ad562394805327fbabffa322643701"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32ad562394805327fbabffa322643701">&#9670;&#160;</a></span>get_time()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float DVS::IMeshChunk::get_time </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the time for this mesh chunk. </p>
<dl class="section return"><dt>Returns</dt><dd>float the time this mesh chunk is associated with </dd></dl>

</div>
</div>
<a id="ab025d1550b2b3cd77faefecec5199852" name="ab025d1550b2b3cd77faefecec5199852"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab025d1550b2b3cd77faefecec5199852">&#9670;&#160;</a></span>get_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144a">MeshType</a> DVS::IMeshChunk::get_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the type of mesh chunk. </p>
<dl class="section return"><dt>Returns</dt><dd>MeshType the type of mesh </dd></dl>

</div>
</div>
<a id="a3fbe50455053f953a39707671d8b3ab3" name="a3fbe50455053f953a39707671d8b3ab3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fbe50455053f953a39707671d8b3ab3">&#9670;&#160;</a></span>get_variable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a> * DVS::IMeshChunk::get_variable </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code>VAR_TYPE::FLOAT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable definition associates with the nodal variable for this index and the specified type. </p>
<p>This method retrieves the variable that is associated with the nodal variable of the mesh chunk at a specific index in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1] and of the specified type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of variable definition to get in range [0, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>The enum type. By default, VAR_TYPE::FLOAT </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="class_d_v_s_1_1_i_var.xhtml" title="Interface for variables for the DVS Reader API.">DVS::IVar</a>* nullptr if out of range, otherwise the variable associated with the index </dd></dl>

</div>
</div>
<a id="a2fd35c1ebfad0967ff6a7bc3f62c81f5" name="a2fd35c1ebfad0967ff6a7bc3f62c81f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fd35c1ebfad0967ff6a7bc3f62c81f5">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by variable. </p>
<p>This method retrieves the nodal variable data based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
<li>DVS_PARAM_INVALID_VAR_ID: Mesh chunk does not have data for var passed in.</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve nodal variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="aea8ffa951b66f338d13704a06648ac27" name="aea8ffa951b66f338d13704a06648ac27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea8ffa951b66f338d13704a06648ac27">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by variable. </p>
<p>This method retrieves the nodal variable data based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
<li>DVS_PARAM_INVALID_VAR_ID: Mesh chunk does not have data for var passed in.</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve nodal variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="ada793fcafd36d800dc3c4249b193318c" name="ada793fcafd36d800dc3c4249b193318c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada793fcafd36d800dc3c4249b193318c">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by variable. </p>
<p>This method retrieves the nodal variable data based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
<li>DVS_PARAM_INVALID_VAR_ID: Mesh chunk does not have data for var passed in.</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve nodal variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>if not nullptr returns the number of values to allocate for array </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>if not nullptr should be of size num_values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="ae7fe3d3b75e14f1cdd0d810e30a35fe0" name="ae7fe3d3b75e14f1cdd0d810e30a35fe0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7fe3d3b75e14f1cdd0d810e30a35fe0">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by index. </p>
<p>This method retrieves nodal variable data based on an index in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1]. To retrieve the variable definition associated with the index call <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3" title="Get the variable definition associates with the nodal variable for this index and the specified type.">get_variable()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_PARAM_OUT_OF_BOUNDS: Index out of bounds of [0, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1]</li>
<li>DVS_PARAM_INVALID_VAR: Invalid variable found at index, should not happen</li>
<li>DVS_PARAM_INVALID_VAR_ID: Invalid variable id found at index, should not happen</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of the variable data in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="a5364c963d939e919c73623834c89c471" name="a5364c963d939e919c73623834c89c471"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5364c963d939e919c73623834c89c471">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by index. </p>
<p>This method retrieves nodal variable data based on an index in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1]. To retrieve the variable definition associated with the index call <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3" title="Get the variable definition associates with the nodal variable for this index and the specified type.">get_variable()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_PARAM_OUT_OF_BOUNDS: Index out of bounds of [0, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1]</li>
<li>DVS_PARAM_INVALID_VAR: Invalid variable found at index, should not happen</li>
<li>DVS_PARAM_INVALID_VAR_ID: Invalid variable id found at index, should not happen</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of the variable data in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="ab72dfdd09b4258da7de7308ef48cb1fc" name="ab72dfdd09b4258da7de7308ef48cb1fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab72dfdd09b4258da7de7308ef48cb1fc">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by index. </p>
<p>This method retrieves nodal variable data based on an index in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1]. To retrieve the variable definition associated with the index call <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3" title="Get the variable definition associates with the nodal variable for this index and the specified type.">get_variable()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_PARAM_OUT_OF_BOUNDS: Index out of bounds of [0, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1]</li>
<li>DVS_PARAM_INVALID_VAR: Invalid variable found at index, should not happen</li>
<li>DVS_PARAM_INVALID_VAR_ID: Invalid variable id found at index, should not happen</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of the variable data in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>if not nullptr returns the number of values to allocate for array </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>if not nullptr must be of size num_values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="aad7ddb41a24c6108c245ed1189595816" name="aad7ddb41a24c6108c245ed1189595816"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad7ddb41a24c6108c245ed1189595816">&#9670;&#160;</a></span>get_variable_size() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_size </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable size by variable. </p>
<p>This method retrieves the nodal variable data size based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: Success</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve nodal variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>a reference to a uint32_t, representing the number of values of the variable </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="a6d0e7efa6c204cbb7730ef1bf4024fbc" name="a6d0e7efa6c204cbb7730ef1bf4024fbc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d0e7efa6c204cbb7730ef1bf4024fbc">&#9670;&#160;</a></span>get_variable_size() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IMeshChunk::get_variable_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code>VAR_TYPE::FLOAT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable size via the index and specified type. </p>
<p>This method retrieves the variable's size that is associated with the nodal variable of the mesh chunk at a specific index in range [0,<a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1] and of the specified type</p>
<p>Errors:</p><ul>
<li>DVS_NONE: Success</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of variable definition to get in range [0, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9" title="Get the number of nodal variables this mesh chunk has data for, based on the specified type.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>a reference to a uint32_t, representing the number of values of the variable </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the enum type. By default, VAR_TYPE::FLOAT </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE if success, else see method description </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>D:/Product-src/ensight/user_defined_src/readers/dvs/include/<a class="el" href="dvs__mesh__chunk__interface_8h_source.xhtml">dvs_mesh_chunk_interface.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
