<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Test005.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Test005.cpp</div></div>
</div><!--header-->
<div class="contents">
<p>Textured 2D Quad.</p>
<p>This example shows how to create a simple 2D textured quad.  
 <script src='/ansys/nexus/viewer-loader.js'></script>
 <ansys-nexus-viewer src='TestTextured2DQuad.avz' aspect_ratio=1.777></ansys-nexus-viewer>
</p>
<div class="fragment"><div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Copyright 2018-2021 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited.</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * Restricted Rights Legend</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Use, duplication, or disclosure of this</span></div>
<div class="line"><span class="comment"> * software and its documentation by the</span></div>
<div class="line"><span class="comment"> * Government is subject to restrictions as</span></div>
<div class="line"><span class="comment"> * set forth in subdivision [(b)(3)(ii)] of</span></div>
<div class="line"><span class="comment"> * the Rights in Technical Data and Computer</span></div>
<div class="line"><span class="comment"> * Software clause at 52.227-7013.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;GLTFWriter.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>ANSYS::Nexus;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Simple creation of Textured Quad</span></div>
<div class="line">TESTFUNC(Textured2DQuad)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">if</span> (type != GLTFWriter::GLTF::OT_AVZ &amp;&amp; type != GLTFWriter::GLTF::OT_GLTF)</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line"> </div>
<div class="line">    <a id="_a0" name="_a0"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">GLTFWriter::GLTF</a> *gltf = GLTFWriter::GLTF::Create(<span class="stringliteral">&quot;MyApp&quot;</span>, <span class="stringliteral">&quot;1.0&quot;</span>, functionName.c_str(), type);</div>
<div class="line">    <span class="keywordflow">if</span> (!gltf)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create GLTF&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// SCENE</span></div>
<div class="line">    <a id="_a1" name="_a1"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">GLTFWriter::Scene</a> *scene = GLTFWriter::Scene::Create(gltf, <span class="stringliteral">&quot;TestScene&quot;</span>, <span class="stringliteral">&quot;m&quot;</span>, 1.0, GLTFWriter::Scene::BT_SOLID, 0.5, 0.5, 0.5);</div>
<div class="line">    <span class="keywordflow">if</span> (!scene) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create scene&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// LIGHTS</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// LIGHT NODE</span></div>
<div class="line">        <a id="_a2" name="_a2"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *lightNode = GLTFWriter::Node::CreateLight(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!lightNode || !scene-&gt;<a id="a3" name="a3"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#ad59f57e366c5376b197aed0b10de4f71">SetLight</a>(lightNode)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create light&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// LIGHTS</span></div>
<div class="line">        <a id="_a4" name="_a4"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">GLTFWriter::Light</a> *light1 = GLTFWriter::Light::CreateAmbient(gltf);</div>
<div class="line">        lightNode-&gt;<a id="a5" name="a5"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">AppendLight</a>(light1);</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">GLTFWriter::Light</a> *light2 = GLTFWriter::Light::CreateDirectional(gltf);</div>
<div class="line">        lightNode-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">AppendLight</a>(light2);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// 3D MESH NODE</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;3D Box&quot;</span>);</div>
<div class="line">        <span class="keywordflow">if</span> (!node || !scene-&gt;<a id="a6" name="a6"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MESH</span></div>
<div class="line">        <a id="_a7" name="_a7"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!mesh || !node-&gt;<a id="a8" name="a8"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TECHNIQUE</span></div>
<div class="line">        <a id="_a9" name="_a9"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">GLTFWriter::Technique</a> *technique = GLTFWriter::Technique::Create(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!technique ||</div>
<div class="line">            <span class="comment">// TECHNIQUE STATES</span></div>
<div class="line">            !technique-&gt;<a id="a10" name="a10"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_DEPTHTESTENABLE, 1)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_BLENDENABLE, 1))) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create technique&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MATERIAL</span></div>
<div class="line">        <a id="_a11" name="_a11"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">GLTFWriter::Material</a> *material = GLTFWriter::Material::Create(gltf, technique);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// VERTICES</span></div>
<div class="line">        std::vector&lt;float&gt; vertices;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> width = 1;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> height = 1;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> depth = 1;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> shiftX = 0;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> shiftY = 0;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> shiftZ = 0;</div>
<div class="line">        vertices.push_back(-width / 2 + shiftX); vertices.push_back(-height / 2 + shiftY); vertices.push_back(-depth / 2 + shiftZ);</div>
<div class="line">        vertices.push_back( width / 2 + shiftX); vertices.push_back(-height / 2 + shiftY); vertices.push_back(-depth / 2 + shiftZ);</div>
<div class="line">        vertices.push_back( width / 2 + shiftX); vertices.push_back( height / 2 + shiftY); vertices.push_back(-depth / 2 + shiftZ);</div>
<div class="line">        vertices.push_back(-width / 2 + shiftX); vertices.push_back( height / 2 + shiftY); vertices.push_back(-depth / 2 + shiftZ);</div>
<div class="line">        vertices.push_back(-width / 2 + shiftX); vertices.push_back(-height / 2 + shiftY); vertices.push_back( depth / 2 + shiftZ);</div>
<div class="line">        vertices.push_back( width / 2 + shiftX); vertices.push_back(-height / 2 + shiftY); vertices.push_back( depth / 2 + shiftZ);</div>
<div class="line">        vertices.push_back( width / 2 + shiftX); vertices.push_back( height / 2 + shiftY); vertices.push_back( depth / 2 + shiftZ);</div>
<div class="line">        vertices.push_back(-width / 2 + shiftX); vertices.push_back( height / 2 + shiftY); vertices.push_back( depth / 2 + shiftZ);</div>
<div class="line">        <span class="comment">// POSITION ATTRIBUTE</span></div>
<div class="line">        <a id="_a12" name="_a12"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *vertex = GLTFWriter::Attribute::CreatePosition(gltf, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)vertices.size() / 3, &amp;vertices[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// COLORS</span></div>
<div class="line">        std::vector&lt;float&gt; colors;</div>
<div class="line">        colors.push_back(0); colors.push_back(0); colors.push_back(0); colors.push_back(1);</div>
<div class="line">        colors.push_back(0); colors.push_back(0); colors.push_back(1); colors.push_back(0.75);</div>
<div class="line">        colors.push_back(0); colors.push_back(1); colors.push_back(0); colors.push_back(0.5);</div>
<div class="line">        colors.push_back(0); colors.push_back(1); colors.push_back(1); colors.push_back(0.25);</div>
<div class="line">        colors.push_back(1); colors.push_back(0); colors.push_back(1); colors.push_back(0.5);</div>
<div class="line">        colors.push_back(1); colors.push_back(0); colors.push_back(0); colors.push_back(0.25);</div>
<div class="line">        colors.push_back(1); colors.push_back(1); colors.push_back(1); colors.push_back(1);</div>
<div class="line">        colors.push_back(1); colors.push_back(1); colors.push_back(0); colors.push_back(0.75);</div>
<div class="line">        <span class="comment">// COLOR ATTRIBUTE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *color = GLTFWriter::Attribute::CreateColor(gltf, GLTFWriter::Attribute::AT_FLOAT_VEC4, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)colors.size() / 4, &amp;colors[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// INDICES</span></div>
<div class="line">        std::vector&lt;unsigned short&gt; indices;</div>
<div class="line">        indices.push_back(0); indices.push_back(2); indices.push_back(1);</div>
<div class="line">            indices.push_back(0); indices.push_back(3); indices.push_back(2);</div>
<div class="line">        indices.push_back(0); indices.push_back(4); indices.push_back(7);</div>
<div class="line">            indices.push_back(0); indices.push_back(7); indices.push_back(3);</div>
<div class="line">        indices.push_back(4); indices.push_back(5); indices.push_back(6);</div>
<div class="line">            indices.push_back(4); indices.push_back(6); indices.push_back(7);</div>
<div class="line">        indices.push_back(5); indices.push_back(1); indices.push_back(2);</div>
<div class="line">            indices.push_back(5); indices.push_back(2); indices.push_back(6);</div>
<div class="line">        indices.push_back(0); indices.push_back(1); indices.push_back(5);</div>
<div class="line">            indices.push_back(0); indices.push_back(5); indices.push_back(4);</div>
<div class="line">        indices.push_back(2); indices.push_back(3); indices.push_back(7);</div>
<div class="line">            indices.push_back(2); indices.push_back(7); indices.push_back(6);</div>
<div class="line">        <span class="comment">// INDICES</span></div>
<div class="line">            <a id="_a13" name="_a13"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">GLTFWriter::Index</a> *index = GLTFWriter::Index::Create(gltf, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)indices.size(), &amp;indices[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// NORMALS</span></div>
<div class="line">        std::vector&lt;float&gt; normals(vertices.size());</div>
<div class="line">        GLTFWriter::Utils::ComputeVertexNormals3((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)vertices.size() / 3, &amp;vertices[0], (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)indices.size() / 3, 3, &amp;indices[0], &amp;normals[0]);</div>
<div class="line">        <span class="comment">// NORMAL ATTRIBUTE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *normal = GLTFWriter::Attribute::CreateNormal(gltf, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)vertices.size() / 3, &amp;normals[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// PRIMITIVE</span></div>
<div class="line">        <a id="_a14" name="_a14"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create(gltf, GLTFWriter::Primitive::PT_TRIANGLES, material, index);</div>
<div class="line">        <span class="keywordflow">if</span> (!primitive ||</div>
<div class="line">            !mesh-&gt;<a id="a15" name="a15"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive) ||</div>
<div class="line">            !primitive-&gt;<a id="a16" name="a16"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(vertex) ||</div>
<div class="line">            !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(normal) ||</div>
<div class="line">            !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(color)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create primitive&quot;</span>);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// 2D MESH NODE</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;2D Textured Quad&quot;</span>);</div>
<div class="line">        <span class="keywordflow">if</span> (!node || !scene-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MESH</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!mesh || !node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TEXTURE</span></div>
<div class="line">        {</div>
<div class="line">            std::vector&lt;unsigned char&gt; imageData;</div>
<div class="line">            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> width = 150;</div>
<div class="line">            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> height = 250;</div>
<div class="line">            imageData.resize(width * height * 4, 0);</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#               define SETRGB(data, width, x, y, r, g, b, a) { \</span></div>
<div class="line"><span class="preprocessor">                data[4 * ((x) + (y) * (width)) + 0] = r; \</span></div>
<div class="line"><span class="preprocessor">                data[4 * ((x) + (y) * (width)) + 1] = g; \</span></div>
<div class="line"><span class="preprocessor">                data[4 * ((x) + (y) * (width)) + 2] = b; \</span></div>
<div class="line"><span class="preprocessor">                data[4 * ((x) + (y) * (width)) + 3] = a; \</span></div>
<div class="line"><span class="preprocessor">            }</span></div>
<div class="line"> </div>
<div class="line">            <span class="comment">// fill in top left corner</span></div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 10; ++i)</div>
<div class="line">                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 10; ++j)</div>
<div class="line">                    SETRGB(imageData, width, i + 2, j + 2, 255, 255, 255, 255);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// PRIMITIVE</span></div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 255, 0, 0, 255);</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; height; ++i) {</div>
<div class="line">                SETRGB(imageData, width, 0, i, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, 1, i, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 1, i, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 2, i, 255, 0, 0, 255);</div>
<div class="line">            }</div>
<div class="line">            <a id="_a17" name="_a17"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">GLTFWriter::Texture</a> *texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_LEFT, GLTFWriter::Primitive::PYA_TOP);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 0, 255, 0, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_LEFT, GLTFWriter::Primitive::PYA_CENTER);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 0, 0, 255, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_LEFT, GLTFWriter::Primitive::PYA_BOTTOM);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; height; ++i) {</div>
<div class="line">                SETRGB(imageData, width, 0, i, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, 1, i, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 1, i, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 2, i, 0, 255, 0, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_CENTER, GLTFWriter::Primitive::PYA_BOTTOM);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 0, 255, 0, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_CENTER, GLTFWriter::Primitive::PYA_CENTER);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 255, 0, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 255, 0, 0, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_CENTER, GLTFWriter::Primitive::PYA_TOP);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; height; ++i) {</div>
<div class="line">                SETRGB(imageData, width, 0, i, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, 1, i, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 1, i, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 2, i, 0, 0, 255, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_RIGHT, GLTFWriter::Primitive::PYA_TOP);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 0, 255, 0, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 0, 255, 0, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_RIGHT, GLTFWriter::Primitive::PYA_CENTER);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 0, 0, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 0, 0, 255, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, GLTFWriter::Primitive::PXA_RIGHT, GLTFWriter::Primitive::PYA_BOTTOM);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i) {</div>
<div class="line">                SETRGB(imageData, width, i, 0, 255, 255, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, 1, 255, 255, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 1, 255, 255, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, i, height - 2, 255, 255, 255, 255);</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; height; ++i) {</div>
<div class="line">                SETRGB(imageData, width, 0, i, 255, 255, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, 1, i, 255, 255, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 1, i, 255, 255, 255, 255);</div>
<div class="line">                SETRGB(imageData, width, width - 2, i, 255, 255, 255, 255);</div>
<div class="line">            }</div>
<div class="line">            texture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGBA, width, height, &amp;imageData[0]);</div>
<div class="line">            primitive = GLTFWriter::Primitive::Create2DTexture(gltf, texture, 0.15F, 0.25F, 0.2F, 0.4F);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!gltf-&gt;<a id="a18" name="a18"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">Write</a>()) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_enumeration" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">GLTFWriter::GLTF::GLTFError</a> error = gltf-&gt;<a id="a19" name="a19"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">GetError</a>();</div>
<div class="line"> </div>
<div class="line">    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (error != GLTFWriter::GLTF::GLTF_ERROR_NONE)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">}</div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">ANSYS::Nexus::GLTFWriter::Attribute</a></div><div class="ttdoc">Attributes define the per element index values for elements defined by Index.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_attribute_8h_source.xhtml#l00031">GLTFAttribute.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">ANSYS::Nexus::GLTFWriter::GLTF</a></div><div class="ttdoc">This is the main class of the GLTFWriter.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00031">GLTFGLTF.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a7a468ecf1f594b411023782d18f08823"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">ANSYS::Nexus::GLTFWriter::GLTF::Write</a></div><div class="ttdeci">virtual bool Write(bool formatJSON=false)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a812b885f21ed48bad70fea6b03e76913"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">ANSYS::Nexus::GLTFWriter::GLTF::GetError</a></div><div class="ttdeci">virtual GLTFError GetError()=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_acf83a4d185d959503cb9f3f2c2e9fafe"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">ANSYS::Nexus::GLTFWriter::GLTF::GLTFError</a></div><div class="ttdeci">GLTFError</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00035">GLTFGLTF.h:35</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">ANSYS::Nexus::GLTFWriter::Index</a></div><div class="ttdoc">Indexes define elements within primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_index_8h_source.xhtml#l00028">GLTFIndex.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">ANSYS::Nexus::GLTFWriter::Light</a></div><div class="ttdoc">Lights define the light objects that can be added to a light node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_light_8h_source.xhtml#l00030">GLTFLight.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">ANSYS::Nexus::GLTFWriter::Material</a></div><div class="ttdoc">Materials describe how primitives are rendered.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_material_8h_source.xhtml#l00029">GLTFMaterial.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">ANSYS::Nexus::GLTFWriter::Mesh</a></div><div class="ttdoc">Meshes define the renderable objects that can be added to a node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00103">GLTFMesh.h:104</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml_a392eddd58e41d83d7df11e7e48ed4798"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">ANSYS::Nexus::GLTFWriter::Mesh::AppendPrimitive</a></div><div class="ttdeci">virtual bool AppendPrimitive(Primitive *primitive)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">ANSYS::Nexus::GLTFWriter::Node</a></div><div class="ttdoc">Nodes are the GLTFWriter class that contain the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_node_8h_source.xhtml#l00030">GLTFNode.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a229725aed9694dd14f7023d5445bbc72"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">ANSYS::Nexus::GLTFWriter::Node::AppendLight</a></div><div class="ttdeci">virtual bool AppendLight(Light *light)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a29e43db3c3bd933a51c2e99e223e41bd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">ANSYS::Nexus::GLTFWriter::Node::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Mesh *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">ANSYS::Nexus::GLTFWriter::Primitive</a></div><div class="ttdoc">Primitives are the renderable parts of meshes.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00029">GLTFMesh.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml_a4aae56e343ac5130d42416d2ee4c52e3"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">ANSYS::Nexus::GLTFWriter::Primitive::AppendAttribute</a></div><div class="ttdeci">virtual bool AppendAttribute(Attribute *attribute)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">ANSYS::Nexus::GLTFWriter::Scene</a></div><div class="ttdoc">Scenes are the GLTFWriter class that create the view of the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_scene_8h_source.xhtml#l00028">GLTFScene.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_ad59f57e366c5376b197aed0b10de4f71"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#ad59f57e366c5376b197aed0b10de4f71">ANSYS::Nexus::GLTFWriter::Scene::SetLight</a></div><div class="ttdeci">virtual bool SetLight(Node *light)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_adea272bb6570744737a12f7f639e40fd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">ANSYS::Nexus::GLTFWriter::Scene::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Node *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">ANSYS::Nexus::GLTFWriter::Technique</a></div><div class="ttdoc">Techniques performs the rendering of primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_technique_8h_source.xhtml#l00239">GLTFTechnique.h:240</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml_a07adefb88b59c6f4b8ec47296ee06f62"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">ANSYS::Nexus::GLTFWriter::Technique::AppendState</a></div><div class="ttdeci">virtual bool AppendState(State *state)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">ANSYS::Nexus::GLTFWriter::Texture</a></div><div class="ttdoc">Textures are images that can be used to color a primitive.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_texture_8h_source.xhtml#l00027">GLTFTexture.h:28</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
