<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Test008.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Test008.cpp</div></div>
</div><!--header-->
<div class="contents">
<p>Animated textured sphere.</p>
<p>See <a href="_test006_8cpp-example.html">Test006.cpp</a> for more information about animations.</p>
<p>This is another animation example that simply transforms a node matrix over a period of time. The underlying code in the ANSYSViewer extracts a quaterion from the matrix and interpolates between quaternions at the defined times.</p>
<p>The animation in this example merely rotates the sphere about its Z axis.</p>
<p>A custom shader is used that demonstrates the usage of a 2D texture coordinate. The 2D texture coordinates in this example are similar to latitude and longitude.  
 <script src='/ansys/nexus/viewer-loader.js'></script>
 <ansys-nexus-viewer src='TestLightedTexturedSphere.avz' aspect_ratio=1.777></ansys-nexus-viewer>
</p>
<div class="fragment"><div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Copyright 2018-2021 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited.</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * Restricted Rights Legend</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Use, duplication, or disclosure of this</span></div>
<div class="line"><span class="comment"> * software and its documentation by the</span></div>
<div class="line"><span class="comment"> * Government is subject to restrictions as</span></div>
<div class="line"><span class="comment"> * set forth in subdivision [(b)(3)(ii)] of</span></div>
<div class="line"><span class="comment"> * the Rights in Technical Data and Computer</span></div>
<div class="line"><span class="comment"> * Software clause at 52.227-7013.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;GLTFWriter.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>ANSYS::Nexus;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Lighted Textured Sphere</span></div>
<div class="line">TESTFUNC(LightedTexturedSphere)</div>
<div class="line">{</div>
<div class="line">    <a id="_a0" name="_a0"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">GLTFWriter::GLTF</a> *gltf = GLTFWriter::GLTF::Create(<span class="stringliteral">&quot;MyApp&quot;</span>, <span class="stringliteral">&quot;1.0&quot;</span>, functionName.c_str(), type);</div>
<div class="line">    <span class="keywordflow">if</span> (!gltf)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create GLTF&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// SCENE</span></div>
<div class="line">    <a id="_a1" name="_a1"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">GLTFWriter::Scene</a> *scene = GLTFWriter::Scene::Create(gltf, <span class="stringliteral">&quot;TestScene&quot;</span>, <span class="stringliteral">&quot;m&quot;</span>, 1.0, GLTFWriter::Scene::BT_SOLID, 0.5, 0.5, 0.5);</div>
<div class="line">    <span class="keywordflow">if</span> (!scene) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create scene&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// ANIMATION</span></div>
<div class="line">    <a id="_a2" name="_a2"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml">GLTFWriter::Animation</a> *animation = GLTFWriter::Animation::Create(gltf, <span class="stringliteral">&quot;My Animation&quot;</span>);</div>
<div class="line">    <span class="comment">// create a reusable time</span></div>
<div class="line">    <a id="_a3" name="_a3"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *time = 0;</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> _time[4];</div>
<div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line">        _time[i++] = 0; <span class="comment">// time 0</span></div>
<div class="line">        _time[i++] = 10; <span class="comment">// time 1</span></div>
<div class="line">        _time[i++] = 20; <span class="comment">// time 2</span></div>
<div class="line">        _time[i++] = 30; <span class="comment">// time 3</span></div>
<div class="line">        time = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TIME&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, 4, _time);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// ANIMATION SAMPLER for sampling matrix</span></div>
<div class="line">    <a id="_a4" name="_a4"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler.xhtml">GLTFWriter::AnimationSampler</a> *sampler = 0;</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> _mat[4 * 16];</div>
<div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 0</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m0; <span class="comment">// identity</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m0[j];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 1</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m1; <span class="comment">// identity</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 r1;</div>
<div class="line">        r1.LoadRotation(GLTFWriter::Test::Vector3(0, 0, 0), GLTFWriter::Test::Vector3(0, 1, 0), DegreesToRadians(120));</div>
<div class="line">        m1 *= r1;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m1[j];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 2</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m2; <span class="comment">// identity</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 r2;</div>
<div class="line">        r2.LoadRotation(GLTFWriter::Test::Vector3(0, 0, 0), GLTFWriter::Test::Vector3(0, 1, 0), DegreesToRadians(240));</div>
<div class="line">        m2 *= r2;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m2[j];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 3</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m3; <span class="comment">// identity</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 r3;</div>
<div class="line">        r3.LoadRotation(GLTFWriter::Test::Vector3(0, 0, 0), GLTFWriter::Test::Vector3(0, 1, 0), DegreesToRadians(360));</div>
<div class="line">        m3 *= r3;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m3[j];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *matrix = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;MATRIX&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_MAT4, 4, _mat);</div>
<div class="line"> </div>
<div class="line">        sampler = GLTFWriter::AnimationSampler::Create(gltf, time, matrix);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// LIGHTS</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// LIGHT NODE</span></div>
<div class="line">        <a id="_a5" name="_a5"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *lightNode = GLTFWriter::Node::CreateLight(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!lightNode || !scene-&gt;<a id="a6" name="a6"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#ad59f57e366c5376b197aed0b10de4f71">SetLight</a>(lightNode)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create light&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// LIGHTS</span></div>
<div class="line">        <a id="_a7" name="_a7"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">GLTFWriter::Light</a> *light1 = GLTFWriter::Light::CreateAmbient(gltf);</div>
<div class="line">        lightNode-&gt;<a id="a8" name="a8"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">AppendLight</a>(light1);</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">GLTFWriter::Light</a> *light2 = GLTFWriter::Light::CreateDirectional(gltf, 1, 1, 1, -1, -1, -1);</div>
<div class="line">        lightNode-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">AppendLight</a>(light2);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// CAMERA</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// CAMERA</span></div>
<div class="line">        <a id="_a9" name="_a9"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera.xhtml">GLTFWriter::Camera</a> *camera = GLTFWriter::Camera::CreatePerspective(gltf);</div>
<div class="line">        <span class="comment">// CAMERA NODE</span></div>
<div class="line">        std::vector&lt;double&gt; mat(16);</div>
<div class="line">        mat[0] = 0.5;</div>
<div class="line">        mat[1] = 0;</div>
<div class="line">        mat[2] = 0;</div>
<div class="line">        mat[3] = 0;</div>
<div class="line">        mat[4] = 0;</div>
<div class="line">        mat[5] = 0.5;</div>
<div class="line">        mat[6] = 0;</div>
<div class="line">        mat[7] = 0;</div>
<div class="line">        mat[8] = 0;</div>
<div class="line">        mat[9] = 0;</div>
<div class="line">        mat[10] = 0.5;</div>
<div class="line">        mat[11] = 0;</div>
<div class="line">        mat[12] = 0;</div>
<div class="line">        mat[13] = 0;</div>
<div class="line">        mat[14] = 0;</div>
<div class="line">        mat[15] = 1;</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *cameraNode = GLTFWriter::Node::CreateCamera(gltf, camera, <span class="stringliteral">&quot;TestCamera&quot;</span>, &amp;mat[0]);</div>
<div class="line">        scene-&gt;<a id="a10" name="a10"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#a032a02e7ff85707f8ae02dce0ec11ce4">SetCamera</a>(cameraNode);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// generate vertices, normals, and texture coordinates for a ball</span></div>
<div class="line">    std::vector&lt;float&gt; vertices;</div>
<div class="line">    std::vector&lt;float&gt; normals;</div>
<div class="line">    std::vector&lt;float&gt; texCoords;</div>
<div class="line">    std::vector&lt;unsigned short&gt; triangles;</div>
<div class="line">    GLTFWriter::Test::MakeTexturedSphere(0, 0, 0, 0.5, 64, vertices, normals, texCoords, triangles);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// MESH NODE</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        std::vector&lt;double&gt; mat(16);</div>
<div class="line">        mat[0] = 1;</div>
<div class="line">        mat[1] = 0;</div>
<div class="line">        mat[2] = 0;</div>
<div class="line">        mat[3] = 0;</div>
<div class="line">        mat[4] = 0;</div>
<div class="line">        mat[5] = 1;</div>
<div class="line">        mat[6] = 0;</div>
<div class="line">        mat[7] = 0;</div>
<div class="line">        mat[8] = 0;</div>
<div class="line">        mat[9] = 0;</div>
<div class="line">        mat[10] = 1;</div>
<div class="line">        mat[11] = 0;</div>
<div class="line">        mat[12] = 0;</div>
<div class="line">        mat[13] = 0;</div>
<div class="line">        mat[14] = 0;</div>
<div class="line">        mat[15] = 1;</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Sphere&quot;</span>, <span class="keyword">true</span>, &amp;mat[0]);</div>
<div class="line">        <span class="keywordflow">if</span> (!node || !scene-&gt;<a id="a11" name="a11"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MESH</span></div>
<div class="line">        <a id="_a12" name="_a12"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!mesh || !node-&gt;<a id="a13" name="a13"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TEXTURE</span></div>
<div class="line">        <a id="_a14" name="_a14"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">GLTFWriter::Texture</a> *texture = GLTFWriter::Test::CreateTexture(gltf, <span class="stringliteral">&quot;earth.png&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// VERTEX SHADER</span></div>
<div class="line">        std::string vsText(std::string(<span class="stringliteral">&quot;precision highp float;\n&quot;</span>) +</div>
<div class="line">            <span class="stringliteral">&quot;uniform mat4 u_projectionMatrix;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;uniform mat4 u_modelViewMatrix;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;attribute vec3 a_position;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;uniform mat3 u_normalMatrix;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;attribute vec3 a_normal;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;varying vec3 v_eyePosition;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;varying vec3 v_normal;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;attribute vec2 a_texCoord0;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;varying vec2 v_texCoord0;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;void main() {\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec4 l_position = vec4(a_position, 1.0);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec4 l_eyePosition = u_modelViewMatrix * l_position;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;v_eyePosition = l_eyePosition.xyz / l_eyePosition.w;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;v_normal = u_normalMatrix * a_normal;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;v_texCoord0 = a_texCoord0;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;gl_Position = u_projectionMatrix * l_eyePosition;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;}\n&quot;</span>);</div>
<div class="line">        std::vector&lt;const char *&gt; uVertex;</div>
<div class="line">        uVertex.push_back(<span class="stringliteral">&quot;u_modelViewMatrix&quot;</span>);</div>
<div class="line">        uVertex.push_back(<span class="stringliteral">&quot;u_projectionMatrix&quot;</span>);</div>
<div class="line">        uVertex.push_back(<span class="stringliteral">&quot;u_normalMatrix&quot;</span>);</div>
<div class="line">        std::vector&lt;const char *&gt; aVertex;</div>
<div class="line">        aVertex.push_back(<span class="stringliteral">&quot;a_position&quot;</span>);</div>
<div class="line">        aVertex.push_back(<span class="stringliteral">&quot;a_normal&quot;</span>);</div>
<div class="line">        aVertex.push_back(<span class="stringliteral">&quot;a_texCoord0&quot;</span>);</div>
<div class="line">        <a id="_a15" name="_a15"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader.xhtml">GLTFWriter::Shader</a> *vertexShader = GLTFWriter::Shader::Create(gltf, vsText.c_str(), (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)aVertex.size(), &amp;aVertex[0], (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)uVertex.size(), &amp;uVertex[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// FRAGMENT SHADER</span></div>
<div class="line">        std::string fsText(std::string(<span class="stringliteral">&quot;precision highp float;\n&quot;</span>) +</div>
<div class="line">            <span class="stringliteral">&quot;uniform vec3 u_light0Position;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;uniform vec3 u_light1Ambient;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;uniform sampler2D u_texture0;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;varying vec3 v_eyePosition;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;varying vec3 v_normal;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;varying vec2 v_texCoord0;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;void main() {\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec4 l_color = vec4(1.0, 1.0, 1.0, 1.0);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec3 l_normal = normalize(v_normal);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec4 l_texelColor = texture2D(u_texture0, v_texCoord0);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;l_color *= l_texelColor;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec3 l_frontAmbient = u_light1Ambient * l_color.rgb;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec3 l_frontDiffuse = vec3(0.0, 0.0, 0.0);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec3 l_frontSpecular = vec3(0.0, 0.0, 0.0);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec3 l_VP = normalize(u_light0Position - v_eyePosition);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;float l_nDotVP = dot(l_normal, l_VP);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;if (!gl_FrontFacing)\n&quot;</span> + <span class="comment">// two sided lighting</span></div>
<div class="line">            <span class="stringliteral">&quot;l_nDotVP = -l_nDotVP;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;if (l_nDotVP &gt; 0.0) {\n&quot;</span> + <span class="comment">// front faced</span></div>
<div class="line">            <span class="stringliteral">&quot;l_frontDiffuse += l_nDotVP * l_color.rgb;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;vec3 l_halfVector = normalize(l_VP + vec3(0.0, 0.0, 1.0));\n&quot;</span> + <span class="comment">// eye is always looking down Z axis</span></div>
<div class="line">            <span class="stringliteral">&quot;float l_nDotHV = dot(l_normal, l_halfVector);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;if (!gl_FrontFacing)\n&quot;</span> + <span class="comment">// two sided lighting</span></div>
<div class="line">            <span class="stringliteral">&quot;l_nDotHV = -l_nDotHV;\n&quot;</span></div>
<div class="line">            <span class="stringliteral">&quot;if (l_nDotHV &gt; 0.0)\n&quot;</span> + <span class="comment">// specular</span></div>
<div class="line">            <span class="stringliteral">&quot;l_frontSpecular += pow(l_nDotHV, 100.0) * vec3(1.0, 1.0, 1.0);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;}\n&quot;</span> +  <span class="comment">// front faced</span></div>
<div class="line">            <span class="stringliteral">&quot;l_color = vec4(l_frontAmbient + l_frontDiffuse + l_frontSpecular, l_color.a);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;l_color = clamp(l_color, 0.0, 1.0);\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;gl_FragColor = l_color;\n&quot;</span> +</div>
<div class="line">            <span class="stringliteral">&quot;}\n&quot;</span>);</div>
<div class="line">        std::vector&lt;const char *&gt; uFragment;</div>
<div class="line">        uFragment.push_back(<span class="stringliteral">&quot;u_light0Position&quot;</span>);</div>
<div class="line">        uFragment.push_back(<span class="stringliteral">&quot;u_light1Ambient&quot;</span>);</div>
<div class="line">        uFragment.push_back(<span class="stringliteral">&quot;u_texture0&quot;</span>);</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader.xhtml">GLTFWriter::Shader</a> *fragmentShader = GLTFWriter::Shader::Create(gltf, fsText.c_str(), 0, 0, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)uFragment.size(), &amp;uFragment[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// PROGRAM</span></div>
<div class="line">        <a id="_a16" name="_a16"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_program.xhtml">GLTFWriter::Program</a> *program = GLTFWriter::Program::Create(gltf, vertexShader, fragmentShader);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TECHNIQUE</span></div>
<div class="line">        <a id="_a17" name="_a17"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">GLTFWriter::Technique</a> *technique = GLTFWriter::Technique::Create(gltf, program);</div>
<div class="line">        <span class="keywordflow">if</span> (!technique ||</div>
<div class="line">            <span class="comment">// TECHNIQUE PARAMETERS</span></div>
<div class="line">            !technique-&gt;<a id="a18" name="a18"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;u_light0Position&quot;</span>, <span class="stringliteral">&quot;light0Position&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3, GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;&quot;</span>, 0.0, 0.0, 1.0))) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;u_light1Ambient&quot;</span>, <span class="stringliteral">&quot;light1Ambient&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3, GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;&quot;</span>, 0.0, 0.0, 0.0))) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::CreateModelViewMatrix(gltf, <span class="stringliteral">&quot;u_modelViewMatrix&quot;</span>)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::CreateProjectionMatrix(gltf, <span class="stringliteral">&quot;u_projectionMatrix&quot;</span>)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::CreateNormalMatrix(gltf, <span class="stringliteral">&quot;u_normalMatrix&quot;</span>)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;u_texture0&quot;</span>, <span class="stringliteral">&quot;texture0&quot;</span>, GLTFWriter::Parameter::PT_SAMPLER_2D)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;a_position&quot;</span>, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;a_normal&quot;</span>, <span class="stringliteral">&quot;NORMAL&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;a_texCoord0&quot;</span>, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC2)) ||</div>
<div class="line">            <span class="comment">// TECHNIQUE STATES</span></div>
<div class="line">            !technique-&gt;<a id="a19" name="a19"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_BLENDENABLE, 1)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_DEPTHTESTENABLE, 1))) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create technique&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MATERIAL</span></div>
<div class="line">        <a id="_a20" name="_a20"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">GLTFWriter::Material</a> *material = GLTFWriter::Material::Create(gltf, technique);</div>
<div class="line">        <span class="keywordflow">if</span> (!material ||</div>
<div class="line">            <span class="comment">// MATERIAL UNIFORM VALUES</span></div>
<div class="line">            !material-&gt;<a id="a21" name="a21"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;light0Position&quot;</span>, 100.0, 100.0, 100.0)) ||</div>
<div class="line">            !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;light1Ambient&quot;</span>, 0.3, 0.3, 0.3)) ||</div>
<div class="line">            !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;texture0&quot;</span>, texture-&gt;GetID())) ||</div>
<div class="line">            <span class="comment">// this is a solid object, that we want to have an interior color so when it is clipped we see the solid interior color</span></div>
<div class="line">            !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;solidColor&quot;</span>, 0.6, 0.4, 0.2, 1.0))) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create material&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// POSITION ATTRIBUTE</span></div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numVertices = (<span class="keywordtype">unsigned</span> int)vertices.size() / 3;</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *vertex = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numVertices, &amp;vertices[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// INDICES</span></div>
<div class="line">        <a id="_a22" name="_a22"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">GLTFWriter::Index</a> *index = GLTFWriter::Index::Create(gltf, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)triangles.size(), &amp;triangles[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TEXCOORD ATTRIBUTE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *texCoord = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC2, numVertices, &amp;texCoords[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// NORMAL ATTRIBUTE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *normal = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;NORMAL&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numVertices, &amp;normals[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// PRIMITIVE</span></div>
<div class="line">        <a id="_a23" name="_a23"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create(gltf, GLTFWriter::Primitive::PT_TRIANGLES, material, index);</div>
<div class="line">        <span class="keywordflow">if</span> (!primitive ||</div>
<div class="line">            !primitive-&gt;<a id="a24" name="a24"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(vertex) ||</div>
<div class="line">            !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(normal) ||</div>
<div class="line">            !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(texCoord) ||</div>
<div class="line">            !mesh-&gt;<a id="a25" name="a25"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create primitive&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        animation-&gt;<a id="a26" name="a26"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml#a1149b49fdb5a350d1f4c9fa802dfc91c">AppendChannel</a>(sampler, node, <span class="stringliteral">&quot;matrix&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!gltf-&gt;<a id="a27" name="a27"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">Write</a>()) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_enumeration" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">GLTFWriter::GLTF::GLTFError</a> error = gltf-&gt;<a id="a28" name="a28"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">GetError</a>();</div>
<div class="line"> </div>
<div class="line">    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (error != GLTFWriter::GLTF::GLTF_ERROR_NONE)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">}</div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler.xhtml">ANSYS::Nexus::GLTFWriter::AnimationSampler</a></div><div class="ttdoc">Animation samplers define mechanisms for defining how animation channels change over time.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_animation_8h_source.xhtml#l00034">GLTFAnimation.h:35</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml">ANSYS::Nexus::GLTFWriter::Animation</a></div><div class="ttdoc">Animations define mechanisms for changing over time, node properties and material values.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_animation_8h_source.xhtml#l00068">GLTFAnimation.h:69</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_xhtml_a1149b49fdb5a350d1f4c9fa802dfc91c"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml#a1149b49fdb5a350d1f4c9fa802dfc91c">ANSYS::Nexus::GLTFWriter::Animation::AppendChannel</a></div><div class="ttdeci">virtual bool AppendChannel(AnimationSampler *sampler, Node *target, const char *path)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">ANSYS::Nexus::GLTFWriter::Attribute</a></div><div class="ttdoc">Attributes define the per element index values for elements defined by Index.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_attribute_8h_source.xhtml#l00031">GLTFAttribute.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera.xhtml">ANSYS::Nexus::GLTFWriter::Camera</a></div><div class="ttdoc">Cameras define an orthographic or perspective projection of the scene.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_camera_8h_source.xhtml#l00027">GLTFCamera.h:28</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">ANSYS::Nexus::GLTFWriter::GLTF</a></div><div class="ttdoc">This is the main class of the GLTFWriter.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00031">GLTFGLTF.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a7a468ecf1f594b411023782d18f08823"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">ANSYS::Nexus::GLTFWriter::GLTF::Write</a></div><div class="ttdeci">virtual bool Write(bool formatJSON=false)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a812b885f21ed48bad70fea6b03e76913"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">ANSYS::Nexus::GLTFWriter::GLTF::GetError</a></div><div class="ttdeci">virtual GLTFError GetError()=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_acf83a4d185d959503cb9f3f2c2e9fafe"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">ANSYS::Nexus::GLTFWriter::GLTF::GLTFError</a></div><div class="ttdeci">GLTFError</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00035">GLTFGLTF.h:35</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">ANSYS::Nexus::GLTFWriter::Index</a></div><div class="ttdoc">Indexes define elements within primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_index_8h_source.xhtml#l00028">GLTFIndex.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">ANSYS::Nexus::GLTFWriter::Light</a></div><div class="ttdoc">Lights define the light objects that can be added to a light node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_light_8h_source.xhtml#l00030">GLTFLight.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">ANSYS::Nexus::GLTFWriter::Material</a></div><div class="ttdoc">Materials describe how primitives are rendered.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_material_8h_source.xhtml#l00029">GLTFMaterial.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material_xhtml_a17160c12f2a00713c522c371a22dbca5"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">ANSYS::Nexus::GLTFWriter::Material::AppendValue</a></div><div class="ttdeci">virtual bool AppendValue(Value *value)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">ANSYS::Nexus::GLTFWriter::Mesh</a></div><div class="ttdoc">Meshes define the renderable objects that can be added to a node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00103">GLTFMesh.h:104</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml_a392eddd58e41d83d7df11e7e48ed4798"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">ANSYS::Nexus::GLTFWriter::Mesh::AppendPrimitive</a></div><div class="ttdeci">virtual bool AppendPrimitive(Primitive *primitive)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">ANSYS::Nexus::GLTFWriter::Node</a></div><div class="ttdoc">Nodes are the GLTFWriter class that contain the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_node_8h_source.xhtml#l00030">GLTFNode.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a229725aed9694dd14f7023d5445bbc72"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">ANSYS::Nexus::GLTFWriter::Node::AppendLight</a></div><div class="ttdeci">virtual bool AppendLight(Light *light)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a29e43db3c3bd933a51c2e99e223e41bd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">ANSYS::Nexus::GLTFWriter::Node::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Mesh *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">ANSYS::Nexus::GLTFWriter::Primitive</a></div><div class="ttdoc">Primitives are the renderable parts of meshes.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00029">GLTFMesh.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml_a4aae56e343ac5130d42416d2ee4c52e3"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">ANSYS::Nexus::GLTFWriter::Primitive::AppendAttribute</a></div><div class="ttdeci">virtual bool AppendAttribute(Attribute *attribute)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_program_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_program.xhtml">ANSYS::Nexus::GLTFWriter::Program</a></div><div class="ttdoc">Programs are the GLSL executable code for rendering the primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_program_8h_source.xhtml#l00027">GLTFProgram.h:28</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">ANSYS::Nexus::GLTFWriter::Scene</a></div><div class="ttdoc">Scenes are the GLTFWriter class that create the view of the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_scene_8h_source.xhtml#l00028">GLTFScene.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_a032a02e7ff85707f8ae02dce0ec11ce4"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#a032a02e7ff85707f8ae02dce0ec11ce4">ANSYS::Nexus::GLTFWriter::Scene::SetCamera</a></div><div class="ttdeci">virtual bool SetCamera(Node *camera)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_ad59f57e366c5376b197aed0b10de4f71"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#ad59f57e366c5376b197aed0b10de4f71">ANSYS::Nexus::GLTFWriter::Scene::SetLight</a></div><div class="ttdeci">virtual bool SetLight(Node *light)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_adea272bb6570744737a12f7f639e40fd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">ANSYS::Nexus::GLTFWriter::Scene::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Node *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader.xhtml">ANSYS::Nexus::GLTFWriter::Shader</a></div><div class="ttdoc">Shaders are the GLSL executable code for vertex and fragment.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_shader_8h_source.xhtml#l00025">GLTFShader.h:26</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">ANSYS::Nexus::GLTFWriter::Technique</a></div><div class="ttdoc">Techniques performs the rendering of primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_technique_8h_source.xhtml#l00239">GLTFTechnique.h:240</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml_a07adefb88b59c6f4b8ec47296ee06f62"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">ANSYS::Nexus::GLTFWriter::Technique::AppendState</a></div><div class="ttdeci">virtual bool AppendState(State *state)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml_a7ae1c9a2bf9f8c044cd02e6a6990b75f"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">ANSYS::Nexus::GLTFWriter::Technique::AppendParameter</a></div><div class="ttdeci">virtual bool AppendParameter(Parameter *parameter)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">ANSYS::Nexus::GLTFWriter::Texture</a></div><div class="ttdoc">Textures are images that can be used to color a primitive.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_texture_8h_source.xhtml#l00027">GLTFTexture.h:28</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
