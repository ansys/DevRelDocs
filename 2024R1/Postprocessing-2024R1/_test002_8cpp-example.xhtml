<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Test002.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Test002.cpp</div></div>
</div><!--header-->
<div class="contents">
<p>Textured sphere with custom shaders and legends.</p>
<p>This example creates a banded texture with 5 bands of color, and uses this texture to color a spherical object and to color several legends.</p>
<p>No camera is created or added to the scene. This causes the ANSYSViewer to use the min and max values of the POSITION attribute to create a viewing transformation that encompasses the entire scene. The min and max values are not provided for the POSITION attribute, using the SetMinMax method, so the range of the POSITION is automatically calculated by the GLTFWriter API.</p>
<p>The texture coordinates for the sphere range from the minimum Z value, -0.5, to the maximum Z value, 0.5. This range is used for the legends that are created with the identical texture as the sphere. The legends then correctly show the colors on the sphere, and agree with the tooltip.</p>
<p>This example uses a non-default or custom shader. This shows the steps involved to connect the material to the technique and to the shader program.</p>
<p>This example also shows the usage of the Repack class. This is how a single large mesh with unsigned integer indices and be converted into multiple sub-meshes with unsigned short indices.  
 <script src='/ansys/nexus/viewer-loader.js'></script>
 <ansys-nexus-viewer src='TestCustomShaders.avz' aspect_ratio=1.777></ansys-nexus-viewer>
</p>
<div class="fragment"><div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * COPYRIGHT ANSYS, ALL RIGHTS RESERVED</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * @author Glenn Wettlaufer</span></div>
<div class="line"><span class="comment"> * @version $Revision$4</span></div>
<div class="line"><span class="comment"> * @date $Date$</span></div>
<div class="line"><span class="comment"> * $Id$</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line"><span class="preprocessor">#include &lt;codecvt&gt;</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;GLTFWriter.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>ANSYS::Nexus;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">namespace </span>{</div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line">    std::string </div>
<div class="line">    ConvertToUtf8String(<span class="keyword">const</span> std::wstring&amp; wstr)</div>
<div class="line">    {</div>
<div class="line">        std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt; myconv;</div>
<div class="line">        <span class="keywordflow">return</span> myconv.to_bytes(wstr);</div>
<div class="line">    }</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Lighted sphere with custom shaders</span></div>
<div class="line">TESTFUNC(CustomShaders)</div>
<div class="line">{</div>
<div class="line">    <a id="_a0" name="_a0"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">GLTFWriter::GLTF</a> *gltf = GLTFWriter::GLTF::Create(<span class="stringliteral">&quot;MyApp&quot;</span>, <span class="stringliteral">&quot;1.0&quot;</span>, functionName.c_str(), type);</div>
<div class="line">    <span class="keywordflow">if</span> (!gltf)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create GLTF&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> mn = -0.5; <span class="comment">// have to change shader if these values change</span></div>
<div class="line">    <span class="keywordtype">float</span> mx = 0.5;</div>
<div class="line">    <span class="keywordtype">float</span> range = mx - mn;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// TEXTURE</span></div>
<div class="line">    std::vector&lt;unsigned char&gt; colors;</div>
<div class="line">    colors.push_back(0); colors.push_back(0); colors.push_back(255); <span class="comment">// blue</span></div>
<div class="line">    colors.push_back(0); colors.push_back(255); colors.push_back(255); <span class="comment">// cyan</span></div>
<div class="line">    colors.push_back(0); colors.push_back(255); colors.push_back(0); <span class="comment">// green</span></div>
<div class="line">    colors.push_back(255); colors.push_back(255); colors.push_back(0); <span class="comment">// yellow</span></div>
<div class="line">    colors.push_back(255); colors.push_back(0); colors.push_back(0); <span class="comment">// red</span></div>
<div class="line">    <a id="_a1" name="_a1"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">GLTFWriter::Texture</a> *rainbowGradientTexture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGB, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)colors.size() / 3, &amp;colors[0], <span class="keyword">false</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// SCENE</span></div>
<div class="line">    <a id="_a2" name="_a2"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">GLTFWriter::Scene</a> *scene = GLTFWriter::Scene::Create(gltf, <span class="stringliteral">&quot;Testscene&quot;</span>, <span class="stringliteral">&quot;m&quot;</span>, 1.0F, GLTFWriter::Scene::BT_TB, 0.42F, 0.55F, 0.871F, 1, 1, 1);</div>
<div class="line">    <span class="keywordflow">if</span> (!scene) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create scene&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// generate vertices, normals, and texture coordinates for a ball</span></div>
<div class="line">    std::vector&lt;float&gt; vertices;</div>
<div class="line">    std::vector&lt;unsigned int&gt; lines;</div>
<div class="line">    std::vector&lt;unsigned int&gt; triangles;</div>
<div class="line">    GLTFWriter::Test::MakeSphere(0, 0, mn + range / 2.0F, range / 2.0F, 64, vertices, lines, triangles);</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numVertices = (<span class="keywordtype">unsigned</span> int)vertices.size() / 3;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numLines = (<span class="keywordtype">unsigned</span> int)lines.size() / 2;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numTriangles = (<span class="keywordtype">unsigned</span> int)triangles.size() / 3;</div>
<div class="line">    std::vector&lt;float&gt; vertexNormals(3 * numVertices);</div>
<div class="line">    GLTFWriter::Utils::ComputeVertexNormals3(numVertices, &amp;vertices[0], numTriangles, 3, &amp;triangles[0], &amp;vertexNormals[0]);</div>
<div class="line">    std::vector&lt;float&gt; textureCoords(numVertices);</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numVertices; ++i)</div>
<div class="line">        textureCoords[i] = vertices[3 * i + 2]; <span class="comment">// coordinates go from mn to mx</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// NO CAMERA</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// NO LIGHTS - they are done in custom shader</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// NODE</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// BUFFER - combine attributes into a single buffer</span></div>
<div class="line">        <a id="_a3" name="_a3"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer.xhtml">GLTFWriter::Buffer</a> *buffer = GLTFWriter::Buffer::Create(gltf);</div>
<div class="line"> </div>
<div class="line">        <a id="_a4" name="_a4"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;3D Ball&quot;</span>);</div>
<div class="line">        <span class="keywordflow">if</span> (!node || !scene-&gt;<a id="a5" name="a5"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MESH NODE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *facesNode = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Faces&quot;</span>);</div>
<div class="line">        <span class="keywordflow">if</span> (!facesNode || !node-&gt;<a id="a6" name="a6"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(facesNode)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MESH</span></div>
<div class="line">        <a id="_a7" name="_a7"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!mesh || !facesNode-&gt;<a id="a8" name="a8"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// VERTEX SHADER</span></div>
<div class="line">        std::ostringstream vsText;</div>
<div class="line">        vsText.precision(6);</div>
<div class="line">        vsText &lt;&lt; std::showpoint;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;precision highp float;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;uniform mat4 u_projectionMatrix;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;uniform mat4 u_modelViewMatrix;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;attribute vec3 a_position;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;uniform mat3 u_normalMatrix;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;attribute vec3 a_normal;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;varying vec3 v_eyePosition;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;varying vec3 v_normal;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;attribute float a_texCoord0;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;varying float v_texCoord0;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;void main() {\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;vec4 l_position = vec4(a_position, 1.0);\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;vec4 l_eyePosition = u_modelViewMatrix * l_position;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;v_eyePosition = l_eyePosition.xyz / l_eyePosition.w;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;v_normal = u_normalMatrix * a_normal;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;v_texCoord0 = (a_texCoord0 - &quot;</span> &lt;&lt; mn &lt;&lt; <span class="stringliteral">&quot;) / &quot;</span> &lt;&lt; range &lt;&lt; <span class="stringliteral">&quot;;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;v_texCoord0 = clamp(v_texCoord0, 0.0, 1.0);\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;gl_Position = u_projectionMatrix * l_eyePosition;\n&quot;</span>;</div>
<div class="line">        vsText &lt;&lt; <span class="stringliteral">&quot;}\n&quot;</span>;</div>
<div class="line">        std::vector&lt;const char *&gt; uVertex;</div>
<div class="line">        uVertex.push_back(<span class="stringliteral">&quot;u_modelViewMatrix&quot;</span>);</div>
<div class="line">        uVertex.push_back(<span class="stringliteral">&quot;u_projectionMatrix&quot;</span>);</div>
<div class="line">        uVertex.push_back(<span class="stringliteral">&quot;u_normalMatrix&quot;</span>);</div>
<div class="line">        std::vector&lt;const char *&gt; aVertex;</div>
<div class="line">        aVertex.push_back(<span class="stringliteral">&quot;a_position&quot;</span>);</div>
<div class="line">        aVertex.push_back(<span class="stringliteral">&quot;a_normal&quot;</span>);</div>
<div class="line">        aVertex.push_back(<span class="stringliteral">&quot;a_texCoord0&quot;</span>);</div>
<div class="line">        <a id="_a9" name="_a9"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader.xhtml">GLTFWriter::Shader</a> *vertexShader = GLTFWriter::Shader::Create(gltf, vsText.str().c_str(), (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)aVertex.size(), &amp;aVertex[0], (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)uVertex.size(), &amp;uVertex[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// FRAGMENT SHADER</span></div>
<div class="line">        std::string fsText(std::string(<span class="stringliteral">&quot;precision highp float;\n&quot;</span>) +</div>
<div class="line">                                        <span class="stringliteral">&quot;uniform vec4 u_diffuse;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;uniform vec3 u_light0Position;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;uniform vec3 u_light1Ambient;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;uniform sampler2D u_texture0;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;varying vec3 v_eyePosition;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;varying vec3 v_normal;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;varying float v_texCoord0;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;void main() {\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec4 l_color = u_diffuse;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec3 l_normal = normalize(v_normal);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec2 l_texCoord = vec2(v_texCoord0, 0);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec4 l_texelColor = texture2D(u_texture0, l_texCoord);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;l_color *= l_texelColor;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec3 l_frontAmbient = u_light1Ambient * l_color.rgb;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec3 l_frontDiffuse = vec3(0.0, 0.0, 0.0);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec3 l_frontSpecular = vec3(0.0, 0.0, 0.0);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec3 l_VP = normalize(u_light0Position - v_eyePosition);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;float l_nDotVP = dot(l_normal, l_VP);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;if (!gl_FrontFacing)\n&quot;</span> + <span class="comment">// two sided lighting</span></div>
<div class="line">                                        <span class="stringliteral">&quot;l_nDotVP = -l_nDotVP;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;if (l_nDotVP &gt; 0.0) {\n&quot;</span> + <span class="comment">// front faced</span></div>
<div class="line">                                        <span class="stringliteral">&quot;l_frontDiffuse += l_nDotVP * l_color.rgb;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;vec3 l_halfVector = normalize(l_VP + vec3(0.0, 0.0, 1.0));\n&quot;</span> + <span class="comment">// eye is always looking down Z axis</span></div>
<div class="line">                                        <span class="stringliteral">&quot;float l_nDotHV = dot(l_normal, l_halfVector);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;if (!gl_FrontFacing)\n&quot;</span> + <span class="comment">// two sided lighting</span></div>
<div class="line">                                        <span class="stringliteral">&quot;l_nDotHV = -l_nDotHV;\n&quot;</span></div>
<div class="line">                                        <span class="stringliteral">&quot;if (l_nDotHV &gt; 0.0)\n&quot;</span> + <span class="comment">// specular</span></div>
<div class="line">                                        <span class="stringliteral">&quot;l_frontSpecular += pow(l_nDotHV, 100.0) * vec3(1.0, 1.0, 1.0);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;}\n&quot;</span> +  <span class="comment">// front faced</span></div>
<div class="line">                                        <span class="stringliteral">&quot;l_color = vec4(l_frontAmbient + l_frontDiffuse + l_frontSpecular, l_color.a);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;l_color = clamp(l_color, 0.0, 1.0);\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;gl_FragColor = l_color;\n&quot;</span> +</div>
<div class="line">                                        <span class="stringliteral">&quot;}\n&quot;</span>);</div>
<div class="line">        std::vector&lt;const char *&gt; uFragment;</div>
<div class="line">        uFragment.push_back(<span class="stringliteral">&quot;u_diffuse&quot;</span>);</div>
<div class="line">        uFragment.push_back(<span class="stringliteral">&quot;u_light0Position&quot;</span>);</div>
<div class="line">        uFragment.push_back(<span class="stringliteral">&quot;u_light1Ambient&quot;</span>);</div>
<div class="line">        uFragment.push_back(<span class="stringliteral">&quot;u_texture0&quot;</span>);</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader.xhtml">GLTFWriter::Shader</a> *fragmentShader = GLTFWriter::Shader::Create(gltf, fsText.c_str(), 0, 0, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)uFragment.size(), &amp;uFragment[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// PROGRAM</span></div>
<div class="line">        <a id="_a10" name="_a10"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_program.xhtml">GLTFWriter::Program</a> *program = GLTFWriter::Program::Create(gltf, vertexShader, fragmentShader);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TECHNIQUE</span></div>
<div class="line">        <a id="_a11" name="_a11"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">GLTFWriter::Technique</a> *technique = GLTFWriter::Technique::Create(gltf, program);</div>
<div class="line">        <span class="keywordflow">if</span> (!technique ||</div>
<div class="line">            <span class="comment">// TECHNIQUE PARAMETERS</span></div>
<div class="line">            !technique-&gt;<a id="a12" name="a12"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;u_diffuse&quot;</span>, <span class="stringliteral">&quot;diffuse&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC4, GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;&quot;</span>, 1.0, 1.0, 1.0, 1.0))) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;u_light0Position&quot;</span>, <span class="stringliteral">&quot;light0Position&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3, GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;&quot;</span>, 0.0, 0.0, 1.0))) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;u_light1Ambient&quot;</span>, <span class="stringliteral">&quot;light1Ambient&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3, GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;&quot;</span>, 0.0, 0.0, 0.0))) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::CreateModelViewMatrix(gltf, <span class="stringliteral">&quot;u_modelViewMatrix&quot;</span>)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::CreateProjectionMatrix(gltf, <span class="stringliteral">&quot;u_projectionMatrix&quot;</span>)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::CreateNormalMatrix(gltf, <span class="stringliteral">&quot;u_normalMatrix&quot;</span>)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;u_texture0&quot;</span>, <span class="stringliteral">&quot;texture0&quot;</span>, GLTFWriter::Parameter::PT_SAMPLER_2D)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;a_position&quot;</span>, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;a_normal&quot;</span>, <span class="stringliteral">&quot;NORMAL&quot;</span>, GLTFWriter::Parameter::PT_FLOAT_VEC3)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">AppendParameter</a>(GLTFWriter::Parameter::Create(gltf, <span class="stringliteral">&quot;a_texCoord0&quot;</span>, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Parameter::PT_FLOAT)) ||</div>
<div class="line">            <span class="comment">// TECHNIQUE STATES</span></div>
<div class="line">            !technique-&gt;<a id="a13" name="a13"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_BLENDENABLE, 1)) ||</div>
<div class="line">            !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_DEPTHTESTENABLE, 1))) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create technique&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MATERIAL</span></div>
<div class="line">        <a id="_a14" name="_a14"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">GLTFWriter::Material</a> *material = GLTFWriter::Material::Create(gltf, technique);</div>
<div class="line">        <span class="keywordflow">if</span> (!material ||</div>
<div class="line">            <span class="comment">// MATERIAL UNIFORM VALUES</span></div>
<div class="line">            !material-&gt;<a id="a15" name="a15"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;diffuse&quot;</span>, 1.0, 1.0, 1.0, 1.0)) ||</div>
<div class="line">            !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;light0Position&quot;</span>, 100.0, 100.0, 100.0)) ||</div>
<div class="line">            !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;light1Ambient&quot;</span>, 0.3, 0.3, 0.3)) ||</div>
<div class="line">            !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;texture0&quot;</span>, rainbowGradientTexture-&gt;GetID())) ||</div>
<div class="line">            <span class="comment">// this is a solid object, that we want to have an interior color so when it is clipped we see the solid interior color</span></div>
<div class="line">            !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;solidColor&quot;</span>, 1.0, 0.0, 1.0, 1.0))) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create material&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// repack unsigned int indices into multiple sets of unsigned short indices</span></div>
<div class="line">        <a id="_a16" name="_a16"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml">GLTFWriter::Utils::Repack</a> *repack = GLTFWriter::Utils::Repack::Create(numTriangles, 3, &amp;triangles[0]);</div>
<div class="line">        <span class="keywordflow">if</span> (!repack) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create repack&quot;</span>);</div>
<div class="line">        }</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; repack-&gt;<a id="a17" name="a17"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a6ffdc4df86a45edc0766361965452379">NumPacks</a>(); ++i) {</div>
<div class="line">            <span class="keyword">const</span> <span class="keywordtype">float</span> *packedData;</div>
<div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numAttributes = repack-&gt;<a id="a18" name="a18"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a7359e2f5626d9910b2cf8532d36248af">NumAttributes</a>(i);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// POSITION ATTRIBUTE</span></div>
<div class="line">            packedData = repack-&gt;<a id="a19" name="a19"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 3, &amp;vertices[0], i);</div>
<div class="line">            <a id="_a20" name="_a20"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *vertex = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// TEXCOORD ATTRIBUTE</span></div>
<div class="line">            packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 1, &amp;textureCoords[0], i);</div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *texture = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// NORMAL ATTRIBUTE</span></div>
<div class="line">            packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 3, &amp;vertexNormals[0], i);</div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *normal = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;NORMAL&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// INDICES</span></div>
<div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numIndices = 3U * repack-&gt;<a id="a21" name="a21"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#aedafd469169975d688199d864a82a47c">NumElements</a>(i);</div>
<div class="line">            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> *packedIndex = repack-&gt;<a id="a22" name="a22"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#ae76c9d67619c7b637ea400fdc9762e69">ConstructRepackIndex</a>(&amp;triangles[0], i);</div>
<div class="line">            <a id="_a23" name="_a23"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">GLTFWriter::Index</a> *index = GLTFWriter::Index::Create(gltf, numIndices, packedIndex, buffer);</div>
<div class="line">            <span class="keywordflow">if</span> (!index) {</div>
<div class="line">                GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create index&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// PRIMITIVE</span></div>
<div class="line">            <a id="_a24" name="_a24"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create(gltf, GLTFWriter::Primitive::PT_TRIANGLES, material, index);</div>
<div class="line">            <span class="keywordflow">if</span> (!primitive ||</div>
<div class="line">                !primitive-&gt;<a id="a25" name="a25"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(vertex) ||</div>
<div class="line">                !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(normal) ||</div>
<div class="line">                !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(texture) ||</div>
<div class="line">                !mesh-&gt;<a id="a26" name="a26"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive)) {</div>
<div class="line">                GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create primitive&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!gltf-&gt;<a id="a27" name="a27"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">Write</a>()) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_enumeration" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">GLTFWriter::GLTF::GLTFError</a> error = gltf-&gt;<a id="a28" name="a28"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">GetError</a>();</div>
<div class="line"> </div>
<div class="line">    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (error != GLTFWriter::GLTF::GLTF_ERROR_NONE)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">}</div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">ANSYS::Nexus::GLTFWriter::Attribute</a></div><div class="ttdoc">Attributes define the per element index values for elements defined by Index.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_attribute_8h_source.xhtml#l00031">GLTFAttribute.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer.xhtml">ANSYS::Nexus::GLTFWriter::Buffer</a></div><div class="ttdoc">Buffers define files that are used to contain attribute and index data.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_buffer_8h_source.xhtml#l00035">GLTFBuffer.h:36</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">ANSYS::Nexus::GLTFWriter::GLTF</a></div><div class="ttdoc">This is the main class of the GLTFWriter.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00031">GLTFGLTF.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a7a468ecf1f594b411023782d18f08823"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">ANSYS::Nexus::GLTFWriter::GLTF::Write</a></div><div class="ttdeci">virtual bool Write(bool formatJSON=false)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a812b885f21ed48bad70fea6b03e76913"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">ANSYS::Nexus::GLTFWriter::GLTF::GetError</a></div><div class="ttdeci">virtual GLTFError GetError()=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_acf83a4d185d959503cb9f3f2c2e9fafe"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">ANSYS::Nexus::GLTFWriter::GLTF::GLTFError</a></div><div class="ttdeci">GLTFError</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00035">GLTFGLTF.h:35</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">ANSYS::Nexus::GLTFWriter::Index</a></div><div class="ttdoc">Indexes define elements within primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_index_8h_source.xhtml#l00028">GLTFIndex.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">ANSYS::Nexus::GLTFWriter::Material</a></div><div class="ttdoc">Materials describe how primitives are rendered.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_material_8h_source.xhtml#l00029">GLTFMaterial.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material_xhtml_a17160c12f2a00713c522c371a22dbca5"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">ANSYS::Nexus::GLTFWriter::Material::AppendValue</a></div><div class="ttdeci">virtual bool AppendValue(Value *value)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">ANSYS::Nexus::GLTFWriter::Mesh</a></div><div class="ttdoc">Meshes define the renderable objects that can be added to a node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00103">GLTFMesh.h:104</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml_a392eddd58e41d83d7df11e7e48ed4798"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">ANSYS::Nexus::GLTFWriter::Mesh::AppendPrimitive</a></div><div class="ttdeci">virtual bool AppendPrimitive(Primitive *primitive)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">ANSYS::Nexus::GLTFWriter::Node</a></div><div class="ttdoc">Nodes are the GLTFWriter class that contain the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_node_8h_source.xhtml#l00030">GLTFNode.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a29e43db3c3bd933a51c2e99e223e41bd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">ANSYS::Nexus::GLTFWriter::Node::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Mesh *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a85f627158b9e2f1a6565ffe1305e7439"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">ANSYS::Nexus::GLTFWriter::Node::AppendChild</a></div><div class="ttdeci">virtual bool AppendChild(Node *node)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">ANSYS::Nexus::GLTFWriter::Primitive</a></div><div class="ttdoc">Primitives are the renderable parts of meshes.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00029">GLTFMesh.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml_a4aae56e343ac5130d42416d2ee4c52e3"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">ANSYS::Nexus::GLTFWriter::Primitive::AppendAttribute</a></div><div class="ttdeci">virtual bool AppendAttribute(Attribute *attribute)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_program_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_program.xhtml">ANSYS::Nexus::GLTFWriter::Program</a></div><div class="ttdoc">Programs are the GLSL executable code for rendering the primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_program_8h_source.xhtml#l00027">GLTFProgram.h:28</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">ANSYS::Nexus::GLTFWriter::Scene</a></div><div class="ttdoc">Scenes are the GLTFWriter class that create the view of the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_scene_8h_source.xhtml#l00028">GLTFScene.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_adea272bb6570744737a12f7f639e40fd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">ANSYS::Nexus::GLTFWriter::Scene::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Node *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_shader.xhtml">ANSYS::Nexus::GLTFWriter::Shader</a></div><div class="ttdoc">Shaders are the GLSL executable code for vertex and fragment.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_shader_8h_source.xhtml#l00025">GLTFShader.h:26</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">ANSYS::Nexus::GLTFWriter::Technique</a></div><div class="ttdoc">Techniques performs the rendering of primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_technique_8h_source.xhtml#l00239">GLTFTechnique.h:240</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml_a07adefb88b59c6f4b8ec47296ee06f62"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">ANSYS::Nexus::GLTFWriter::Technique::AppendState</a></div><div class="ttdeci">virtual bool AppendState(State *state)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml_a7ae1c9a2bf9f8c044cd02e6a6990b75f"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a7ae1c9a2bf9f8c044cd02e6a6990b75f">ANSYS::Nexus::GLTFWriter::Technique::AppendParameter</a></div><div class="ttdeci">virtual bool AppendParameter(Parameter *parameter)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">ANSYS::Nexus::GLTFWriter::Texture</a></div><div class="ttdoc">Textures are images that can be used to color a primitive.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_texture_8h_source.xhtml#l00027">GLTFTexture.h:28</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml">ANSYS::Nexus::GLTFWriter::Utils::Repack</a></div><div class="ttdoc">Manages repacking of indices from unsigned int type to unsigned short type. This only works for POINT...</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_utils_8h_source.xhtml#l00105">GLTFUtils.h:106</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_a365e97b3562b8383ae5734854c979620"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ANSYS::Nexus::GLTFWriter::Utils::Repack::ConstructRepackAttribute</a></div><div class="ttdeci">virtual const int * ConstructRepackAttribute(const unsigned int *indices, unsigned int attributeSize, const int *attributeData, unsigned int packNum)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_a6ffdc4df86a45edc0766361965452379"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a6ffdc4df86a45edc0766361965452379">ANSYS::Nexus::GLTFWriter::Utils::Repack::NumPacks</a></div><div class="ttdeci">virtual unsigned int NumPacks() const =0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_a7359e2f5626d9910b2cf8532d36248af"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a7359e2f5626d9910b2cf8532d36248af">ANSYS::Nexus::GLTFWriter::Utils::Repack::NumAttributes</a></div><div class="ttdeci">virtual unsigned int NumAttributes(unsigned int packNum) const =0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_ae76c9d67619c7b637ea400fdc9762e69"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#ae76c9d67619c7b637ea400fdc9762e69">ANSYS::Nexus::GLTFWriter::Utils::Repack::ConstructRepackIndex</a></div><div class="ttdeci">virtual const unsigned short * ConstructRepackIndex(const unsigned int *indices, unsigned int packNum)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_aedafd469169975d688199d864a82a47c"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#aedafd469169975d688199d864a82a47c">ANSYS::Nexus::GLTFWriter::Utils::Repack::NumElements</a></div><div class="ttdeci">virtual unsigned int NumElements(unsigned int packNum) const =0</div></div>
</div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
