<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Available APIs</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li class="current"><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Available APIs<div class="ingroups"><a class="el" href="group__dvs__main.xhtml">Dynamic Visualization Store</a></div></div></div>
</div><!--header-->
<div class="contents">
<h2>Available APIs</h2>
<p><a class="anchor" id="Using-the-C-Writer-API"></a> </p><h3>Using the C Writer API</h3>
<p>The main header for the C Client Writer API is in <a class="el" href="dynamic__visualization__store__api_8h.xhtml" title="C API for using Dynamic Visualization Store.">dynamic_visualization_store_api.h</a>. At the top of the API header is a brief overview of the order to make the calls in. The methods are all documented here as well. <br  />
<br  />
 A full example of using the API can be found in <a class="el" href="test__dvs__client_8c.xhtml" title="Test client to exercise the C API of the Dynamic Visualization Store API.">test_dvs_client.c</a>. See the "Simple Demo" section for running this application. A pre-built binary for the test_dvs_client can be found in the linux_2.6_64 or win64 sub folders of the dvs directory. <br  />
<br  />
 A pre-built library (libdvsapi.*) to link against for windows and linux can be found under: [InstallDir]/vXXX/CEI/ensightXXX/src/readers/dvs/[ARCH] where arch will be win64 or linux_2.6_64 based on your current os (XXX refers to the version number, i.e. 211, 212 etc.). Just include the <a class="el" href="dynamic__visualization__store__api_8h.xhtml" title="C API for using Dynamic Visualization Store.">dynamic_visualization_store_api.h</a> header and link to the library and away you go.</p>
<p><a class="anchor" id="Using-the-Cplusplus-Writer-API"></a> </p><h3>Using the C++ Writer API</h3>
<p>The main header for the C++ Client Writer API is in the <a class="el" href="dvs__client__interface_8h.xhtml" title="C++ Client API for using the Dynamic Visualization Store.">dvs_client_interface.h</a>. To create an instance of the <a class="el" href="class_d_v_s_1_1_i_client.xhtml" title="API for solvers to use to send data to EnSight servers.">DVS::IClient</a> class use the factory method <a class="el" href="dvs__client__interface_8h.xhtml#a2475075c9ab4c2e57a8f0b4ab5bc5df4" title="Factory method to create a dynamic data client interface instance.">DVS::CREATE_CLIENT_INSTANCE()</a>. This instance should be destroyed via <a class="el" href="dvs__client__interface_8h.xhtml#a3f13d009a9a07278cbca3449113d78fc" title="Destruction method for a client created with CREATE_CLIENT_INSTANCE.">DVS::DESTROY_CLIENT_INSTANCE()</a>. An example using this API is in <a class="el" href="test__dvs__client__cxx_8cpp.xhtml" title="Test client to exercise the C++ API of the Dynamic Visualization Store API.">test_dvs_client_cxx.cpp</a>. <br  />
<br  />
 The C++ server API is in <a class="el" href="dvs__server__interface_8h.xhtml" title="C++ Server API for using Dynamic Visualization Store Server.">dvs_server_interface.h</a>. To create an instance of the <a class="el" href="class_d_v_s_1_1_i_server.xhtml" title="Interface class used to run a dynamic data server in a thread accepting incoming client connections.">DVS::IServer</a> class use the factory method <a class="el" href="dvs__server__interface_8h.xhtml#a852580b9a49ac305e4ae26ca637bcc75" title="Create a DVS::IServer instance for clients to connect to.">DVS::CREATE_SERVER_INSTANCE()</a>. This instance should be destroyed using <a class="el" href="dvs__server__interface_8h.xhtml#adcdcbab1954ec53631a7136af7fc49b8" title="Destroy the server instance (also shutting it down if needed)">DVS::DESTROY_SERVER_INSTANCE()</a>.An example using this API is in <a class="el" href="test__dvs__client__cxx_8cpp.xhtml" title="Test client to exercise the C++ API of the Dynamic Visualization Store API.">test_dvs_client_cxx.cpp</a>. <br  />
<br  />
 A pre-built library (libdvsapi.*) to link against for windows and linux can be found under: [InstallDir]/vXXX/CEI/ensightXXX/src/readers/dvs/[ARCH] where arch will be win64 or linux_2.6_64 based on your current os (XXX refers to the version number, i.e. 211, 212 etc.). Just include the appropriate headers and link to the library and away you go.</p>
<p><a class="anchor" id="Using-the-Python-Writer-API"></a> </p><h3>Using the Python Writer API</h3>
<p>A prebuilt library for Python3 exists for Windows ([InstallDir]/vXXX/CEI/apexXXX/machines/win64/Python-3.7.4/DLLs/dynamic_visualization_store.pyd) and Linux ([InstallDir]/vXXX/CEI/apexXXX/machines/linux_2.6_64/Python-3.7.4/lib/python3.7/dynamic_visualization_store.so). You will also need the libdvsapi library along side it (located [InstallDir]/vXXX/CEI/ensightXXX/src/readers/dvs/[ARCH]/libdvsapi.*). XXX refers to the version number, i.e. 211, 212 etc.</p>
<p>A simple example in python using this module is in the source code for <a class="el" href="test__dvs__client__simple_8py.xhtml">test_dvs_client_simple.py</a>.</p>
<p><a class="anchor" id="Using-the-Cplusplus-Reader-API"></a> </p><h3>Using the C++ Reader API</h3>
<p>The main header for the C++ Reader API is the <a class="el" href="dvs__query__interface_8h.xhtml" title="DVS Reader API Query Interface.">dvs_query_interface.h</a>. To create an instance of the <a class="el" href="class_d_v_s_1_1_i_query.xhtml" title="The query interface for the DVS Reader API.">DVS::IQuery</a> class use the factory method <a class="el" href="dvs__query__interface_8h.xhtml#ac614cf475eca0727cdb5b42faabcca7d" title="Create a query interface object.">DVS::CREATE_QUERY_INSTANCE()</a>. An example using this API is in <a class="el" href="test__dvs__reader_8cpp.xhtml" title="Test client to exercise the C++ API of the Dynamic Visualization Store Reader API.">test_dvs_reader.cpp</a>.</p>
<p>A pre-built library (libdvsapi.*) to link against for windows and linux can be found under: [InstallDir]/vXXX/CEI/ensightXXX/src/readers/dvs/[ARCH] where arch will be win64 or linux_2.6_64 based on your current os (XXX refers to the version number, i.e. 211, 212 etc.). Just include the appropriate headers and link to the library and away you go.</p>
<p><a class="anchor" id="Using-the-Python-Reader-API"></a> </p><h3>Using the Python Reader API</h3>
<p>A prebuilt library for Python3 exists for Windows ([InstallDir]/vXXX/CEI/apexXXX/machines/win64/Python-3.7.4/DLLs/dynamic_visualization_store.pyd) and Linux ([InstallDir]/vXXX/CEI/apexXXX/machines/linux_2.6_64/Python-3.7.4/lib/python3.7/dynamic_visualization_store.so). You will also need the libdvsapi library along side it (located [InstallDir]/vXXX/CEI/ensightXXX/src/readers/dvs/[ARCH]/libdvsapi.*). XXX refers to the version number, i.e. 211, 212 etc.</p>
<p>A simple example in python using this module is in the source code for <a class="el" href="test__dvs__python__reader__api_8py.xhtml">test_dvs_python_reader_api.py</a>.</p>
<p><a class="anchor" id="Using-the-proto-file"></a> </p><h3>Using the .proto file</h3>
<p>If you have need for use of the API in a language other than C++/C/Python the dynamic_visualization_store.proto file is included so you can auto gen code to talk to the EnSight server's via GRPC. For now it isn't recommended since the it's not yet well documented and there are a lot of free benefits for using the already developed clients such as automatic logging, data-deduplication and auto-reconnect if the postprocessor is such down or restarted for any reason.</p>
<p>If you have need to use GRPC in another language please contact the EnSight team and we can provide more guidance on the .proto GRPC calls. </p><hr  />
 </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
