<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: DVS::IClient Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>DVS</b></li><li class="navelem"><a class="el" href="class_d_v_s_1_1_i_client.xhtml">IClient</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_d_v_s_1_1_i_client-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">DVS::IClient Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="dvs__client__interface_8h_source.xhtml">dvs_client_interface.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a64eedec7e83a7e05ae9b3ca96c9f79b6"><td class="memItemLeft" align="right" valign="top"><a id="a64eedec7e83a7e05ae9b3ca96c9f79b6" name="a64eedec7e83a7e05ae9b3ca96c9f79b6"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IClient</b> ()=default</td></tr>
<tr class="separator:a64eedec7e83a7e05ae9b3ca96c9f79b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab54b2523137180da43fa39b2e597eb0d"><td class="memItemLeft" align="right" valign="top"><a id="ab54b2523137180da43fa39b2e597eb0d" name="ab54b2523137180da43fa39b2e597eb0d"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IClient</b> ()=default</td></tr>
<tr class="separator:ab54b2523137180da43fa39b2e597eb0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3833003a214593bcf229917fe9f677d0"><td class="memItemLeft" align="right" valign="top"><a id="a3833003a214593bcf229917fe9f677d0" name="a3833003a214593bcf229917fe9f677d0"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IClient</b> (<a class="el" href="class_d_v_s_1_1_i_client.xhtml">IClient</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a3833003a214593bcf229917fe9f677d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3a67114d90c513c43bd76c461ea6df3"><td class="memItemLeft" align="right" valign="top"><a id="aa3a67114d90c513c43bd76c461ea6df3" name="aa3a67114d90c513c43bd76c461ea6df3"></a>
<a class="el" href="class_d_v_s_1_1_i_client.xhtml">IClient</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_client.xhtml">IClient</a> &amp;&amp;)=default</td></tr>
<tr class="separator:aa3a67114d90c513c43bd76c461ea6df3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cf4e8dfda9a6d9de1ab8ca4ea64961f"><td class="memItemLeft" align="right" valign="top"><a id="a7cf4e8dfda9a6d9de1ab8ca4ea64961f" name="a7cf4e8dfda9a6d9de1ab8ca4ea64961f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IClient</b> (const <a class="el" href="class_d_v_s_1_1_i_client.xhtml">IClient</a> &amp;)=default</td></tr>
<tr class="separator:a7cf4e8dfda9a6d9de1ab8ca4ea64961f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9250ff94c04d2465a17ac1e637350ec7"><td class="memItemLeft" align="right" valign="top"><a id="a9250ff94c04d2465a17ac1e637350ec7" name="a9250ff94c04d2465a17ac1e637350ec7"></a>
<a class="el" href="class_d_v_s_1_1_i_client.xhtml">IClient</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_client.xhtml">IClient</a> &amp;)=default</td></tr>
<tr class="separator:a9250ff94c04d2465a17ac1e637350ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a024475b03496bc310e211632d153517d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a024475b03496bc310e211632d153517d">set_logger</a> (<a class="el" href="class_d_v_s_1_1_i_logger.xhtml">ILogger</a> *logger)=0</td></tr>
<tr class="separator:a024475b03496bc310e211632d153517d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5d98105d78c61e4e0c4043e28174fe1"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#aa5d98105d78c61e4e0c4043e28174fe1">get_version</a> ()=0</td></tr>
<tr class="separator:aa5d98105d78c61e4e0c4043e28174fe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff782ecd341fddd87a22a15107efeb3b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#aff782ecd341fddd87a22a15107efeb3b">begin_init</a> (const char *dataset_name, uint32_t current_rank, uint32_t total_ranks, uint32_t num_chunks)=0</td></tr>
<tr class="separator:aff782ecd341fddd87a22a15107efeb3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a284f922fec402e03365c7873502d1fde"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a284f922fec402e03365c7873502d1fde">set_unit_system</a> (const char *system)=0</td></tr>
<tr class="separator:a284f922fec402e03365c7873502d1fde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4144e59bfdcf9c095c6510c4298d160"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#ab4144e59bfdcf9c095c6510c4298d160">add_metadata</a> (const char *const keys[], const char *const vals[], uint32_t num_metadata_pairs)=0</td></tr>
<tr class="separator:ab4144e59bfdcf9c095c6510c4298d160"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e9ee6af237e76a6e270d99ec8cd4388"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a5e9ee6af237e76a6e270d99ec8cd4388">add_part_info</a> (const <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> *part_info, uint32_t num_parts)=0</td></tr>
<tr class="separator:a5e9ee6af237e76a6e270d99ec8cd4388"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f841d7f6f33071bf8c709623ca215d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a82f841d7f6f33071bf8c709623ca215d">add_var_info</a> (const <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> *var_info, uint32_t num_vars)=0</td></tr>
<tr class="separator:a82f841d7f6f33071bf8c709623ca215d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bdb7ca9cf25c63e533f47fe26132af6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a1bdb7ca9cf25c63e533f47fe26132af6">add_plot_info</a> (const <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> *plot_info, uint32_t num_plots)=0</td></tr>
<tr class="separator:a1bdb7ca9cf25c63e533f47fe26132af6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af609f80df51a124a137c6476b7d3c958"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#af609f80df51a124a137c6476b7d3c958">get_num_parts</a> () const =0</td></tr>
<tr class="separator:af609f80df51a124a137c6476b7d3c958"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85adbf75ade9d0ffc6d258c34dae1eb3"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a85adbf75ade9d0ffc6d258c34dae1eb3">get_num_vars</a> () const =0</td></tr>
<tr class="separator:a85adbf75ade9d0ffc6d258c34dae1eb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80325aaa83f2d2f27f1aa8e5f167c4c6"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a80325aaa83f2d2f27f1aa8e5f167c4c6">get_num_plots</a> () const =0</td></tr>
<tr class="separator:a80325aaa83f2d2f27f1aa8e5f167c4c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a1e02d1e1764788a58db0f0ccce4cd4"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a9a1e02d1e1764788a58db0f0ccce4cd4">get_part_info</a> (uint32_t index) const =0</td></tr>
<tr class="separator:a9a1e02d1e1764788a58db0f0ccce4cd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e3e6fbf66582927a17b54c9fba3464c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a4e3e6fbf66582927a17b54c9fba3464c">get_part_id</a> (const std::string &amp;name, uint32_t &amp;id) const =0</td></tr>
<tr class="separator:a4e3e6fbf66582927a17b54c9fba3464c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb50715fd6d0ed4aa2df49b8cd9d93bb"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#afb50715fd6d0ed4aa2df49b8cd9d93bb">get_var_info</a> (uint32_t index) const =0</td></tr>
<tr class="separator:afb50715fd6d0ed4aa2df49b8cd9d93bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4a86f03c9eb353cb1d92e326945cb9c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#ac4a86f03c9eb353cb1d92e326945cb9c">get_var_id</a> (const std::string &amp;name, uint32_t &amp;id) const =0</td></tr>
<tr class="separator:ac4a86f03c9eb353cb1d92e326945cb9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7753d7dfb238856722825403a5cb6d32"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a7753d7dfb238856722825403a5cb6d32">get_plot_info</a> (uint32_t index) const =0</td></tr>
<tr class="separator:a7753d7dfb238856722825403a5cb6d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dc7f1a7c19c068b04a384c1891e435f"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a5dc7f1a7c19c068b04a384c1891e435f">get_plot_id</a> (const std::string &amp;name, uint32_t &amp;id) const =0</td></tr>
<tr class="separator:a5dc7f1a7c19c068b04a384c1891e435f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf1641a1afbf8bb6257940be28dd94b2"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#aaf1641a1afbf8bb6257940be28dd94b2">end_init</a> ()=0</td></tr>
<tr class="separator:aaf1641a1afbf8bb6257940be28dd94b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd1cbbd2007346ad616dc74eab9d0553"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#abd1cbbd2007346ad616dc74eab9d0553">begin_update</a> (uint32_t update_num, uint32_t rank, uint32_t chunk, float time)=0</td></tr>
<tr class="separator:abd1cbbd2007346ad616dc74eab9d0553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3de23c0dcfc5c614f3047ff6284167d3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a3de23c0dcfc5c614f3047ff6284167d3">update_copy_previous_part</a> (uint32_t part_id, const char *options)=0</td></tr>
<tr class="separator:a3de23c0dcfc5c614f3047ff6284167d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87ab36c2f16d093c0beaba60da2cd661"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a87ab36c2f16d093c0beaba60da2cd661">update_nodes</a> (uint32_t part_id, const float *x, const float *y, const float *z, uint32_t num_values)=0</td></tr>
<tr class="separator:a87ab36c2f16d093c0beaba60da2cd661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1588c437020e0ba5702ec48460a792a9"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a1588c437020e0ba5702ec48460a792a9">update_nodes_structured</a> (uint32_t part_id, const uint32_t global_ijk_max[3], const uint32_t local_ijk_min[3], const uint32_t local_ijk_max[3], const float origin[3], const float dir_i[3], const float dir_j[3], const float dir_k[3], const float *i_vals, const float *j_vals, const float *k_vals)=0</td></tr>
<tr class="separator:a1588c437020e0ba5702ec48460a792a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee6c79370e423a70f4b73c08794cdf9b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#aee6c79370e423a70f4b73c08794cdf9b">update_nodes_structured</a> (uint32_t part_id, const uint32_t global_ijk_max[3], const uint32_t local_ijk_min[3], const uint32_t local_ijk_max[3], const float *x_vals, const float *y_vals, const float *z_vals)=0</td></tr>
<tr class="separator:aee6c79370e423a70f4b73c08794cdf9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41aa2ad12fbfa456f3ec8e48530ea6f6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a41aa2ad12fbfa456f3ec8e48530ea6f6">update_elements</a> (uint32_t part_id, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const uint32_t *indices, uint32_t num_indices)=0</td></tr>
<tr class="separator:a41aa2ad12fbfa456f3ec8e48530ea6f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6b3990562f507eda4abedf53e021647"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#ac6b3990562f507eda4abedf53e021647">update_elements_polygon</a> (uint32_t part_id, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const uint32_t *nodes_per_polygon, uint32_t nodes_per_polygon_size, const uint32_t *indices, uint32_t indices_size)=0</td></tr>
<tr class="separator:ac6b3990562f507eda4abedf53e021647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a9ccf04ed8502d23913d8eef21607ec"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a7a9ccf04ed8502d23913d8eef21607ec">update_elements_polyhedral</a> (uint32_t part_id, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const uint32_t *faces_per_element, uint32_t faces_per_element_size, const uint32_t *nodes_per_face, uint32_t nodes_per_face_size, const uint32_t *indices, uint32_t indices_size)=0</td></tr>
<tr class="separator:a7a9ccf04ed8502d23913d8eef21607ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f2e7174f9e89ef5285043dd9357f9b0"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a8f2e7174f9e89ef5285043dd9357f9b0">update_var_case</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, const float *values, uint32_t num_values)=0</td></tr>
<tr class="separator:a8f2e7174f9e89ef5285043dd9357f9b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab18cc3827eda737ea73c31aa7fe6ef68"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#ab18cc3827eda737ea73c31aa7fe6ef68">update_var_part</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, uint32_t part_id, const float *values, uint32_t num_values)=0</td></tr>
<tr class="separator:ab18cc3827eda737ea73c31aa7fe6ef68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec8ed14b290237049976f68cb81b200f"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#aec8ed14b290237049976f68cb81b200f">update_var_element</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> elem_type, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, uint32_t part_id, const float *values, uint32_t num_values)=0</td></tr>
<tr class="separator:aec8ed14b290237049976f68cb81b200f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a722ee94dc27c54a0f563229d4677ac3f"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a722ee94dc27c54a0f563229d4677ac3f">update_var_element</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> elem_type, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, uint32_t part_id, const int64_t *values, uint32_t num_values)=0</td></tr>
<tr class="separator:a722ee94dc27c54a0f563229d4677ac3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae67a2884dd8f68f4757d8d7fac3828d3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#ae67a2884dd8f68f4757d8d7fac3828d3">update_var_node</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, uint32_t part_id, const float *values, uint32_t num_values)=0</td></tr>
<tr class="separator:ae67a2884dd8f68f4757d8d7fac3828d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1eb49e0bf598055279b8ebbbc1815e6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#ae1eb49e0bf598055279b8ebbbc1815e6">update_var_node</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, uint32_t part_id, const int64_t *values, uint32_t num_values)=0</td></tr>
<tr class="separator:ae1eb49e0bf598055279b8ebbbc1815e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3834c25cf5ed35a17f08ecefa4b73417"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a3834c25cf5ed35a17f08ecefa4b73417">update_var_field</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491">dvs_var_location</a> location, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> elem_type, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, uint32_t part_id, const float *values, uint32_t num_values)=0</td></tr>
<tr class="separator:a3834c25cf5ed35a17f08ecefa4b73417"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89c8b5cf33a733071bcc6b4bc35615b2"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a89c8b5cf33a733071bcc6b4bc35615b2">update_var_field</a> (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491">dvs_var_location</a> location, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> elem_type, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a> var_type, uint32_t var_id, uint32_t part_id, const int64_t *values, uint32_t num_values)=0</td></tr>
<tr class="separator:a89c8b5cf33a733071bcc6b4bc35615b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcf7811f22d58bd328bed415116a4c41"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#afcf7811f22d58bd328bed415116a4c41">update_plot</a> (uint32_t plot_id, const float *x_values, const float *y_values, uint32_t num_values)=0</td></tr>
<tr class="separator:afcf7811f22d58bd328bed415116a4c41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6396cc4ae967ad5f0da8e234429a97cd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a6396cc4ae967ad5f0da8e234429a97cd">end_update</a> ()=0</td></tr>
<tr class="separator:a6396cc4ae967ad5f0da8e234429a97cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8f192f5c683a8265dd94020506a0aa"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_client.xhtml#a5e8f192f5c683a8265dd94020506a0aa">delete_item</a> (uint32_t update_num, uint32_t rank, const char *filter)=0</td></tr>
<tr class="separator:a5e8f192f5c683a8265dd94020506a0aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This interface class wraps the client type and other functionality such as data deduplication so the user doesn't need to worry about it. We can add functionality to this without needing solver code to be modified. This will also hide Ensight sessions potentially being taken down and brought up dynamically. </p>

<p class="definition">Definition at line <a class="el" href="dvs__client__interface_8h_source.xhtml#l00080">80</a> of file <a class="el" href="dvs__client__interface_8h_source.xhtml">dvs_client_interface.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ab4144e59bfdcf9c095c6510c4298d160" name="ab4144e59bfdcf9c095c6510c4298d160"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4144e59bfdcf9c095c6510c4298d160">&#9670;&#160;</a></span>add_metadata()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::add_metadata </td>
          <td>(</td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>keys</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>vals</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_metadata_pairs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add metadata for the current dataset. </p>
<p>Errors:</p><ul>
<li>DVS_NONE: Success</li>
<li>DVS_PARAM_NULL: Method called with NULL params or num_metadata_pairs == 0</li>
<li>DVS_CLIENT_INVALID_TRANSPORT: Internal error, should not happen</li>
<li>DVS_TRANSPORT_NULL_INVALID_SERVER: Internal error, should not happen</li>
<li>DVS_VERSION_MISMATCH: Client version out of date with server version, update server and client to match</li>
<li>DVS_VERSION_UNKNOWN: Unable to determine server version, update the server to match the client</li>
<li>DVS_TRANSPORT_SERVICE_FAILURE: Normally caused by server call retry time out or invalid secret key</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">keys</td><td>string array of UTF-8 Compatible string keys, each string should be null terminated </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vals</td><td>string array of UTF-8 Compatible string values, each string should be null terminated </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_metadata_pairs</td><td>number of key/value pairs in the arrays </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, otherwise see method description </dd></dl>

</div>
</div>
<a id="a5e9ee6af237e76a6e270d99ec8cd4388" name="a5e9ee6af237e76a6e270d99ec8cd4388"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e9ee6af237e76a6e270d99ec8cd4388">&#9670;&#160;</a></span>add_part_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::add_part_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> *&#160;</td>
          <td class="paramname"><em>part_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_parts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add part information for session. </p>
<p>NOTE: These cannot be changed once <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aaf1641a1afbf8bb6257940be28dd94b2" title="Finish initialization for this rank.">end_init()</a> is called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">part_info</td><td>array of global parts across entire simulaton </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_parts</td><td>number of part info objects in part_info </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a1bdb7ca9cf25c63e533f47fe26132af6" name="a1bdb7ca9cf25c63e533f47fe26132af6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bdb7ca9cf25c63e533f47fe26132af6">&#9670;&#160;</a></span>add_plot_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::add_plot_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> *&#160;</td>
          <td class="paramname"><em>plot_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_plots</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add plot information for session. </p>
<p>NOTE: These cannot be changed once <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aaf1641a1afbf8bb6257940be28dd94b2" title="Finish initialization for this rank.">end_init()</a> is called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">plot_info</td><td>array of global plot information across entire simulation </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_plots</td><td>number of plot_info objects in plot_info </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a82f841d7f6f33071bf8c709623ca215d" name="a82f841d7f6f33071bf8c709623ca215d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82f841d7f6f33071bf8c709623ca215d">&#9670;&#160;</a></span>add_var_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::add_var_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> *&#160;</td>
          <td class="paramname"><em>var_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_vars</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add variable information for session. </p>
<p>NOTE: These cannot be changed once <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aaf1641a1afbf8bb6257940be28dd94b2" title="Finish initialization for this rank.">end_init()</a> is called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var_info</td><td>array of global variable information across entire simulation </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_vars</td><td>number of var info objects in var_info </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aff782ecd341fddd87a22a15107efeb3b" name="aff782ecd341fddd87a22a15107efeb3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff782ecd341fddd87a22a15107efeb3b">&#9670;&#160;</a></span>begin_init()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::begin_init </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dataset_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>current_rank</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>total_ranks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_chunks</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins initialization for this rank. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dataset_name</td><td>name for dataset </td></tr>
    <tr><td class="paramname">current_rank</td><td>the rank we are sending init info for (zero based) </td></tr>
    <tr><td class="paramname">total_ranks</td><td>the total number of ranks being used across solver nodes </td></tr>
    <tr><td class="paramname">num_chunks</td><td>the number of chunks being used for this rank (usually 1) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="abd1cbbd2007346ad616dc74eab9d0553" name="abd1cbbd2007346ad616dc74eab9d0553"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd1cbbd2007346ad616dc74eab9d0553">&#9670;&#160;</a></span>begin_update()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::begin_update </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>update_num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>rank</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>chunk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Method to begin an update. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">update_num</td><td>update number of this update, must be monotonically increasing </td></tr>
    <tr><td class="paramname">rank</td><td>the rank we are sending an update for (zero based) </td></tr>
    <tr><td class="paramname">chunk</td><td>the chunk number this update is for (zero based) </td></tr>
    <tr><td class="paramname">time</td><td>time in seconds this update is for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a5e8f192f5c683a8265dd94020506a0aa" name="a5e8f192f5c683a8265dd94020506a0aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e8f192f5c683a8265dd94020506a0aa">&#9670;&#160;</a></span>delete_item()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::delete_item </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>update_num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>rank</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete an item. </p>
<p>Currently this will only allow for timesteps to be deleted. In the future it can be expanded to all objects via the filter mechanism (see <a class="el" href="group__group__dvs__filtering.xhtml#dvs_query_stanzas">Query Stanzas</a>). Currently this supports the operands of eq, gt, gte, lt, lte. Example: To delete all timesteps &gt;= time 1.1 the filter would be "/timestep.time/gte/1.1//" .</p>
<p>It also currently only supports one statement so /timestep.time/gt/1.1//and/timestep.time/lt/2.1// is not valid as of version 1.1.0.</p>
<p>Note: The update number should be monotonically increasing with the begin_update calls</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">update_num</td><td>update number of this update, must be monotonically increasing </td></tr>
    <tr><td class="paramname">rank</td><td>rank making this call </td></tr>
    <tr><td class="paramname">filter</td><td>filter for the item(s) to delete see detailed description for more info </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aaf1641a1afbf8bb6257940be28dd94b2" name="aaf1641a1afbf8bb6257940be28dd94b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf1641a1afbf8bb6257940be28dd94b2">&#9670;&#160;</a></span>end_init()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::end_init </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finish initialization for this rank. </p>
<p>This must be called to let server know initialization for this rank is complete</p>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a6396cc4ae967ad5f0da8e234429a97cd" name="a6396cc4ae967ad5f0da8e234429a97cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6396cc4ae967ad5f0da8e234429a97cd">&#9670;&#160;</a></span>end_update()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::end_update </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call to end the update for this timestep/rank/chunk. </p>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="af609f80df51a124a137c6476b7d3c958" name="af609f80df51a124a137c6476b7d3c958"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af609f80df51a124a137c6476b7d3c958">&#9670;&#160;</a></span>get_num_parts()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint32_t DVS::IClient::get_num_parts </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> objects this client has stored. </p>
<p>Note: This gets the number of part info objects this client has. It does not query the server for the information.</p>
<dl class="section return"><dt>Returns</dt><dd>uint32_t number of <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> objects </dd></dl>

</div>
</div>
<a id="a80325aaa83f2d2f27f1aa8e5f167c4c6" name="a80325aaa83f2d2f27f1aa8e5f167c4c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80325aaa83f2d2f27f1aa8e5f167c4c6">&#9670;&#160;</a></span>get_num_plots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint32_t DVS::IClient::get_num_plots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> objects this client has stored. </p>
<p>Note: This gets the number of plot info objects this client has. It does not query the server for the information.</p>
<dl class="section return"><dt>Returns</dt><dd>uint32_t number of <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> objects </dd></dl>

</div>
</div>
<a id="a85adbf75ade9d0ffc6d258c34dae1eb3" name="a85adbf75ade9d0ffc6d258c34dae1eb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85adbf75ade9d0ffc6d258c34dae1eb3">&#9670;&#160;</a></span>get_num_vars()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint32_t DVS::IClient::get_num_vars </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> objects this client has stored. </p>
<p>Note: This gets the number of part info objects this client has. It does not query the server for the information.</p>
<dl class="section return"><dt>Returns</dt><dd>uint32_t number of <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> objects </dd></dl>

</div>
</div>
<a id="a4e3e6fbf66582927a17b54c9fba3464c" name="a4e3e6fbf66582927a17b54c9fba3464c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e3e6fbf66582927a17b54c9fba3464c">&#9670;&#160;</a></span>get_part_id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::get_part_id </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the ID being used by the client for the named part. </p>
<p>Errors: DVS_NONE: Success DVS_INVALID_NAME: No object with name found DVS_ID_NO_VALID_SESSION: No session found matching session_id DVS_ID_INVALID_TYPE: Session id is of wrong type (possibly server) DVS_PARAM_NULL: Null param passed in</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>the name of the part to search for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>UINT32_MAX on failure, otherwise the id of the part for this client </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="a9a1e02d1e1764788a58db0f0ccce4cd4" name="a9a1e02d1e1764788a58db0f0ccce4cd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a1e02d1e1764788a58db0f0ccce4cd4">&#9670;&#160;</a></span>get_part_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> * DVS::IClient::get_part_info </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> object for a specific index. </p>
<p>Note: This only gets the <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> objects from the current client it does not query the server for the information</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>index of the <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> object to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const dvs_part_info* found object, nullptr if not found </dd></dl>

</div>
</div>
<a id="a5dc7f1a7c19c068b04a384c1891e435f" name="a5dc7f1a7c19c068b04a384c1891e435f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5dc7f1a7c19c068b04a384c1891e435f">&#9670;&#160;</a></span>get_plot_id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::get_plot_id </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the ID being used by the client for the named plot. </p>
<p>Errors: DVS_NONE: Success DVS_INVALID_NAME: No object with name found DVS_ID_NO_VALID_SESSION: No session found matching session_id DVS_ID_INVALID_TYPE: Session id is of wrong type (possibly server) DVS_PARAM_NULL: Null param passed in</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>the name of the plot to search for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>UINT32_MAX on failure, otherwise the id of the plot for this client </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="a7753d7dfb238856722825403a5cb6d32" name="a7753d7dfb238856722825403a5cb6d32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7753d7dfb238856722825403a5cb6d32">&#9670;&#160;</a></span>get_plot_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> * DVS::IClient::get_plot_info </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> object for a specific index. </p>
<p>Note: This only gets the <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> objects from the current client it does not query the server for the information</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>index of the <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> object to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const dvs_plot_info* found object, nullptr if not found </dd></dl>

</div>
</div>
<a id="ac4a86f03c9eb353cb1d92e326945cb9c" name="ac4a86f03c9eb353cb1d92e326945cb9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4a86f03c9eb353cb1d92e326945cb9c">&#9670;&#160;</a></span>get_var_id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::get_var_id </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the ID being used by the client for the named var. </p>
<p>Errors: DVS_NONE: Success DVS_INVALID_NAME: No object with name found DVS_ID_NO_VALID_SESSION: No session found matching session_id DVS_ID_INVALID_TYPE: Session id is of wrong type (possibly server) DVS_PARAM_NULL: Null param passed in</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>the name of the var to search for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>UINT32_MAX on failure, otherwise the id of the var for this client </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="afb50715fd6d0ed4aa2df49b8cd9d93bb" name="afb50715fd6d0ed4aa2df49b8cd9d93bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb50715fd6d0ed4aa2df49b8cd9d93bb">&#9670;&#160;</a></span>get_var_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> * DVS::IClient::get_var_info </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> object for a specific index. </p>
<p>Note: This only gets the <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> objects from the current client it does not query the server for the information</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>index of the <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> object to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const dvs_var_info* found object, nullptr if not found </dd></dl>

</div>
</div>
<a id="aa5d98105d78c61e4e0c4043e28174fe1" name="aa5d98105d78c61e4e0c4043e28174fe1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5d98105d78c61e4e0c4043e28174fe1">&#9670;&#160;</a></span>get_version()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char * DVS::IClient::get_version </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the version of the client API. </p>
<p>NOTE: The version is of the format X.Y.Z where X=MAJOR, Y = MINOR, and Z = PATCH. Anything other than a change in Z or PATCH is incompatible with another version and needs to be upgraded to the latest library</p>
<dl class="section return"><dt>Returns</dt><dd>const char* the semantic version of the API </dd></dl>

</div>
</div>
<a id="a024475b03496bc310e211632d153517d" name="a024475b03496bc310e211632d153517d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a024475b03496bc310e211632d153517d">&#9670;&#160;</a></span>set_logger()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DVS::IClient::set_logger </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_d_v_s_1_1_i_logger.xhtml">ILogger</a> *&#160;</td>
          <td class="paramname"><em>logger</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the logger interface to use. </p>
<p>Set a logger interface for the client to use. This object will have <a class="el" href="class_d_v_s_1_1_i_logger.xhtml#a753d496b0ca488a74e6209f330b13458" title="Release the memory of the object.">DVS::ILogger::release()</a> invoked on it. If release() is not implemented the memory should be destroyed by the caller after the client is destroyed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">logger</td><td>logger to use, will be released if <a class="el" href="class_d_v_s_1_1_i_logger.xhtml#a753d496b0ca488a74e6209f330b13458" title="Release the memory of the object.">DVS::ILogger::release()</a> is implemented </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a284f922fec402e03365c7873502d1fde" name="a284f922fec402e03365c7873502d1fde"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a284f922fec402e03365c7873502d1fde">&#9670;&#160;</a></span>set_unit_system()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::set_unit_system </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>system</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the unit system we are using for this session (optional) </p>
<p>NOTE: This cannot be changed once <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aaf1641a1afbf8bb6257940be28dd94b2" title="Finish initialization for this rank.">end_init()</a> is called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">system</td><td>unit system to set, see: <a href="https://nexusdemo.ensight.com/docs/python/html/ENS_UNITSSchema.html">https://nexusdemo.ensight.com/docs/python/html/ENS_UNITSSchema.html</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a3de23c0dcfc5c614f3047ff6284167d3" name="a3de23c0dcfc5c614f3047ff6284167d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3de23c0dcfc5c614f3047ff6284167d3">&#9670;&#160;</a></span>update_copy_previous_part()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_copy_previous_part </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy data from the previous timestep before applying other data. </p>
<p>Currently we only support the options of empty string, mesh or mesh.vars empty string and mesh.vars will copy the mesh, connectivity, and nodal/elemental variables. mesh only copies the mesh and connectivity. Note: Currently plots and case/part constant variables will not be copied via this option and must always be sent.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">part_id</td><td>the id of the part we are copying data for, UINT32_MAX to select all parts </td></tr>
    <tr><td class="paramname">options</td><td>what to copy, see method description </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a41aa2ad12fbfa456f3ec8e48530ea6f6" name="a41aa2ad12fbfa456f3ec8e48530ea6f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41aa2ad12fbfa456f3ec8e48530ea6f6">&#9670;&#160;</a></span>update_elements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_elements </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update elements for a specific part and element type. </p>
<p>This will update the elements for a part. The number of indices needed will vary depending on the type and the num_elements. I.E. if updating triangles with 3 elements the indices array should be of size 9 (3 triangles with 3 indices)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">part_id</td><td>unique id of part to update elements for (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramname">type</td><td>element type of elements to update (points, triangles, quads, etc.) </td></tr>
    <tr><td class="paramname">indices</td><td>node indices for each element, for ordering info per element type see EnSight's User Manual, section 9.2.3 Supported EnSight Gold Elements </td></tr>
    <tr><td class="paramname">num_indices</td><td>the size of the indices array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ret_val TODO </dd></dl>

</div>
</div>
<a id="ac6b3990562f507eda4abedf53e021647" name="ac6b3990562f507eda4abedf53e021647"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6b3990562f507eda4abedf53e021647">&#9670;&#160;</a></span>update_elements_polygon()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_elements_polygon </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>nodes_per_polygon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>nodes_per_polygon_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>indices_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update N-SIDED elements. </p>
<p>This method will send over a list of arbitrarily sized polygons. The nodes_per_polygon param is an array containing the size of each polygon. I.E. if sending a quadrangle, and a 25 sided element the nodes_per_polygon array might look like [4, 25]. The size of the indices array would be 4+25=29 in this example where the first 4 items in the indices array would correspond to the first item in the nodes_per_polygon array, the next 25 items in the indices array would correspond to the second item in the nodes_per_polygon array</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">part_id</td><td>unique id of part to update elements for (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramname">type</td><td>element type of elements to update (N_SIDED_POLYGON or N_SIDED_POLYGON_GHOST) </td></tr>
    <tr><td class="paramname">nodes_per_polygon</td><td>Array containing number of nodes in each element/polygon </td></tr>
    <tr><td class="paramname">nodes_per_polygon_size</td><td>size of nodes_per_polygon array </td></tr>
    <tr><td class="paramname">indices</td><td>Array of node indices for the polygons described in nodes_per_polygon </td></tr>
    <tr><td class="paramname">indices_size</td><td>Size of indices array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a7a9ccf04ed8502d23913d8eef21607ec" name="a7a9ccf04ed8502d23913d8eef21607ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a9ccf04ed8502d23913d8eef21607ec">&#9670;&#160;</a></span>update_elements_polyhedral()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_elements_polyhedral </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>faces_per_element</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>faces_per_element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>nodes_per_face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>nodes_per_face_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>indices_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update N-FACED Elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">part_id</td><td>unique id of part to update elements for (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramname">type</td><td>element type of elements to update (CONVEX_POLYHEDRON or CONVEX_POLYHEDRON_GHOST) </td></tr>
    <tr><td class="paramname">faces_per_element</td><td>Array of how many faces are in each element </td></tr>
    <tr><td class="paramname">faces_per_element_size</td><td>size of faces_per_element array </td></tr>
    <tr><td class="paramname">nodes_per_face</td><td>Array of how many nodes each face contains </td></tr>
    <tr><td class="paramname">nodes_per_face_size</td><td>size of nodes_per_face array </td></tr>
    <tr><td class="paramname">indices</td><td>Node indices for elements </td></tr>
    <tr><td class="paramname">indices_size</td><td>size of node indices </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a87ab36c2f16d093c0beaba60da2cd661" name="a87ab36c2f16d093c0beaba60da2cd661"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87ab36c2f16d093c0beaba60da2cd661">&#9670;&#160;</a></span>update_nodes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_nodes </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update nodes for a specific part. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>the id of part we are updating nodes for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>array of x components for nodes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>array of y components for nodes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z</td><td>array of z components for nodes </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>number of values in individual x/y/z arrays (max nodes in part 2^31) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aee6c79370e423a70f4b73c08794cdf9b" name="aee6c79370e423a70f4b73c08794cdf9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee6c79370e423a70f4b73c08794cdf9b">&#9670;&#160;</a></span>update_nodes_structured() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_nodes_structured </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>global_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_min</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>x_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>y_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>z_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the nodes for a curvilinear structured part. </p>
<p>A curvilinear structured part is represented by the global IJK grid across ranks, the local sub-block's IJK rank, and the actual XYZ values for each IJK grid point in the local grid.</p>
<p>Local IJK Dimensions: The min/max represent a local sub-block from the overall global grid. This could be the entire range if not splitting the grid into multiple ranks or a specific slice. For example you could have a 2ix3jx4k grid where it was split across the I dimension. One rank would specify min/max IJK as min:[0,0,0], max:[0,2,3], the other rank would specify min/max IJK as min:[1,0,0], max:[1,2,3]. If sending the data all as one rank it would be the full range of: min:[0,0,0], max:[1,2,3]</p>
<p>IJK Vals: These specify the actual XYZ location for each IJK value in the grid. The order of these should be by the fastest changing dimension being I, the next being J, and the next being K. I.E. for a 2x2x2 grid the x_vals array would contain the X component for IJK values: [i0 j0 k0][i1 j0 k0][i0 j1 k0][i1 j1 k0][i0 j0 k1][i1 j0 k1][i0 j1 k1][i1 j1 k1].</p>
<p><b>Note:</b> iblanking information is sent via <a class="el" href="class_d_v_s_1_1_i_client.xhtml#ae67a2884dd8f68f4757d8d7fac3828d3" title="Update nodal variable values.">update_var_node()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0a7efbb6cac96595e63e8fa171bde1eb68" title="Scalar.">SCALAR</a> as the var type and <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aa405c87964a066405de5426a3089702b">DVS_STRUCTURED_IBLANKED_NODES</a> as the variable id</p>
<p><b>Note:</b> Ghost element information is sent <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aec8ed14b290237049976f68cb81b200f" title="Update elemental scalar variable values.">update_var_element()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0a7efbb6cac96595e63e8fa171bde1eb68" title="Scalar.">SCALAR</a> as the var type and <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a5f85a0e808c3bad9b9b616e62f5724c0">DVS_STRUCTURED_GHOST_ELEMENTS</a> as the variable id</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">part_id</td><td>the id of part we are updating nodes for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">global_ijk_max</td><td>The one based global ijk max of the mesh across all ranks </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_min</td><td>the zero based local sub-block ijk min for this rank </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_max</td><td>the zero based local sub-block ijk max for this rank </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">x_vals</td><td>The actual X component for each IJK value for the local sub block (size (iMax-iMin+1)*(jMax-jMin+1)*(kMax-kMin+1)) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">y_vals</td><td>The actual Y component for each IJK value for the local sub block (size (iMax-iMin+1)*(jMax-jMin+1)*(kMax-kMin+1)) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">z_vals</td><td>The actual Z component for each IJK value for the local sub block (size (iMax-iMin+1)*(jMax-jMin+1)*(kMax-kMin+1)) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a1588c437020e0ba5702ec48460a792a9" name="a1588c437020e0ba5702ec48460a792a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1588c437020e0ba5702ec48460a792a9">&#9670;&#160;</a></span>update_nodes_structured() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_nodes_structured </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>global_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_min</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>origin</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>dir_i</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>dir_j</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>dir_k</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>i_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>j_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>k_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the nodes for a parallelepiped structured part. </p>
<p>A parallelepiped structured part is represented by the global IJK grid across ranks, the local sub-block's IJK range, the ogigin of the IJK sub-block, the normalized direction (unit) vectors for each IJK dimension, and the absolute distances for each IJK index from the origin of this sub-block.</p>
<p>Global IJK Max: for a 2x3x4 grid would be: [2 3 4]</p>
<p>Local IJK Dimensions: The min/max represent a local sub-block from the overall global grid. This could be the entire range if not splitting the grid into multiple ranks or a specific slice. For example you could have a 2ix3jx4k grid where it was split across the I dimension. One rank would specify min/max IJK as min:[0,0,0], max:[0,2,3], the other rank would specify min/max IJK as min:[1,0,0], max:[1,2,3]. If sending the data all as one rank it would be the full range of: min:[0,0,0], max:[1,2,3]</p>
<p>Direction (Unit) Vectors: These represent the XYZ orientation of each IJK axis. I.E. if I==X J==Y K==Z the vectors would be dir_i: [1 0 0], dir_j: [0 1 0], dir_k: [0 0 1]</p>
<p>IJK Vals: These specify the absolute distance from the XYZ origin in each IJK direction(specified by the direction vectors). So if the distance was 1 between every I index, 2 between every J index, and 3 in between every K index the arrays would look like: i_vals: [0 1 2 3 4 5....] j_vals: [0 2 4 6 8 10....] k_vals: [0 3 6 9 12 15....]</p>
<p><b>Note:</b> iblanking information is sent via <a class="el" href="class_d_v_s_1_1_i_client.xhtml#ae67a2884dd8f68f4757d8d7fac3828d3" title="Update nodal variable values.">update_var_node()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0a7efbb6cac96595e63e8fa171bde1eb68" title="Scalar.">SCALAR</a> as the var type and <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aa405c87964a066405de5426a3089702b">DVS_STRUCTURED_IBLANKED_NODES</a> as the variable id</p>
<p><b>Note:</b> Ghost element information is sent <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aec8ed14b290237049976f68cb81b200f" title="Update elemental scalar variable values.">update_var_element()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0a7efbb6cac96595e63e8fa171bde1eb68" title="Scalar.">SCALAR</a> as the var type and <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a5f85a0e808c3bad9b9b616e62f5724c0">DVS_STRUCTURED_GHOST_ELEMENTS</a> as the variable id</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">part_id</td><td>the id of part we are updating nodes for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">global_ijk_max</td><td>The one based global ijk max of the mesh across all ranks </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_min</td><td>the zero based local sub-block ijk min for this rank </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_max</td><td>the zero based local sub-block ijk max for this rank </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">origin</td><td>the XYZ origin of this local ijk block </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dir_i</td><td>The normalized XYZ direction vector for the i dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dir_j</td><td>The normalized XYZ direction vector for the j dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dir_k</td><td>The normalized XYZ direction vector for the k dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i_vals</td><td>The absolute distance vector for each i index from the local sub block's origin of size iMax-iMin+1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">j_vals</td><td>The absolute distance vector for each j index from the local sub block's origin of size jMax-jMin+1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">k_vals</td><td>The absolute distance vector for each k index from the local sub block's origin of size kMax-kMin+1 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="afcf7811f22d58bd328bed415116a4c41" name="afcf7811f22d58bd328bed415116a4c41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcf7811f22d58bd328bed415116a4c41">&#9670;&#160;</a></span>update_plot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_plot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>plot_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>x_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>y_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update plot data for plot. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">plot_id</td><td>ID of plot </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x_values</td><td>Array of x axis values of plot </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y_values</td><td>array of y axis values of plot </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>number of x/y value pairs being sent </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a8f2e7174f9e89ef5285043dd9357f9b0" name="a8f2e7174f9e89ef5285043dd9357f9b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f2e7174f9e89ef5285043dd9357f9b0">&#9670;&#160;</a></span>update_var_case()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_case </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update case variable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>type of variable we are updating </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id of variable </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values for variable size based on type </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aec8ed14b290237049976f68cb81b200f" name="aec8ed14b290237049976f68cb81b200f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec8ed14b290237049976f68cb81b200f">&#9670;&#160;</a></span>update_var_element() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_element </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>elem_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update elemental scalar variable values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">elem_type</td><td>element type </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>type of var see ensight_dynmaic_data_enums.h: dvs_element_type for more info </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>id of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>id of part </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to update, should be same size as number of elements sent </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a722ee94dc27c54a0f563229d4677ac3f" name="a722ee94dc27c54a0f563229d4677ac3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a722ee94dc27c54a0f563229d4677ac3f">&#9670;&#160;</a></span>update_var_element() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_element </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>elem_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update elemental scalar 64bit variable values *. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">elem_type</td><td>element type </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>type of var see ensight_dynmaic_data_enums.h: dvs_element_type for more info </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>id of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>id of part </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to update, should be same size as number of elements sent </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a3834c25cf5ed35a17f08ecefa4b73417" name="a3834c25cf5ed35a17f08ecefa4b73417"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3834c25cf5ed35a17f08ecefa4b73417">&#9670;&#160;</a></span>update_var_field() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_field </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491">dvs_var_location</a>&#160;</td>
          <td class="paramname"><em>location</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>elem_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update var field values (nodal or elemental) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">location</td><td>Location of variable (node or element) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">elem_type</td><td>Element type if location element, else undefined </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>Type of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>ID of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>ID of part variable is associated with </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to update </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a89c8b5cf33a733071bcc6b4bc35615b2" name="a89c8b5cf33a733071bcc6b4bc35615b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89c8b5cf33a733071bcc6b4bc35615b2">&#9670;&#160;</a></span>update_var_field() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_field </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491">dvs_var_location</a>&#160;</td>
          <td class="paramname"><em>location</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>elem_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update var field values (nodal or elemental) Extend support to handle 64 bit integer variable values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">location</td><td>Location of variable (node or element) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">elem_type</td><td>Element type if location element, else undefined </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>Type of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>ID of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>ID of part variable is associated with </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to update </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ae67a2884dd8f68f4757d8d7fac3828d3" name="ae67a2884dd8f68f4757d8d7fac3828d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae67a2884dd8f68f4757d8d7fac3828d3">&#9670;&#160;</a></span>update_var_node() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update nodal variable values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>type of var </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>id of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>id of part </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to update, should be same size as number of nodes sent with update_nodes </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ae1eb49e0bf598055279b8ebbbc1815e6" name="ae1eb49e0bf598055279b8ebbbc1815e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1eb49e0bf598055279b8ebbbc1815e6">&#9670;&#160;</a></span>update_var_node() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update nodal variable values Extend support to handle 64 bit values <br  />
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>type of var </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>id of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>id of part </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to update, should be same size as number of nodes sent with update_nodes </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ab18cc3827eda737ea73c31aa7fe6ef68" name="ab18cc3827eda737ea73c31aa7fe6ef68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab18cc3827eda737ea73c31aa7fe6ef68">&#9670;&#160;</a></span>update_var_part()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IClient::update_var_part </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0">dvs_var_type</a>&#160;</td>
          <td class="paramname"><em>var_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update part vector variable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">var_type</td><td>type of variable we are updating </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>id of variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>id of part </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values for variable size based on type </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>D:/Product-src/ensight/user_defined_src/readers/dvs/<a class="el" href="dvs__client__interface_8h_source.xhtml">dvs_client_interface.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
