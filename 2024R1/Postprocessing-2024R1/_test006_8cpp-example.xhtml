<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Test006.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Test006.cpp</div></div>
</div><!--header-->
<div class="contents">
<p>Animation.</p>
<p>This example shows how to add animation to a scene. Animations involve creating samplers that describe values of properties at defined times. The ANSYSViewer interpolates the property to generate values at times that fall between the defined times. The samplers are added to the animation as channels. The channels defined which property to animate.</p>
<p>Only some properties can be animated: </p><ul>
<li>node - matrix</li>
<li>node - visible</li>
<li>material - Any value</li>
</ul>
<p>In this example the matrix property and visible property of nodes are changed along with the color value of a material.  
 <script src='/ansys/nexus/viewer-loader.js'></script>
 <ansys-nexus-viewer src='TestAnimation.avz' aspect_ratio=1.777></ansys-nexus-viewer>
</p>
<div class="fragment"><div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Copyright 2018-2021 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited.</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * Restricted Rights Legend</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Use, duplication, or disclosure of this</span></div>
<div class="line"><span class="comment"> * software and its documentation by the</span></div>
<div class="line"><span class="comment"> * Government is subject to restrictions as</span></div>
<div class="line"><span class="comment"> * set forth in subdivision [(b)(3)(ii)] of</span></div>
<div class="line"><span class="comment"> * the Rights in Technical Data and Computer</span></div>
<div class="line"><span class="comment"> * Software clause at 52.227-7013.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;GLTFWriter.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>ANSYS::Nexus;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Simple creation of animated lighted solid color box</span></div>
<div class="line">TESTFUNC(Animation)</div>
<div class="line">{</div>
<div class="line">    <a id="_a0" name="_a0"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">GLTFWriter::GLTF</a> *gltf = GLTFWriter::GLTF::Create(<span class="stringliteral">&quot;MyApp&quot;</span>, <span class="stringliteral">&quot;1.0&quot;</span>, functionName.c_str(), type);</div>
<div class="line">    <span class="keywordflow">if</span> (!gltf)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create GLTF&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// SCENE</span></div>
<div class="line">    <a id="_a1" name="_a1"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">GLTFWriter::Scene</a> *scene = GLTFWriter::Scene::Create(gltf, <span class="stringliteral">&quot;TestScene&quot;</span>, <span class="stringliteral">&quot;m&quot;</span>, 1.0, GLTFWriter::Scene::BT_SOLID, 0.5, 0.5, 0.5);</div>
<div class="line">    <span class="keywordflow">if</span> (!scene) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create scene&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a id="_a2" name="_a2"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml">GLTFWriter::Animation</a> *animation = GLTFWriter::Animation::Create(gltf, <span class="stringliteral">&quot;My Animation&quot;</span>);</div>
<div class="line">    <span class="keywordflow">if</span> (!animation) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create animation&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// create a reusable time</span></div>
<div class="line">    <a id="_a3" name="_a3"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *time1  = 0;</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> _time[3];</div>
<div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line">        _time[i++] = 0; <span class="comment">// time 0</span></div>
<div class="line">        _time[i++] = 9; <span class="comment">// time 1</span></div>
<div class="line">        _time[i++] = 18; <span class="comment">// time 2</span></div>
<div class="line">        time1 = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TIME&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, 3, _time);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// ANIMATION SAMPLER1 for sampling matrix</span></div>
<div class="line">    <a id="_a4" name="_a4"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler.xhtml">GLTFWriter::AnimationSampler</a> *sampler1 = 0;</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> _mat[3 * 16];</div>
<div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 0</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m1; <span class="comment">// identity</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m1[j];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 1</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m2; <span class="comment">// identity</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 t2;</div>
<div class="line">        t2.LoadTranslate(GLTFWriter::Test::Vector3(0, 0, 0));</div>
<div class="line">        m2 *= t2;</div>
<div class="line">        GLTFWriter::Test::Matrix4 r2;</div>
<div class="line">        r2.LoadRotation(GLTFWriter::Test::Vector3(-1, 0, 0), GLTFWriter::Test::Vector3(-1, 0, 1), DegreesToRadians(-45));</div>
<div class="line">        m2 *= r2;</div>
<div class="line">        GLTFWriter::Test::Matrix4 s2;</div>
<div class="line">        s2.LoadScale(GLTFWriter::Test::Vector3(1, 1, 1));</div>
<div class="line">        m2 *= s2;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m2[j];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 2</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m3; <span class="comment">// identity</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 t3;</div>
<div class="line">        t3.LoadTranslate(GLTFWriter::Test::Vector3(0, 0, 0));</div>
<div class="line">        m3 *= t3;</div>
<div class="line">        GLTFWriter::Test::Matrix4 r3;</div>
<div class="line">        r3.LoadRotation(GLTFWriter::Test::Vector3(-1, 0, 0), GLTFWriter::Test::Vector3(-1, 0, 1), DegreesToRadians(-90));</div>
<div class="line">        m3 *= r3;</div>
<div class="line">        GLTFWriter::Test::Matrix4 s3;</div>
<div class="line">        s3.LoadScale(GLTFWriter::Test::Vector3(1, 1, 1));</div>
<div class="line">        m3 *= s3;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m3[j];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *matrix = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;MATRIX&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_MAT4, 3, _mat);</div>
<div class="line"> </div>
<div class="line">        sampler1 = GLTFWriter::AnimationSampler::Create(gltf, time1, matrix);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// ANIMATION SAMPLER2 for sampling matrix</span></div>
<div class="line">    <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler.xhtml">GLTFWriter::AnimationSampler</a> *sampler2 = 0;</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> _mat[3 * 16];</div>
<div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 0</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m0; <span class="comment">// identity</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m0[j];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 1</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m1; <span class="comment">// identity</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 t1;</div>
<div class="line">        t1.LoadTranslate(GLTFWriter::Test::Vector3(0, 0, 0));</div>
<div class="line">        m1 *= t1;</div>
<div class="line">        GLTFWriter::Test::Matrix4 r1;</div>
<div class="line">        r1.LoadRotation(GLTFWriter::Test::Vector3(0, 0, 0), GLTFWriter::Test::Vector3(0, 0, 1), DegreesToRadians(45));</div>
<div class="line">        m1 *= r1;</div>
<div class="line">        GLTFWriter::Test::Matrix4 s1;</div>
<div class="line">        s1.LoadScale(GLTFWriter::Test::Vector3(3, 3, 3));</div>
<div class="line">        m1 *= s1;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m1[j];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 2</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 m2; <span class="comment">// identity</span></div>
<div class="line">        GLTFWriter::Test::Matrix4 t2;</div>
<div class="line">        t2.LoadTranslate(GLTFWriter::Test::Vector3(0, 0, 0));</div>
<div class="line">        m2 *= t2;</div>
<div class="line">        GLTFWriter::Test::Matrix4 r2;</div>
<div class="line">        r2.LoadRotation(GLTFWriter::Test::Vector3(0, 0, 0), GLTFWriter::Test::Vector3(0, 0, 1), DegreesToRadians(90));</div>
<div class="line">        m2 *= r2;</div>
<div class="line">        GLTFWriter::Test::Matrix4 s2;</div>
<div class="line">        s2.LoadScale(GLTFWriter::Test::Vector3(1, 1, 1));</div>
<div class="line">        m2 *= s2;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; 16; ++j)</div>
<div class="line">            _mat[i++] = (<span class="keywordtype">float</span>)m2[j];</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *matrix = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;MATRIX&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_MAT4, 3, _mat);</div>
<div class="line"> </div>
<div class="line">        sampler2 = GLTFWriter::AnimationSampler::Create(gltf, time1, matrix);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// ANIMATION SAMPLER3 for sampling color</span></div>
<div class="line">    <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler.xhtml">GLTFWriter::AnimationSampler</a> *sampler3 = 0;</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> _time[3];</div>
<div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line">        _time[i++] = 4; <span class="comment">// time 0</span></div>
<div class="line">        _time[i++] = 9; <span class="comment">// time 1</span></div>
<div class="line">        _time[i++] = 14; <span class="comment">// time 2</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *time = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TIME&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, 3, _time);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">float</span> _col[3 * 4];</div>
<div class="line">        i = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 0</span></div>
<div class="line">        _col[i++] = 1;</div>
<div class="line">        _col[i++] = 0;</div>
<div class="line">        _col[i++] = 0;</div>
<div class="line">        _col[i++] = 0.5;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 1</span></div>
<div class="line">        _col[i++] = 1;</div>
<div class="line">        _col[i++] = 1;</div>
<div class="line">        _col[i++] = 0;</div>
<div class="line">        _col[i++] = 0.75;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 2</span></div>
<div class="line">        _col[i++] = 0;</div>
<div class="line">        _col[i++] = 1;</div>
<div class="line">        _col[i++] = 0;</div>
<div class="line">        _col[i++] = 1;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *color = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;COLOR&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC4, 3, _col);</div>
<div class="line"> </div>
<div class="line">        sampler3 = GLTFWriter::AnimationSampler::Create(gltf, time, color);</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// ANIMATION SAMPLER4 for sampling visibility</span></div>
<div class="line">    <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler.xhtml">GLTFWriter::AnimationSampler</a> *sampler4 = 0;</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> _time[2];</div>
<div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0;</div>
<div class="line">        _time[i++] = 3; <span class="comment">// time 0</span></div>
<div class="line">        _time[i++] = 15; <span class="comment">// time 1</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *time = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TIME&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, 2, _time);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">int</span> _vis[2];</div>
<div class="line">        i = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 0</span></div>
<div class="line">        _vis[i++] = 1;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// time 1</span></div>
<div class="line">        _vis[i++] = 0;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *visibility = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;VISIBILITY&quot;</span>, GLTFWriter::Attribute::AT_INT, 2, _vis);</div>
<div class="line"> </div>
<div class="line">        sampler4 = GLTFWriter::AnimationSampler::Create(gltf, time, visibility);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// LIGHTS</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// LIGHT NODE</span></div>
<div class="line">        <a id="_a5" name="_a5"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *lightNode = GLTFWriter::Node::CreateLight(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!lightNode || !scene-&gt;<a id="a6" name="a6"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#ad59f57e366c5376b197aed0b10de4f71">SetLight</a>(lightNode)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create light&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// LIGHTS</span></div>
<div class="line">        <a id="_a7" name="_a7"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">GLTFWriter::Light</a> *light1 = GLTFWriter::Light::CreateAmbient(gltf);</div>
<div class="line">        lightNode-&gt;<a id="a8" name="a8"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">AppendLight</a>(light1);</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">GLTFWriter::Light</a> *light2 = GLTFWriter::Light::CreateDirectional(gltf, 1, 1, 1, -1, -1, -3);</div>
<div class="line">        lightNode-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">AppendLight</a>(light2);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// CAMERA</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// CAMERA</span></div>
<div class="line">        <a id="_a9" name="_a9"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera.xhtml">GLTFWriter::Camera</a> *camera = GLTFWriter::Camera::CreateOrthographic(gltf);</div>
<div class="line">        <span class="comment">// CAMERA NODE</span></div>
<div class="line">        std::vector&lt;double&gt; mat(16);</div>
<div class="line">        mat[0] = 1;</div>
<div class="line">        mat[1] = 0;</div>
<div class="line">        mat[2] = 0;</div>
<div class="line">        mat[3] = 0;</div>
<div class="line">        mat[4] = 0;</div>
<div class="line">        mat[5] = 1;</div>
<div class="line">        mat[6] = 0;</div>
<div class="line">        mat[7] = 0;</div>
<div class="line">        mat[8] = 0;</div>
<div class="line">        mat[9] = 0;</div>
<div class="line">        mat[10] = 1;</div>
<div class="line">        mat[11] = 0;</div>
<div class="line">        mat[12] = 0;</div>
<div class="line">        mat[13] = 0;</div>
<div class="line">        mat[14] = 0;</div>
<div class="line">        mat[15] = 1;</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *cameraNode = GLTFWriter::Node::CreateCamera(gltf, camera, <span class="stringliteral">&quot;TestCamera&quot;</span>, &amp;mat[0]);</div>
<div class="line">        scene-&gt;<a id="a10" name="a10"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#a032a02e7ff85707f8ae02dce0ec11ce4">SetCamera</a>(cameraNode);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// MESH NODE</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        std::vector&lt;double&gt; mat(16);</div>
<div class="line">        mat[0] = 1;</div>
<div class="line">        mat[1] = 0;</div>
<div class="line">        mat[2] = 0;</div>
<div class="line">        mat[3] = 0;</div>
<div class="line">        mat[4] = 0;</div>
<div class="line">        mat[5] = 1;</div>
<div class="line">        mat[6] = 0;</div>
<div class="line">        mat[7] = 0;</div>
<div class="line">        mat[8] = 0;</div>
<div class="line">        mat[9] = 0;</div>
<div class="line">        mat[10] = 1;</div>
<div class="line">        mat[11] = 0;</div>
<div class="line">        mat[12] = 0;</div>
<div class="line">        mat[13] = 0;</div>
<div class="line">        mat[14] = 0;</div>
<div class="line">        mat[15] = 1;</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;3D Box 1 with an extremely really long meaningless name&quot;</span>, <span class="keyword">false</span>, &amp;mat[0]);</div>
<div class="line">        <span class="keywordflow">if</span> (!node || !scene-&gt;<a id="a11" name="a11"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MESH</span></div>
<div class="line">        <a id="_a12" name="_a12"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!mesh || !node-&gt;<a id="a13" name="a13"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// PRIMITIVE</span></div>
<div class="line">        std::pair&lt;GLTFWriter::Primitive *, GLTFWriter::Material *&gt; pm = GLTFWriter::Test::CreateSolidColoredBoxPrimitive(gltf,   -1, 0, 0,   1, 1, 1,   1, 0, 0, 0.5);</div>
<div class="line">        mesh-&gt;<a id="a14" name="a14"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(pm.first);</div>
<div class="line"> </div>
<div class="line">        animation-&gt;<a id="a15" name="a15"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml#a1149b49fdb5a350d1f4c9fa802dfc91c">AppendChannel</a>(sampler1, node, <span class="stringliteral">&quot;matrix&quot;</span>);</div>
<div class="line">        animation-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml#a1149b49fdb5a350d1f4c9fa802dfc91c">AppendChannel</a>(sampler3, pm.second, <span class="stringliteral">&quot;color&quot;</span>);</div>
<div class="line">        animation-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml#a1149b49fdb5a350d1f4c9fa802dfc91c">AppendChannel</a>(sampler4, node, <span class="stringliteral">&quot;visible&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// MESH NODE</span></div>
<div class="line">    {</div>
<div class="line">        GLTFWriter::Test::Matrix4 mat; <span class="comment">// identity</span></div>
<div class="line">        mat.LoadTranslate(GLTFWriter::Test::Vector3(1, 0, 0));</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;3D Box 2&quot;</span>, <span class="keyword">true</span>, &amp;(mat.Get())[0]);</div>
<div class="line">        <span class="keywordflow">if</span> (!node || !scene-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// NODE</span></div>
<div class="line">            std::vector&lt;double&gt; mat(16);</div>
<div class="line">            mat[0] = 1;</div>
<div class="line">            mat[1] = 0;</div>
<div class="line">            mat[2] = 0;</div>
<div class="line">            mat[3] = 0;</div>
<div class="line">            mat[4] = 0;</div>
<div class="line">            mat[5] = 1;</div>
<div class="line">            mat[6] = 0;</div>
<div class="line">            mat[7] = 0;</div>
<div class="line">            mat[8] = 0;</div>
<div class="line">            mat[9] = 0;</div>
<div class="line">            mat[10] = 1;</div>
<div class="line">            mat[11] = 0;</div>
<div class="line">            mat[12] = 0;</div>
<div class="line">            mat[13] = 0;</div>
<div class="line">            mat[14] = 0;</div>
<div class="line">            mat[15] = 1;</div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *n = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;&quot;</span>, <span class="keyword">true</span>, &amp;mat[0]);</div>
<div class="line">            <span class="keywordflow">if</span> (!n || !node-&gt;<a id="a16" name="a16"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(n)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!mesh || !n-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// PRIMITIVE</span></div>
<div class="line">            std::pair&lt;GLTFWriter::Primitive *, GLTFWriter::Material *&gt; pm = GLTFWriter::Test::CreateSolidColoredBoxPrimitive(gltf,   0, 0, 0,   1, 1, 1,   0, 0, 1, 0.5);</div>
<div class="line">            mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(pm.first);</div>
<div class="line"> </div>
<div class="line">            animation-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml#a1149b49fdb5a350d1f4c9fa802dfc91c">AppendChannel</a>(sampler2, n, <span class="stringliteral">&quot;matrix&quot;</span>);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// MESH NODE</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;3D Box 3&quot;</span>);</div>
<div class="line">        <span class="keywordflow">if</span> (!node || !scene-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// MESH</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">        <span class="keywordflow">if</span> (!mesh || !node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">            GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// PRIMITIVE</span></div>
<div class="line">        std::pair&lt;GLTFWriter::Primitive *, GLTFWriter::Material *&gt; pm = GLTFWriter::Test::CreateSolidColoredBoxPrimitive(gltf, 0, 0, 0, 3, 1, 2, 1, 0.5, 0, 0.25);</div>
<div class="line">        mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(pm.first);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!gltf-&gt;<a id="a17" name="a17"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">Write</a>()) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_enumeration" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">GLTFWriter::GLTF::GLTFError</a> error = gltf-&gt;<a id="a18" name="a18"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">GetError</a>();</div>
<div class="line"> </div>
<div class="line">    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (error != GLTFWriter::GLTF::GLTF_ERROR_NONE)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">}</div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_sampler.xhtml">ANSYS::Nexus::GLTFWriter::AnimationSampler</a></div><div class="ttdoc">Animation samplers define mechanisms for defining how animation channels change over time.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_animation_8h_source.xhtml#l00034">GLTFAnimation.h:35</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml">ANSYS::Nexus::GLTFWriter::Animation</a></div><div class="ttdoc">Animations define mechanisms for changing over time, node properties and material values.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_animation_8h_source.xhtml#l00068">GLTFAnimation.h:69</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation_xhtml_a1149b49fdb5a350d1f4c9fa802dfc91c"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_animation.xhtml#a1149b49fdb5a350d1f4c9fa802dfc91c">ANSYS::Nexus::GLTFWriter::Animation::AppendChannel</a></div><div class="ttdeci">virtual bool AppendChannel(AnimationSampler *sampler, Node *target, const char *path)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">ANSYS::Nexus::GLTFWriter::Attribute</a></div><div class="ttdoc">Attributes define the per element index values for elements defined by Index.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_attribute_8h_source.xhtml#l00031">GLTFAttribute.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera.xhtml">ANSYS::Nexus::GLTFWriter::Camera</a></div><div class="ttdoc">Cameras define an orthographic or perspective projection of the scene.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_camera_8h_source.xhtml#l00027">GLTFCamera.h:28</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">ANSYS::Nexus::GLTFWriter::GLTF</a></div><div class="ttdoc">This is the main class of the GLTFWriter.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00031">GLTFGLTF.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a7a468ecf1f594b411023782d18f08823"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">ANSYS::Nexus::GLTFWriter::GLTF::Write</a></div><div class="ttdeci">virtual bool Write(bool formatJSON=false)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a812b885f21ed48bad70fea6b03e76913"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">ANSYS::Nexus::GLTFWriter::GLTF::GetError</a></div><div class="ttdeci">virtual GLTFError GetError()=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_acf83a4d185d959503cb9f3f2c2e9fafe"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">ANSYS::Nexus::GLTFWriter::GLTF::GLTFError</a></div><div class="ttdeci">GLTFError</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00035">GLTFGLTF.h:35</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_light.xhtml">ANSYS::Nexus::GLTFWriter::Light</a></div><div class="ttdoc">Lights define the light objects that can be added to a light node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_light_8h_source.xhtml#l00030">GLTFLight.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">ANSYS::Nexus::GLTFWriter::Mesh</a></div><div class="ttdoc">Meshes define the renderable objects that can be added to a node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00103">GLTFMesh.h:104</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml_a392eddd58e41d83d7df11e7e48ed4798"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">ANSYS::Nexus::GLTFWriter::Mesh::AppendPrimitive</a></div><div class="ttdeci">virtual bool AppendPrimitive(Primitive *primitive)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">ANSYS::Nexus::GLTFWriter::Node</a></div><div class="ttdoc">Nodes are the GLTFWriter class that contain the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_node_8h_source.xhtml#l00030">GLTFNode.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a229725aed9694dd14f7023d5445bbc72"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a229725aed9694dd14f7023d5445bbc72">ANSYS::Nexus::GLTFWriter::Node::AppendLight</a></div><div class="ttdeci">virtual bool AppendLight(Light *light)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a29e43db3c3bd933a51c2e99e223e41bd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">ANSYS::Nexus::GLTFWriter::Node::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Mesh *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a85f627158b9e2f1a6565ffe1305e7439"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">ANSYS::Nexus::GLTFWriter::Node::AppendChild</a></div><div class="ttdeci">virtual bool AppendChild(Node *node)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">ANSYS::Nexus::GLTFWriter::Scene</a></div><div class="ttdoc">Scenes are the GLTFWriter class that create the view of the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_scene_8h_source.xhtml#l00028">GLTFScene.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_a032a02e7ff85707f8ae02dce0ec11ce4"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#a032a02e7ff85707f8ae02dce0ec11ce4">ANSYS::Nexus::GLTFWriter::Scene::SetCamera</a></div><div class="ttdeci">virtual bool SetCamera(Node *camera)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_ad59f57e366c5376b197aed0b10de4f71"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#ad59f57e366c5376b197aed0b10de4f71">ANSYS::Nexus::GLTFWriter::Scene::SetLight</a></div><div class="ttdeci">virtual bool SetLight(Node *light)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_adea272bb6570744737a12f7f639e40fd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">ANSYS::Nexus::GLTFWriter::Scene::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Node *mesh)=0</div></div>
</div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
