<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: DVS::IElementBlock Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>DVS</b></li><li class="navelem"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">IElementBlock</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_d_v_s_1_1_i_element_block-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">DVS::IElementBlock Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="dvs__element__block__interface_8h_source.xhtml">dvs_element_block_interface.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for DVS::IElementBlock:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_d_v_s_1_1_i_element_block.png" usemap="#DVS::IElementBlock_map" alt=""/>
  <map id="DVS::IElementBlock_map" name="DVS::IElementBlock_map">
<area href="class_d_v_s_1_1_i_hash.xhtml" title="Interface to get hash information from DVS objects." alt="DVS::IHash" shape="rect" coords="0,0,122,24"/>
<area href="class_d_v_s_1_1_i_var_hash.xhtml" title="Interface to get variable hash information from DVS objects." alt="DVS::IVarHash" shape="rect" coords="132,0,254,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af83862fd513c3392d18a6fcbb5a4ab0e"><td class="memItemLeft" align="right" valign="top"><a id="af83862fd513c3392d18a6fcbb5a4ab0e" name="af83862fd513c3392d18a6fcbb5a4ab0e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IElementBlock</b> ()=default</td></tr>
<tr class="separator:af83862fd513c3392d18a6fcbb5a4ab0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6da0a1dc03a4bfa4c2bc0b29cf8a2608"><td class="memItemLeft" align="right" valign="top"><a id="a6da0a1dc03a4bfa4c2bc0b29cf8a2608" name="a6da0a1dc03a4bfa4c2bc0b29cf8a2608"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IElementBlock</b> ()=default</td></tr>
<tr class="separator:a6da0a1dc03a4bfa4c2bc0b29cf8a2608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47b94abe3d1bf04c3e417a2722937408"><td class="memItemLeft" align="right" valign="top"><a id="a47b94abe3d1bf04c3e417a2722937408" name="a47b94abe3d1bf04c3e417a2722937408"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IElementBlock</b> (<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">IElementBlock</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a47b94abe3d1bf04c3e417a2722937408"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad49718a83f9b487b75e3245fa50b9864"><td class="memItemLeft" align="right" valign="top"><a id="ad49718a83f9b487b75e3245fa50b9864" name="ad49718a83f9b487b75e3245fa50b9864"></a>
<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">IElementBlock</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">IElementBlock</a> &amp;&amp;)=default</td></tr>
<tr class="separator:ad49718a83f9b487b75e3245fa50b9864"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5316f6ee2be9c742a05dff4ff78de760"><td class="memItemLeft" align="right" valign="top"><a id="a5316f6ee2be9c742a05dff4ff78de760" name="a5316f6ee2be9c742a05dff4ff78de760"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IElementBlock</b> (const <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">IElementBlock</a> &amp;)=default</td></tr>
<tr class="separator:a5316f6ee2be9c742a05dff4ff78de760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4ca6bfc8a74eb0f4e2bccfd95c13d67"><td class="memItemLeft" align="right" valign="top"><a id="ad4ca6bfc8a74eb0f4e2bccfd95c13d67" name="ad4ca6bfc8a74eb0f4e2bccfd95c13d67"></a>
<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">IElementBlock</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml">IElementBlock</a> &amp;)=default</td></tr>
<tr class="separator:ad4ca6bfc8a74eb0f4e2bccfd95c13d67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebec4b30e0b8dcb53b4b34305fa0d61e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#aebec4b30e0b8dcb53b4b34305fa0d61e">get_element_type</a> () const =0</td></tr>
<tr class="separator:aebec4b30e0b8dcb53b4b34305fa0d61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01c36edfb491803556b3f30483339d26"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a01c36edfb491803556b3f30483339d26">get_is_ghost</a> () const =0</td></tr>
<tr class="separator:a01c36edfb491803556b3f30483339d26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c8e7ec1c08a472a4dcfa56cd69568d3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3">get_num_variables</a> (uint32_t &amp;num_vars, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a8c8e7ec1c08a472a4dcfa56cd69568d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ed2ca6ad45b9ffb78002f95cfbf0e5"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a16ed2ca6ad45b9ffb78002f95cfbf0e5">get_variable</a> (uint32_t index, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a16ed2ca6ad45b9ffb78002f95cfbf0e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a452ed02842ece58d57c2abba34bd66ab"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a452ed02842ece58d57c2abba34bd66ab">get_variable_size</a> (uint32_t index, uint32_t &amp;num_values, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a452ed02842ece58d57c2abba34bd66ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c24a51dcdd6053e1b506aa5e61d79e5"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a1c24a51dcdd6053e1b506aa5e61d79e5">get_variable_size</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, uint32_t &amp;num_values) const =0</td></tr>
<tr class="separator:a1c24a51dcdd6053e1b506aa5e61d79e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e7a946f3e97334f2a2ec72fd23e0e6e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a3e7a946f3e97334f2a2ec72fd23e0e6e">get_variable_data</a> (uint32_t index, float *array) const =0</td></tr>
<tr class="separator:a3e7a946f3e97334f2a2ec72fd23e0e6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab60ef11cb6c4991c62fe59f71ad6bc78"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#ab60ef11cb6c4991c62fe59f71ad6bc78">get_variable_data</a> (uint32_t index, int64_t *array) const =0</td></tr>
<tr class="separator:ab60ef11cb6c4991c62fe59f71ad6bc78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5c88d1a1d172caedabe84a8f302b9f2"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#ad5c88d1a1d172caedabe84a8f302b9f2">get_variable_data</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, float *array) const =0</td></tr>
<tr class="separator:ad5c88d1a1d172caedabe84a8f302b9f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef1f01f7fd80effeeb12af064c751f01"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#aef1f01f7fd80effeeb12af064c751f01">get_variable_data</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, int64_t *array) const =0</td></tr>
<tr class="separator:aef1f01f7fd80effeeb12af064c751f01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bc52709b9440da6848d2b18751f51f4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a0bc52709b9440da6848d2b18751f51f4">get_variable_data</a> (uint32_t index, uint32_t *num_values, float *array)=0</td></tr>
<tr class="separator:a0bc52709b9440da6848d2b18751f51f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff20dc24794c5dfdfe009fce86f79659"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#aff20dc24794c5dfdfe009fce86f79659">get_variable_data</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, uint32_t *num_values, float *array)=0</td></tr>
<tr class="separator:aff20dc24794c5dfdfe009fce86f79659"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab95989900765aabb0eccefbe8c25fedd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#ab95989900765aabb0eccefbe8c25fedd">get_nodes_per_element</a> (uint32_t &amp;nodes_per_element) const =0</td></tr>
<tr class="separator:ab95989900765aabb0eccefbe8c25fedd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74e15d2c0471232fca5dda950cd5dcbb"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a74e15d2c0471232fca5dda950cd5dcbb">get_num_elements</a> (uint32_t &amp;num_elements) const =0</td></tr>
<tr class="separator:a74e15d2c0471232fca5dda950cd5dcbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a310ce04445517dd10942e7ba224ac75d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a310ce04445517dd10942e7ba224ac75d">get_connectivity_size</a> (uint32_t &amp;indices_size)=0</td></tr>
<tr class="separator:a310ce04445517dd10942e7ba224ac75d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78959ba4b322598b6bb31fc205c0d3b7"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a78959ba4b322598b6bb31fc205c0d3b7">get_connectivity</a> (uint32_t *indices)=0</td></tr>
<tr class="separator:a78959ba4b322598b6bb31fc205c0d3b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21ddc1624e91860b6dd37c25d7bd333f"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a21ddc1624e91860b6dd37c25d7bd333f">get_connectivity_polygon_size</a> (uint32_t &amp;nodes_per_polygon_size, uint32_t &amp;indices_size)=0</td></tr>
<tr class="separator:a21ddc1624e91860b6dd37c25d7bd333f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b03d65937d395bbf9819e15b9c83288"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a6b03d65937d395bbf9819e15b9c83288">get_connectivity_polygon</a> (uint32_t *nodes_per_polygon, uint32_t *indices)=0</td></tr>
<tr class="separator:a6b03d65937d395bbf9819e15b9c83288"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9bc1541ae8c5114f133122dbbb247cd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#aa9bc1541ae8c5114f133122dbbb247cd">get_connectivity_polyhedral_size</a> (uint32_t &amp;faces_per_element_size, uint32_t &amp;nodes_per_face_size, uint32_t &amp;indices_size)=0</td></tr>
<tr class="separator:aa9bc1541ae8c5114f133122dbbb247cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab47ae0f50ceab792a872a47a867134e5"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#ab47ae0f50ceab792a872a47a867134e5">get_connectivity_polyhedral</a> (uint32_t *faces_per_element, uint32_t *nodes_per_face, uint32_t *indices)=0</td></tr>
<tr class="separator:ab47ae0f50ceab792a872a47a867134e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_d_v_s_1_1_i_hash"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_d_v_s_1_1_i_hash')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_d_v_s_1_1_i_hash.xhtml">DVS::IHash</a></td></tr>
<tr class="memitem:a2f73d1292c0162a03bd29e9094567a77 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a2f73d1292c0162a03bd29e9094567a77" name="a2f73d1292c0162a03bd29e9094567a77"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IHash</b> ()=default</td></tr>
<tr class="separator:a2f73d1292c0162a03bd29e9094567a77 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e08d37be2095880bcb7d77b365ebde3 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a2e08d37be2095880bcb7d77b365ebde3" name="a2e08d37be2095880bcb7d77b365ebde3"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IHash</b> ()=default</td></tr>
<tr class="separator:a2e08d37be2095880bcb7d77b365ebde3 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41019f8e16b485b73c1a832df9c21665 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a41019f8e16b485b73c1a832df9c21665" name="a41019f8e16b485b73c1a832df9c21665"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IHash</b> (<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a41019f8e16b485b73c1a832df9c21665 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8c71b16b66a50b92918028b8bbc0d66 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="af8c71b16b66a50b92918028b8bbc0d66" name="af8c71b16b66a50b92918028b8bbc0d66"></a>
<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:af8c71b16b66a50b92918028b8bbc0d66 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17952af3cbc7170e37f882b17e800b3f inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="a17952af3cbc7170e37f882b17e800b3f" name="a17952af3cbc7170e37f882b17e800b3f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IHash</b> (const <a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;)=default</td></tr>
<tr class="separator:a17952af3cbc7170e37f882b17e800b3f inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaed8c50d66653ffe2a16f2d39278734 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top"><a id="aeaed8c50d66653ffe2a16f2d39278734" name="aeaed8c50d66653ffe2a16f2d39278734"></a>
<a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_hash.xhtml">IHash</a> &amp;)=default</td></tr>
<tr class="separator:aeaed8c50d66653ffe2a16f2d39278734 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0dedeb8d9dfd442d49d16cb4ddfb221 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_hash.xhtml#ac0dedeb8d9dfd442d49d16cb4ddfb221">get_hash_size</a> () const =0</td></tr>
<tr class="separator:ac0dedeb8d9dfd442d49d16cb4ddfb221 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51eaee86a6e2db4dda7f4326daa33874 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_hash.xhtml#a51eaee86a6e2db4dda7f4326daa33874">get_hash</a> (char *hash) const =0</td></tr>
<tr class="separator:a51eaee86a6e2db4dda7f4326daa33874 inherit pub_methods_class_d_v_s_1_1_i_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_d_v_s_1_1_i_var_hash"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_d_v_s_1_1_i_var_hash')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">DVS::IVarHash</a></td></tr>
<tr class="memitem:a9b1a7d92f3c9c67d25be7b2cc4658b95 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a9b1a7d92f3c9c67d25be7b2cc4658b95" name="a9b1a7d92f3c9c67d25be7b2cc4658b95"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IVarHash</b> ()=default</td></tr>
<tr class="separator:a9b1a7d92f3c9c67d25be7b2cc4658b95 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b2a92106ec38f910d49a1c179419871 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a7b2a92106ec38f910d49a1c179419871" name="a7b2a92106ec38f910d49a1c179419871"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IVarHash</b> ()=default</td></tr>
<tr class="separator:a7b2a92106ec38f910d49a1c179419871 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9c19f92692dee9f5d287ebc6e059dfb inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="ae9c19f92692dee9f5d287ebc6e059dfb" name="ae9c19f92692dee9f5d287ebc6e059dfb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IVarHash</b> (<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:ae9c19f92692dee9f5d287ebc6e059dfb inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53d713fd8e14a28ad11fefb30c2fda03 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a53d713fd8e14a28ad11fefb30c2fda03" name="a53d713fd8e14a28ad11fefb30c2fda03"></a>
<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a53d713fd8e14a28ad11fefb30c2fda03 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a056227972d92b22777ee19f60e1794f6 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a056227972d92b22777ee19f60e1794f6" name="a056227972d92b22777ee19f60e1794f6"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IVarHash</b> (const <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;)=default</td></tr>
<tr class="separator:a056227972d92b22777ee19f60e1794f6 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aba4bc5fbf125a434cbb88f94a0dfb2 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top"><a id="a6aba4bc5fbf125a434cbb88f94a0dfb2" name="a6aba4bc5fbf125a434cbb88f94a0dfb2"></a>
<a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml">IVarHash</a> &amp;)=default</td></tr>
<tr class="separator:a6aba4bc5fbf125a434cbb88f94a0dfb2 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85c3ade756029207e15b1c8de8cd5c1b inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a> (uint32_t index, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a85c3ade756029207e15b1c8de8cd5c1b inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81cd99bbf69ccc0d50e8bcb7dd291046 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a81cd99bbf69ccc0d50e8bcb7dd291046">get_var_hash_size</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var) const =0</td></tr>
<tr class="separator:a81cd99bbf69ccc0d50e8bcb7dd291046 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17fff1548eb276edd326a0af08f6a7c4 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a> (uint32_t index, char *hash, <a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a> type=VAR_TYPE::FLOAT) const =0</td></tr>
<tr class="separator:a17fff1548eb276edd326a0af08f6a7c4 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7348be86da47ac034252a68949b21007 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml#a7348be86da47ac034252a68949b21007">get_var_hash</a> (const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *var, char *hash) const =0</td></tr>
<tr class="separator:a7348be86da47ac034252a68949b21007 inherit pub_methods_class_d_v_s_1_1_i_var_hash"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Element blocks contain the connectivity and variable data for elements. There is one element block per element type the mesh block has data available for.</p>
<p>Note: Structured data's connectivity is implicit and the element block only contains variable information for elements. Structured data is also different for ghost elements as the ghost elements are represented as an elemental variable instead of as an element block as unstructured data represents it. We might want to change this in future versions so structured data is better aligned with unstructured data in DVS but currently this is how the information is represented. See <a class="el" href="class_d_v_s_1_1_i_hash.xhtml" title="Interface to get hash information from DVS objects.">DVS::IHash</a> and <a class="el" href="class_d_v_s_1_1_i_var_hash.xhtml" title="Interface to get variable hash information from DVS objects.">DVS::IVarHash</a> for the hash object interface. </p>

<p class="definition">Definition at line <a class="el" href="dvs__element__block__interface_8h_source.xhtml#l00051">51</a> of file <a class="el" href="dvs__element__block__interface_8h_source.xhtml">dvs_element_block_interface.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a78959ba4b322598b6bb31fc205c0d3b7" name="a78959ba4b322598b6bb31fc205c0d3b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78959ba4b322598b6bb31fc205c0d3b7">&#9670;&#160;</a></span>get_connectivity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_connectivity </td>
          <td>(</td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the connectivity for basic unstructured element types. </p>
<p>This method returns the connectivity array for a basic unstructured element. If retrieving the indices array it should be of size indices_size returned from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a310ce04445517dd10942e7ba224ac75d" title="Get the size of the connectivity array.">get_connectivity_size()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_INVALID_ELEMENT_TYPE: This element block is not a basic unstructured type</li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">indices</td><td>If not nullptr should be of size indices_size from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a310ce04445517dd10942e7ba224ac75d" title="Get the size of the connectivity array.">get_connectivity_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, see the method documentation for errors </dd></dl>

</div>
</div>
<a id="a6b03d65937d395bbf9819e15b9c83288" name="a6b03d65937d395bbf9819e15b9c83288"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b03d65937d395bbf9819e15b9c83288">&#9670;&#160;</a></span>get_connectivity_polygon()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_connectivity_polygon </td>
          <td>(</td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>nodes_per_polygon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the connectivity information for polygonal element blocks. </p>
<p>This method returns the different connectivity arrays for polygonal elements. The size of the arrays to allocate should be retrieved through the method <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a21ddc1624e91860b6dd37c25d7bd333f" title="Get the size of the connectivity arrays for polygon elements.">get_connectivity_polygon_size()</a>.</p>
<p>Polygonal elements are described by 2 arrays. nodes_per_polygon is the number of nodes for each element. indices is the connectivity array for each element. So a square might look like: nodes_per_polygon: [4] (of size 1) indices: [0, 1, 2, 3] (of size 4)</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_INVALID_ELEMENT_TYPE: This element block is not a basic unstructured type</li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">nodes_per_polygon</td><td>an ouput array of size nodes_per_polygon_size from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a21ddc1624e91860b6dd37c25d7bd333f" title="Get the size of the connectivity arrays for polygon elements.">get_connectivity_polygon_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">indices</td><td>an output array of size indices_size from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a21ddc1624e91860b6dd37c25d7bd333f" title="Get the size of the connectivity arrays for polygon elements.">get_connectivity_polygon_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, see the method documentation for errors </dd></dl>

</div>
</div>
<a id="a21ddc1624e91860b6dd37c25d7bd333f" name="a21ddc1624e91860b6dd37c25d7bd333f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21ddc1624e91860b6dd37c25d7bd333f">&#9670;&#160;</a></span>get_connectivity_polygon_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_connectivity_polygon_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>nodes_per_polygon_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>indices_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size of the connectivity arrays for polygon elements. </p>
<p>This method returns the size of the connectivity arrays for polygon elements. This should be used to allocate array sizes for use with <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a6b03d65937d395bbf9819e15b9c83288" title="Get the connectivity information for polygonal element blocks.">get_connectivity_polygon()</a>.</p>
<p>nodes_per_polygon_size is the total number of elements for this element type indices_size is the size of the total connectivity array</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_INVALID_ELEMENT_TYPE: This element block is not a basic unstructured type</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">nodes_per_polygon_size</td><td>the number of nodes per polygon, this is also the total number of elements </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">indices_size</td><td>the total size of the connectivity array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, see the method documentation for errors </dd></dl>

</div>
</div>
<a id="ab47ae0f50ceab792a872a47a867134e5" name="ab47ae0f50ceab792a872a47a867134e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab47ae0f50ceab792a872a47a867134e5">&#9670;&#160;</a></span>get_connectivity_polyhedral()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_connectivity_polyhedral </td>
          <td>(</td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>faces_per_element</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>nodes_per_face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the connectivity information for polyhedral element blocks. </p>
<p>This method returns the different connectivity arrays for polyhedral elements. The size of the arrays to allocate should be retrieved through the method <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a21ddc1624e91860b6dd37c25d7bd333f" title="Get the size of the connectivity arrays for polygon elements.">get_connectivity_polygon_size()</a>.</p>
<p>Polyhedral elements are described by 3 arrays. faces_per_element is the number of faces each individual element is made up of. Nodes per face is the number of nodes within each respective face. And the indices array of the connectivity of each face. So a cube might look like: faces_per_element: [6] (of size 1) nodes_per_face: [4,4,4,4,4,4] (of size 6) indices: [0,1,2,3 ..... ] (of size 24)</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_INVALID_ELEMENT_TYPE: This element block is not a basic unstructured type</li>
<li>DVS_INVALID_CACHE: Loading cache failed, possibly invalid cache or invalid permissions</li>
<li>DVS_DATA_FAILED_LOAD: There was a failure loading data, data is either empty or missing</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">faces_per_element</td><td>and output array of size faces_per_element_size from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#aa9bc1541ae8c5114f133122dbbb247cd" title="Get size of the connectivity arrays for polyhedral elements.">get_connectivity_polyhedral_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">nodes_per_face</td><td>an output array of size nodes_per_face_size from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#aa9bc1541ae8c5114f133122dbbb247cd" title="Get size of the connectivity arrays for polyhedral elements.">get_connectivity_polyhedral_size()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">indices</td><td>an output array of size indices_size from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#aa9bc1541ae8c5114f133122dbbb247cd" title="Get size of the connectivity arrays for polyhedral elements.">get_connectivity_polyhedral_size()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, see the method documentation for errors </dd></dl>

</div>
</div>
<a id="aa9bc1541ae8c5114f133122dbbb247cd" name="aa9bc1541ae8c5114f133122dbbb247cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9bc1541ae8c5114f133122dbbb247cd">&#9670;&#160;</a></span>get_connectivity_polyhedral_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_connectivity_polyhedral_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>faces_per_element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>nodes_per_face_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>indices_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get size of the connectivity arrays for polyhedral elements. </p>
<p>This method returns the size of the connectivity arrays for polyhedral elements. This should be used to allocate array sizes for use with <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#ab47ae0f50ceab792a872a47a867134e5" title="Get the connectivity information for polyhedral element blocks.">get_connectivity_polyhedral()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_INVALID_ELEMENT_TYPE: This element block is not a basic unstructured type</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">faces_per_element_size</td><td>the number of faces per element, this is also the total number of elements </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">nodes_per_face_size</td><td>the number of nodes for each face in an element </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">indices_size</td><td>the total number of indices in the connectivity array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, see the method documentation for errors </dd></dl>

</div>
</div>
<a id="a310ce04445517dd10942e7ba224ac75d" name="a310ce04445517dd10942e7ba224ac75d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a310ce04445517dd10942e7ba224ac75d">&#9670;&#160;</a></span>get_connectivity_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_connectivity_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>indices_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size of the connectivity array. </p>
<p>This method returns the size of the connectivity array in the param indices_size. This should be used to get the connectivity via <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a78959ba4b322598b6bb31fc205c0d3b7" title="Get the connectivity for basic unstructured element types.">get_connectivity()</a></p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_INVALID_ELEMENT_TYPE: This element block is not a basic unstructured type</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">indices_size</td><td>the size of the connectivity array for this element block </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, see the method documentation for errors </dd></dl>

</div>
</div>
<a id="aebec4b30e0b8dcb53b4b34305fa0d61e" name="aebec4b30e0b8dcb53b4b34305fa0d61e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebec4b30e0b8dcb53b4b34305fa0d61e">&#9670;&#160;</a></span>get_element_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> DVS::IElementBlock::get_element_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the element type for this block. </p>
<dl class="section return"><dt>Returns</dt><dd>dvs_element_type the element type for this block </dd></dl>

</div>
</div>
<a id="a01c36edfb491803556b3f30483339d26" name="a01c36edfb491803556b3f30483339d26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01c36edfb491803556b3f30483339d26">&#9670;&#160;</a></span>get_is_ghost()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool DVS::IElementBlock::get_is_ghost </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get if this element block is composed of ghost elements. </p>
<p>This method returns if the element block is composed of ghost elements. Note: This is only for unstructured data, structured data ghost elements are stored within an elemental variable (DVS_STRUCTURED_GHOST_ELEMENTS)</p>
<dl class="section return"><dt>Returns</dt><dd>true if unstructured ghost elements </dd></dl>

</div>
</div>
<a id="ab95989900765aabb0eccefbe8c25fedd" name="ab95989900765aabb0eccefbe8c25fedd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab95989900765aabb0eccefbe8c25fedd">&#9670;&#160;</a></span>get_nodes_per_element()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_nodes_per_element </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>nodes_per_element</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of nodes per basic unstructured element. </p>
<p>This method is invalid for polygonal and polyhedral elements</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_INVALID_ELEMENT_TYPE: Returned for polygonal/polyhedral data</li>
<li>DVS_UNKNOWN: Unknown new type, should not happen</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">nodes_per_element</td><td>the number of nodes per element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method documentation </dd></dl>

</div>
</div>
<a id="a74e15d2c0471232fca5dda950cd5dcbb" name="a74e15d2c0471232fca5dda950cd5dcbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74e15d2c0471232fca5dda950cd5dcbb">&#9670;&#160;</a></span>get_num_elements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_num_elements </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_elements</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of elements for this block. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">num_elements</td><td>the number of elements for this block </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error </dd></dl>

</div>
</div>
<a id="a8c8e7ec1c08a472a4dcfa56cd69568d3" name="a8c8e7ec1c08a472a4dcfa56cd69568d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c8e7ec1c08a472a4dcfa56cd69568d3">&#9670;&#160;</a></span>get_num_variables()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_num_variables </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_vars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code>VAR_TYPE::FLOAT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of elemental variables this element block has data for. </p>
<p>This method is intended to be used in conjunction with <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a16ed2ca6ad45b9ffb78002f95cfbf0e5" title="Get the variable definition associates with the elemental variable for this index.">get_variable()</a> and <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a3e7a946f3e97334f2a2ec72fd23e0e6e" title="Get the variable data by index.">get_variable_data()</a> to retrieve elemental variable data.</p>
<p>Errors:</p><ul>
<li>DVS_NONE: Success</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">num_vars</td><td>if success, returns the number of variables on this element block </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the enum type. By default, VAR_TYPE::FLOAT </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="a16ed2ca6ad45b9ffb78002f95cfbf0e5" name="a16ed2ca6ad45b9ffb78002f95cfbf0e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16ed2ca6ad45b9ffb78002f95cfbf0e5">&#9670;&#160;</a></span>get_variable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a> * DVS::IElementBlock::get_variable </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code>VAR_TYPE::FLOAT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable definition associates with the elemental variable for this index. </p>
<p>This method retrieves the variable that is associated with the elemental variable of the mesh chunk at a specific index in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1]</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of variable definition to get in range [0, <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the enum type. By default, VAR_TYPE::FLOAT </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="class_d_v_s_1_1_i_var.xhtml" title="Interface for variables for the DVS Reader API.">DVS::IVar</a>* nullptr if out of range, otherwise the variable associated with the index </dd></dl>

</div>
</div>
<a id="ad5c88d1a1d172caedabe84a8f302b9f2" name="ad5c88d1a1d172caedabe84a8f302b9f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5c88d1a1d172caedabe84a8f302b9f2">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by variable. </p>
<p>This method retrieves the nodal variable data based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
<li>DVS_PARAM_INVALID_VAR_ID: Mesh chunk does not have data for var passed in.</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve nodal variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a452ed02842ece58d57c2abba34bd66ab" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="aef1f01f7fd80effeeb12af064c751f01" name="aef1f01f7fd80effeeb12af064c751f01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef1f01f7fd80effeeb12af064c751f01">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by variable. </p>
<p>This method retrieves the nodal variable data based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
<li>DVS_PARAM_INVALID_VAR_ID: Mesh chunk does not have data for var passed in.</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve nodal variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a452ed02842ece58d57c2abba34bd66ab" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="aff20dc24794c5dfdfe009fce86f79659" name="aff20dc24794c5dfdfe009fce86f79659"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff20dc24794c5dfdfe009fce86f79659">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data on this mesh chunk by by variable definition. </p>
<p>This method retrieves the elemental variable data based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
<li>DVS_PARAM_INVALID_VAR_ID: Mesh chunk does not have data for var passed in.</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve elemental variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>if not nullptr returns the number of values to allocate for array </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>if not nullptr should be of size num_values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="a3e7a946f3e97334f2a2ec72fd23e0e6e" name="a3e7a946f3e97334f2a2ec72fd23e0e6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e7a946f3e97334f2a2ec72fd23e0e6e">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by index. </p>
<p>This method retrieves nodal variable data based on an index in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1]. To retrieve the variable definition associated with the index call <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a16ed2ca6ad45b9ffb78002f95cfbf0e5" title="Get the variable definition associates with the elemental variable for this index.">get_variable()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_PARAM_OUT_OF_BOUNDS: Index out of bounds of [0, <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1]</li>
<li>DVS_PARAM_INVALID_VAR: Invalid variable found at index, should not happen</li>
<li>DVS_PARAM_INVALID_VAR_ID: Invalid variable id found at index, should not happen</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of the variable data in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a452ed02842ece58d57c2abba34bd66ab" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="ab60ef11cb6c4991c62fe59f71ad6bc78" name="ab60ef11cb6c4991c62fe59f71ad6bc78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab60ef11cb6c4991c62fe59f71ad6bc78">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data by index. </p>
<p>This method retrieves nodal variable data based on an index in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1]. To retrieve the variable definition associated with the index call <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a16ed2ca6ad45b9ffb78002f95cfbf0e5" title="Get the variable definition associates with the elemental variable for this index.">get_variable()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_PARAM_OUT_OF_BOUNDS: Index out of bounds of [0, <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1]</li>
<li>DVS_PARAM_INVALID_VAR: Invalid variable found at index, should not happen</li>
<li>DVS_PARAM_INVALID_VAR_ID: Invalid variable id found at index, should not happen</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of the variable data in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>an array whose size should be returned from <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a452ed02842ece58d57c2abba34bd66ab" title="Get the variable size via the index and specified type.">get_variable_size()</a>. Overloaded for float and int64. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="a0bc52709b9440da6848d2b18751f51f4" name="a0bc52709b9440da6848d2b18751f51f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bc52709b9440da6848d2b18751f51f4">&#9670;&#160;</a></span>get_variable_data() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_data </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>array</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable data on this mesh chunk by index. </p>
<p>This method retrieves elemental variable data based on an index in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1]. To retrieve the variable definition associated with the index call <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a16ed2ca6ad45b9ffb78002f95cfbf0e5" title="Get the variable definition associates with the elemental variable for this index.">get_variable()</a>.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: No error</li>
<li>DVS_PARAM_NULL: All parameters are null. Method will do nothing.</li>
<li>DVS_PARAM_OUT_OF_BOUNDS: Index out of bounds of [0, <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1]</li>
<li>DVS_PARAM_INVALID_VAR: Invalid variable found at index, should not happen</li>
<li>DVS_PARAM_INVALID_VAR_ID: Invalid variable id found at index, should not happen</li>
<li>DVS_INVALID_CACHE: Cache is unable to be read. Bad location or permissions</li>
<li>DVS_INVALID_HASH: Hash of variable data is invalid. There is a problem with the data</li>
<li>DVS_DATA_FAILED_LOAD: Data hash in metadata is missing from blockstore. Bad cache or permissions?</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of the variable data in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>if not nullptr returns the number of values to allocate for array </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">array</td><td>if not nullptr must be of size num_values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="a1c24a51dcdd6053e1b506aa5e61d79e5" name="a1c24a51dcdd6053e1b506aa5e61d79e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c24a51dcdd6053e1b506aa5e61d79e5">&#9670;&#160;</a></span>get_variable_size() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_size </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_d_v_s_1_1_i_var.xhtml">IVar</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable size by variable. </p>
<p>This method retrieves the nodal variable data size based on a specific variable definitions.</p>
<p>Error Codes:</p><ul>
<li>DVS_NONE: Success</li>
<li>DVS_PARAM_INVALID_VAR: Bad (or null) variable object passed into method</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">var</td><td>the variable definition to retrieve nodal variable data for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>a reference to a uint32_t, representing the number of values of the variable </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<a id="a452ed02842ece58d57c2abba34bd66ab" name="a452ed02842ece58d57c2abba34bd66ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a452ed02842ece58d57c2abba34bd66ab">&#9670;&#160;</a></span>get_variable_size() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IElementBlock::get_variable_size </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dvs__var__interface_8h.xhtml#a84856d33cb231d1d87a603758b8b8066">VAR_TYPE</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code>VAR_TYPE::FLOAT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the variable size via the index and specified type. </p>
<p>This method retrieves the variable's size that is associated with the nodal variable of the mesh chunk at a specific index in range [0,<a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1] and of the specified type</p>
<p>Errors:</p><ul>
<li>DVS_NONE: Success</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>index of variable definition to get in range [0, <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml#a8c8e7ec1c08a472a4dcfa56cd69568d3" title="Get the number of elemental variables this element block has data for.">get_num_variables()</a>-1] </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_values</td><td>a reference to a uint32_t, representing the number of values of the variable </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the enum type. By default, VAR_TYPE::FLOAT </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on no error, otherwise see method description </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>D:/Product-src/ensight/user_defined_src/readers/dvs/include/<a class="el" href="dvs__element__block__interface_8h_source.xhtml">dvs_element_block_interface.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
