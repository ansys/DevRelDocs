<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Test013.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Test013.cpp</div></div>
</div><!--header-->
<div class="contents">
<p>Legends</p>
<p>This example demonstrates the use of legends.</p>
<p>Several legends are created demonstrating different options to the legend object.  
 <script src='/ansys/nexus/viewer-loader.js'></script>
 <ansys-nexus-viewer src='TestLegends.avz' aspect_ratio=1.777></ansys-nexus-viewer>
</p>
<div class="fragment"><div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Copyright 2018-2021 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited.</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * Restricted Rights Legend</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Use, duplication, or disclosure of this</span></div>
<div class="line"><span class="comment"> * software and its documentation by the</span></div>
<div class="line"><span class="comment"> * Government is subject to restrictions as</span></div>
<div class="line"><span class="comment"> * set forth in subdivision [(b)(3)(ii)] of</span></div>
<div class="line"><span class="comment"> * the Rights in Technical Data and Computer</span></div>
<div class="line"><span class="comment"> * Software clause at 52.227-7013.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line"><span class="preprocessor">#include &lt;codecvt&gt;</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;GLTFWriter.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;test.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>ANSYS::Nexus;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">namespace </span>{</div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line">    std::string </div>
<div class="line">    ConvertToUtf8String(<span class="keyword">const</span> std::wstring&amp; wstr)</div>
<div class="line">    {</div>
<div class="line">        std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt; myconv;</div>
<div class="line">        <span class="keywordflow">return</span> myconv.to_bytes(wstr);</div>
<div class="line">    }</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Legends</span></div>
<div class="line">TESTFUNC(Legends)</div>
<div class="line">{</div>
<div class="line">    <a id="_a0" name="_a0"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">GLTFWriter::GLTF</a> *gltf = GLTFWriter::GLTF::Create(<span class="stringliteral">&quot;MyApp&quot;</span>, <span class="stringliteral">&quot;1.0&quot;</span>, functionName.c_str(), type);</div>
<div class="line">    <span class="keywordflow">if</span> (!gltf)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create GLTF&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// SCENE</span></div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line">    <a id="_a1" name="_a1"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">GLTFWriter::Scene</a> *scene = GLTFWriter::Scene::Create(gltf, ConvertToUtf8String(L<span class="stringliteral">&quot;ԎҿșϯϨҁęɳę&quot;</span>).c_str(), <span class="stringliteral">&quot;&quot;</span>, 0, GLTFWriter::Scene::BT_TB, 0.42F, 0.55F, 0.871F, 1, 1, 1);</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">    <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">GLTFWriter::Scene</a> *scene = GLTFWriter::Scene::Create(gltf, <span class="stringliteral">&quot;Testscene&quot;</span>, <span class="stringliteral">&quot;m&quot;</span>, 1.0F, GLTFWriter::Scene::BT_TB, 0.42F, 0.55F, 0.871F, 1, 1, 1);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">    <span class="keywordflow">if</span> (!scene) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create scene&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// CAMERA</span></div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// CAMERA</span></div>
<div class="line">        <a id="_a2" name="_a2"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera.xhtml">GLTFWriter::Camera</a> *camera = GLTFWriter::Camera::CreateOrthographic(gltf);</div>
<div class="line">        <span class="comment">// CAMERA NODE</span></div>
<div class="line">        std::vector&lt;double&gt; mat(16);</div>
<div class="line">        mat[0] = 0;</div>
<div class="line">        mat[1] = 1;</div>
<div class="line">        mat[2] = 0;</div>
<div class="line">        mat[3] = 0;</div>
<div class="line">        mat[4] = 0;</div>
<div class="line">        mat[5] = 0;</div>
<div class="line">        mat[6] = 1;</div>
<div class="line">        mat[7] = 0;</div>
<div class="line">        mat[8] = 1;</div>
<div class="line">        mat[9] = 0;</div>
<div class="line">        mat[10] = 0;</div>
<div class="line">        mat[11] = 0;</div>
<div class="line">        mat[12] = 0;</div>
<div class="line">        mat[13] = 0;</div>
<div class="line">        mat[14] = 0;</div>
<div class="line">        mat[15] = 1;</div>
<div class="line">        <a id="_a3" name="_a3"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *cameraNode = GLTFWriter::Node::CreateCamera(gltf, camera, <span class="stringliteral">&quot;TestCamera&quot;</span>, &amp;mat[0]);</div>
<div class="line">        scene-&gt;<a id="a4" name="a4"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#a032a02e7ff85707f8ae02dce0ec11ce4">SetCamera</a>(cameraNode);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// banded texture</span></div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> mn = 1.5;</div>
<div class="line">        <span class="keywordtype">float</span> mx = 2.5;</div>
<div class="line">        <span class="keywordtype">float</span> range = mx - mn;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TEXTURE</span></div>
<div class="line">        std::vector&lt;unsigned char&gt; colors;</div>
<div class="line">        colors.push_back(0); colors.push_back(0); colors.push_back(255); <span class="comment">// blue</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(255); <span class="comment">// cyan</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(0); <span class="comment">// green</span></div>
<div class="line">        colors.push_back(255); colors.push_back(255); colors.push_back(0); <span class="comment">// yellow</span></div>
<div class="line">        colors.push_back(255); colors.push_back(0); colors.push_back(0); <span class="comment">// red</span></div>
<div class="line">        <a id="_a5" name="_a5"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">GLTFWriter::Texture</a> *bandedTexture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGB, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)colors.size() / 3, &amp;colors[0], <span class="keyword">false</span>);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">        <span class="comment">// generate vertices, and texture coordinates for a ball</span></div>
<div class="line">        std::vector&lt;float&gt; vertices;</div>
<div class="line">        std::vector&lt;unsigned int&gt; lines;</div>
<div class="line">        std::vector&lt;unsigned int&gt; triangles;</div>
<div class="line">        GLTFWriter::Test::MakeSphere(0, -1, 0, 0.5, 64, vertices, lines, triangles);</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numVertices = (<span class="keywordtype">unsigned</span> int)vertices.size() / 3;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numLines = (<span class="keywordtype">unsigned</span> int)lines.size() / 2;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numTriangles = (<span class="keywordtype">unsigned</span> int)triangles.size() / 3;</div>
<div class="line">        std::vector&lt;float&gt; textureCoords(numVertices);</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numVertices; ++i)</div>
<div class="line">            textureCoords[i] = (vertices[3 * i + 2] + 0.5F) * range + mn; <span class="comment">// coordinates go from mn to mx</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// LEGEND</span></div>
<div class="line">            <span class="comment">// make this banded colors</span></div>
<div class="line">            std::vector&lt;float&gt; valueLocation;</div>
<div class="line">            <span class="comment">//valueLocation.push_back(1, mx);</span></div>
<div class="line">            <a id="_a6" name="_a6"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_legend.xhtml">GLTFWriter::Legend</a> *legend = GLTFWriter::Legend::Create(gltf, GLTFWriter::Legend::LO_VERTICAL, 0.75, bandedTexture, mn, mx, GLTFWriter::Legend::LA_X_YCENTER,</div>
<div class="line">#ifdef _WIN32</div>
<div class="line">                                            ConvertToUtf8String(L<span class="stringliteral">&quot;Z Ƥṏᴤΐṱϊӧת\nBanded&quot;</span>).c_str(), </div>
<div class="line">#<span class="keywordflow">else</span></div>
<div class="line">                                            <span class="stringliteral">&quot;Z Position\nBanded&quot;</span>,</div>
<div class="line">#endif</div>
<div class="line">                                            <span class="stringliteral">&quot;m&quot;</span>, <span class="stringliteral">&quot;This is an example\nbanded legend\nX, Y Center&quot;</span>, 6, 0,</div>
<div class="line">                                            <span class="keyword">true</span>, <span class="keyword">false</span>, 0.05F, 0, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.25F);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// BUFFER - combine attributes into a single buffer</span></div>
<div class="line">            <a id="_a7" name="_a7"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer.xhtml">GLTFWriter::Buffer</a> *buffer = GLTFWriter::Buffer::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!buffer) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create buffer&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Banded&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!node || !scene-&gt;<a id="a8" name="a8"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// LEGEND NODE</span></div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, ConvertToUtf8String(L<span class="stringliteral">&quot;Ḷḙḡḗṋḍ&quot;</span>).c_str());</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, <span class="stringliteral">&quot;Legend&quot;</span>);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">            node-&gt;<a id="a9" name="a9"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(legendNode);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *meshNode = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Mesh&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!meshNode || !node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(meshNode)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH</span></div>
<div class="line">            <a id="_a10" name="_a10"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!mesh || !meshNode-&gt;<a id="a11" name="a11"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// TECHNIQUE</span></div>
<div class="line">            <a id="_a12" name="_a12"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">GLTFWriter::Technique</a> *technique = GLTFWriter::Technique::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!technique ||</div>
<div class="line">                <span class="comment">// TECHNIQUE STATES</span></div>
<div class="line">                !technique-&gt;<a id="a13" name="a13"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_DEPTHTESTENABLE, 1))) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create technique&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MATERIAL</span></div>
<div class="line">            <a id="_a14" name="_a14"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">GLTFWriter::Material</a> *material = GLTFWriter::Material::Create(gltf, technique);</div>
<div class="line">            <span class="keywordflow">if</span> (!material ||</div>
<div class="line">                <span class="comment">// MATERIAL UNIFORM VALUES</span></div>
<div class="line">                !material-&gt;<a id="a15" name="a15"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;texture0&quot;</span>, bandedTexture-&gt;GetID()))) { <span class="comment">// texture0 name is auto-generated from Attribute TEXCOORD0</span></div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create material&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// repack unsigned int indices into multiple sets of unsigned short indices</span></div>
<div class="line">            <a id="_a16" name="_a16"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml">GLTFWriter::Utils::Repack</a> *repack = GLTFWriter::Utils::Repack::Create(numTriangles, 3, &amp;triangles[0]);</div>
<div class="line">            <span class="keywordflow">if</span> (!repack) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create repack&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; repack-&gt;<a id="a17" name="a17"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a6ffdc4df86a45edc0766361965452379">NumPacks</a>(); ++i) {</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">float</span> *packedData;</div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numAttributes = repack-&gt;<a id="a18" name="a18"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a7359e2f5626d9910b2cf8532d36248af">NumAttributes</a>(i);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// POSITION ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a id="a19" name="a19"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 3, &amp;vertices[0], i);</div>
<div class="line">                <a id="_a20" name="_a20"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *vertex = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// TEXCOORD ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 1, &amp;textureCoords[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *texture = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// INDICES</span></div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numIndices = 3U * repack-&gt;<a id="a21" name="a21"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#aedafd469169975d688199d864a82a47c">NumElements</a>(i);</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> *packedIndex = repack-&gt;<a id="a22" name="a22"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#ae76c9d67619c7b637ea400fdc9762e69">ConstructRepackIndex</a>(&amp;triangles[0], i);</div>
<div class="line">                <a id="_a23" name="_a23"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">GLTFWriter::Index</a> *index = GLTFWriter::Index::Create(gltf, numIndices, packedIndex, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// PRIMITIVE</span></div>
<div class="line">                <a id="_a24" name="_a24"></a><a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create(gltf, GLTFWriter::Primitive::PT_TRIANGLES, material, index);</div>
<div class="line">                <span class="keywordflow">if</span> (!primitive ||</div>
<div class="line">                    !mesh-&gt;<a id="a25" name="a25"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive) ||</div>
<div class="line">                    !primitive-&gt;<a id="a26" name="a26"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(vertex) ||</div>
<div class="line">                    !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(texture)) {</div>
<div class="line">                    GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">                    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create primitive&quot;</span>);</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// gradient texture</span></div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> mn = -0.5;</div>
<div class="line">        <span class="keywordtype">float</span> mx = 0.5;</div>
<div class="line">        <span class="keywordtype">float</span> range = mx - mn;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TEXTURE</span></div>
<div class="line">        std::vector&lt;unsigned char&gt; colors;</div>
<div class="line">        colors.push_back(0); colors.push_back(0); colors.push_back(255); <span class="comment">// blue</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(255); <span class="comment">// cyan</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(0); <span class="comment">// green</span></div>
<div class="line">        colors.push_back(255); colors.push_back(255); colors.push_back(0); <span class="comment">// yellow</span></div>
<div class="line">        colors.push_back(255); colors.push_back(0); colors.push_back(0); <span class="comment">// red</span></div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">GLTFWriter::Texture</a> *smoothTexture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGB, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)colors.size() / 3, &amp;colors[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// generate vertices, and texture coordinates for a ball</span></div>
<div class="line">        std::vector&lt;float&gt; vertices;</div>
<div class="line">        std::vector&lt;unsigned int&gt; lines;</div>
<div class="line">        std::vector&lt;unsigned int&gt; triangles;</div>
<div class="line">        GLTFWriter::Test::MakeSphere(0, 1, 0, 0.5, 64, vertices, lines, triangles);</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numVertices = (<span class="keywordtype">unsigned</span> int)vertices.size() / 3;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numLines = (<span class="keywordtype">unsigned</span> int)lines.size() / 2;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numTriangles = (<span class="keywordtype">unsigned</span> int)triangles.size() / 3;</div>
<div class="line">        std::vector&lt;float&gt; textureCoords(numVertices);</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numVertices; ++i)</div>
<div class="line">            textureCoords[i] = (vertices[3 * i + 2] + 0.5F) * range + mn; <span class="comment">// coordinates go from mn to mx</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// LEGEND</span></div>
<div class="line">            <span class="comment">// make this gradient colors</span></div>
<div class="line">            std::vector&lt;float&gt; valueLocation;</div>
<div class="line">            <span class="comment">//valueLocation.push_back(1, mx);</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_legend.xhtml">GLTFWriter::Legend</a> *legend = GLTFWriter::Legend::Create(gltf, GLTFWriter::Legend::LO_VERTICAL, 0.333F, smoothTexture, mn, mx, GLTFWriter::Legend::LA_XRIGHT_YCENTER,</div>
<div class="line">#ifdef _WIN32</div>
<div class="line">                                            ConvertToUtf8String(L<span class="stringliteral">&quot;Z Ƥṏᴤΐṱϊӧת\nSmooth&quot;</span>).c_str(),</div>
<div class="line">#<span class="keywordflow">else</span></div>
<div class="line">                                            <span class="stringliteral">&quot;Z Position\nSmooth&quot;</span>,</div>
<div class="line">#endif</div>
<div class="line">                                            <span class="stringliteral">&quot;m&quot;</span>, <span class="stringliteral">&quot;This is an example\ngradient legend\nX Right, Y Center&quot;</span>, 0, 0,</div>
<div class="line">                                            <span class="keyword">false</span>, <span class="keyword">false</span>);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// BUFFER - combine attributes into a single buffer</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer.xhtml">GLTFWriter::Buffer</a> *buffer = GLTFWriter::Buffer::Create(gltf);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Linear&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!node || !scene-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// LEGEND NODE</span></div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, ConvertToUtf8String(L<span class="stringliteral">&quot;Ḷḙḡḗṋḍ&quot;</span>).c_str());</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, <span class="stringliteral">&quot;Legend&quot;</span>);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">            node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(legendNode);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *meshNode = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Mesh&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!meshNode || !node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(meshNode)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!mesh || !meshNode-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// TECHNIQUE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">GLTFWriter::Technique</a> *technique = GLTFWriter::Technique::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!technique ||</div>
<div class="line">                <span class="comment">// TECHNIQUE STATES</span></div>
<div class="line">                !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_DEPTHTESTENABLE, 1))) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create technique&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MATERIAL</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">GLTFWriter::Material</a> *material = GLTFWriter::Material::Create(gltf, technique);</div>
<div class="line">            <span class="keywordflow">if</span> (!material ||</div>
<div class="line">                <span class="comment">// MATERIAL UNIFORM VALUES</span></div>
<div class="line">                !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;texture0&quot;</span>, smoothTexture-&gt;GetID()))) { <span class="comment">// texture0 name is auto-generated from Attribute TEXCOORD0</span></div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create material&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// repack unsigned int indices into multiple sets of unsigned short indices</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml">GLTFWriter::Utils::Repack</a> *repack = GLTFWriter::Utils::Repack::Create(numTriangles, 3, &amp;triangles[0]);</div>
<div class="line">            <span class="keywordflow">if</span> (!repack) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create repack&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a6ffdc4df86a45edc0766361965452379">NumPacks</a>(); ++i) {</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">float</span> *packedData;</div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numAttributes = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a7359e2f5626d9910b2cf8532d36248af">NumAttributes</a>(i);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// POSITION ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 3, &amp;vertices[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *vertex = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// TEXCOORD ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 1, &amp;textureCoords[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *texture = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// INDICES</span></div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numIndices = 3U * repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#aedafd469169975d688199d864a82a47c">NumElements</a>(i);</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> *packedIndex = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#ae76c9d67619c7b637ea400fdc9762e69">ConstructRepackIndex</a>(&amp;triangles[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">GLTFWriter::Index</a> *index = GLTFWriter::Index::Create(gltf, numIndices, packedIndex, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// PRIMITIVE</span></div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create(gltf, GLTFWriter::Primitive::PT_TRIANGLES, material, index);</div>
<div class="line">                <span class="keywordflow">if</span> (!primitive ||</div>
<div class="line">                    !mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive) ||</div>
<div class="line">                    !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(vertex) ||</div>
<div class="line">                    !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(texture)) {</div>
<div class="line">                    GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">                    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create primitive&quot;</span>);</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// banded log texture</span></div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> mn = 10;</div>
<div class="line">        <span class="keywordtype">float</span> mx = 100;</div>
<div class="line">        <span class="keywordtype">float</span> range = mx - mn;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TEXTURE</span></div>
<div class="line">        std::vector&lt;unsigned char&gt; colors;</div>
<div class="line">        colors.push_back(0); colors.push_back(0); colors.push_back(255); <span class="comment">// blue</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(255); <span class="comment">// cyan</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(0); <span class="comment">// green</span></div>
<div class="line">        colors.push_back(255); colors.push_back(255); colors.push_back(0); <span class="comment">// yellow</span></div>
<div class="line">        colors.push_back(255); colors.push_back(0); colors.push_back(0); <span class="comment">// red</span></div>
<div class="line"> </div>
<div class="line">        std::vector&lt;float&gt; bandLocations; <span class="comment">// fractions from 0 to 1</span></div>
<div class="line">        bandLocations.push_back(0);</div>
<div class="line">        bandLocations.push_back(0.064988132F);</div>
<div class="line">        bandLocations.push_back(0.167987381F);</div>
<div class="line">        bandLocations.push_back(0.33123019F);</div>
<div class="line">        bandLocations.push_back(0.589952605F);</div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">GLTFWriter::Texture</a> *bandedTexture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGB, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)colors.size() / 3, &amp;colors[0], <span class="keyword">false</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)bandLocations.size(), &amp;bandLocations[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// generate vertices, and texture coordinates for a ball</span></div>
<div class="line">        std::vector&lt;float&gt; vertices;</div>
<div class="line">        std::vector&lt;unsigned int&gt; lines;</div>
<div class="line">        std::vector&lt;unsigned int&gt; triangles;</div>
<div class="line">        GLTFWriter::Test::MakeSphere(0, 0, -1, 0.5, 64, vertices, lines, triangles);</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numVertices = (<span class="keywordtype">unsigned</span> int)vertices.size() / 3;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numLines = (<span class="keywordtype">unsigned</span> int)lines.size() / 2;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numTriangles = (<span class="keywordtype">unsigned</span> int)triangles.size() / 3;</div>
<div class="line">        std::vector&lt;float&gt; textureCoords(numVertices);</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numVertices; ++i)</div>
<div class="line">            textureCoords[i] = (vertices[3 * i + 1] + 0.5F) * range + mn; <span class="comment">// coordinates go from mn to mx</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// LEGEND</span></div>
<div class="line">            <span class="comment">// make this logarithmic with banded colors</span></div>
<div class="line">            std::vector&lt;float&gt; valueLocations; <span class="comment">// pairs of numbers, both of which are fractions from 0 to 1</span></div>
<div class="line">            valueLocations.push_back(0); valueLocations.push_back(0);</div>
<div class="line">            valueLocations.push_back((15.84893192461114F - mn) / range); valueLocations.push_back(0.2F);</div>
<div class="line">            valueLocations.push_back((25.1188643150958F - mn) / range); valueLocations.push_back(0.4F);</div>
<div class="line">            valueLocations.push_back((39.8107170553498F - mn) / range); valueLocations.push_back(0.6F);</div>
<div class="line">            valueLocations.push_back((63.0957344480194F - mn) / range); valueLocations.push_back(0.8F);</div>
<div class="line">            valueLocations.push_back(1); valueLocations.push_back(1);</div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_legend.xhtml">GLTFWriter::Legend</a> *legend = GLTFWriter::Legend::Create(gltf, GLTFWriter::Legend::LO_HORIZONTAL, 0.75, bandedTexture, mn, mx, GLTFWriter::Legend::LA_XCENTER_YBOTTOM,</div>
<div class="line">#ifdef _WIN32</div>
<div class="line">                                            ConvertToUtf8String(L<span class="stringliteral">&quot;Y Ƥṏᴤΐṱϊӧת\nBanded&quot;</span>).c_str(),</div>
<div class="line">#<span class="keywordflow">else</span></div>
<div class="line">                                            <span class="stringliteral">&quot;Y Position\nBanded&quot;</span>,</div>
<div class="line">#endif</div>
<div class="line">                                            <span class="stringliteral">&quot;m&quot;</span>, <span class="stringliteral">&quot;User specified\nbanded log legend\nX Center, Y Bottom&quot;</span>, 6, &amp;valueLocations[0],</div>
<div class="line">                                            <span class="keyword">false</span>, <span class="keyword">false</span>, 0, 0, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.25F);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// BUFFER - combine attributes into a single buffer</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer.xhtml">GLTFWriter::Buffer</a> *buffer = GLTFWriter::Buffer::Create(gltf);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Banded Log User Specified&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!node || !scene-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// LEGEND NODE</span></div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, ConvertToUtf8String(L<span class="stringliteral">&quot;Ḷḙḡḗṋḍ&quot;</span>).c_str());</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, <span class="stringliteral">&quot;Legend&quot;</span>);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">            node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(legendNode);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *meshNode = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Mesh&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!meshNode || !node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(meshNode)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!mesh || !meshNode-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// TECHNIQUE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">GLTFWriter::Technique</a> *technique = GLTFWriter::Technique::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!technique ||</div>
<div class="line">                <span class="comment">// TECHNIQUE STATES</span></div>
<div class="line">                !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_DEPTHTESTENABLE, 1))) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create technique&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MATERIAL</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">GLTFWriter::Material</a> *material = GLTFWriter::Material::Create(gltf, technique);</div>
<div class="line">            <span class="keywordflow">if</span> (!material ||</div>
<div class="line">                <span class="comment">// MATERIAL UNIFORM VALUES</span></div>
<div class="line">                !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;texture0&quot;</span>, bandedTexture-&gt;GetID()))) { <span class="comment">// texture0 name is auto-generated from Attribute TEXCOORD0</span></div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create material&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// repack unsigned int indices into multiple sets of unsigned short indices</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml">GLTFWriter::Utils::Repack</a> *repack = GLTFWriter::Utils::Repack::Create(numTriangles, 3, &amp;triangles[0]);</div>
<div class="line">            <span class="keywordflow">if</span> (!repack) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create repack&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a6ffdc4df86a45edc0766361965452379">NumPacks</a>(); ++i) {</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">float</span> *packedData;</div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numAttributes = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a7359e2f5626d9910b2cf8532d36248af">NumAttributes</a>(i);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// POSITION ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 3, &amp;vertices[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *vertex = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// TEXCOORD ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 1, &amp;textureCoords[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *texture = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// INDICES</span></div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numIndices = 3U * repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#aedafd469169975d688199d864a82a47c">NumElements</a>(i);</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> *packedIndex = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#ae76c9d67619c7b637ea400fdc9762e69">ConstructRepackIndex</a>(&amp;triangles[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">GLTFWriter::Index</a> *index = GLTFWriter::Index::Create(gltf, numIndices, packedIndex, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// PRIMITIVE</span></div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create(gltf, GLTFWriter::Primitive::PT_TRIANGLES, material, index);</div>
<div class="line">                <span class="keywordflow">if</span> (!primitive ||</div>
<div class="line">                    !mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive) ||</div>
<div class="line">                    !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(vertex) ||</div>
<div class="line">                    !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(texture)) {</div>
<div class="line">                    GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">                    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create primitive&quot;</span>);</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// gradient log texture</span></div>
<div class="line">    <span class="comment">// we need to fudge the texture, because auto generated shaders do not support logging of data</span></div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">float</span> mn = 10;</div>
<div class="line">        <span class="keywordtype">float</span> mx = 100;</div>
<div class="line">        <span class="keywordtype">float</span> range = mx - mn;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// TEXTURE</span></div>
<div class="line">        std::vector&lt;unsigned char&gt; colors;</div>
<div class="line">        colors.push_back(0); colors.push_back(0); colors.push_back(255); <span class="comment">// blue</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(255); <span class="comment">// cyan</span></div>
<div class="line">        colors.push_back(0); colors.push_back(255); colors.push_back(0); <span class="comment">// green</span></div>
<div class="line">        colors.push_back(255); colors.push_back(255); colors.push_back(0); <span class="comment">// yellow</span></div>
<div class="line">        colors.push_back(255); colors.push_back(0); colors.push_back(0); <span class="comment">// red</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// create a gradient texture that is really made up of bands</span></div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numBands = 256;</div>
<div class="line">        std::vector&lt;float&gt; bandLocations; <span class="comment">// fractions from 0 to 1</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numBands; ++i)</div>
<div class="line">            bandLocations.push_back((<span class="keywordtype">float</span>)(pow(10.0, (<span class="keywordtype">double</span>)i / numBands) * 10.0 - mn) / range);</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">GLTFWriter::Texture</a> *smoothTexture = GLTFWriter::Texture::Create(gltf, GLTFWriter::Texture::TF_RGB, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)colors.size() / 3, &amp;colors[0], <span class="keyword">false</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)bandLocations.size(), &amp;bandLocations[0]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// generate vertices, and texture coordinates for a ball</span></div>
<div class="line">        std::vector&lt;float&gt; vertices;</div>
<div class="line">        std::vector&lt;unsigned int&gt; lines;</div>
<div class="line">        std::vector&lt;unsigned int&gt; triangles;</div>
<div class="line">        GLTFWriter::Test::MakeSphere(0, 0, 1, 0.5, 64, vertices, lines, triangles);</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numVertices = (<span class="keywordtype">unsigned</span> int)vertices.size() / 3;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numLines = (<span class="keywordtype">unsigned</span> int)lines.size() / 2;</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numTriangles = (<span class="keywordtype">unsigned</span> int)triangles.size() / 3;</div>
<div class="line">        std::vector&lt;float&gt; textureCoords(numVertices);</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numVertices; ++i)</div>
<div class="line">            textureCoords[i] = (vertices[3 * i + 1] + 0.5F) * range + mn; <span class="comment">// coordinates go from mn to mx</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// NODE</span></div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// LEGEND</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_legend.xhtml">GLTFWriter::Legend</a> *legend = GLTFWriter::Legend::Create(gltf, GLTFWriter::Legend::LO_HORIZONTAL, 0.333F, smoothTexture, mn, mx, GLTFWriter::Legend::LA_XCENTER_YTOP,</div>
<div class="line">#ifdef _WIN32</div>
<div class="line">                                            ConvertToUtf8String(L<span class="stringliteral">&quot;Y Ƥṏᴤΐṱϊӧת\nGradient&quot;</span>).c_str(),</div>
<div class="line">#<span class="keywordflow">else</span></div>
<div class="line">                                            <span class="stringliteral">&quot;Y Position\nGradient&quot;</span>,</div>
<div class="line">#endif</div>
<div class="line">                                            <span class="stringliteral">&quot;m&quot;</span>, <span class="stringliteral">&quot;This is an example\ngradient log legend\nX Center, Y Top&quot;</span>, 0, 0,</div>
<div class="line">                                            <span class="keyword">true</span>, <span class="keyword">true</span>, 0, 0, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.25F);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// BUFFER - combine attributes into a single buffer</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer.xhtml">GLTFWriter::Buffer</a> *buffer = GLTFWriter::Buffer::Create(gltf);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *node = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Gradient Log&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!node || !scene-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">AppendMesh</a>(node)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// LEGEND NODE</span></div>
<div class="line"><span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, ConvertToUtf8String(L<span class="stringliteral">&quot;Ḷḙḡḗṋḍ&quot;</span>).c_str());</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *legendNode = GLTFWriter::Node::CreateLegend(gltf, legend, <span class="stringliteral">&quot;Legend&quot;</span>);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">            node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(legendNode);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH NODE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">GLTFWriter::Node</a> *meshNode = GLTFWriter::Node::CreateMesh(gltf, <span class="stringliteral">&quot;Mesh&quot;</span>);</div>
<div class="line">            <span class="keywordflow">if</span> (!meshNode || !node-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">AppendChild</a>(meshNode)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh node&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MESH</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">GLTFWriter::Mesh</a> *mesh = GLTFWriter::Mesh::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!mesh || !meshNode-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">AppendMesh</a>(mesh)) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create mesh&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// TECHNIQUE</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">GLTFWriter::Technique</a> *technique = GLTFWriter::Technique::Create(gltf);</div>
<div class="line">            <span class="keywordflow">if</span> (!technique ||</div>
<div class="line">                <span class="comment">// TECHNIQUE STATES</span></div>
<div class="line">                !technique-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">AppendState</a>(GLTFWriter::State::Create(gltf, GLTFWriter::State::ST_DEPTHTESTENABLE, 1))) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create technique&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// MATERIAL</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">GLTFWriter::Material</a> *material = GLTFWriter::Material::Create(gltf, technique);</div>
<div class="line">            <span class="keywordflow">if</span> (!material ||</div>
<div class="line">                <span class="comment">// MATERIAL UNIFORM VALUES</span></div>
<div class="line">                !material-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">AppendValue</a>(GLTFWriter::Value::Create(gltf, <span class="stringliteral">&quot;texture0&quot;</span>, smoothTexture-&gt;GetID()))) { <span class="comment">// texture0 name is auto-generated from Attribute TEXCOORD0</span></div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create material&quot;</span>);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// repack unsigned int indices into multiple sets of unsigned short indices</span></div>
<div class="line">            <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml">GLTFWriter::Utils::Repack</a> *repack = GLTFWriter::Utils::Repack::Create(numTriangles, 3, &amp;triangles[0]);</div>
<div class="line">            <span class="keywordflow">if</span> (!repack) {</div>
<div class="line">                GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create repack&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a6ffdc4df86a45edc0766361965452379">NumPacks</a>(); ++i) {</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">float</span> *packedData;</div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numAttributes = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a7359e2f5626d9910b2cf8532d36248af">NumAttributes</a>(i);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// POSITION ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 3, &amp;vertices[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *vertex = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;POSITION&quot;</span>, GLTFWriter::Attribute::AT_FLOAT_VEC3, numAttributes, packedData, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// TEXCOORD ATTRIBUTE</span></div>
<div class="line">                packedData = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ConstructRepackAttribute</a>(&amp;triangles[0], 1, &amp;textureCoords[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">GLTFWriter::Attribute</a> *texture = GLTFWriter::Attribute::Create(gltf, <span class="stringliteral">&quot;TEXCOORD0&quot;</span>, GLTFWriter::Attribute::AT_FLOAT, numAttributes, packedData, buffer);</div>
<div class="line">                texture-&gt;<a id="a27" name="a27"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml#ae5dd11c515ff409ca74e94693f2d1585">SetLogarithmic</a>(<span class="keyword">true</span>);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// INDICES</span></div>
<div class="line">                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numIndices = 3U * repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#aedafd469169975d688199d864a82a47c">NumElements</a>(i);</div>
<div class="line">                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> *packedIndex = repack-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#ae76c9d67619c7b637ea400fdc9762e69">ConstructRepackIndex</a>(&amp;triangles[0], i);</div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">GLTFWriter::Index</a> *index = GLTFWriter::Index::Create(gltf, numIndices, packedIndex, buffer);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// PRIMITIVE</span></div>
<div class="line">                <a class="code hl_class" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">GLTFWriter::Primitive</a> *primitive = GLTFWriter::Primitive::Create(gltf, GLTFWriter::Primitive::PT_TRIANGLES, material, index);</div>
<div class="line">                <span class="keywordflow">if</span> (!primitive ||</div>
<div class="line">                    !mesh-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">AppendPrimitive</a>(primitive) ||</div>
<div class="line">                    !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(vertex) ||</div>
<div class="line">                    !primitive-&gt;<a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">AppendAttribute</a>(texture)) {</div>
<div class="line">                    GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">                    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">                    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Can&#39;t create primitive&quot;</span>);</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            GLTFWriter::Utils::Repack::Destroy(repack);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!gltf-&gt;<a id="a28" name="a28"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">Write</a>()) {</div>
<div class="line">        GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_enumeration" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">GLTFWriter::GLTF::GLTFError</a> error = gltf-&gt;<a id="a29" name="a29"></a><a class="code hl_function" href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">GetError</a>();</div>
<div class="line"> </div>
<div class="line">    GLTFWriter::GLTF::Destroy(gltf);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (error != GLTFWriter::GLTF::GLTF_ERROR_NONE)</div>
<div class="line">        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Error creating file&quot;</span>);</div>
<div class="line">}</div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml">ANSYS::Nexus::GLTFWriter::Attribute</a></div><div class="ttdoc">Attributes define the per element index values for elements defined by Index.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_attribute_8h_source.xhtml#l00031">GLTFAttribute.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute_xhtml_ae5dd11c515ff409ca74e94693f2d1585"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_attribute.xhtml#ae5dd11c515ff409ca74e94693f2d1585">ANSYS::Nexus::GLTFWriter::Attribute::SetLogarithmic</a></div><div class="ttdeci">virtual void SetLogarithmic(bool log)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_buffer.xhtml">ANSYS::Nexus::GLTFWriter::Buffer</a></div><div class="ttdoc">Buffers define files that are used to contain attribute and index data.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_buffer_8h_source.xhtml#l00035">GLTFBuffer.h:36</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_camera.xhtml">ANSYS::Nexus::GLTFWriter::Camera</a></div><div class="ttdoc">Cameras define an orthographic or perspective projection of the scene.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_camera_8h_source.xhtml#l00027">GLTFCamera.h:28</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml">ANSYS::Nexus::GLTFWriter::GLTF</a></div><div class="ttdoc">This is the main class of the GLTFWriter.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00031">GLTFGLTF.h:32</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a7a468ecf1f594b411023782d18f08823"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a7a468ecf1f594b411023782d18f08823">ANSYS::Nexus::GLTFWriter::GLTF::Write</a></div><div class="ttdeci">virtual bool Write(bool formatJSON=false)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_a812b885f21ed48bad70fea6b03e76913"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#a812b885f21ed48bad70fea6b03e76913">ANSYS::Nexus::GLTFWriter::GLTF::GetError</a></div><div class="ttdeci">virtual GLTFError GetError()=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f_xhtml_acf83a4d185d959503cb9f3f2c2e9fafe"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_g_l_t_f.xhtml#acf83a4d185d959503cb9f3f2c2e9fafe">ANSYS::Nexus::GLTFWriter::GLTF::GLTFError</a></div><div class="ttdeci">GLTFError</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_g_l_t_f_8h_source.xhtml#l00035">GLTFGLTF.h:35</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_index.xhtml">ANSYS::Nexus::GLTFWriter::Index</a></div><div class="ttdoc">Indexes define elements within primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_index_8h_source.xhtml#l00028">GLTFIndex.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_legend_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_legend.xhtml">ANSYS::Nexus::GLTFWriter::Legend</a></div><div class="ttdoc">Legends are colored bars with numbers at intervals along bar.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_legend_8h_source.xhtml#l00026">GLTFLegend.h:27</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml">ANSYS::Nexus::GLTFWriter::Material</a></div><div class="ttdoc">Materials describe how primitives are rendered.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_material_8h_source.xhtml#l00029">GLTFMaterial.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material_xhtml_a17160c12f2a00713c522c371a22dbca5"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_material.xhtml#a17160c12f2a00713c522c371a22dbca5">ANSYS::Nexus::GLTFWriter::Material::AppendValue</a></div><div class="ttdeci">virtual bool AppendValue(Value *value)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml">ANSYS::Nexus::GLTFWriter::Mesh</a></div><div class="ttdoc">Meshes define the renderable objects that can be added to a node.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00103">GLTFMesh.h:104</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh_xhtml_a392eddd58e41d83d7df11e7e48ed4798"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_mesh.xhtml#a392eddd58e41d83d7df11e7e48ed4798">ANSYS::Nexus::GLTFWriter::Mesh::AppendPrimitive</a></div><div class="ttdeci">virtual bool AppendPrimitive(Primitive *primitive)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml">ANSYS::Nexus::GLTFWriter::Node</a></div><div class="ttdoc">Nodes are the GLTFWriter class that contain the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_node_8h_source.xhtml#l00030">GLTFNode.h:31</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a29e43db3c3bd933a51c2e99e223e41bd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a29e43db3c3bd933a51c2e99e223e41bd">ANSYS::Nexus::GLTFWriter::Node::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Mesh *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node_xhtml_a85f627158b9e2f1a6565ffe1305e7439"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_node.xhtml#a85f627158b9e2f1a6565ffe1305e7439">ANSYS::Nexus::GLTFWriter::Node::AppendChild</a></div><div class="ttdeci">virtual bool AppendChild(Node *node)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml">ANSYS::Nexus::GLTFWriter::Primitive</a></div><div class="ttdoc">Primitives are the renderable parts of meshes.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_mesh_8h_source.xhtml#l00029">GLTFMesh.h:30</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive_xhtml_a4aae56e343ac5130d42416d2ee4c52e3"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_primitive.xhtml#a4aae56e343ac5130d42416d2ee4c52e3">ANSYS::Nexus::GLTFWriter::Primitive::AppendAttribute</a></div><div class="ttdeci">virtual bool AppendAttribute(Attribute *attribute)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml">ANSYS::Nexus::GLTFWriter::Scene</a></div><div class="ttdoc">Scenes are the GLTFWriter class that create the view of the data that is defined in the GLTF file.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_scene_8h_source.xhtml#l00028">GLTFScene.h:29</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_a032a02e7ff85707f8ae02dce0ec11ce4"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#a032a02e7ff85707f8ae02dce0ec11ce4">ANSYS::Nexus::GLTFWriter::Scene::SetCamera</a></div><div class="ttdeci">virtual bool SetCamera(Node *camera)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene_xhtml_adea272bb6570744737a12f7f639e40fd"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_scene.xhtml#adea272bb6570744737a12f7f639e40fd">ANSYS::Nexus::GLTFWriter::Scene::AppendMesh</a></div><div class="ttdeci">virtual bool AppendMesh(Node *mesh)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml">ANSYS::Nexus::GLTFWriter::Technique</a></div><div class="ttdoc">Techniques performs the rendering of primitives.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_technique_8h_source.xhtml#l00239">GLTFTechnique.h:240</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique_xhtml_a07adefb88b59c6f4b8ec47296ee06f62"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_technique.xhtml#a07adefb88b59c6f4b8ec47296ee06f62">ANSYS::Nexus::GLTFWriter::Technique::AppendState</a></div><div class="ttdeci">virtual bool AppendState(State *state)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_texture.xhtml">ANSYS::Nexus::GLTFWriter::Texture</a></div><div class="ttdoc">Textures are images that can be used to color a primitive.</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_texture_8h_source.xhtml#l00027">GLTFTexture.h:28</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml">ANSYS::Nexus::GLTFWriter::Utils::Repack</a></div><div class="ttdoc">Manages repacking of indices from unsigned int type to unsigned short type. This only works for POINT...</div><div class="ttdef"><b>Definition:</b> <a href="_g_l_t_f_utils_8h_source.xhtml#l00105">GLTFUtils.h:106</a></div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_a365e97b3562b8383ae5734854c979620"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a365e97b3562b8383ae5734854c979620">ANSYS::Nexus::GLTFWriter::Utils::Repack::ConstructRepackAttribute</a></div><div class="ttdeci">virtual const int * ConstructRepackAttribute(const unsigned int *indices, unsigned int attributeSize, const int *attributeData, unsigned int packNum)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_a6ffdc4df86a45edc0766361965452379"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a6ffdc4df86a45edc0766361965452379">ANSYS::Nexus::GLTFWriter::Utils::Repack::NumPacks</a></div><div class="ttdeci">virtual unsigned int NumPacks() const =0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_a7359e2f5626d9910b2cf8532d36248af"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#a7359e2f5626d9910b2cf8532d36248af">ANSYS::Nexus::GLTFWriter::Utils::Repack::NumAttributes</a></div><div class="ttdeci">virtual unsigned int NumAttributes(unsigned int packNum) const =0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_ae76c9d67619c7b637ea400fdc9762e69"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#ae76c9d67619c7b637ea400fdc9762e69">ANSYS::Nexus::GLTFWriter::Utils::Repack::ConstructRepackIndex</a></div><div class="ttdeci">virtual const unsigned short * ConstructRepackIndex(const unsigned int *indices, unsigned int packNum)=0</div></div>
<div class="ttc" id="aclass_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack_xhtml_aedafd469169975d688199d864a82a47c"><div class="ttname"><a href="class_a_n_s_y_s_1_1_nexus_1_1_g_l_t_f_writer_1_1_utils_1_1_repack.xhtml#aedafd469169975d688199d864a82a47c">ANSYS::Nexus::GLTFWriter::Utils::Repack::NumElements</a></div><div class="ttdeci">virtual unsigned int NumElements(unsigned int packNum) const =0</div></div>
</div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
