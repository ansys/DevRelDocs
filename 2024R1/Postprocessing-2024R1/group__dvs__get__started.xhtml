<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Getting started</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li class="current"><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Getting started<div class="ingroups"><a class="el" href="group__dvs__main.xhtml">Dynamic Visualization Store</a></div></div></div>
</div><!--header-->
<div class="contents">
<h2>Starting the Dynamic Visualization Store (DVS) reader with EnSight</h2>
<p>EnSight readers are loaded when loading a file specific for that reader via the file open dialog or from command language. The EnSight Dynamic Visualization Store (DVS) reader's file type is .dvs.</p>
<p>The below text can be put into a .dvs file and loaded via the file-&gt;open dialog in EnSight. You can also go through the <a class="el" href="group__dvs__get__started.xhtml#Running-a-simple-demo">Running a simple demo</a> section which will run an EnSight command file that auto loads the simple_demo.dvs file provided in dvs/demo_files/simple_demo.dvs</p>
<p><b>Note:</b> By default EnSight will not recognize .dvs files. You must first enable the DVS reader in EnSight by going to Edit-&gt;Preferences. Then click on Data. Then in the bottom pane scroll down till you see the DVS reader and check it on.</p>
<blockquote class="doxtable">
<p>&zwj;#!DVS_CASE 1.0<br  />
 SERVER_PORT_BASE=50055<br  />
 SERVER_PORT_MULT=1<br  />
 #CACHE_URI=hdf5://localhost//home/jcheuvro/demo/data<br  />
 #CACHE_URI=hdf5://localhost/D:/temp/ahmed_body_no_compression<br  />
 </p>
</blockquote>
<p>The '#'symbol is used to comment lines out of the file. <br  />
</p>
<p><b>SERVER_PORT_BASE</b>: This specifies the starting port number for servers to use. If running EnSight in SoS mode with 3 servers these servers would use ports 50055, 50056, and 50057 <br  />
</p>
<p><b>SERVER_PORT_MULT</b>: This tells the EnSight servers how to scale the port numbers. If this was set to 2, and the port base was the same as the above example ports used would be 50055, 50057, 50059, etc. <br  />
</p>
<p><b>CACHE_URI</b>: This defines what kind of a cache to use and the location. The above examples both say to use hdf5 files on the localhost in different locations. If the path isn't fully qualified (doesn't start with '/' on Linux/Mac or a drive letter on windows) then it will be assumed to be relative to the location of the .dvs file. <br  />
 </p><hr  />
 <h2>Starting a Dynamic Visualization Store (DVS) server without EnSight Running</h2>
<p><a class="anchor" id="Starting-a-dynamic-visualization-store-server-without-EnSight-running"></a></p>
<h3>Using the C API (for C++ see section below)</h3>
<p>For a working C example please refer to the <a class="el" href="test__dvs__client_8c.xhtml" title="Test client to exercise the C API of the Dynamic Visualization Store API.">dvs/test_dvs_client.c</a> file. The Running a demo without EnSight running section goes through which command line options to use to trigger a DVS server to be ran without EnSight running.</p>
<p>Currently the C API allows for the startup DVS servers without running EnSight by using 5 methods, <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a></code>, <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ae8abdb8455cea44bbd9f509c1a063516" title="Add an option to the server.">dvs_server_set_option()</a></code>, <code>dvs_server_clear_options()</code>, <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start()</a></code>, <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a996a1d0e1696ad7f991e44357d78a422" title="Check to see if a server was started with this server_num.">dvs_server_started()</a></code>, <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad16ba277108c7187b0a11f461b1477ca" title="Shutdown this server thread.">dvs_server_shutdown()</a></code>, and <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac16a3c06bb1968ddba06d83f5e2a1f56" title="Shutdown all server threads.">dvs_server_shutdown_all()</a></code>.</p>
<ol type="1">
<li>Create a server using <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a></code>. This method takes a <code>uri</code>, a <code>server_number</code> and <code>local_ranks</code>.<ol type="a">
<li><code>URI</code>: The URI param specifies the protocol, machine, and port of the server. The URI is of the form <code>protcol://hostname:port</code>.<ol type="i">
<li><code>protocol</code>: Valid protocol value are <code>grpc</code> (which uses grpc communication) or <code>null</code> which uses direct method calls and no network communications. Examples: grpc://localhost:50055, grpc://person.ansys.com:56789, null://</li>
</ol>
</li>
<li><code>server_id</code>: A return value of a dynamically created handle to the server that was created. -1 if it failed to create.</li>
</ol>
</li>
<li>Server Options: The <code>dvs_server_set_options()</code> and <code>dvs_server_clear_options()</code> calls allow you to set specific server key/value pairs before calling <code>dvs_server_start</code>. The current options are:<ol type="a">
<li><code>VERBOSE</code> : Sets the verbosity of the server, set to 3 for decent debug info.</li>
<li><code>CACHE_URI</code> : Set this to specify the cache type, machine, and location of the cache. An example uri would be : <code>hdf5://localhost/D:/temp/testing_no_ensight</code> This tells the cache to use hdf5 files, the cache is on the localhost, and on windows the location of the cache is D:/temp/testing_no_ensight. An example on a linux filesystem would be: <code>hdf5://localhost//home/user/demo/my_dataset</code>. The data for this dataset will be stored in that folder under DVS server created folders.</li>
</ol>
</li>
<li>Starting the server: The method <code>dvs_ret <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start(int32_t server_id, uint32_t server_num, uint32_t local_ranks)</a></code> will start a DVS server in a separate thread. The details of the parameters can be found in <a class="el" href="dynamic__visualization__store__api_8h.xhtml" title="C API for using Dynamic Visualization Store.">dynamic_visualization_store_api.h</a>. <code>server_num</code> is a monotonically increasing number 0 for first, 1 second, 2 third etc. <code>local_ranks</code> specifies how many ranks/ solver nodes will be connecting to this server. Each server is started in its own thread so it can be ran in a separate process from the server node or within the same process.<ol type="a">
<li><code>server_id</code>: The id of the server, dynamically created from the <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> call.</li>
<li><code>server_number</code>: A unique (zero based) number for the server. Each server's server number should be monotonically increasing. Only needed to be set if starting this server locally. Otherwise can be zero.</li>
<li><code>local_ranks</code>: Tells the server how many local ranks this server will be expecting. If using a null tranport protocol this number will probably be 1 unless multi-threading. Only needed to be set if starting the server locally. Otherwise can be zero.</li>
</ol>
</li>
<li>Shutting down the server: The methods <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad16ba277108c7187b0a11f461b1477ca" title="Shutdown this server thread.">dvs_server_shutdown(int32_t server_id)</a></code> and <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac16a3c06bb1968ddba06d83f5e2a1f56" title="Shutdown all server threads.">dvs_server_shutdown_all()</a></code> are used to shutdown specific servers or all servers started by the current process respectively. This should be called before the process shuts down.</li>
</ol>
<p>The overall order of calls is to call <code>dvs_server_set_options()</code> for each server you want to start, then call <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start()</a></code> for each server you'd like to start. After that all calls are as normal detailed in "Using the C API" section. Before shutting down the process you should call <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad16ba277108c7187b0a11f461b1477ca" title="Shutdown this server thread.">dvs_server_shutdown()</a></code> on specific servers or <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac16a3c06bb1968ddba06d83f5e2a1f56" title="Shutdown all server threads.">dvs_server_shutdown_all()</a></code> to cleanup the servers properly. <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a815bb1d2251e35e3bfd3c44a4a338052" title="Shuts down the api, performing any necessary cleanup, also calls dvs_server_shutdown_all() if any ser...">dvs_shutdown()</a></code> will also shutdown all of the servers.</p>
<p><b>Note:</b> Shutting down a server directly after sending an update might cause a loss in data if the data hasn't been written to the cache. Currently giving a few seconds delay should be sufficient. In a future update a call will be available to ask if it is safe to shutdown or not.</p>
<h3>Using the C++ API</h3>
<p>Currently the C++ API allows for creating a <a class="el" href="class_d_v_s_1_1_i_server.xhtml" title="Interface class used to run a dynamic data server in a thread accepting incoming client connections.">DVS::IServer</a> instance which then runs in a separate thread accepting incoming server connections. For a working C++ example please refer to the <a class="el" href="test__dvs__client__cxx_8cpp.xhtml" title="Test client to exercise the C++ API of the Dynamic Visualization Store API.">dvs/test_dvs_client_cxx.cpp</a> file.</p>
<p>Server Usage:</p><ol type="1">
<li>Instantiate <a class="el" href="class_d_v_s_1_1_i_server.xhtml" title="Interface class used to run a dynamic data server in a thread accepting incoming client connections.">DVS::IServer</a> using <a class="el" href="dvs__server__interface_8h.xhtml#a852580b9a49ac305e4ae26ca637bcc75" title="Create a DVS::IServer instance for clients to connect to.">DVS::CREATE_SERVER_INSTANCE()</a> method <br  />
<ol type="a">
<li><code>uri</code>: The URI param specifies the protocol, machine, and port of the server. The URI is of the form <code>protcol://hostname:port</code>.<ol type="i">
<li><code>protocol</code>: Valid protocol value are <code>grpc</code> (which uses grpc communication) or <code>null</code> which uses direct method calls and no network communications. Examples: grpc://localhost:50055, grpc://person.ansys.com:56789, null://</li>
</ol>
</li>
</ol>
</li>
<li>Set options using <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a964b0420773ec5f47dbcea04334ba0d3" title="Set a collection of options on the server. Overwrites previous options See. See Server Options.">DVS::IServer::set_options()</a> or <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c" title="Set a specific option on the server, these are used during startup See See Server Options.">DVS::IServer::set_option()</a>, current options are: <br  />
<ol type="a">
<li><code>VERBOSE</code> : Sets the verbosity of the server, set to 3 for decent debug info.</li>
<li><code>CACHE_URI</code> : Set this to specify the cache type, machine, and location of the cache. An example uri would be : <code>hdf5://localhost/D:/temp/testing_no_ensight</code> This tells the cache to use hdf5 files, the cache is on the localhost, and on windows the location of the cache is D:/temp/testing_no_ensight. An example on a linux filesystem would be: <code>hdf5://localhost//home/user/demo/my_dataset</code>. The data for this dataset will be stored in that folder under DVS server created folders.</li>
</ol>
</li>
<li>Startup server using <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6699cf48b29583ab3391b9b8397e611c" title="Start the server.">DVS::IServer::startup()</a>. A locally run server must be started before creating a client to connect to it. A non local server should not be started. <br  />
<ol type="a">
<li><code>server_number</code>: A unique (zero based) number for the server. Each server's server number should be monotonically increasing. Only needed to be set if starting this server locally. Otherwise can be zero.</li>
<li><code>local_ranks</code>: Tells the server how many local ranks this server will be expecting. If using a null tranport protocol this number will probably be 1 unless multi-threading. Only needed to be set if starting the server locally. Otherwise can be zero.</li>
</ol>
</li>
<li>If needed see if it's running via <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a5fdee3f663dbe7b7dab11621f76737e2" title="Check to see if the server is running.">DVS::IServer::running()</a> <br  />
</li>
<li>Create a client instance using <a class="el" href="dvs__client__interface_8h.xhtml#a2475075c9ab4c2e57a8f0b4ab5bc5df4" title="Factory method to create a dynamic data client interface instance.">DVS::CREATE_CLIENT_INSTANCE()</a></li>
<li>Use <a class="el" href="class_d_v_s_1_1_i_client.xhtml" title="API for solvers to use to send data to EnSight servers.">DVS::IClient</a> instance to send data to dvs server.</li>
<li>Destroy any client instances using <a class="el" href="dvs__client__interface_8h.xhtml#a3f13d009a9a07278cbca3449113d78fc" title="Destruction method for a client created with CREATE_CLIENT_INSTANCE.">DVS::DESTROY_CLIENT_INSTANCE()</a> before destroying the server.</li>
<li>Shutdown server using <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a7ce6bb49a2d383b0821267415a93802d" title="Shutdown the server, also called on server destruction by DVS::DESTROY_SERVER_INSTANCE()">DVS::IServer::shutdown()</a> <br  />
</li>
<li>Destroy instance using <a class="el" href="dvs__server__interface_8h.xhtml#adcdcbab1954ec53631a7136af7fc49b8" title="Destroy the server instance (also shutting it down if needed)">DVS::DESTROY_SERVER_INSTANCE()</a> (this will also shutdown the server)<br  />
</li>
</ol>
<p><b>Note:</b> Shutting down a server directly after sending an update might cause a loss in data if the data hasn't been written to the cache. Currently giving a few seconds delay should be sufficient. In a future update a call will be available to ask if it is safe to shutdown or not.</p>
<hr  />
<p> <a class="anchor" id="Running-a-simple-demo"></a> </p><h2>Running a simple demo</h2>
<p>For this example we will be working out of the folder: [InstallDir]/vXXX/CEI/ensightXXX/src/readers/dvs (XXX refers to the version number, i.e. 211, 212 etc.). Inside of the dvs directory there is a folder called demo_files. These will be used for this demo.</p>
<p><b>Note:</b> Directories/scripts with 212 in their name will change to 212 etc. in newer versions.</p>
<ol type="1">
<li>From a command/cygwin prompt go into the dvs/demo_files directory.</li>
<li>Run ensight <code>[ANSYS_INSTALL_DIR]/vXXX/CEI/bin/ensight -p simple_demo.enc</code> (XXX refers to the version number, i.e. 211, 212 etc.)<ol type="a">
<li>You should see a command prompt open from EnSight that has a line similar to: <code>gRPC Server: APXJCHEUVRO2.win.ansys.com(0.0.0.0):50055</code>, this means the EnSight server is waiting for a DVS server connection.</li>
</ol>
</li>
<li>In a second command/cygwin prompt cd into the dvs/{arch} directory, where {arch} will be linux_2.6_64 or win64 depending on your OS</li>
<li>Run the <code>test_dvs_client</code> (or <code>test_dvs_client.exe</code> on Windows). It should connect and after sending a few timesteps EnSight should display a large cube and now be interactable.<ol type="a">
<li>Use the command line option <code>-h</code> for a list of options to use with the test client.</li>
</ol>
</li>
</ol>
<hr  />
<p> <a class="anchor" id="Simple-demo-with-multi-server"></a> </p><h2>Running a simple demo (multiple EnSight Servers, multiple test clients)</h2>
<ol type="1">
<li>Using the same directories as the simple demo example above start EnSight but this time with the command line <code>[ANSYS_INSTALL_DIR]/vXXX/CEI/bin/ensight -p simple_demo.enc -sos -res sos_3.res</code> (XXX refers to the version number, i.e. 211, 212 etc.)<ol type="a">
<li>This will run EnSight with 3 servers. You'll see multiple command prompts pop up showing similar grpc Server lines, with the ports varying from 50055-50057.</li>
</ol>
</li>
<li>Now run the shell script <code>run_6_solver_demo.sh</code>. This will spawn 6 test_dvs_client processes sending data to the different EnSight servers.<ol type="a">
<li>For a list of command line options run <code>./test_dvs_client -h</code>. These can used on the run_6_solver_demo.sh script as well.</li>
</ol>
</li>
<li>After a few timesteps are sent EnSight should be interactable and look the same as when 1 server was used.<ol type="a">
<li>If you click on the Variable tab on the bottom of the lower left pane you should see a list of Variables/Scalars/Vectors etc.</li>
<li>Expand the Scalars list, and drag the ServerNumber variable into the 3D window and release.</li>
<li>You should now see the geometry colored by which EnSight server handled the geometry</li>
<li>If you drag the elem_scalar_rank variable into the 3D scene the geometry will be colored by which client/rank sent the data.</li>
</ol>
</li>
</ol>
<hr  />
<p> <a class="anchor" id="Simple-demo-without-EnSight-running"></a> </p><h2>Running a demo without EnSight running</h2>
<p>For this example we will be working out of the folder: [InstallDir]/vXXX/CEI/ensightXXX/src/readers/dvs (XXX refers to the version number, i.e. 211, 212 etc.)</p>
<p><b>Note:</b> Directories/scripts with 211 in their name will change to 221 etc. in newer versions.</p>
<ol type="1">
<li>From a command/cygwin into the dvs/{arch} directory, where {arch} will be linux_2.6_64 or win64 depending on your OS</li>
<li>Run the test_dvs_client using <code>test_dvs_client.exe -start 0 -t 2 -server 0 1 3 -cache_uri hdf5://localhost/D:/temp/testing_no_ensight</code> replacing the D:/temp/testing_no_ensight in the -server_uri option with the location of the dataset you want to save<ol type="a">
<li><b>Note:</b> The directory structure needs to exist up to the last folder for now. (D:/temp/ must exist in the example, testing_no_ensight will be created if it doesn't exist). This will recursively create the directory structure in the future.</li>
</ol>
</li>
<li>Now copy the dvs/demo_files/simple_demo.dvs file and edit it<ol type="a">
<li>Uncomment one of the CACHE_URI lines (remove the # from the front) and modify the directory portion of the URI to point to the location of the dataset.</li>
</ol>
</li>
<li>Run EnSight<ol type="a">
<li>Cancel the Welcome dialogue</li>
<li>If this is your first time running this version of EnSight you will need to turn on the DVS reader. Go to Edit-&gt;Preferences, Select Data, then in the bottom pane is a list of visible user defined readers. Scroll down till you see the DVS reader and check it on if it is not already. Then hit close.</li>
<li>Now in the menu run File-&gt;Open and select the copy of the simple_demo.dvs file you modified.</li>
<li>You should now see a large cube of spheres and 2 timesteps.<ol type="i">
<li>In the Parts pane fully expand the groupings (these are set via metadata from the test_dvs_client for test purposes).</li>
<li>Uncheck the "Show" column box for Part 2, Part3-TriQuad and inlet_1.</li>
<li>In the Variables pane you should see a scalar variable called nodal_scalar. Drag and drop this variable onto the 3D window and you should see some interesting colors.</li>
<li>Change timesteps to see the variable change values.</li>
</ol>
</li>
<li>Close EnSight</li>
</ol>
</li>
<li>Now run the test_dvs_client using <code>test_dvs_client.exe -start 2 -t 4 -server 0 1 3 -cache_uri hdf5://localhost/D:/temp/testing_no_ensight</code>, again replacing the D:/temp/testing_no_ensight in the -server_uri option with the location of the dataset you saved. This will append 2 additional timesteps to the dataset.</li>
<li>Re-run step 4 'Run EnSight' above and you should now see 4 timesteps loaded.</li>
</ol>
<hr  />
<p> <a class="anchor" id="Using-secret-keys"></a> </p><h2>Using secret keys</h2>
<p>To protect access to Dynamic Visualization Store (DVS) servers we provide the use of a secret keys.</p>
<p>When starting EnSight there are 2 ways to accomplish this:</p><ol type="1">
<li>Set an environment variable <code>ENSIGHT_SECURITY_TOKEN=my-super-secret-key</code> (set to any string you'd like)</li>
<li>(Not recommended) Run ensight with -s command line option i.e. <code>[ANSYS_INSTALL_DIR]/vXXX/CEI/bin/ensight -s 101</code> (XXX refers to the version number, i.e. 211, 212 etc.)<ol type="a">
<li>This method only accepts a number as input</li>
</ol>
</li>
</ol>
<p><b>This security token will be used for the C&amp;C interface as well as the DVS interfaces to allow connections</b></p>
<p>Now applications using the DVS interface will need to specify the key given to EnSight within the <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a></code> call or in the <code><a class="el" href="dvs__client__interface_8h.xhtml#a2475075c9ab4c2e57a8f0b4ab5bc5df4" title="Factory method to create a dynamic data client interface instance.">DVS::CREATE_CLIENT_INSTANCE()</a></code> factory method. See <code><a class="el" href="dynamic__visualization__store__api_8h.xhtml" title="C API for using Dynamic Visualization Store.">dynamic_visualization_store_api.h</a></code> or <code><a class="el" href="dvs__client__interface_8h.xhtml" title="C++ Client API for using the Dynamic Visualization Store.">dvs_client_interface.h</a></code> for details. </p>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
