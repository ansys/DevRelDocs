<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: DVS Reader</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li class="current"><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">DVS Reader<div class="ingroups"><a class="el" href="group__dvs__main.xhtml">Dynamic Visualization Store</a></div></div></div>
</div><!--header-->
<div class="contents">
<p>The DVS Reader API is an external API to allow applications to read data from a DVS Cache</p>
<p>The API is built around using chained queries and filtering (dvs_filtering_overview) to select what data you are interested in and then iterate over that data. You start with a high level <a class="el" href="class_d_v_s_1_1_i_query.xhtml" title="The query interface for the DVS Reader API.">DVS::IQuery</a>, add filters based on what you are interesting in looking at and then make calls to iterate over the data. The filtering mechanism is used to let you iterate over the data in different axis. Eg. A single part over all of time or all parts over a specific timestep. The filtering also allows for letting you set your parallelism model. I.E. if the data was written with 3 DVS servers you can easily tell it if you want to process all data at once (eg. 1 postprocessing processes) or possibly round robin them (eg. 2 postprocessing processes). This should be clearer in the examples <a class="el" href="group__dvs__reader.xhtml#dvs_reader_examples">DVS Reader Examples</a>.</p>
<hr  />
 <h3>Table of Contents</h3>
<hr  />
<ul>
<li><a class="el" href="group__dvs__reader.xhtml#dvs_reader_data_model">DVS Reader Data Model</a></li>
<li><a class="el" href="group__dvs__reader.xhtml#dvs_reader_examples">DVS Reader Examples</a></li>
</ul>
<hr  />
<hr  />
 <h2><a class="anchor" id="dvs_reader_data_model"></a>
DVS Reader Data Model</h2>
<p>A conceptual view of the DVS Reader data model is below.</p>
<p><img src="dvs_reader_data_model_concept.png" alt="" class="inline" title="DVS Reader Data Model"/></p>
<p>For a high level view of the overall DVS Data model see dvs_data_model. A high level summary is that you start with a <a class="el" href="class_d_v_s_1_1_i_query.xhtml" title="The query interface for the DVS Reader API.">DVS::IQuery</a> object, point it towards a DVS URI, interrogate the data model, set filters, and then begin iterating over <a class="el" href="class_d_v_s_1_1_i_plot_chunk.xhtml" title="Plot Chunk Interface for DVS Reader API.">DVS::IPlotChunk</a>, <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml" title="Mesh Chunk Interface for DVS Reader API.">DVS::IMeshChunk</a>, and <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml" title="Element Block Interface for DVS Reader API.">DVS::IElementBlock</a> objects. The <a class="el" href="class_d_v_s_1_1_i_plot_chunk.xhtml" title="Plot Chunk Interface for DVS Reader API.">DVS::IPlotChunk</a> and <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml" title="Mesh Chunk Interface for DVS Reader API.">DVS::IMeshChunk</a> objects each refer to a unique tuple of {Time,Object,Rank,Chunk} where Object is based on the Part or Plot they refer to.</p>
<p><a class="el" href="class_d_v_s_1_1_i_plot_chunk.xhtml" title="Plot Chunk Interface for DVS Reader API.">DVS::IPlotChunk</a> objects shouldn't need to be split into rank/chunks. Currently EnSight expects to only see one <a class="el" href="class_d_v_s_1_1_i_plot_chunk.xhtml" title="Plot Chunk Interface for DVS Reader API.">DVS::IPlotChunk</a> per time over all ranks/chunks.</p>
<p><a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml" title="Mesh Chunk Interface for DVS Reader API.">DVS::IMeshChunk</a> is a subportion of the mesh and contains methods to get coordinates of the mesh for this chunk and nodal variable data. The elemental connectivity data for the current <a class="el" href="class_d_v_s_1_1_i_mesh_chunk.xhtml" title="Mesh Chunk Interface for DVS Reader API.">DVS::IMeshChunk</a> is stored on an <a class="el" href="class_d_v_s_1_1_i_element_block.xhtml" title="Element Block Interface for DVS Reader API.">DVS::IElementBlock</a> for each element type.</p>
<p><a class="el" href="class_d_v_s_1_1_i_element_block.xhtml" title="Element Block Interface for DVS Reader API.">DVS::IElementBlock</a> contains the connectivity for unstructured meshes (Structured mesh connectivity is implied) and elemental variable data.</p>
<p>All coordinates, connectivity, and variables also contain a hash which can be used for comparison so see if the internal data is different.</p>
<hr  />
 <h1><a class="anchor" id="dvs_reader_getting_started"></a>
Getting started with the DVS Reader API</h1>
<p>The latest stable code and binaries and can be found in <a href="http://canartifactory.ansys.com:8080/artifactory/webapp/#/artifacts/browse/tree/General/CEI_Upload/dvs">Artifactory</a>. They can also be found in the EnSight install under: CEI/ensightXXX/src/readers/dvs if pulling from artifactory make sure to grab the version which matches your EnSight install if using them together.</p>
<p>The binaries to statically link against can be found under either linux_2.6_64 for Linux and win64 for Windows. For the DVS Reader API you will need the libdvsreader.lib/dll or libdvsreader.so depending on the platform.</p>
<p>All the headers needed for the DVS Reader API are under the include directory. The top level header being the <a class="el" href="dvs__query__interface_8h.xhtml" title="DVS Reader API Query Interface.">dvs_query_interface.h</a> which includes the <a class="el" href="class_d_v_s_1_1_i_query.xhtml" title="The query interface for the DVS Reader API.">DVS::IQuery</a> interface.</p>
<p>For examples of using the API refer to <a class="el" href="group__dvs__reader.xhtml#dvs_reader_examples">DVS Reader Examples</a>. </p><hr  />
 <h2><a class="anchor" id="dvs_reader_examples"></a>
DVS Reader Examples</h2>
<h2><a class="anchor" id="dvs_example_hello_world"></a>
Hello World Example</h2>
<p>Simple application to open a cache and iterate over all of the high level information it contains (datasets, timesteps, objects etc.)</p>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="dvs__query__interface_8h.xhtml">dvs_query_interface.h</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="logger__verbose_8h.xhtml">logger_verbose.h</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> logging_function(<span class="keywordtype">void</span>* user_data, <span class="keyword">const</span> <span class="keywordtype">char</span>* message)</div>
<div class="line">{</div>
<div class="line">    fprintf(stdout, message);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> <a class="code hl_function" href="test__dvs__client_8c.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">    std::unique_ptr&lt;<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>, std::function&lt;void(<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>*)&gt;&gt; dataset_query(DVS::CREATE_QUERY_INSTANCE(),</div>
<div class="line">                                                                                  [](<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>* p){p-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a257f79d7de21658c07dc602dfa6bbf34">release</a>();});</div>
<div class="line">    dataset_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#ab6ce54c68281ea1676af650ebc5716a0">set_logger</a>(<span class="keyword">new</span> <a class="code hl_class" href="class_d_v_s_1_1_logger_verbose.xhtml">DVS::LoggerVerbose</a>(<span class="keyword">nullptr</span>, <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#aafcfd80cd55c92c53106bb56fdaf026da95f57c1525070266247b1a687f565f5b">dvs_verbosity::DVS_VERBOSE</a>, &amp;logging_function));</div>
<div class="line">    <span class="comment">//Add a cache uri to open</span></div>
<div class="line">    <span class="keyword">auto</span> err = dataset_query-&gt;add_uri(<span class="stringliteral">&quot;hdf5://localhost/D:/my/cache&quot;</span>);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all of the datasets in the cache</span></div>
<div class="line">    uint32_t num_datasets = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_datasets(num_datasets);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf (stdout, <span class="stringliteral">&quot;Error getting number of datasets\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (uint32_t index = 0; index &lt; num_datasets; index++)</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_dataset.xhtml">DVS::IDataset</a>* dataset = dataset_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#aea688a307b1cb02ae53e0e8fd3791e64">get_dataset</a>(index);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all of the available timesteps</span></div>
<div class="line">    uint32_t num_timesteps = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_timesteps(num_timesteps);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of timesteps\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line">    std::vector&lt;float&gt; timesteps(num_timesteps, 0.f);</div>
<div class="line">    dataset_query-&gt;get_timesteps(timesteps.data());</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all of the ranks</span></div>
<div class="line">    uint32_t num_ranks = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_ranks(num_ranks);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of ranks\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line">    std::vector&lt;uint32_t&gt; global_ranks(num_ranks, 0);</div>
<div class="line">    dataset_query-&gt;get_ranks(global_ranks.data());</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all of the chunks for every rank</span></div>
<div class="line">    uint32_t num_chunks_per_rank = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_chunks_per_rank(num_chunks_per_rank);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of chunks per rank\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line">    std::vector&lt;uint32_t&gt; global_chunk_max(num_chunks_per_rank, 0);</div>
<div class="line">    dataset_query-&gt;get_chunks_per_rank(global_chunk_max.data());</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all of the parts</span></div>
<div class="line">    uint32_t num_parts = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_parts(num_parts);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of parts\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (uint32_t part_index = 0; part_index &lt; num_parts; part_index++) {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* part = dataset_query-&gt;get_part(part_index);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all the plots</span></div>
<div class="line">    uint32_t num_plots = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_plots(num_plots);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of plots\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (uint32_t plot_index = 0; plot_index &lt; num_plots; plot_index++)</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* plot = dataset_query-&gt;get_plot(plot_index);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all the variables</span></div>
<div class="line">    uint32_t num_vars = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_variables(num_vars);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of vars\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_vars; var_index++)</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a>* var = dataset_query-&gt;get_variable(var_index);</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml">DVS::IDataset</a></div><div class="ttdoc">Interface for datasets for the DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__dataset__interface_8h_source.xhtml#l00043">dvs_dataset_interface.h:44</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a></div><div class="ttdoc">Interface for part/plot objects for DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__object__interface_8h_source.xhtml#l00044">dvs_object_interface.h:45</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_aea688a307b1cb02ae53e0e8fd3791e64"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#aea688a307b1cb02ae53e0e8fd3791e64">DVS::IObject::get_dataset</a></div><div class="ttdeci">virtual const DVS::IDataset * get_dataset() const =0</div><div class="ttdoc">Get the reference dataset for this object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a></div><div class="ttdoc">The query interface for the DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__query__interface_8h_source.xhtml#l00076">dvs_query_interface.h:77</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_a257f79d7de21658c07dc602dfa6bbf34"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#a257f79d7de21658c07dc602dfa6bbf34">DVS::IQuery::release</a></div><div class="ttdeci">virtual void release()=0</div><div class="ttdoc">Release the memory of the query.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_ab6ce54c68281ea1676af650ebc5716a0"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#ab6ce54c68281ea1676af650ebc5716a0">DVS::IQuery::set_logger</a></div><div class="ttdeci">virtual void set_logger(DVS::ILogger *logger)=0</div><div class="ttdoc">Set the logger object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a></div><div class="ttdoc">Interface for variables for the DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__var__interface_8h_source.xhtml#l00057">dvs_var_interface.h:58</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_logger_verbose_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_logger_verbose.xhtml">DVS::LoggerVerbose</a></div><div class="ttdoc">Logger class based on verbosity.</div><div class="ttdef"><b>Definition:</b> <a href="logger__verbose_8h_source.xhtml#l00039">logger_verbose.h:40</a></div></div>
<div class="ttc" id="advs__query__interface_8h_xhtml"><div class="ttname"><a href="dvs__query__interface_8h.xhtml">dvs_query_interface.h</a></div><div class="ttdoc">DVS Reader API Query Interface.</div></div>
<div class="ttc" id="adynamic__visualization__store__enums_8h_xhtml_aafcfd80cd55c92c53106bb56fdaf026da95f57c1525070266247b1a687f565f5b"><div class="ttname"><a href="dynamic__visualization__store__enums_8h.xhtml#aafcfd80cd55c92c53106bb56fdaf026da95f57c1525070266247b1a687f565f5b">DVS_VERBOSE</a></div><div class="ttdeci">@ DVS_VERBOSE</div><div class="ttdoc">Displays informational messages, warnings, errors.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__enums_8h_source.xhtml#l00086">dynamic_visualization_store_enums.h:86</a></div></div>
<div class="ttc" id="adynamic__visualization__store__error__codes_8h_xhtml_a83b88ce16159d34fe5ce63e7024462a7"><div class="ttname"><a href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a></div><div class="ttdeci">#define DVS_NONE</div><div class="ttdoc">No detected error has occurred.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__error__codes_8h_source.xhtml#l00099">dynamic_visualization_store_error_codes.h:99</a></div></div>
<div class="ttc" id="alogger__verbose_8h_xhtml"><div class="ttname"><a href="logger__verbose_8h.xhtml">logger_verbose.h</a></div><div class="ttdoc">Verbosity based logger for DVS.</div></div>
<div class="ttc" id="atest__dvs__client_8c_xhtml_a3c04138a5bfe5d72780bb7e82a18e627"><div class="ttname"><a href="test__dvs__client_8c.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a></div><div class="ttdeci">int main(int argc, char **argv)</div><div class="ttdoc">Main method of test client application.</div><div class="ttdef"><b>Definition:</b> <a href="test__dvs__client_8c_source.xhtml#l00052">test_dvs_client.c:52</a></div></div>
</div><!-- fragment --><h2><a class="anchor" id="dvs_example_using_filters"></a>
Using Filters Example</h2>
<p>This is a simple example of filtering down to a specific dataset and part and then iterating over the mesh chunks. Note that since we didn't filter based on time we will find mesh chunks across all of time and will want to look at the time of each mesh chunk returned.</p>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> <a class="code hl_function" href="test__dvs__client_8c.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">    std::unique_ptr&lt;<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>, std::function&lt;void(<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>*)&gt;&gt; dataset_query(DVS::CREATE_QUERY_INSTANCE(),</div>
<div class="line">                                                                                  [](<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>* p){p-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a257f79d7de21658c07dc602dfa6bbf34">release</a>();});</div>
<div class="line">    dataset_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#ab6ce54c68281ea1676af650ebc5716a0">set_logger</a>(<span class="keyword">new</span> <a class="code hl_class" href="class_d_v_s_1_1_logger_verbose.xhtml">DVS::LoggerVerbose</a>(<span class="keyword">nullptr</span>, <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#aafcfd80cd55c92c53106bb56fdaf026da95f57c1525070266247b1a687f565f5b">dvs_verbosity::DVS_VERBOSE</a>, &amp;logging_function));</div>
<div class="line">    <span class="comment">//Add a cache uri to open</span></div>
<div class="line">    <span class="keyword">auto</span> err = dataset_query-&gt;add_uri(<span class="stringliteral">&quot;hdf5://localhost/D:/my/cache&quot;</span>);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Down select to only Parts name Part1 in dataset Dataset1</span></div>
<div class="line">    std::string filter = <span class="stringliteral">&quot;/dataset.name/eq/Dataset1//and/part.name/eq/Part1&quot;</span>;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//child_query will be released when the parent query is released. You can release it</span></div>
<div class="line">    <span class="comment">//early however. If a query has a child it can no longer be modified until the children</span></div>
<div class="line">    <span class="comment">//are all released.</span></div>
<div class="line">    <a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>* child_query = dataset_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a8a810da09342690eb371b324079f206e">filter</a>(filter);</div>
<div class="line">    <span class="keywordflow">if</span> (!child_query) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error creating child query\n&quot;</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    uint32_t num_mesh_chunks = 0;</div>
<div class="line">    err = child_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a0e4ef2e5ffb8a6e3cfe1d1841ef4007b">get_num_mesh_chunks</a>(num_mesh_chunks);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">for</span> (uint32_t index = 0; index &lt; num_mesh_chunks; index++) {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">DVS::IMeshChunk</a>* current_chunk = child_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a00a3a6962690c69ea8cef8815a72c011">get_mesh_chunk</a>(index);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml">DVS::IMeshChunk</a></div><div class="ttdoc">Mesh Chunk Interface for DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__mesh__chunk__interface_8h_source.xhtml#l00048">dvs_mesh_chunk_interface.h:49</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_a00a3a6962690c69ea8cef8815a72c011"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#a00a3a6962690c69ea8cef8815a72c011">DVS::IQuery::get_mesh_chunk</a></div><div class="ttdeci">virtual DVS::IMeshChunk * get_mesh_chunk(uint32_t index)=0</div><div class="ttdoc">Get the mesh chunk based on the index.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_a0e4ef2e5ffb8a6e3cfe1d1841ef4007b"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#a0e4ef2e5ffb8a6e3cfe1d1841ef4007b">DVS::IQuery::get_num_mesh_chunks</a></div><div class="ttdeci">virtual dvs_ret get_num_mesh_chunks(uint32_t &amp;num_mesh_chunks)=0</div><div class="ttdoc">Get the number of mesh chunks for this query.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_a8a810da09342690eb371b324079f206e"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#a8a810da09342690eb371b324079f206e">DVS::IQuery::filter</a></div><div class="ttdeci">virtual DVS::IQuery * filter(const char *filter)=0</div><div class="ttdoc">The filter method will allocate a new chained query with the passed in filter appended to it.</div></div>
</div><!-- fragment --><h2><a class="anchor" id="dvs_example_parallelism"></a>
Setting up for parallel reads of cache</h2>
<p>This is an example of querying a cache for how many servers it was written with and round robining the cache across parallel readers.</p>
<p><b>Server 1 of 2</b> </p><div class="fragment"><div class="line"><span class="keywordtype">int</span> <a class="code hl_function" href="test__dvs__client_8c.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">    std::string cache_uri = hdf5:<span class="comment">//localhost/D:/my/cache;</span></div>
<div class="line">    uint32_t num_servers = 0;</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>* server_query = DVS::CREATE_QUERY_INSTANCE();</div>
<div class="line">        <span class="keyword">auto</span> err = server_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a05dc766c5d6789ca3dcbab72cf4ca4e9">get_num_servers</a>(cache, num_servers);</div>
<div class="line">        <span class="keywordflow">if</span> (err != <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line">            <span class="comment">//There might be an error if the cache uri is invalid or</span></div>
<div class="line">            <span class="comment">//if there is a problem with the cache</span></div>
<div class="line">            fprintf(stdout, <span class="stringliteral">&quot;Error getting number of servers\n&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span> err;</div>
<div class="line">        }</div>
<div class="line">        server_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a257f79d7de21658c07dc602dfa6bbf34">release</a>();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (num_servers == 0 ) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Number of servers should be &gt;= 1);</span></div>
<div class="line"><span class="stringliteral">        return -1;</span></div>
<div class="line"><span class="stringliteral">    }</span></div>
<div class="line"><span class="stringliteral">    else if (num_server == 1) {</span></div>
<div class="line"><span class="stringliteral">        //This isn&#39;t a problem except the round robining won&#39;t work in this example</span></div>
<div class="line"><span class="stringliteral">        //since the second parallel reader won&#39;t get any data.</span></div>
<div class="line"><span class="stringliteral">        fprintf(stdout, &quot;</span>Warning, cache was written with only one server\n<span class="stringliteral">&quot;);</span></div>
<div class="line"><span class="stringliteral">    }</span></div>
<div class="line"><span class="stringliteral"></span> </div>
<div class="line"><span class="stringliteral">    std::unique_ptr&lt;DVS::IQuery, std::function&lt;void(DVS::IQuery*)&gt;&gt; query(DVS::CREATE_QUERY_INSTANCE(),</span></div>
<div class="line"><span class="stringliteral">                                                                                  [](DVS::IQuery* p){p-&gt;release();});</span></div>
<div class="line"><span class="stringliteral">    query-&gt;set_logger(new DVS::LoggerVerbose(nullptr, dvs_verbosity::DVS_VERBOSE, &amp;logging_function));</span></div>
<div class="line"><span class="stringliteral"></span> </div>
<div class="line"><span class="stringliteral">    //Add a cache uri to open</span></div>
<div class="line"><span class="stringliteral">    auto err = query-&gt;add_uri(&quot;</span>hdf5:<span class="comment">//localhost/D:/my/cache&quot;);</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">//reader_number and num_readers should be programatically determined, not hardcoded like this</span></div>
<div class="line">    uint32_t reader_number = 0;</div>
<div class="line">    uint32_t num_readers = 2;</div>
<div class="line">    <span class="comment">//This will round robin the cache folders across readers</span></div>
<div class="line">    <span class="comment">//Setting num_readers = 0 tells the query to read the folder corresponding to reader_number and</span></div>
<div class="line">    <span class="comment">//no others.</span></div>
<div class="line">    query-&gt;set_server_mod(reader_number, num_readers);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all of the parts</span></div>
<div class="line">    uint32_t num_parts = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_parts(num_parts);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of parts\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (uint32_t part_index = 0; part_index &lt; num_parts; part_index++) {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* part = dataset_query-&gt;get_part(part_index);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_a05dc766c5d6789ca3dcbab72cf4ca4e9"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#a05dc766c5d6789ca3dcbab72cf4ca4e9">DVS::IQuery::get_num_servers</a></div><div class="ttdeci">virtual dvs_ret get_num_servers(const char *uri, uint32_t &amp;num_servers)=0</div><div class="ttdoc">Get the num servers object.</div></div>
</div><!-- fragment --><p><b>Server 2 of 2</b> </p><div class="fragment"><div class="line"><span class="keywordtype">int</span> <a class="code hl_function" href="test__dvs__client_8c.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">    std::string cache_uri = hdf5:<span class="comment">//localhost/D:/my/cache;</span></div>
<div class="line">    uint32_t num_servers = 0;</div>
<div class="line">    {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>* server_query = DVS::CREATE_QUERY_INSTANCE();</div>
<div class="line">        <span class="keyword">auto</span> err = server_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a05dc766c5d6789ca3dcbab72cf4ca4e9">get_num_servers</a>(cache, num_servers);</div>
<div class="line">        <span class="keywordflow">if</span> (err != <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line">            <span class="comment">//There might be an error if the cache uri is invalid or</span></div>
<div class="line">            <span class="comment">//if there is a problem with the cache</span></div>
<div class="line">            fprintf(stdout, <span class="stringliteral">&quot;Error getting number of servers\n&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span> err;</div>
<div class="line">        }</div>
<div class="line">        server_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a257f79d7de21658c07dc602dfa6bbf34">release</a>();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (num_servers == 0 ) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Number of servers should be &gt;= 1);</span></div>
<div class="line"><span class="stringliteral">        return -1;</span></div>
<div class="line"><span class="stringliteral">    }</span></div>
<div class="line"><span class="stringliteral">    else if (num_server == 1) {</span></div>
<div class="line"><span class="stringliteral">        //This isn&#39;t a problem except the round robining won&#39;t work in this example</span></div>
<div class="line"><span class="stringliteral">        //since the second parallel reader won&#39;t get any data.</span></div>
<div class="line"><span class="stringliteral">        fprintf(stdout, &quot;</span>Warning, cache was written with only one server\n<span class="stringliteral">&quot;);</span></div>
<div class="line"><span class="stringliteral">    }</span></div>
<div class="line"><span class="stringliteral"></span> </div>
<div class="line"><span class="stringliteral">    std::unique_ptr&lt;DVS::IQuery, std::function&lt;void(DVS::IQuery*)&gt;&gt; query(DVS::CREATE_QUERY_INSTANCE(),</span></div>
<div class="line"><span class="stringliteral">                                                                                  [](DVS::IQuery* p){p-&gt;release();});</span></div>
<div class="line"><span class="stringliteral">    query-&gt;set_logger(new DVS::LoggerVerbose(nullptr, dvs_verbosity::DVS_VERBOSE, &amp;logging_function));</span></div>
<div class="line"><span class="stringliteral"></span> </div>
<div class="line"><span class="stringliteral">    //Add a cache uri to open</span></div>
<div class="line"><span class="stringliteral">    auto err = query-&gt;add_uri(&quot;</span>hdf5:<span class="comment">//localhost/D:/my/cache&quot;);</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">//reader_number and num_readers should be programatically determined, not hardcoded like this</span></div>
<div class="line">    uint32_t reader_number = 1;</div>
<div class="line">    uint32_t num_readers = 2;</div>
<div class="line">    <span class="comment">//This will round robin the cache folders across readers</span></div>
<div class="line">    <span class="comment">//Setting num_readers = 0 tells the query to read the folder corresponding to reader_number and</span></div>
<div class="line">    <span class="comment">//no others.</span></div>
<div class="line">    query-&gt;set_server_mod(reader_number, num_readers);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">//Get all of the parts</span></div>
<div class="line">    uint32_t num_parts = 0;</div>
<div class="line">    err = dataset_query-&gt;get_num_parts(num_parts);</div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line">        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of parts\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> err;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (uint32_t part_index = 0; part_index &lt; num_parts; part_index++) {</div>
<div class="line">        <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* part = dataset_query-&gt;get_part(part_index);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
