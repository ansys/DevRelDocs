<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: D:/Product-src/ensight/client/rpc_interface/shared_memory_image_client_python.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_efb5d67553d49169c49ef58de7241528.xhtml">ensight</a></li><li class="navelem"><a class="el" href="dir_fdd9705442facc8925ef373a77ec3b73.xhtml">client</a></li><li class="navelem"><a class="el" href="dir_015c1e161be69977b413cdd9480f9dc4.xhtml">rpc_interface</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">shared_memory_image_client_python.c</div></div>
</div><!--header-->
<div class="contents">
<a href="shared__memory__image__client__python_8c.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/**************************************************************************</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment"> *</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment"> *   ****************************************</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"> *    Copyright 2020 ANSYS Inc.</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment"> *    All Rights Reserved.</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"> *</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"> *    Restricted Rights Legend</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment"> *</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment"> *    Government is subject to restrictions as</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment"> *    set forth in subdivision [(b)(3)(ii)] of</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"> *    the Rights in Technical Data and Computer</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment"> *    Software clause at 52.227-7013.</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"> *   ****************************************</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment"> *</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"> *************************************************************************/</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">/* Warning this is a HACK to get around Python issues mixing debug modules with</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment"> * release Python builds. */</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="preprocessor">#undef _DEBUG</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="preprocessor">#include &lt;Python.h&gt;</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="preprocessor">#define _DEBUG</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="preprocessor">#include &lt;Python.h&gt;</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="preprocessor">#include &quot;<a class="code" href="shared__memory__image__client__priv_8h.xhtml">shared_memory_image_client_priv.h</a>&quot;</span></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno"><a class="line" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">   30</a></span><span class="preprocessor">#define MAX_STREAMS 50   </span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="keyword">static</span> <a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#af5b8eb2ae90823f10e9a17698ea80749">SharedMemoryImageStream</a> streamlist[<a class="code hl_define" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a>] = { 0 };   </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span><span class="preprocessor">#ifdef DOXYGEN</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="shared__memory__image__client__python_8c.xhtml#a68584fd5e8630714c738fc30ad19fa03">   95</a></span>stream_id <a class="code hl_function" href="shared__memory__image__client__python_8c.xhtml#a68584fd5e8630714c738fc30ad19fa03">stream_create</a>(str filename, <span class="keywordtype">int</span> options=<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#a7fbe522f7a46875a755f07c8ff69e2df">IMAGESTREAM_OPTIONS_NONE</a>);</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno"><a class="line" href="shared__memory__image__client__python_8c.xhtml#ac78db99f06d47f7718fdcac4ae3cc374">  107</a></span>frame <a class="code hl_function" href="shared__memory__image__client__python_8c.xhtml#ac78db99f06d47f7718fdcac4ae3cc374">stream_lock</a>(stream_id <span class="keywordtype">id</span>);</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="shared__memory__image__client__python_8c.xhtml#a233ea80003a929e8e60aabd26a3b5c5e">  119</a></span><a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> <a class="code hl_function" href="shared__memory__image__client__python_8c.xhtml#a233ea80003a929e8e60aabd26a3b5c5e">stream_unlock</a>(stream_id <span class="keywordtype">id</span>);</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="shared__memory__image__client__python_8c.xhtml#af656cd2bf739307f1d52221d49da37ae">  129</a></span><a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> <a class="code hl_function" href="shared__memory__image__client__python_8c.xhtml#af656cd2bf739307f1d52221d49da37ae">stream_destroy</a>(stream_id <span class="keywordtype">id</span>);</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno"><a class="line" href="shared__memory__image__client__python_8c.xhtml#a23b3d9929aaff2a388402452ce5228c1">  145</a></span><a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> <a class="code hl_function" href="shared__memory__image__client__python_8c.xhtml#a23b3d9929aaff2a388402452ce5228c1">stream_putframe</a>(stream_id <span class="keywordtype">id</span>, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, <span class="keywordtype">int</span> framenumber, bytes pixeldata);</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span><span class="comment">/* Utility functions PyDict_SetItemString with DECREF */</span></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span><span class="keyword">static</span> <span class="keywordtype">int</span> PyDict_SetItemString_DECREF(PyObject *dict, <span class="keyword">const</span> <span class="keywordtype">char</span> *key, PyObject *val)</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>{</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    <span class="keywordtype">int</span> ret = PyDict_SetItemString(dict, key, val);</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    <span class="keywordflow">if</span> (ret == 0) Py_DECREF(val);</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    <span class="keywordflow">return</span>(ret);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>}</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span><span class="comment">// Given an error code, return the code or raise an exception</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="keyword">static</span> PyObject *return_error(<span class="keywordtype">int</span> err)</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>{</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>    <span class="keywordflow">if</span> (err &gt;= <a class="code hl_define" href="shared__memory__image__client_8h.xhtml#af995dd87ffd7dd178eef1d343f7b72bf">IMAGESTREAM_NOERROR</a>) {</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>        <span class="keywordflow">return</span> PyLong_FromLong(err);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>    }</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    PyErr_SetString(PyExc_RuntimeError, <a class="code hl_function" href="shared__memory__image__client_8h.xhtml#a16abb961cf38273321e81cc64d71fad7">SharedMemoryImageStream_errorstring</a>(err));</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>}</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span><span class="keyword">static</span> PyObject *Py_stream_create(PyObject *self, PyObject *args, PyObject *keywds)</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>{</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    <span class="keywordtype">char</span> *filename = NULL;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>    uint32_t options = 0;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *kwlist[] = { <span class="stringliteral">&quot;filename&quot;</span>, <span class="stringliteral">&quot;options&quot;</span>, NULL };</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    <span class="keywordflow">if</span> (!PyArg_ParseTupleAndKeywords(args, keywds, (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;s|i&quot;</span>, (<span class="keywordtype">char</span> **)kwlist,</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>        &amp;filename, &amp;options)) <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    int32_t stream_id = -1;</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code hl_define" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a>; i++) {</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>        <span class="keywordflow">if</span> (!streamlist[i]) {</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>            stream_id = i;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>        }</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    <span class="keywordflow">if</span> (stream_id == -1) {</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Maximum number of simultaneous streams open&quot;</span>);</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    }</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    <a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#af5b8eb2ae90823f10e9a17698ea80749">SharedMemoryImageStream</a> stream;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    <a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> err = <a class="code hl_function" href="shared__memory__image__client_8h.xhtml#a03ba052ae823b3e39fef153db8f03ea2">SharedMemoryImageStream_create</a>(filename, options, &amp;stream);</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    <span class="keywordflow">if</span> (err != <a class="code hl_define" href="shared__memory__image__client_8h.xhtml#af995dd87ffd7dd178eef1d343f7b72bf">IMAGESTREAM_NOERROR</a>) {</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>        <span class="keywordflow">return</span> return_error(err);</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    }</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    streamlist[stream_id] = stream;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    <span class="keywordflow">return</span> PyLong_FromLong(stream_id);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>}</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span><span class="keyword">static</span> PyObject *Py_stream_lock(PyObject *self, PyObject *args, PyObject *keywds)</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>{</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>    int32_t stream_id = -1;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *kwlist[] = { <span class="stringliteral">&quot;stream_id&quot;</span>, NULL };</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    <span class="keywordflow">if</span> (!PyArg_ParseTupleAndKeywords(args, keywds, (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;i&quot;</span>, (<span class="keywordtype">char</span> **)kwlist,</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>        &amp;stream_id)) <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    <span class="keywordflow">if</span> ((stream_id &lt; 0) || (stream_id &gt;= <a class="code hl_define" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a>) || !streamlist[stream_id]) {</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Unknown stream id&quot;</span>);</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>    }</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    <a class="code hl_struct" href="struct___shared_memory_frame.xhtml">SharedMemoryFrame</a> frame;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>    <a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> err = <a class="code hl_function" href="shared__memory__image__client_8h.xhtml#afefb8f5297147640b46d1f9eb1e77c9e">SharedMemoryImageStream_lock</a>(streamlist[stream_id], &amp;frame);</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    <span class="keywordflow">if</span> (err != <a class="code hl_define" href="shared__memory__image__client_8h.xhtml#af995dd87ffd7dd178eef1d343f7b72bf">IMAGESTREAM_NOERROR</a>) {</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>        <span class="keywordflow">return</span> return_error(err);</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    }</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>    PyObject *ret = PyDict_New();</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>    PyDict_SetItemString_DECREF(ret, <span class="stringliteral">&quot;width&quot;</span>, PyLong_FromLong(frame-&gt;<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a6d26bbffc622333b9f11fbadecbd6f21">iWidth</a>));</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>    PyDict_SetItemString_DECREF(ret, <span class="stringliteral">&quot;height&quot;</span>, PyLong_FromLong(frame-&gt;<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#ab21b6d402e01098565be5024de341ec7">iHeight</a>));</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>    PyDict_SetItemString_DECREF(ret, <span class="stringliteral">&quot;framenumber&quot;</span>, PyLong_FromLong(frame-&gt;<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a412d63c3ef8e7417be98997f72f3b0e5">iFrame</a>));</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>    PyDict_SetItemString_DECREF(ret, <span class="stringliteral">&quot;pixeldata&quot;</span>, PyBytes_FromStringAndSize(frame-&gt;<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a7cff19a44525e74c5800b1e2f9e4cc98">buffer</a>,</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>        frame-&gt;<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a6d26bbffc622333b9f11fbadecbd6f21">iWidth</a>*3*frame-&gt;<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#ab21b6d402e01098565be5024de341ec7">iHeight</a>));</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>    <span class="keywordflow">return</span> ret;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>}</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span><span class="keyword">static</span> PyObject *Py_stream_unlock(PyObject *self, PyObject *args, PyObject *keywds)</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>{</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>    int32_t stream_id = -1;</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *kwlist[] = { <span class="stringliteral">&quot;stream_id&quot;</span>, NULL };</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>    <span class="keywordflow">if</span> (!PyArg_ParseTupleAndKeywords(args, keywds, (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;i&quot;</span>, (<span class="keywordtype">char</span> **)kwlist,</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>        &amp;stream_id)) <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>    <span class="keywordflow">if</span> ((stream_id &lt; 0) || (stream_id &gt;= <a class="code hl_define" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a>) || !streamlist[stream_id]) {</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Unknown stream id&quot;</span>);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    }</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>    <a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> err = <a class="code hl_function" href="shared__memory__image__client_8h.xhtml#ac885e449551afd5fb5a7f19c5ec785a6">SharedMemoryImageStream_unlock</a>(streamlist[stream_id]);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    <span class="keywordflow">return</span> return_error(err);</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>}</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span><span class="keyword">static</span> PyObject *Py_stream_putframe(PyObject *self, PyObject *args, PyObject *keywds)</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>{</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>    int32_t stream_id = -1;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>    int32_t iWidth = 0;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    int32_t iHeight = 0;</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>    uint32_t iFrame = 0;</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    PyObject *pData = NULL;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *kwlist[] = { <span class="stringliteral">&quot;stream_id&quot;</span>, <span class="stringliteral">&quot;width&quot;</span>, <span class="stringliteral">&quot;height&quot;</span>, <span class="stringliteral">&quot;framenumber&quot;</span>, <span class="stringliteral">&quot;pixeldata&quot;</span>, NULL };</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    <span class="keywordflow">if</span> (!PyArg_ParseTupleAndKeywords(args, keywds, (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;iiiiO&quot;</span>, (<span class="keywordtype">char</span> **)kwlist,</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>        &amp;stream_id, &amp;iWidth, &amp;iHeight, &amp;iFrame, &amp;pData)) <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>    <span class="keywordflow">if</span> ((stream_id &lt; 0) || (stream_id &gt;= <a class="code hl_define" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a>) || !streamlist[stream_id]) {</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Unknown stream id&quot;</span>);</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    }</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>    int32_t frame_size = iWidth * iHeight * 3;</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>    <span class="keywordflow">if</span> (frame_size &lt; 1) {</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Invalid frame size&quot;</span>);</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>    }</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    <span class="keywordflow">if</span> (!PyBytes_Check(pData)) {</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Pixeldata must be a bytes object&quot;</span>);</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>    }</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>    Py_ssize_t data_size = PyBytes_Size(pData);</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>    <span class="keywordflow">if</span> (data_size &lt; frame_size) {</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Pixeldata is too small for specified frame size&quot;</span>);</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>    }</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>    <span class="keyword">struct </span><a class="code hl_struct" href="struct___shared_memory_frame.xhtml">_SharedMemoryFrame</a> frame;</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>    frame.<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a412d63c3ef8e7417be98997f72f3b0e5">iFrame</a> = <a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a412d63c3ef8e7417be98997f72f3b0e5">iFrame</a>;</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>    frame.<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a6d26bbffc622333b9f11fbadecbd6f21">iWidth</a> = <a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a6d26bbffc622333b9f11fbadecbd6f21">iWidth</a>;</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>    frame.<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#ab21b6d402e01098565be5024de341ec7">iHeight</a> = <a class="code hl_variable" href="struct___shared_memory_frame.xhtml#ab21b6d402e01098565be5024de341ec7">iHeight</a>;</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>    frame.<a class="code hl_variable" href="struct___shared_memory_frame.xhtml#a7cff19a44525e74c5800b1e2f9e4cc98">buffer</a> = PyBytes_AsString(pData);</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>    <a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> err = <a class="code hl_function" href="shared__memory__image__client__priv_8h.xhtml#abe3cb5374af97eeccf691864f6e2b2ad">SharedMemoryImageStream_putframe</a>(streamlist[stream_id], &amp;frame);</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>    <span class="keywordflow">return</span> return_error(err);</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>}</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span> </div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span><span class="keyword">static</span> PyObject *Py_stream_destroy(PyObject *self, PyObject *args, PyObject *keywds)</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>{</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>    int32_t stream_id = -1;</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *kwlist[] = { <span class="stringliteral">&quot;stream_id&quot;</span>, NULL };</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    <span class="keywordflow">if</span> (!PyArg_ParseTupleAndKeywords(args, keywds, (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;i&quot;</span>, (<span class="keywordtype">char</span> **)kwlist,</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>        &amp;stream_id)) <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>    <span class="keywordflow">if</span> ((stream_id &lt; 0) || (stream_id &gt;= <a class="code hl_define" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a>) || !streamlist[stream_id]) {</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>        PyErr_SetString(PyExc_RuntimeError, <span class="stringliteral">&quot;Unknown stream id&quot;</span>);</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>    }    </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    <a class="code hl_typedef" href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a> err = <a class="code hl_function" href="shared__memory__image__client_8h.xhtml#a4ea47b6bda387b71ed5f91db329eff65">SharedMemoryImageStream_destroy</a>(streamlist[stream_id]);</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>    streamlist[stream_id] = NULL;</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>    <span class="keywordflow">return</span> return_error(err);</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>}</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span> </div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span><span class="keyword">static</span> <span class="keywordtype">void</span> stream_python_shutdown(<span class="keywordtype">void</span>)</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>{</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code hl_define" href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a>; i++) {</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>        <span class="keywordflow">if</span> (streamlist[i]) <a class="code hl_function" href="shared__memory__image__client_8h.xhtml#a4ea47b6bda387b71ed5f91db329eff65">SharedMemoryImageStream_destroy</a>(streamlist[i]);</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>        streamlist[i] = NULL;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>    }</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>}</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span> </div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span><span class="comment">/* Module definition */</span></div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span><span class="keyword">static</span> PyObject *pmodule = NULL;</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span><span class="keyword">static</span> PyMethodDef py_methods[] = {</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>    {(<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;stream_create&quot;</span>, (PyCFunction)Py_stream_create, METH_VARARGS | METH_KEYWORDS, </div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>     (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;Create a new shared memory image stream&quot;</span>},</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>    {(<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;stream_lock&quot;</span>, (PyCFunction)Py_stream_lock, METH_VARARGS | METH_KEYWORDS,</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>     (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;Lock and return the next image from an image stream&quot;</span>},</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>    {(<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;stream_unlock&quot;</span>, (PyCFunction)Py_stream_unlock, METH_VARARGS | METH_KEYWORDS,</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>     (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;Release the lock on an image stream&quot;</span>},</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>    {(<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;stream_putframe&quot;</span>, (PyCFunction)Py_stream_putframe, METH_VARARGS | METH_KEYWORDS,</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>     (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;Push a new frame into the image stream&quot;</span>},</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>    {(<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;stream_destroy&quot;</span>, (PyCFunction)Py_stream_destroy, METH_VARARGS | METH_KEYWORDS,</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>     (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;Destroy an image stream&quot;</span>},</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>    {NULL, NULL, 0, NULL}</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>};</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span><span class="preprocessor">#if PY_MAJOR_VERSION &gt;= 3</span></div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span> </div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span><span class="keyword">static</span> <span class="keyword">struct </span>PyModuleDef moduledef = {</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>        PyModuleDef_HEAD_INIT,</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>        <span class="stringliteral">&quot;ensight_grpc_shmem&quot;</span>,</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>        <span class="stringliteral">&quot;EnSight gRPC shared memory image stream&quot;</span>,</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>        -1,</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>        py_methods,</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>        NULL,                <span class="comment">/* m_reload */</span></div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>        NULL,                <span class="comment">/* m_traverse */</span></div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>        NULL,                <span class="comment">/* m_clear */</span></div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>        NULL,                <span class="comment">/* m_free */</span></div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>};</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span> </div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>PyMODINIT_FUNC PyInit_ensight_grpc_shmem()</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>{</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>    pmodule = PyModule_Create(&amp;moduledef);</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>PyMODINIT_FUNC initensight_grpc_shmem()</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>{</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>    pmodule = Py_InitModule3(<span class="stringliteral">&quot;ensight_grpc_shmem&quot;</span>, py_methods, <span class="stringliteral">&quot;EnSight gRPC shared memory image stream&quot;</span>);</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span> </div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>    <span class="comment">// Common (2 &amp; 3) code starts here -------------------------------------------------</span></div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>    PyModule_AddStringConstant(pmodule, <span class="stringliteral">&quot;version&quot;</span>, <a class="code hl_define" href="shared__memory__image__client_8h.xhtml#a64df229b0ac6942d9bdee4b94b2c096a">IMAGESTREAM_API_VERSION</a>);</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span> </div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;OPTIONS_NONE&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#a7fbe522f7a46875a755f07c8ff69e2df">IMAGESTREAM_OPTIONS_NONE</a>);</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;OPTIONS_SERVER&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client__priv_8h.xhtml#aa87740042e4f5882fa4c990a6528c2e3">IMAGESTREAM_OPTIONS_SERVER</a>);</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;OPTIONS_FLIPVERTICAL&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#a536935e36e51aade42c2a49f8ecd7ae1">IMAGESTREAM_OPTIONS_FLIPVERTICAL</a>);</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;ERROR_NOERROR&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#af995dd87ffd7dd178eef1d343f7b72bf">IMAGESTREAM_NOERROR</a>);</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;ERROR_NO_BUFFERAVAILABLE&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#a78414d594aa9bb3f9bcea84c768d2826">IMAGESTREAM_NO_BUFFERAVAILABLE</a>);</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;ERROR_NO_FRAMEAVAILABLE&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#a7a7491d1019b67d55ac6488c0e3cb637">IMAGESTREAM_NO_FRAMEAVAILABLE</a>);</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;ERROR_RECONNECTING&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#aa17e85c9001e414b9ac1db640884b944">IMAGESTREAM_RECONNECTING</a>);</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>    PyModule_AddIntConstant(pmodule, <span class="stringliteral">&quot;ERROR_UNCONNECTED&quot;</span>, (<span class="keywordtype">int</span>)<a class="code hl_define" href="shared__memory__image__client_8h.xhtml#a2cc13f7eda736fddce876cf5cae2c502">IMAGESTREAM_UNCONNECTED</a>);</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>    <span class="comment">/* cleanup on exit */</span></div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>    Py_AtExit(stream_python_shutdown);</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>    <span class="comment">// Common (2 &amp; 3) code ends here -------------------------------------------------</span></div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span> </div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span><span class="preprocessor">#if PY_MAJOR_VERSION &gt;= 3</span></div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>    <span class="keywordflow">return</span> pmodule;</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>}</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>}</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span> </div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a03ba052ae823b3e39fef153db8f03ea2"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a03ba052ae823b3e39fef153db8f03ea2">SharedMemoryImageStream_create</a></div><div class="ttdeci">SharedMemoryImageError SharedMemoryImageStream_create(const char *filename, uint32_t options, SharedMemoryImageStream *stream)</div><div class="ttdoc">SharedMemoryImageStream_create create a stream client instance.</div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a0496a9a3db499fa9145fe97d2e6dae9a"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a0496a9a3db499fa9145fe97d2e6dae9a">SharedMemoryImageError</a></div><div class="ttdeci">int SharedMemoryImageError</div><div class="ttdoc">common error codes see the non-hex, non-string IMAGESTREAM macros</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00109">shared_memory_image_client.h:109</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a16abb961cf38273321e81cc64d71fad7"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a16abb961cf38273321e81cc64d71fad7">SharedMemoryImageStream_errorstring</a></div><div class="ttdeci">const char * SharedMemoryImageStream_errorstring(SharedMemoryImageError err)</div><div class="ttdoc">SharedMemoryImageStream_errorstring convert an error code into a human string.</div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a2cc13f7eda736fddce876cf5cae2c502"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a2cc13f7eda736fddce876cf5cae2c502">IMAGESTREAM_UNCONNECTED</a></div><div class="ttdeci">#define IMAGESTREAM_UNCONNECTED</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00084">shared_memory_image_client.h:84</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a4ea47b6bda387b71ed5f91db329eff65"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a4ea47b6bda387b71ed5f91db329eff65">SharedMemoryImageStream_destroy</a></div><div class="ttdeci">SharedMemoryImageError SharedMemoryImageStream_destroy(SharedMemoryImageStream stream)</div><div class="ttdoc">SharedMemoryImageStream_destroy destroy a stream interface, releasing its resources.</div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a536935e36e51aade42c2a49f8ecd7ae1"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a536935e36e51aade42c2a49f8ecd7ae1">IMAGESTREAM_OPTIONS_FLIPVERTICAL</a></div><div class="ttdeci">#define IMAGESTREAM_OPTIONS_FLIPVERTICAL</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00105">shared_memory_image_client.h:105</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a64df229b0ac6942d9bdee4b94b2c096a"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a64df229b0ac6942d9bdee4b94b2c096a">IMAGESTREAM_API_VERSION</a></div><div class="ttdeci">#define IMAGESTREAM_API_VERSION</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00081">shared_memory_image_client.h:81</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a78414d594aa9bb3f9bcea84c768d2826"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a78414d594aa9bb3f9bcea84c768d2826">IMAGESTREAM_NO_BUFFERAVAILABLE</a></div><div class="ttdeci">#define IMAGESTREAM_NO_BUFFERAVAILABLE</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00087">shared_memory_image_client.h:87</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a7a7491d1019b67d55ac6488c0e3cb637"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a7a7491d1019b67d55ac6488c0e3cb637">IMAGESTREAM_NO_FRAMEAVAILABLE</a></div><div class="ttdeci">#define IMAGESTREAM_NO_FRAMEAVAILABLE</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00086">shared_memory_image_client.h:86</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_a7fbe522f7a46875a755f07c8ff69e2df"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#a7fbe522f7a46875a755f07c8ff69e2df">IMAGESTREAM_OPTIONS_NONE</a></div><div class="ttdeci">#define IMAGESTREAM_OPTIONS_NONE</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00103">shared_memory_image_client.h:103</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_aa17e85c9001e414b9ac1db640884b944"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#aa17e85c9001e414b9ac1db640884b944">IMAGESTREAM_RECONNECTING</a></div><div class="ttdeci">#define IMAGESTREAM_RECONNECTING</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00085">shared_memory_image_client.h:85</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_ac885e449551afd5fb5a7f19c5ec785a6"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#ac885e449551afd5fb5a7f19c5ec785a6">SharedMemoryImageStream_unlock</a></div><div class="ttdeci">SharedMemoryImageError SharedMemoryImageStream_unlock(SharedMemoryImageStream stream)</div><div class="ttdoc">SharedMemoryImageStream_unlock release a frame obtained by SharedMemoryImageStream_lock.</div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_af5b8eb2ae90823f10e9a17698ea80749"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#af5b8eb2ae90823f10e9a17698ea80749">SharedMemoryImageStream</a></div><div class="ttdeci">struct _SharedMemoryImageStream * SharedMemoryImageStream</div><div class="ttdoc">image transport stream pointer</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00111">shared_memory_image_client.h:111</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_af995dd87ffd7dd178eef1d343f7b72bf"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#af995dd87ffd7dd178eef1d343f7b72bf">IMAGESTREAM_NOERROR</a></div><div class="ttdeci">#define IMAGESTREAM_NOERROR</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00088">shared_memory_image_client.h:88</a></div></div>
<div class="ttc" id="ashared__memory__image__client_8h_xhtml_afefb8f5297147640b46d1f9eb1e77c9e"><div class="ttname"><a href="shared__memory__image__client_8h.xhtml#afefb8f5297147640b46d1f9eb1e77c9e">SharedMemoryImageStream_lock</a></div><div class="ttdeci">SharedMemoryImageError SharedMemoryImageStream_lock(SharedMemoryImageStream stream, SharedMemoryFrame *frame)</div><div class="ttdoc">SharedMemoryImageStream_lock get a frame of pixels from the server.</div></div>
<div class="ttc" id="ashared__memory__image__client__priv_8h_xhtml"><div class="ttname"><a href="shared__memory__image__client__priv_8h.xhtml">shared_memory_image_client_priv.h</a></div><div class="ttdoc">C API the shared memory image transport API server interface.</div></div>
<div class="ttc" id="ashared__memory__image__client__priv_8h_xhtml_aa87740042e4f5882fa4c990a6528c2e3"><div class="ttname"><a href="shared__memory__image__client__priv_8h.xhtml#aa87740042e4f5882fa4c990a6528c2e3">IMAGESTREAM_OPTIONS_SERVER</a></div><div class="ttdeci">#define IMAGESTREAM_OPTIONS_SERVER</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client__priv_8h_source.xhtml#l00135">shared_memory_image_client_priv.h:135</a></div></div>
<div class="ttc" id="ashared__memory__image__client__priv_8h_xhtml_abe3cb5374af97eeccf691864f6e2b2ad"><div class="ttname"><a href="shared__memory__image__client__priv_8h.xhtml#abe3cb5374af97eeccf691864f6e2b2ad">SharedMemoryImageStream_putframe</a></div><div class="ttdeci">DEV SharedMemoryImageError SharedMemoryImageStream_putframe(SharedMemoryImageStream stream, SharedMemoryFrame frame)</div><div class="ttdoc">SharedMemoryImageStream_putframe push a new image into a server image stream channel.</div></div>
<div class="ttc" id="ashared__memory__image__client__python_8c_xhtml_a233ea80003a929e8e60aabd26a3b5c5e"><div class="ttname"><a href="shared__memory__image__client__python_8c.xhtml#a233ea80003a929e8e60aabd26a3b5c5e">stream_unlock</a></div><div class="ttdeci">SharedMemoryImageError stream_unlock(stream_id id)</div><div class="ttdoc">Unlock the frame allocated by stream_lock().</div></div>
<div class="ttc" id="ashared__memory__image__client__python_8c_xhtml_a23b3d9929aaff2a388402452ce5228c1"><div class="ttname"><a href="shared__memory__image__client__python_8c.xhtml#a23b3d9929aaff2a388402452ce5228c1">stream_putframe</a></div><div class="ttdeci">SharedMemoryImageError stream_putframe(stream_id id, int width, int height, int framenumber, bytes pixeldata)</div><div class="ttdoc">Push an image into the shared memory transport buffer.</div></div>
<div class="ttc" id="ashared__memory__image__client__python_8c_xhtml_a4a1e12ec49840b798c6413a8f6c947a9"><div class="ttname"><a href="shared__memory__image__client__python_8c.xhtml#a4a1e12ec49840b798c6413a8f6c947a9">MAX_STREAMS</a></div><div class="ttdeci">#define MAX_STREAMS</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client__python_8c_source.xhtml#l00030">shared_memory_image_client_python.c:30</a></div></div>
<div class="ttc" id="ashared__memory__image__client__python_8c_xhtml_a68584fd5e8630714c738fc30ad19fa03"><div class="ttname"><a href="shared__memory__image__client__python_8c.xhtml#a68584fd5e8630714c738fc30ad19fa03">stream_create</a></div><div class="ttdeci">stream_id stream_create(str filename, int options=IMAGESTREAM_OPTIONS_NONE)</div><div class="ttdoc">Create a shared memory image stream.</div></div>
<div class="ttc" id="ashared__memory__image__client__python_8c_xhtml_ac78db99f06d47f7718fdcac4ae3cc374"><div class="ttname"><a href="shared__memory__image__client__python_8c.xhtml#ac78db99f06d47f7718fdcac4ae3cc374">stream_lock</a></div><div class="ttdeci">frame stream_lock(stream_id id)</div><div class="ttdoc">Get any available image frame.</div></div>
<div class="ttc" id="ashared__memory__image__client__python_8c_xhtml_af656cd2bf739307f1d52221d49da37ae"><div class="ttname"><a href="shared__memory__image__client__python_8c.xhtml#af656cd2bf739307f1d52221d49da37ae">stream_destroy</a></div><div class="ttdeci">SharedMemoryImageError stream_destroy(stream_id id)</div><div class="ttdoc">Close down and destroy a shared memory transport interface.</div></div>
<div class="ttc" id="astruct___shared_memory_frame_xhtml"><div class="ttname"><a href="struct___shared_memory_frame.xhtml">_SharedMemoryFrame</a></div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00115">shared_memory_image_client.h:115</a></div></div>
<div class="ttc" id="astruct___shared_memory_frame_xhtml_a412d63c3ef8e7417be98997f72f3b0e5"><div class="ttname"><a href="struct___shared_memory_frame.xhtml#a412d63c3ef8e7417be98997f72f3b0e5">_SharedMemoryFrame::iFrame</a></div><div class="ttdeci">uint32_t iFrame</div><div class="ttdoc">monotonically increasing frame number</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00116">shared_memory_image_client.h:116</a></div></div>
<div class="ttc" id="astruct___shared_memory_frame_xhtml_a6d26bbffc622333b9f11fbadecbd6f21"><div class="ttname"><a href="struct___shared_memory_frame.xhtml#a6d26bbffc622333b9f11fbadecbd6f21">_SharedMemoryFrame::iWidth</a></div><div class="ttdeci">uint32_t iWidth</div><div class="ttdoc">width of a frame in pixels</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00117">shared_memory_image_client.h:117</a></div></div>
<div class="ttc" id="astruct___shared_memory_frame_xhtml_a7cff19a44525e74c5800b1e2f9e4cc98"><div class="ttname"><a href="struct___shared_memory_frame.xhtml#a7cff19a44525e74c5800b1e2f9e4cc98">_SharedMemoryFrame::buffer</a></div><div class="ttdeci">uint8_t * buffer</div><div class="ttdoc">pointer to a packed RGBRGBRGB... (iWidth*iHeight*3) bytes array of pixels</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00119">shared_memory_image_client.h:119</a></div></div>
<div class="ttc" id="astruct___shared_memory_frame_xhtml_ab21b6d402e01098565be5024de341ec7"><div class="ttname"><a href="struct___shared_memory_frame.xhtml#ab21b6d402e01098565be5024de341ec7">_SharedMemoryFrame::iHeight</a></div><div class="ttdeci">uint32_t iHeight</div><div class="ttdoc">height of a frame in pixels</div><div class="ttdef"><b>Definition:</b> <a href="shared__memory__image__client_8h_source.xhtml#l00118">shared_memory_image_client.h:118</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
