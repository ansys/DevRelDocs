<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: DVS::IServer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>DVS</b></li><li class="navelem"><a class="el" href="class_d_v_s_1_1_i_server.xhtml">IServer</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_d_v_s_1_1_i_server-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">DVS::IServer Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="dvs__server__interface_8h_source.xhtml">dvs_server_interface.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a54d47cdb16aa41fb6f101db7d88286bb"><td class="memItemLeft" align="right" valign="top"><a id="a54d47cdb16aa41fb6f101db7d88286bb" name="a54d47cdb16aa41fb6f101db7d88286bb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IServer</b> ()=default</td></tr>
<tr class="separator:a54d47cdb16aa41fb6f101db7d88286bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad41fe7a344c5b6d1d37d71278bce012c"><td class="memItemLeft" align="right" valign="top"><a id="ad41fe7a344c5b6d1d37d71278bce012c" name="ad41fe7a344c5b6d1d37d71278bce012c"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IServer</b> ()=default</td></tr>
<tr class="separator:ad41fe7a344c5b6d1d37d71278bce012c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bfc7399b2562a0b219ae556708556da"><td class="memItemLeft" align="right" valign="top"><a id="a1bfc7399b2562a0b219ae556708556da" name="a1bfc7399b2562a0b219ae556708556da"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IServer</b> (<a class="el" href="class_d_v_s_1_1_i_server.xhtml">IServer</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a1bfc7399b2562a0b219ae556708556da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba394d20a8b4ee8a89e02550a0d88640"><td class="memItemLeft" align="right" valign="top"><a id="aba394d20a8b4ee8a89e02550a0d88640" name="aba394d20a8b4ee8a89e02550a0d88640"></a>
<a class="el" href="class_d_v_s_1_1_i_server.xhtml">IServer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="class_d_v_s_1_1_i_server.xhtml">IServer</a> &amp;&amp;)=default</td></tr>
<tr class="separator:aba394d20a8b4ee8a89e02550a0d88640"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d4ea86ffdb968a03c9b81aa3fc8612"><td class="memItemLeft" align="right" valign="top"><a id="a79d4ea86ffdb968a03c9b81aa3fc8612" name="a79d4ea86ffdb968a03c9b81aa3fc8612"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>IServer</b> (const <a class="el" href="class_d_v_s_1_1_i_server.xhtml">IServer</a> &amp;)=default</td></tr>
<tr class="separator:a79d4ea86ffdb968a03c9b81aa3fc8612"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9910b6c51adf4489bc1bc8c86b9fabb3"><td class="memItemLeft" align="right" valign="top"><a id="a9910b6c51adf4489bc1bc8c86b9fabb3" name="a9910b6c51adf4489bc1bc8c86b9fabb3"></a>
<a class="el" href="class_d_v_s_1_1_i_server.xhtml">IServer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="class_d_v_s_1_1_i_server.xhtml">IServer</a> &amp;)=default</td></tr>
<tr class="separator:a9910b6c51adf4489bc1bc8c86b9fabb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a964b0420773ec5f47dbcea04334ba0d3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a964b0420773ec5f47dbcea04334ba0d3">set_options</a> (const std::map&lt; const char *, const char * &gt; &amp;options)=0</td></tr>
<tr class="separator:a964b0420773ec5f47dbcea04334ba0d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1edb4dec67086f10bc0329b6adf9084c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c">set_option</a> (const char *key, const char *value)=0</td></tr>
<tr class="separator:a1edb4dec67086f10bc0329b6adf9084c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf90686fce61dd0bc59af6e411f7861b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#acf90686fce61dd0bc59af6e411f7861b">clear_options</a> ()=0</td></tr>
<tr class="separator:acf90686fce61dd0bc59af6e411f7861b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fdee3f663dbe7b7dab11621f76737e2"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a5fdee3f663dbe7b7dab11621f76737e2">running</a> () const =0</td></tr>
<tr class="separator:a5fdee3f663dbe7b7dab11621f76737e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a5339f222bcd46b06c2fa9a474b2c37"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a8a5339f222bcd46b06c2fa9a474b2c37">get_timestep_count</a> (uint32_t &amp;num_pending, uint32_t &amp;num_complete) const =0</td></tr>
<tr class="separator:a8a5339f222bcd46b06c2fa9a474b2c37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6699cf48b29583ab3391b9b8397e611c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6699cf48b29583ab3391b9b8397e611c">startup</a> (uint32_t server_number, uint32_t local_ranks)=0</td></tr>
<tr class="separator:a6699cf48b29583ab3391b9b8397e611c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac61ce2698eec1adb521bbbf60cb78756"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#ac61ce2698eec1adb521bbbf60cb78756">startup_unthreaded</a> (uint32_t server_number, uint32_t local_ranks)=0</td></tr>
<tr class="separator:ac61ce2698eec1adb521bbbf60cb78756"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add6fcb530763dc217f5b3c17b25093c0"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#add6fcb530763dc217f5b3c17b25093c0">update</a> ()=0</td></tr>
<tr class="separator:add6fcb530763dc217f5b3c17b25093c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cb1f69ad4b9213dde48d4cd5b3f2111"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6cb1f69ad4b9213dde48d4cd5b3f2111">terminating</a> ()=0</td></tr>
<tr class="separator:a6cb1f69ad4b9213dde48d4cd5b3f2111"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ce6bb49a2d383b0821267415a93802d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a7ce6bb49a2d383b0821267415a93802d">shutdown</a> ()=0</td></tr>
<tr class="separator:a7ce6bb49a2d383b0821267415a93802d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68fca8531459488f5694507ad5df0482"><td class="memItemLeft" align="right" valign="top">virtual ITransport *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a68fca8531459488f5694507ad5df0482">create_transport</a> (const std::string &amp;shared_secret)=0</td></tr>
<tr class="separator:a68fca8531459488f5694507ad5df0482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a087c3fed77651e0f62d7189f44a32443"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_d_v_s_1_1_i_server.xhtml#a087c3fed77651e0f62d7189f44a32443">get_uri</a> ()=0</td></tr>
<tr class="separator:a087c3fed77651e0f62d7189f44a32443"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Usage: <br  />
1.) Instantiate <a class="el" href="class_d_v_s_1_1_i_server.xhtml" title="Interface class used to run a dynamic data server in a thread accepting incoming client connections.">DVS::IServer</a> using <a class="el" href="dvs__server__interface_8h.xhtml#a852580b9a49ac305e4ae26ca637bcc75" title="Create a DVS::IServer instance for clients to connect to.">DVS::CREATE_SERVER_INSTANCE()</a> method <br  />
2.) Set options using <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a964b0420773ec5f47dbcea04334ba0d3" title="Set a collection of options on the server. Overwrites previous options See. See Server Options.">DVS::IServer::set_options()</a> or <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c" title="Set a specific option on the server, these are used during startup See See Server Options.">DVS::IServer::set_option()</a> <br  />
3.) Startup server using <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6699cf48b29583ab3391b9b8397e611c" title="Start the server.">DVS::IServer::startup()</a> <br  />
4.) If needed see if it's running via <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a5fdee3f663dbe7b7dab11621f76737e2" title="Check to see if the server is running.">DVS::IServer::running()</a> <br  />
5.) Shutdown server using <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a7ce6bb49a2d383b0821267415a93802d" title="Shutdown the server, also called on server destruction by DVS::DESTROY_SERVER_INSTANCE()">DVS::IServer::shutdown()</a> <br  />
6.) Destroy instance using <a class="el" href="dvs__server__interface_8h.xhtml#adcdcbab1954ec53631a7136af7fc49b8" title="Destroy the server instance (also shutting it down if needed)">DVS::DESTROY_SERVER_INSTANCE()</a> <br  />
</p>

<p class="definition">Definition at line <a class="el" href="dvs__server__interface_8h_source.xhtml#l00056">56</a> of file <a class="el" href="dvs__server__interface_8h_source.xhtml">dvs_server_interface.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="acf90686fce61dd0bc59af6e411f7861b" name="acf90686fce61dd0bc59af6e411f7861b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf90686fce61dd0bc59af6e411f7861b">&#9670;&#160;</a></span>clear_options()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DVS::IServer::clear_options </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all options from the server. </p>

</div>
</div>
<a id="a68fca8531459488f5694507ad5df0482" name="a68fca8531459488f5694507ad5df0482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68fca8531459488f5694507ad5df0482">&#9670;&#160;</a></span>create_transport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ITransport * DVS::IServer::create_transport </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>shared_secret</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a transport object to communicate with server, must be destroyed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">shared_secret</td><td>The transport protocol shared secret string used to validate connections. It may be an empty string. If "SERVER_SECURITY_SECRET" is set as a server option shared_secret will be ignored. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ITransport* instance to transport object owned by Server instance </dd></dl>

</div>
</div>
<a id="a8a5339f222bcd46b06c2fa9a474b2c37" name="a8a5339f222bcd46b06c2fa9a474b2c37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a5339f222bcd46b06c2fa9a474b2c37">&#9670;&#160;</a></span>get_timestep_count()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IServer::get_timestep_count </td>
          <td>(</td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_pending</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>num_complete</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return the current number of pending and complete timesteps in the server </p>
<p>Simple count of the current state of the timesteps in the server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">num_pending</td><td>the number of pending timesteps not complete yet </td></tr>
    <tr><td class="paramname">num_complete</td><td>num_complete the number of complete timesteps </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_SERVER_NOT_STARTED or DVS_NONE </dd></dl>

</div>
</div>
<a id="a087c3fed77651e0f62d7189f44a32443" name="a087c3fed77651e0f62d7189f44a32443"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a087c3fed77651e0f62d7189f44a32443">&#9670;&#160;</a></span>get_uri()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char * DVS::IServer::get_uri </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get URI of this server. </p>
<dl class="section return"><dt>Returns</dt><dd>URI this server was created with </dd></dl>

</div>
</div>
<a id="a5fdee3f663dbe7b7dab11621f76737e2" name="a5fdee3f663dbe7b7dab11621f76737e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fdee3f663dbe7b7dab11621f76737e2">&#9670;&#160;</a></span>running()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool DVS::IServer::running </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check to see if the server is running. </p>
<p>Currently this is a dumb check to see if the server was tried to start. If port listening failed this will call will not fail currently.</p>
<dl class="section return"><dt>Returns</dt><dd>true if running/started </dd></dl>

</div>
</div>
<a id="a1edb4dec67086f10bc0329b6adf9084c" name="a1edb4dec67086f10bc0329b6adf9084c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1edb4dec67086f10bc0329b6adf9084c">&#9670;&#160;</a></span>set_option()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DVS::IServer::set_option </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set a specific option on the server, these are used during startup See See <a class="el" href="group__group__dvs__server.xhtml#dvs_server_options">Server Options</a>. </p>
<p>Current available options: <br  />
CACHE_URI: This will set the location and type of cache to store data to.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Name of option to set </td></tr>
    <tr><td class="paramname">value</td><td>Value of option </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a964b0420773ec5f47dbcea04334ba0d3" name="a964b0420773ec5f47dbcea04334ba0d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a964b0420773ec5f47dbcea04334ba0d3">&#9670;&#160;</a></span>set_options()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DVS::IServer::set_options </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; const char *, const char * &gt; &amp;&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set a collection of options on the server. Overwrites previous options See. See <a class="el" href="group__group__dvs__server.xhtml#dvs_server_options">Server Options</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">options</td><td>options to set on the server, see <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c" title="Set a specific option on the server, these are used during startup See See Server Options.">DVS::IServer::set_option()</a> for options available </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7ce6bb49a2d383b0821267415a93802d" name="a7ce6bb49a2d383b0821267415a93802d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ce6bb49a2d383b0821267415a93802d">&#9670;&#160;</a></span>shutdown()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DVS::IServer::shutdown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shutdown the server, also called on server destruction by <a class="el" href="dvs__server__interface_8h.xhtml#adcdcbab1954ec53631a7136af7fc49b8" title="Destroy the server instance (also shutting it down if needed)">DVS::DESTROY_SERVER_INSTANCE()</a> </p>

</div>
</div>
<a id="a6699cf48b29583ab3391b9b8397e611c" name="a6699cf48b29583ab3391b9b8397e611c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6699cf48b29583ab3391b9b8397e611c">&#9670;&#160;</a></span>startup()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IServer::startup </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>server_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>local_ranks</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start the server. </p>
<p>server_number is used by the DVS server, for each group of servers this number should be unique and monotonically increasing with no gaps (valid: 0, 1, 2 invalid: 0, 2)</p>
<p>local_ranks is used to determine how many clients will be connecting to this server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">server_number</td><td>The server number (zero based) for this server, should be unique for each server in this server group </td></tr>
    <tr><td class="paramname">local_ranks</td><td>Number of local ranks this server will handle </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, else error code </dd></dl>

</div>
</div>
<a id="ac61ce2698eec1adb521bbbf60cb78756" name="ac61ce2698eec1adb521bbbf60cb78756"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac61ce2698eec1adb521bbbf60cb78756">&#9670;&#160;</a></span>startup_unthreaded()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IServer::startup_unthreaded </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>server_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>local_ranks</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Startup a server manually without threads. </p>
<p>This method is for when a user wants to manually run their own server to more tightly control the execution and threading model. This call WILL block until the first timestep is received and will not return unless <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6cb1f69ad4b9213dde48d4cd5b3f2111" title="Call to begin terminating the server.">terminating()</a> has been called from another thread or interrupt.</p>
<p>server_number is used by the DVS server, for each group of servers this number should be unique and monotonically increasing with no gaps (valid: 0, 1, 2 invalid: 0, 2)</p>
<p>local_ranks is used to determine how many clients will be connecting to this server</p>
<p>The normal call chain would be to call <a class="el" href="class_d_v_s_1_1_i_server.xhtml#ac61ce2698eec1adb521bbbf60cb78756" title="Startup a server manually without threads.">startup_unthreaded()</a> and then loop calling <a class="el" href="class_d_v_s_1_1_i_server.xhtml#add6fcb530763dc217f5b3c17b25093c0" title="Perform a server update.">update()</a> until some end condition is met. Please see <a class="el" href="test__dvs__server_8cpp.xhtml" title="Test server to provide example of create a simple server application.">test_dvs_server.cpp</a> for an example.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">server_number</td><td>The server number (zero based) for this server, should be unique for each server in this server group </td></tr>
    <tr><td class="paramname">local_ranks</td><td>Number of local ranks this server will handle </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, else error code </dd></dl>

</div>
</div>
<a id="a6cb1f69ad4b9213dde48d4cd5b3f2111" name="a6cb1f69ad4b9213dde48d4cd5b3f2111"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cb1f69ad4b9213dde48d4cd5b3f2111">&#9670;&#160;</a></span>terminating()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IServer::terminating </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call to begin terminating the server. </p>
<p>This method begins terminating the server when <a class="el" href="class_d_v_s_1_1_i_server.xhtml#ac61ce2698eec1adb521bbbf60cb78756" title="Startup a server manually without threads.">startup_unthreaded()</a> is invoked. This will cause new updates sending new timesteps, to fail and exit early from any waiting calls on the server.</p>
<p>Important: This call is not needed if using the normal startup method as it will handle this for you.</p>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, DVS_SERVER_FAILED_READER_CREATE if the server wasn't started </dd></dl>

</div>
</div>
<a id="add6fcb530763dc217f5b3c17b25093c0" name="add6fcb530763dc217f5b3c17b25093c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add6fcb530763dc217f5b3c17b25093c0">&#9670;&#160;</a></span>update()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> DVS::IServer::update </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a server update. </p>
<p>This method performs a server update. This will: 1.) Perform a complete timestep check and flush complete timesteps to the cache 2.) Perform a check if any new delete_item calls should be processed 3.) Perform a check to see if the dataset definition needs to be updated</p>
<p>The number of pending timesteps from <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a8a5339f222bcd46b06c2fa9a474b2c37" title="return the current number of pending and complete timesteps in the server">get_timestep_count()</a> will not update unless this is called.</p>
<p>Important: This is not needed to be called if using the normal <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6699cf48b29583ab3391b9b8397e611c" title="Start the server.">startup()</a> procedure and should only be used when manually running the server with startup_unthreaded. This must be called periodically for the server to function properly.</p>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>D:/Product-src/ensight/user_defined_src/readers/dvs/<a class="el" href="dvs__server__interface_8h_source.xhtml">dvs_server_interface.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
