// source: dynamic_scene_graph.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck


goog.provide('proto.ensightservice.DeleteID');
goog.provide('proto.ensightservice.SceneClientCommand');
goog.provide('proto.ensightservice.SceneClientCommand.ClientCommandType');
goog.provide('proto.ensightservice.SceneClientCommand.ClientcommandCase');
goog.provide('proto.ensightservice.SceneClientInit');
goog.provide('proto.ensightservice.SceneClientUpdate');
goog.provide('proto.ensightservice.SceneUpdateCommand');
goog.provide('proto.ensightservice.SceneUpdateCommand.SceneUpdateCommandType');
goog.provide('proto.ensightservice.SceneUpdateCommand.UpdatecommandCase');
goog.provide('proto.ensightservice.UpdateGeom');
goog.provide('proto.ensightservice.UpdateGeom.ArrayType');
goog.provide('proto.ensightservice.UpdateGroup');
goog.provide('proto.ensightservice.UpdatePart');
goog.provide('proto.ensightservice.UpdatePart.RenderingMode');
goog.provide('proto.ensightservice.UpdatePart.ShadingMode');
goog.provide('proto.ensightservice.UpdatePart.TextureApplyMode');
goog.provide('proto.ensightservice.UpdatePart.TextureSampleMode');
goog.provide('proto.ensightservice.UpdatePart.TextureWrapMode');
goog.provide('proto.ensightservice.UpdateSceneBegin');
goog.provide('proto.ensightservice.UpdateSceneEnd');
goog.provide('proto.ensightservice.UpdateTexture');
goog.provide('proto.ensightservice.UpdateTexture.TextureFormat');
goog.provide('proto.ensightservice.UpdateVariable');
goog.provide('proto.ensightservice.UpdateVariable.PaletteInterpolation');
goog.provide('proto.ensightservice.UpdateVariable.UndefinedDisplay');
goog.provide('proto.ensightservice.UpdateVariable.VarDimension');
goog.provide('proto.ensightservice.UpdateVariable.VarLocation');
goog.provide('proto.ensightservice.UpdateView');
goog.provide('proto.ensightservice.VariableLevel');
goog.provide('proto.ensightservice.VersionReply');
goog.provide('proto.ensightservice.VersionReply.VersionEnumType');
goog.provide('proto.ensightservice.VersionRequest');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.VersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.VersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.VersionRequest.displayName = 'proto.ensightservice.VersionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.VersionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.VersionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.VersionReply.displayName = 'proto.ensightservice.VersionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.SceneClientInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.SceneClientInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.SceneClientInit.displayName = 'proto.ensightservice.SceneClientInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.SceneClientUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.SceneClientUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.SceneClientUpdate.displayName = 'proto.ensightservice.SceneClientUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.SceneClientCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ensightservice.SceneClientCommand.oneofGroups_);
};
goog.inherits(proto.ensightservice.SceneClientCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.SceneClientCommand.displayName = 'proto.ensightservice.SceneClientCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdateSceneBegin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.UpdateSceneBegin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdateSceneBegin.displayName = 'proto.ensightservice.UpdateSceneBegin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdateSceneEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.UpdateSceneEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdateSceneEnd.displayName = 'proto.ensightservice.UpdateSceneEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.DeleteID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ensightservice.DeleteID.repeatedFields_, null);
};
goog.inherits(proto.ensightservice.DeleteID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.DeleteID.displayName = 'proto.ensightservice.DeleteID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdateView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ensightservice.UpdateView.repeatedFields_, null);
};
goog.inherits(proto.ensightservice.UpdateView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdateView.displayName = 'proto.ensightservice.UpdateView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdatePart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ensightservice.UpdatePart.repeatedFields_, null);
};
goog.inherits(proto.ensightservice.UpdatePart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdatePart.displayName = 'proto.ensightservice.UpdatePart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdateGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ensightservice.UpdateGroup.repeatedFields_, null);
};
goog.inherits(proto.ensightservice.UpdateGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdateGroup.displayName = 'proto.ensightservice.UpdateGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdateGeom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ensightservice.UpdateGeom.repeatedFields_, null);
};
goog.inherits(proto.ensightservice.UpdateGeom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdateGeom.displayName = 'proto.ensightservice.UpdateGeom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.VariableLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.VariableLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.VariableLevel.displayName = 'proto.ensightservice.VariableLevel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdateVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ensightservice.UpdateVariable.repeatedFields_, null);
};
goog.inherits(proto.ensightservice.UpdateVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdateVariable.displayName = 'proto.ensightservice.UpdateVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.UpdateTexture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ensightservice.UpdateTexture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.UpdateTexture.displayName = 'proto.ensightservice.UpdateTexture';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ensightservice.SceneUpdateCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ensightservice.SceneUpdateCommand.oneofGroups_);
};
goog.inherits(proto.ensightservice.SceneUpdateCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ensightservice.SceneUpdateCommand.displayName = 'proto.ensightservice.SceneUpdateCommand';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.VersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.VersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.VersionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.VersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.VersionRequest}
 */
proto.ensightservice.VersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.VersionRequest;
  return proto.ensightservice.VersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.VersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.VersionRequest}
 */
proto.ensightservice.VersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.VersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.VersionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.VersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.VersionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.VersionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.VersionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.VersionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.VersionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.VersionReply}
 */
proto.ensightservice.VersionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.VersionReply;
  return proto.ensightservice.VersionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.VersionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.VersionReply}
 */
proto.ensightservice.VersionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.VersionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.VersionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.VersionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.VersionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ensightservice.VersionReply.VersionEnumType = {
  UNDEFINED: 0,
  CURRENT_VERSION: 101
};

/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.ensightservice.VersionReply.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.VersionReply} returns this
 */
proto.ensightservice.VersionReply.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.SceneClientInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.SceneClientInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.SceneClientInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneClientInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowSpontaneous: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    allowIncrementalUpdates: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    maximumChunkSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    includeTemporalGeometry: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.SceneClientInit}
 */
proto.ensightservice.SceneClientInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.SceneClientInit;
  return proto.ensightservice.SceneClientInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.SceneClientInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.SceneClientInit}
 */
proto.ensightservice.SceneClientInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowSpontaneous(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowIncrementalUpdates(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaximumChunkSize(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeTemporalGeometry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.SceneClientInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.SceneClientInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.SceneClientInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneClientInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllowSpontaneous();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAllowIncrementalUpdates();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMaximumChunkSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIncludeTemporalGeometry();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool allow_spontaneous = 1;
 * @return {boolean}
 */
proto.ensightservice.SceneClientInit.prototype.getAllowSpontaneous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ensightservice.SceneClientInit} returns this
 */
proto.ensightservice.SceneClientInit.prototype.setAllowSpontaneous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool allow_incremental_updates = 2;
 * @return {boolean}
 */
proto.ensightservice.SceneClientInit.prototype.getAllowIncrementalUpdates = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ensightservice.SceneClientInit} returns this
 */
proto.ensightservice.SceneClientInit.prototype.setAllowIncrementalUpdates = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 maximum_chunk_size = 3;
 * @return {number}
 */
proto.ensightservice.SceneClientInit.prototype.getMaximumChunkSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.SceneClientInit} returns this
 */
proto.ensightservice.SceneClientInit.prototype.setMaximumChunkSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool include_temporal_geometry = 4;
 * @return {boolean}
 */
proto.ensightservice.SceneClientInit.prototype.getIncludeTemporalGeometry = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ensightservice.SceneClientInit} returns this
 */
proto.ensightservice.SceneClientInit.prototype.setIncludeTemporalGeometry = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.SceneClientUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.SceneClientUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.SceneClientUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneClientUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.SceneClientUpdate}
 */
proto.ensightservice.SceneClientUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.SceneClientUpdate;
  return proto.ensightservice.SceneClientUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.SceneClientUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.SceneClientUpdate}
 */
proto.ensightservice.SceneClientUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.SceneClientUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.SceneClientUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.SceneClientUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneClientUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ensightservice.SceneClientCommand.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.ensightservice.SceneClientCommand.ClientcommandCase = {
  CLIENTCOMMAND_NOT_SET: 0,
  INIT: 2,
  UPDATE: 3
};

/**
 * @return {proto.ensightservice.SceneClientCommand.ClientcommandCase}
 */
proto.ensightservice.SceneClientCommand.prototype.getClientcommandCase = function() {
  return /** @type {proto.ensightservice.SceneClientCommand.ClientcommandCase} */(jspb.Message.computeOneofCase(this, proto.ensightservice.SceneClientCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.SceneClientCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.SceneClientCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.SceneClientCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneClientCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    init: (f = msg.getInit()) && proto.ensightservice.SceneClientInit.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.ensightservice.SceneClientUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.SceneClientCommand}
 */
proto.ensightservice.SceneClientCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.SceneClientCommand;
  return proto.ensightservice.SceneClientCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.SceneClientCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.SceneClientCommand}
 */
proto.ensightservice.SceneClientCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ensightservice.SceneClientCommand.ClientCommandType} */ (reader.readEnum());
      msg.setCommandType(value);
      break;
    case 2:
      var value = new proto.ensightservice.SceneClientInit;
      reader.readMessage(value,proto.ensightservice.SceneClientInit.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 3:
      var value = new proto.ensightservice.SceneClientUpdate;
      reader.readMessage(value,proto.ensightservice.SceneClientUpdate.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.SceneClientCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.SceneClientCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.SceneClientCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneClientCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ensightservice.SceneClientInit.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ensightservice.SceneClientUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ensightservice.SceneClientCommand.ClientCommandType = {
  INIT: 0,
  UPDATE: 1
};

/**
 * optional ClientCommandType command_type = 1;
 * @return {!proto.ensightservice.SceneClientCommand.ClientCommandType}
 */
proto.ensightservice.SceneClientCommand.prototype.getCommandType = function() {
  return /** @type {!proto.ensightservice.SceneClientCommand.ClientCommandType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ensightservice.SceneClientCommand.ClientCommandType} value
 * @return {!proto.ensightservice.SceneClientCommand} returns this
 */
proto.ensightservice.SceneClientCommand.prototype.setCommandType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SceneClientInit init = 2;
 * @return {?proto.ensightservice.SceneClientInit}
 */
proto.ensightservice.SceneClientCommand.prototype.getInit = function() {
  return /** @type{?proto.ensightservice.SceneClientInit} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.SceneClientInit, 2));
};


/**
 * @param {?proto.ensightservice.SceneClientInit|undefined} value
 * @return {!proto.ensightservice.SceneClientCommand} returns this
*/
proto.ensightservice.SceneClientCommand.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ensightservice.SceneClientCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneClientCommand} returns this
 */
proto.ensightservice.SceneClientCommand.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneClientCommand.prototype.hasInit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SceneClientUpdate update = 3;
 * @return {?proto.ensightservice.SceneClientUpdate}
 */
proto.ensightservice.SceneClientCommand.prototype.getUpdate = function() {
  return /** @type{?proto.ensightservice.SceneClientUpdate} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.SceneClientUpdate, 3));
};


/**
 * @param {?proto.ensightservice.SceneClientUpdate|undefined} value
 * @return {!proto.ensightservice.SceneClientCommand} returns this
*/
proto.ensightservice.SceneClientCommand.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ensightservice.SceneClientCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneClientCommand} returns this
 */
proto.ensightservice.SceneClientCommand.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneClientCommand.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdateSceneBegin.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdateSceneBegin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdateSceneBegin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateSceneBegin.toObject = function(includeInstance, msg) {
  var f, obj = {
    reset: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdateSceneBegin}
 */
proto.ensightservice.UpdateSceneBegin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdateSceneBegin;
  return proto.ensightservice.UpdateSceneBegin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdateSceneBegin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdateSceneBegin}
 */
proto.ensightservice.UpdateSceneBegin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateSceneBegin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdateSceneBegin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdateSceneBegin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateSceneBegin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReset();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bool reset = 1;
 * @return {boolean}
 */
proto.ensightservice.UpdateSceneBegin.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ensightservice.UpdateSceneBegin} returns this
 */
proto.ensightservice.UpdateSceneBegin.prototype.setReset = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint64 id = 2;
 * @return {number}
 */
proto.ensightservice.UpdateSceneBegin.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateSceneBegin} returns this
 */
proto.ensightservice.UpdateSceneBegin.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdateSceneEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdateSceneEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdateSceneEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateSceneEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdateSceneEnd}
 */
proto.ensightservice.UpdateSceneEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdateSceneEnd;
  return proto.ensightservice.UpdateSceneEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdateSceneEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdateSceneEnd}
 */
proto.ensightservice.UpdateSceneEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateSceneEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdateSceneEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdateSceneEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateSceneEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ensightservice.UpdateSceneEnd.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateSceneEnd} returns this
 */
proto.ensightservice.UpdateSceneEnd.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ensightservice.DeleteID.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.DeleteID.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.DeleteID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.DeleteID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.DeleteID.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.DeleteID}
 */
proto.ensightservice.DeleteID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.DeleteID;
  return proto.ensightservice.DeleteID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.DeleteID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.DeleteID}
 */
proto.ensightservice.DeleteID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.DeleteID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.DeleteID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.DeleteID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.DeleteID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 ids = 1;
 * @return {!Array<number>}
 */
proto.ensightservice.DeleteID.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.DeleteID} returns this
 */
proto.ensightservice.DeleteID.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.DeleteID} returns this
 */
proto.ensightservice.DeleteID.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.DeleteID} returns this
 */
proto.ensightservice.DeleteID.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ensightservice.UpdateView.repeatedFields_ = [3,4,5,6,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdateView.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdateView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdateView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateView.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timelineList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    lookatList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    lookfromList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    upvectorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    fieldofview: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    aspectratio: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    nearfarList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f,
    hash: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdateView}
 */
proto.ensightservice.UpdateView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdateView;
  return proto.ensightservice.UpdateView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdateView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdateView}
 */
proto.ensightservice.UpdateView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentId(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTimeline(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLookat(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLookfrom(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addUpvector(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFieldofview(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAspectratio(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNearfar(values[i]);
      }
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdateView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdateView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimelineList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getLookatList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getLookfromList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getUpvectorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getFieldofview();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getAspectratio();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getNearfarList();
  if (f.length > 0) {
    writer.writePackedFloat(
      9,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ensightservice.UpdateView.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent_id = 2;
 * @return {number}
 */
proto.ensightservice.UpdateView.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated float timeline = 3;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateView.prototype.getTimelineList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setTimelineList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.addTimeline = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.clearTimelineList = function() {
  return this.setTimelineList([]);
};


/**
 * repeated float lookat = 4;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateView.prototype.getLookatList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setLookatList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.addLookat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.clearLookatList = function() {
  return this.setLookatList([]);
};


/**
 * repeated float lookfrom = 5;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateView.prototype.getLookfromList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setLookfromList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.addLookfrom = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.clearLookfromList = function() {
  return this.setLookfromList([]);
};


/**
 * repeated float upvector = 6;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateView.prototype.getUpvectorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setUpvectorList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.addUpvector = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.clearUpvectorList = function() {
  return this.setUpvectorList([]);
};


/**
 * optional float fieldofview = 7;
 * @return {number}
 */
proto.ensightservice.UpdateView.prototype.getFieldofview = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setFieldofview = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float aspectratio = 8;
 * @return {number}
 */
proto.ensightservice.UpdateView.prototype.getAspectratio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setAspectratio = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * repeated float nearfar = 9;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateView.prototype.getNearfarList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setNearfarList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.addNearfar = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.clearNearfarList = function() {
  return this.setNearfarList([]);
};


/**
 * optional string hash = 10;
 * @return {string}
 */
proto.ensightservice.UpdateView.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdateView} returns this
 */
proto.ensightservice.UpdateView.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ensightservice.UpdatePart.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdatePart.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdatePart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdatePart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdatePart.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    matrix4x4List: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    fillColorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    lineColorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    render: jspb.Message.getFieldWithDefault(msg, 7, 0),
    shading: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ambient: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    diffuse: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    specularShine: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    specularIntensity: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    materialName: jspb.Message.getFieldWithDefault(msg, 13, ""),
    nodeSizeDefault: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    colorVariableid: jspb.Message.getFieldWithDefault(msg, 15, 0),
    alphaVariableid: jspb.Message.getFieldWithDefault(msg, 16, 0),
    nodeSizeVariableid: jspb.Message.getFieldWithDefault(msg, 17, 0),
    displacementVariableid: jspb.Message.getFieldWithDefault(msg, 18, 0),
    textureId: jspb.Message.getFieldWithDefault(msg, 19, 0),
    textureWrapMode: jspb.Message.getFieldWithDefault(msg, 20, 0),
    textureApplyMode: jspb.Message.getFieldWithDefault(msg, 21, 0),
    textureSampleMode: jspb.Message.getFieldWithDefault(msg, 22, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 23, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdatePart}
 */
proto.ensightservice.UpdatePart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdatePart;
  return proto.ensightservice.UpdatePart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdatePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdatePart}
 */
proto.ensightservice.UpdatePart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatrix4x4(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFillColor(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLineColor(values[i]);
      }
      break;
    case 7:
      var value = /** @type {!proto.ensightservice.UpdatePart.RenderingMode} */ (reader.readEnum());
      msg.setRender(value);
      break;
    case 8:
      var value = /** @type {!proto.ensightservice.UpdatePart.ShadingMode} */ (reader.readEnum());
      msg.setShading(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmbient(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDiffuse(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpecularShine(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpecularIntensity(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaterialName(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNodeSizeDefault(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setColorVariableid(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAlphaVariableid(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeSizeVariableid(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDisplacementVariableid(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTextureId(value);
      break;
    case 20:
      var value = /** @type {!proto.ensightservice.UpdatePart.TextureWrapMode} */ (reader.readEnum());
      msg.setTextureWrapMode(value);
      break;
    case 21:
      var value = /** @type {!proto.ensightservice.UpdatePart.TextureApplyMode} */ (reader.readEnum());
      msg.setTextureApplyMode(value);
      break;
    case 22:
      var value = /** @type {!proto.ensightservice.UpdatePart.TextureSampleMode} */ (reader.readEnum());
      msg.setTextureSampleMode(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdatePart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdatePart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdatePart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdatePart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMatrix4x4List();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getFillColorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getLineColorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getRender();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getShading();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getAmbient();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getDiffuse();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getSpecularShine();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getSpecularIntensity();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getMaterialName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getNodeSizeDefault();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getColorVariableid();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getAlphaVariableid();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getNodeSizeVariableid();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getDisplacementVariableid();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getTextureId();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getTextureWrapMode();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getTextureApplyMode();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getTextureSampleMode();
  if (f !== 0.0) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ensightservice.UpdatePart.RenderingMode = {
  NODES: 0,
  CONNECTIVITY: 1
};

/**
 * @enum {number}
 */
proto.ensightservice.UpdatePart.ShadingMode = {
  ELEMENTAL: 0,
  NODAL: 1
};

/**
 * @enum {number}
 */
proto.ensightservice.UpdatePart.TextureWrapMode = {
  REPEAT: 0,
  CLAMP: 1,
  CLAMP_TEXTURE: 2
};

/**
 * @enum {number}
 */
proto.ensightservice.UpdatePart.TextureApplyMode = {
  REPLACE: 0,
  DECAL: 1,
  MODULATE: 2
};

/**
 * @enum {number}
 */
proto.ensightservice.UpdatePart.TextureSampleMode = {
  NEAREST: 0,
  LINEAR: 1
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent_id = 2;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ensightservice.UpdatePart.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated float matrix4x4 = 4;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdatePart.prototype.getMatrix4x4List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setMatrix4x4List = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.addMatrix4x4 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.clearMatrix4x4List = function() {
  return this.setMatrix4x4List([]);
};


/**
 * repeated float fill_color = 5;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdatePart.prototype.getFillColorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setFillColorList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.addFillColor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.clearFillColorList = function() {
  return this.setFillColorList([]);
};


/**
 * repeated float line_color = 6;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdatePart.prototype.getLineColorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setLineColorList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.addLineColor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.clearLineColorList = function() {
  return this.setLineColorList([]);
};


/**
 * optional RenderingMode render = 7;
 * @return {!proto.ensightservice.UpdatePart.RenderingMode}
 */
proto.ensightservice.UpdatePart.prototype.getRender = function() {
  return /** @type {!proto.ensightservice.UpdatePart.RenderingMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.ensightservice.UpdatePart.RenderingMode} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setRender = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional ShadingMode shading = 8;
 * @return {!proto.ensightservice.UpdatePart.ShadingMode}
 */
proto.ensightservice.UpdatePart.prototype.getShading = function() {
  return /** @type {!proto.ensightservice.UpdatePart.ShadingMode} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.ensightservice.UpdatePart.ShadingMode} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setShading = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional float ambient = 9;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getAmbient = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setAmbient = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float diffuse = 10;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getDiffuse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setDiffuse = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float specular_shine = 11;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getSpecularShine = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setSpecularShine = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float specular_intensity = 12;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getSpecularIntensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setSpecularIntensity = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional string material_name = 13;
 * @return {string}
 */
proto.ensightservice.UpdatePart.prototype.getMaterialName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setMaterialName = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional float node_size_default = 14;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getNodeSizeDefault = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setNodeSizeDefault = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional uint64 color_variableid = 15;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getColorVariableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setColorVariableid = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 alpha_variableid = 16;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getAlphaVariableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setAlphaVariableid = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint64 node_size_variableid = 17;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getNodeSizeVariableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setNodeSizeVariableid = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint64 displacement_variableid = 18;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getDisplacementVariableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setDisplacementVariableid = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 texture_id = 19;
 * @return {number}
 */
proto.ensightservice.UpdatePart.prototype.getTextureId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setTextureId = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional TextureWrapMode texture_wrap_mode = 20;
 * @return {!proto.ensightservice.UpdatePart.TextureWrapMode}
 */
proto.ensightservice.UpdatePart.prototype.getTextureWrapMode = function() {
  return /** @type {!proto.ensightservice.UpdatePart.TextureWrapMode} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.ensightservice.UpdatePart.TextureWrapMode} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setTextureWrapMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};


/**
 * optional TextureApplyMode texture_apply_mode = 21;
 * @return {!proto.ensightservice.UpdatePart.TextureApplyMode}
 */
proto.ensightservice.UpdatePart.prototype.getTextureApplyMode = function() {
  return /** @type {!proto.ensightservice.UpdatePart.TextureApplyMode} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.ensightservice.UpdatePart.TextureApplyMode} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setTextureApplyMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 21, value);
};


/**
 * optional TextureSampleMode texture_sample_mode = 22;
 * @return {!proto.ensightservice.UpdatePart.TextureSampleMode}
 */
proto.ensightservice.UpdatePart.prototype.getTextureSampleMode = function() {
  return /** @type {!proto.ensightservice.UpdatePart.TextureSampleMode} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {!proto.ensightservice.UpdatePart.TextureSampleMode} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setTextureSampleMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 22, value);
};


/**
 * optional string hash = 23;
 * @return {string}
 */
proto.ensightservice.UpdatePart.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdatePart} returns this
 */
proto.ensightservice.UpdatePart.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ensightservice.UpdateGroup.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdateGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdateGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdateGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    matrix4x4List: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
    hash: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdateGroup}
 */
proto.ensightservice.UpdateGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdateGroup;
  return proto.ensightservice.UpdateGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdateGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdateGroup}
 */
proto.ensightservice.UpdateGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatrix4x4(values[i]);
      }
      break;
    case 5:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdateGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdateGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMatrix4x4List();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ensightservice.UpdateGroup.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent_id = 2;
 * @return {number}
 */
proto.ensightservice.UpdateGroup.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ensightservice.UpdateGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated float matrix4x4 = 4;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateGroup.prototype.getMatrix4x4List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.setMatrix4x4List = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.addMatrix4x4 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.clearMatrix4x4List = function() {
  return this.setMatrix4x4List([]);
};


/**
 * map<string, string> attributes = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ensightservice.UpdateGroup.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional string hash = 6;
 * @return {string}
 */
proto.ensightservice.UpdateGroup.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdateGroup} returns this
 */
proto.ensightservice.UpdateGroup.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ensightservice.UpdateGeom.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdateGeom.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdateGeom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdateGeom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateGeom.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payloadType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    variableId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fltArrayList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    intArrayList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    chunkOffset: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totalArraySize: jspb.Message.getFieldWithDefault(msg, 8, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdateGeom}
 */
proto.ensightservice.UpdateGeom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdateGeom;
  return proto.ensightservice.UpdateGeom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdateGeom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdateGeom}
 */
proto.ensightservice.UpdateGeom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {!proto.ensightservice.UpdateGeom.ArrayType} */ (reader.readEnum());
      msg.setPayloadType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVariableId(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFltArray(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIntArray(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChunkOffset(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalArraySize(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateGeom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdateGeom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdateGeom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateGeom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPayloadType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getVariableId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFltArrayList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getIntArrayList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getChunkOffset();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTotalArraySize();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ensightservice.UpdateGeom.ArrayType = {
  COORDINATES: 0,
  TRIANGLES: 1,
  LINES: 2,
  EDGEFLAGS: 3,
  ELEM_VARIABLE: 4,
  NODE_VARIABLE: 5,
  ELEM_NORMALS: 6,
  NODE_NORMALS: 7,
  TEX_COORDINATES: 8
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ensightservice.UpdateGeom.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent_id = 2;
 * @return {number}
 */
proto.ensightservice.UpdateGeom.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ArrayType payload_type = 3;
 * @return {!proto.ensightservice.UpdateGeom.ArrayType}
 */
proto.ensightservice.UpdateGeom.prototype.getPayloadType = function() {
  return /** @type {!proto.ensightservice.UpdateGeom.ArrayType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ensightservice.UpdateGeom.ArrayType} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setPayloadType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 variable_id = 4;
 * @return {number}
 */
proto.ensightservice.UpdateGeom.prototype.getVariableId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setVariableId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated float flt_array = 5;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateGeom.prototype.getFltArrayList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setFltArrayList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.addFltArray = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.clearFltArrayList = function() {
  return this.setFltArrayList([]);
};


/**
 * repeated uint32 int_array = 6;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateGeom.prototype.getIntArrayList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setIntArrayList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.addIntArray = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.clearIntArrayList = function() {
  return this.setIntArrayList([]);
};


/**
 * optional uint64 chunk_offset = 7;
 * @return {number}
 */
proto.ensightservice.UpdateGeom.prototype.getChunkOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setChunkOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 total_array_size = 8;
 * @return {number}
 */
proto.ensightservice.UpdateGeom.prototype.getTotalArraySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setTotalArraySize = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string hash = 9;
 * @return {string}
 */
proto.ensightservice.UpdateGeom.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdateGeom} returns this
 */
proto.ensightservice.UpdateGeom.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.VariableLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.VariableLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.VariableLevel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.VariableLevel.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    red: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    green: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    blue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    alpha: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.VariableLevel}
 */
proto.ensightservice.VariableLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.VariableLevel;
  return proto.ensightservice.VariableLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.VariableLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.VariableLevel}
 */
proto.ensightservice.VariableLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGreen(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBlue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.VariableLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.VariableLevel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.VariableLevel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.VariableLevel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getRed();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getGreen();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getBlue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getAlpha();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.ensightservice.VariableLevel.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.VariableLevel} returns this
 */
proto.ensightservice.VariableLevel.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float red = 2;
 * @return {number}
 */
proto.ensightservice.VariableLevel.prototype.getRed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.VariableLevel} returns this
 */
proto.ensightservice.VariableLevel.prototype.setRed = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float green = 3;
 * @return {number}
 */
proto.ensightservice.VariableLevel.prototype.getGreen = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.VariableLevel} returns this
 */
proto.ensightservice.VariableLevel.prototype.setGreen = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float blue = 4;
 * @return {number}
 */
proto.ensightservice.VariableLevel.prototype.getBlue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.VariableLevel} returns this
 */
proto.ensightservice.VariableLevel.prototype.setBlue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float alpha = 5;
 * @return {number}
 */
proto.ensightservice.VariableLevel.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.VariableLevel} returns this
 */
proto.ensightservice.VariableLevel.prototype.setAlpha = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ensightservice.UpdateVariable.repeatedFields_ = [8,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdateVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdateVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdateVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    location: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dimension: jspb.Message.getFieldWithDefault(msg, 5, 0),
    undefinedValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    palInterp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    levelsList: jspb.Message.toObjectList(msg.getLevelsList(),
    proto.ensightservice.VariableLevel.toObject, includeInstance),
    subLevels: jspb.Message.getFieldWithDefault(msg, 9, 0),
    undefinedDisplay: jspb.Message.getFieldWithDefault(msg, 10, 0),
    undefinedColorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 11)) == null ? undefined : f,
    texture: msg.getTexture_asB64(),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
    hash: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdateVariable}
 */
proto.ensightservice.UpdateVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdateVariable;
  return proto.ensightservice.UpdateVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdateVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdateVariable}
 */
proto.ensightservice.UpdateVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!proto.ensightservice.UpdateVariable.VarLocation} */ (reader.readEnum());
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {!proto.ensightservice.UpdateVariable.VarDimension} */ (reader.readEnum());
      msg.setDimension(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUndefinedValue(value);
      break;
    case 7:
      var value = /** @type {!proto.ensightservice.UpdateVariable.PaletteInterpolation} */ (reader.readEnum());
      msg.setPalInterp(value);
      break;
    case 8:
      var value = new proto.ensightservice.VariableLevel;
      reader.readMessage(value,proto.ensightservice.VariableLevel.deserializeBinaryFromReader);
      msg.addLevels(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubLevels(value);
      break;
    case 10:
      var value = /** @type {!proto.ensightservice.UpdateVariable.UndefinedDisplay} */ (reader.readEnum());
      msg.setUndefinedDisplay(value);
      break;
    case 11:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addUndefinedColor(values[i]);
      }
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTexture(value);
      break;
    case 13:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdateVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdateVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocation();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDimension();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getUndefinedValue();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPalInterp();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getLevelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ensightservice.VariableLevel.serializeBinaryToWriter
    );
  }
  f = message.getSubLevels();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getUndefinedDisplay();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getUndefinedColorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      11,
      f
    );
  }
  f = message.getTexture_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ensightservice.UpdateVariable.VarLocation = {
  NODAL: 0,
  ELEMENTAL: 1
};

/**
 * @enum {number}
 */
proto.ensightservice.UpdateVariable.VarDimension = {
  SCALAR: 0,
  VECTOR: 1
};

/**
 * @enum {number}
 */
proto.ensightservice.UpdateVariable.PaletteInterpolation = {
  CONTINUOUS: 0,
  BANDED: 1
};

/**
 * @enum {number}
 */
proto.ensightservice.UpdateVariable.UndefinedDisplay = {
  AS_ZERO: 0,
  AS_INVISIBLE: 1,
  USE_PART_COLOR: 2,
  USE_UNDEF_COLOR: 3
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ensightservice.UpdateVariable.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent_id = 2;
 * @return {number}
 */
proto.ensightservice.UpdateVariable.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ensightservice.UpdateVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional VarLocation location = 4;
 * @return {!proto.ensightservice.UpdateVariable.VarLocation}
 */
proto.ensightservice.UpdateVariable.prototype.getLocation = function() {
  return /** @type {!proto.ensightservice.UpdateVariable.VarLocation} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ensightservice.UpdateVariable.VarLocation} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setLocation = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional VarDimension dimension = 5;
 * @return {!proto.ensightservice.UpdateVariable.VarDimension}
 */
proto.ensightservice.UpdateVariable.prototype.getDimension = function() {
  return /** @type {!proto.ensightservice.UpdateVariable.VarDimension} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.ensightservice.UpdateVariable.VarDimension} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setDimension = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional float undefined_value = 6;
 * @return {number}
 */
proto.ensightservice.UpdateVariable.prototype.getUndefinedValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setUndefinedValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional PaletteInterpolation pal_interp = 7;
 * @return {!proto.ensightservice.UpdateVariable.PaletteInterpolation}
 */
proto.ensightservice.UpdateVariable.prototype.getPalInterp = function() {
  return /** @type {!proto.ensightservice.UpdateVariable.PaletteInterpolation} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.ensightservice.UpdateVariable.PaletteInterpolation} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setPalInterp = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * repeated VariableLevel levels = 8;
 * @return {!Array<!proto.ensightservice.VariableLevel>}
 */
proto.ensightservice.UpdateVariable.prototype.getLevelsList = function() {
  return /** @type{!Array<!proto.ensightservice.VariableLevel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ensightservice.VariableLevel, 8));
};


/**
 * @param {!Array<!proto.ensightservice.VariableLevel>} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
*/
proto.ensightservice.UpdateVariable.prototype.setLevelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ensightservice.VariableLevel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.VariableLevel}
 */
proto.ensightservice.UpdateVariable.prototype.addLevels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ensightservice.VariableLevel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.clearLevelsList = function() {
  return this.setLevelsList([]);
};


/**
 * optional uint32 sub_levels = 9;
 * @return {number}
 */
proto.ensightservice.UpdateVariable.prototype.getSubLevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setSubLevels = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional UndefinedDisplay undefined_display = 10;
 * @return {!proto.ensightservice.UpdateVariable.UndefinedDisplay}
 */
proto.ensightservice.UpdateVariable.prototype.getUndefinedDisplay = function() {
  return /** @type {!proto.ensightservice.UpdateVariable.UndefinedDisplay} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.ensightservice.UpdateVariable.UndefinedDisplay} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setUndefinedDisplay = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * repeated float undefined_color = 11;
 * @return {!Array<number>}
 */
proto.ensightservice.UpdateVariable.prototype.getUndefinedColorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 11));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setUndefinedColorList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.addUndefinedColor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.clearUndefinedColorList = function() {
  return this.setUndefinedColorList([]);
};


/**
 * optional bytes texture = 12;
 * @return {!(string|Uint8Array)}
 */
proto.ensightservice.UpdateVariable.prototype.getTexture = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes texture = 12;
 * This is a type-conversion wrapper around `getTexture()`
 * @return {string}
 */
proto.ensightservice.UpdateVariable.prototype.getTexture_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTexture()));
};


/**
 * optional bytes texture = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTexture()`
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateVariable.prototype.getTexture_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTexture()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setTexture = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * map<string, string> attributes = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ensightservice.UpdateVariable.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional string hash = 14;
 * @return {string}
 */
proto.ensightservice.UpdateVariable.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdateVariable} returns this
 */
proto.ensightservice.UpdateVariable.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.UpdateTexture.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.UpdateTexture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.UpdateTexture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateTexture.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    format: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    texels: msg.getTexels_asB64(),
    hash: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.UpdateTexture}
 */
proto.ensightservice.UpdateTexture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.UpdateTexture;
  return proto.ensightservice.UpdateTexture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.UpdateTexture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.UpdateTexture}
 */
proto.ensightservice.UpdateTexture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {!proto.ensightservice.UpdateTexture.TextureFormat} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTexels(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateTexture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.UpdateTexture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.UpdateTexture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.UpdateTexture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTexels_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ensightservice.UpdateTexture.TextureFormat = {
  RGB: 0,
  RGBA: 1
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ensightservice.UpdateTexture.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateTexture} returns this
 */
proto.ensightservice.UpdateTexture.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent_id = 2;
 * @return {number}
 */
proto.ensightservice.UpdateTexture.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateTexture} returns this
 */
proto.ensightservice.UpdateTexture.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TextureFormat format = 3;
 * @return {!proto.ensightservice.UpdateTexture.TextureFormat}
 */
proto.ensightservice.UpdateTexture.prototype.getFormat = function() {
  return /** @type {!proto.ensightservice.UpdateTexture.TextureFormat} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ensightservice.UpdateTexture.TextureFormat} value
 * @return {!proto.ensightservice.UpdateTexture} returns this
 */
proto.ensightservice.UpdateTexture.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 width = 4;
 * @return {number}
 */
proto.ensightservice.UpdateTexture.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateTexture} returns this
 */
proto.ensightservice.UpdateTexture.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 height = 5;
 * @return {number}
 */
proto.ensightservice.UpdateTexture.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ensightservice.UpdateTexture} returns this
 */
proto.ensightservice.UpdateTexture.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes texels = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ensightservice.UpdateTexture.prototype.getTexels = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes texels = 6;
 * This is a type-conversion wrapper around `getTexels()`
 * @return {string}
 */
proto.ensightservice.UpdateTexture.prototype.getTexels_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTexels()));
};


/**
 * optional bytes texels = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTexels()`
 * @return {!Uint8Array}
 */
proto.ensightservice.UpdateTexture.prototype.getTexels_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTexels()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ensightservice.UpdateTexture} returns this
 */
proto.ensightservice.UpdateTexture.prototype.setTexels = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string hash = 7;
 * @return {string}
 */
proto.ensightservice.UpdateTexture.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ensightservice.UpdateTexture} returns this
 */
proto.ensightservice.UpdateTexture.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ensightservice.SceneUpdateCommand.oneofGroups_ = [[2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.ensightservice.SceneUpdateCommand.UpdatecommandCase = {
  UPDATECOMMAND_NOT_SET: 0,
  SCENE_BEGIN: 2,
  SCENE_END: 3,
  DELETE_ID: 4,
  UPDATE_PART: 5,
  UPDATE_GROUP: 6,
  UPDATE_GEOM: 7,
  UPDATE_VARIABLE: 8,
  UPDATE_VIEW: 9,
  UPDATE_TEXTURE: 10
};

/**
 * @return {proto.ensightservice.SceneUpdateCommand.UpdatecommandCase}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getUpdatecommandCase = function() {
  return /** @type {proto.ensightservice.SceneUpdateCommand.UpdatecommandCase} */(jspb.Message.computeOneofCase(this, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ensightservice.SceneUpdateCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.ensightservice.SceneUpdateCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ensightservice.SceneUpdateCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneUpdateCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sceneBegin: (f = msg.getSceneBegin()) && proto.ensightservice.UpdateSceneBegin.toObject(includeInstance, f),
    sceneEnd: (f = msg.getSceneEnd()) && proto.ensightservice.UpdateSceneEnd.toObject(includeInstance, f),
    deleteId: (f = msg.getDeleteId()) && proto.ensightservice.DeleteID.toObject(includeInstance, f),
    updatePart: (f = msg.getUpdatePart()) && proto.ensightservice.UpdatePart.toObject(includeInstance, f),
    updateGroup: (f = msg.getUpdateGroup()) && proto.ensightservice.UpdateGroup.toObject(includeInstance, f),
    updateGeom: (f = msg.getUpdateGeom()) && proto.ensightservice.UpdateGeom.toObject(includeInstance, f),
    updateVariable: (f = msg.getUpdateVariable()) && proto.ensightservice.UpdateVariable.toObject(includeInstance, f),
    updateView: (f = msg.getUpdateView()) && proto.ensightservice.UpdateView.toObject(includeInstance, f),
    updateTexture: (f = msg.getUpdateTexture()) && proto.ensightservice.UpdateTexture.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ensightservice.SceneUpdateCommand}
 */
proto.ensightservice.SceneUpdateCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ensightservice.SceneUpdateCommand;
  return proto.ensightservice.SceneUpdateCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ensightservice.SceneUpdateCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ensightservice.SceneUpdateCommand}
 */
proto.ensightservice.SceneUpdateCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ensightservice.SceneUpdateCommand.SceneUpdateCommandType} */ (reader.readEnum());
      msg.setCommandType(value);
      break;
    case 2:
      var value = new proto.ensightservice.UpdateSceneBegin;
      reader.readMessage(value,proto.ensightservice.UpdateSceneBegin.deserializeBinaryFromReader);
      msg.setSceneBegin(value);
      break;
    case 3:
      var value = new proto.ensightservice.UpdateSceneEnd;
      reader.readMessage(value,proto.ensightservice.UpdateSceneEnd.deserializeBinaryFromReader);
      msg.setSceneEnd(value);
      break;
    case 4:
      var value = new proto.ensightservice.DeleteID;
      reader.readMessage(value,proto.ensightservice.DeleteID.deserializeBinaryFromReader);
      msg.setDeleteId(value);
      break;
    case 5:
      var value = new proto.ensightservice.UpdatePart;
      reader.readMessage(value,proto.ensightservice.UpdatePart.deserializeBinaryFromReader);
      msg.setUpdatePart(value);
      break;
    case 6:
      var value = new proto.ensightservice.UpdateGroup;
      reader.readMessage(value,proto.ensightservice.UpdateGroup.deserializeBinaryFromReader);
      msg.setUpdateGroup(value);
      break;
    case 7:
      var value = new proto.ensightservice.UpdateGeom;
      reader.readMessage(value,proto.ensightservice.UpdateGeom.deserializeBinaryFromReader);
      msg.setUpdateGeom(value);
      break;
    case 8:
      var value = new proto.ensightservice.UpdateVariable;
      reader.readMessage(value,proto.ensightservice.UpdateVariable.deserializeBinaryFromReader);
      msg.setUpdateVariable(value);
      break;
    case 9:
      var value = new proto.ensightservice.UpdateView;
      reader.readMessage(value,proto.ensightservice.UpdateView.deserializeBinaryFromReader);
      msg.setUpdateView(value);
      break;
    case 10:
      var value = new proto.ensightservice.UpdateTexture;
      reader.readMessage(value,proto.ensightservice.UpdateTexture.deserializeBinaryFromReader);
      msg.setUpdateTexture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ensightservice.SceneUpdateCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ensightservice.SceneUpdateCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ensightservice.SceneUpdateCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ensightservice.SceneUpdateCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSceneBegin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ensightservice.UpdateSceneBegin.serializeBinaryToWriter
    );
  }
  f = message.getSceneEnd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ensightservice.UpdateSceneEnd.serializeBinaryToWriter
    );
  }
  f = message.getDeleteId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ensightservice.DeleteID.serializeBinaryToWriter
    );
  }
  f = message.getUpdatePart();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ensightservice.UpdatePart.serializeBinaryToWriter
    );
  }
  f = message.getUpdateGroup();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ensightservice.UpdateGroup.serializeBinaryToWriter
    );
  }
  f = message.getUpdateGeom();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ensightservice.UpdateGeom.serializeBinaryToWriter
    );
  }
  f = message.getUpdateVariable();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ensightservice.UpdateVariable.serializeBinaryToWriter
    );
  }
  f = message.getUpdateView();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ensightservice.UpdateView.serializeBinaryToWriter
    );
  }
  f = message.getUpdateTexture();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ensightservice.UpdateTexture.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ensightservice.SceneUpdateCommand.SceneUpdateCommandType = {
  UPDATE_SCENE_BEGIN: 0,
  UPDATE_SCENE_END: 1,
  DELETE_ID: 2,
  UPDATE_PART: 3,
  UPDATE_GROUP: 4,
  UPDATE_GEOM: 5,
  UPDATE_VARIABLE: 6,
  UPDATE_VIEW: 7,
  UPDATE_TEXTURE: 8
};

/**
 * optional SceneUpdateCommandType command_type = 1;
 * @return {!proto.ensightservice.SceneUpdateCommand.SceneUpdateCommandType}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getCommandType = function() {
  return /** @type {!proto.ensightservice.SceneUpdateCommand.SceneUpdateCommandType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ensightservice.SceneUpdateCommand.SceneUpdateCommandType} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.setCommandType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional UpdateSceneBegin scene_begin = 2;
 * @return {?proto.ensightservice.UpdateSceneBegin}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getSceneBegin = function() {
  return /** @type{?proto.ensightservice.UpdateSceneBegin} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdateSceneBegin, 2));
};


/**
 * @param {?proto.ensightservice.UpdateSceneBegin|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setSceneBegin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearSceneBegin = function() {
  return this.setSceneBegin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasSceneBegin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateSceneEnd scene_end = 3;
 * @return {?proto.ensightservice.UpdateSceneEnd}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getSceneEnd = function() {
  return /** @type{?proto.ensightservice.UpdateSceneEnd} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdateSceneEnd, 3));
};


/**
 * @param {?proto.ensightservice.UpdateSceneEnd|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setSceneEnd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearSceneEnd = function() {
  return this.setSceneEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasSceneEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeleteID delete_id = 4;
 * @return {?proto.ensightservice.DeleteID}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getDeleteId = function() {
  return /** @type{?proto.ensightservice.DeleteID} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.DeleteID, 4));
};


/**
 * @param {?proto.ensightservice.DeleteID|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setDeleteId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearDeleteId = function() {
  return this.setDeleteId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasDeleteId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UpdatePart update_part = 5;
 * @return {?proto.ensightservice.UpdatePart}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getUpdatePart = function() {
  return /** @type{?proto.ensightservice.UpdatePart} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdatePart, 5));
};


/**
 * @param {?proto.ensightservice.UpdatePart|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setUpdatePart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearUpdatePart = function() {
  return this.setUpdatePart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasUpdatePart = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdateGroup update_group = 6;
 * @return {?proto.ensightservice.UpdateGroup}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getUpdateGroup = function() {
  return /** @type{?proto.ensightservice.UpdateGroup} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdateGroup, 6));
};


/**
 * @param {?proto.ensightservice.UpdateGroup|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setUpdateGroup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearUpdateGroup = function() {
  return this.setUpdateGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasUpdateGroup = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UpdateGeom update_geom = 7;
 * @return {?proto.ensightservice.UpdateGeom}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getUpdateGeom = function() {
  return /** @type{?proto.ensightservice.UpdateGeom} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdateGeom, 7));
};


/**
 * @param {?proto.ensightservice.UpdateGeom|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setUpdateGeom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearUpdateGeom = function() {
  return this.setUpdateGeom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasUpdateGeom = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UpdateVariable update_variable = 8;
 * @return {?proto.ensightservice.UpdateVariable}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getUpdateVariable = function() {
  return /** @type{?proto.ensightservice.UpdateVariable} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdateVariable, 8));
};


/**
 * @param {?proto.ensightservice.UpdateVariable|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setUpdateVariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearUpdateVariable = function() {
  return this.setUpdateVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasUpdateVariable = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional UpdateView update_view = 9;
 * @return {?proto.ensightservice.UpdateView}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getUpdateView = function() {
  return /** @type{?proto.ensightservice.UpdateView} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdateView, 9));
};


/**
 * @param {?proto.ensightservice.UpdateView|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setUpdateView = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearUpdateView = function() {
  return this.setUpdateView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasUpdateView = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional UpdateTexture update_texture = 10;
 * @return {?proto.ensightservice.UpdateTexture}
 */
proto.ensightservice.SceneUpdateCommand.prototype.getUpdateTexture = function() {
  return /** @type{?proto.ensightservice.UpdateTexture} */ (
    jspb.Message.getWrapperField(this, proto.ensightservice.UpdateTexture, 10));
};


/**
 * @param {?proto.ensightservice.UpdateTexture|undefined} value
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
*/
proto.ensightservice.SceneUpdateCommand.prototype.setUpdateTexture = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.ensightservice.SceneUpdateCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ensightservice.SceneUpdateCommand} returns this
 */
proto.ensightservice.SceneUpdateCommand.prototype.clearUpdateTexture = function() {
  return this.setUpdateTexture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ensightservice.SceneUpdateCommand.prototype.hasUpdateTexture = function() {
  return jspb.Message.getField(this, 10) != null;
};


