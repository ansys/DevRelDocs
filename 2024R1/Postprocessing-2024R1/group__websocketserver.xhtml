<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: ADR Websocket Server</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li class="current"><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">ADR Websocket Server</div></div>
</div><!--header-->
<div class="contents">
<p>The ADR websocketserver server provides a cross-platform mechanism to route a raw TCP/IP socket connection to a client application using the ws/wss protocol. The tool includes a stand-alone HTML webserver in addition to the websocket server (the two run on different ports).</p>
<h2>Command Line Options</h2>
<p>Websocketserver is a PyQt application that can be run with the ADR supplied cpython interpreter. The resulting command line looks like this:</p>
<div class="fragment"><div class="line">.\bin\cpython.bat .\nexus###\nexus_launcher\websocketserver.py -h</div>
<div class="line">usage: websocketserver.py  [-h] [--http_directory http_directory]</div>
<div class="line">                          [--http_port http_server_port]</div>
<div class="line">                          [--cert ssl_certificate_filename]</div>
<div class="line">                          [--key ssl_key_filename] [--security_token token]</div>
<div class="line">                          [--remote_session_config remote_config.json]</div>
<div class="line">                          [--client_hostname client_hostname]</div>
<div class="line">                          [--client_port client_port]</div>
<div class="line">                          [--grpc_port grpc_port]</div>
<div class="line">                          [--timeout timeout_seconds]</div>
<div class="line">                          [--local_session appname count]</div>
<div class="line">                          [--verbose verbose_level] [--log_file log_filename]</div>
<div class="line">                          ws_server_port</div>
<div class="line"> </div>
<div class="line">ADR websocket proxy server</div>
<div class="line"> </div>
<div class="line">positional arguments:</div>
<div class="line">  ws_server_port        The port the server accepts incoming websocket</div>
<div class="line">                        connection requests over</div>
<div class="line"> </div>
<div class="line">optional arguments:</div>
<div class="line">  -h, --help              show this help message and exit</div>
<div class="line">  --http_directory        http_directory</div>
<div class="line">                          Directory to serve up files from via http. It enables</div>
<div class="line">                          HTTP services.</div>
<div class="line">  --http_port             http_server_port</div>
<div class="line">                          Port to support http file serving on. Default:9090</div>
<div class="line">  --grpc_port             grpc_server_port</div>
<div class="line">                          Port of an EnSight gRPC service to be exposed via REST. Default:0 (none)</div>
<div class="line">  --cert                  ssl_certificate_filename</div>
<div class="line">                          Filename of the ssl certificate</div>
<div class="line">  --key                   ssl_key_filename</div>
<div class="line">                          Filename of the ssl key</div>
<div class="line">  --security_token        token</div>
<div class="line">                          REST API security token.</div>
<div class="line">                          Default:WEBSOCKETSERVER_SECURITY_TOKEN environmental</div>
<div class="line">                          variable value</div>
<div class="line">  --remote_session_config remote_config.json</div>
<div class="line">                          Name of the remote session configuration file</div>
<div class="line">  --client_hostname       client_hostname</div>
<div class="line">                          Hostname of the socket to serve using the websocket</div>
<div class="line">                          protocol on ws_server_port</div>
<div class="line">  --client_port           client_port</div>
<div class="line">                          Port number of the socket to serve using the websocket</div>
<div class="line">                          protocol on ws_server_port</div>
<div class="line">  --timeout               timeout_seconds</div>
<div class="line">                          Number of seconds before an unused reservation is</div>
<div class="line">                          reclaimed</div>
<div class="line">  --local_session         appname count</div>
<div class="line">                          Specify some number of locally executed, built-in</div>
<div class="line">                          sessions. These are specified by strings in the form</div>
<div class="line">                          &#39;appname count&#39; where appname can be &#39;ensight&#39; or</div>
<div class="line">                          &#39;envision&#39;. The count is the maximum number of instances</div>
<div class="line">                          of that application websocketserver may have</div>
<div class="line">                          reserved/running simultaneously. This argument may be</div>
<div class="line">                          repeated.</div>
<div class="line">  --verbose               verbose_level</div>
<div class="line">                          Enable debugging information</div>
<div class="line">  --log_file              log_filename</div>
<div class="line">                          Save program output to the named log file instead of</div>
<div class="line">                          stdout</div>
</div><!-- fragment --><p> Websocketserver will listen for incoming websocket requests on the port specified by ws_server_port. In the basic mode of operation, the host and port specified by &ndash;client_hostname and &ndash;client_port will be served up in response to incoming requests. <br  />
</p>
<p>Websocket server includes a reservation and launching mechanism that can support local, preconfigured services such as EnSight and EnVision or more complex, scripted operations via custom service configurations. A specific example of local services is illustrated in the <a class="el" href="group__websocketserver.xhtml#builtin-service-operation">Builtin Service Operation</a> section. More complex operations can be configured using the &ndash;remote_session_config mechanism outlined in the <a class="el" href="group__websocketserver.xhtml#external-services">External Services</a> section.</p>
<p>The server can also provide HTTP based services if the &ndash;http_directory option is specified. If it is, the files in the directory specified by that option will be served up via HTTP on the port specified by &ndash;http_port. Enabling the HTTP server also enables a <a class="el" href="group__websocketserver.xhtml#rest-api">REST API</a> that can be used to interact with the server via HTTP GET requests and a /ansys redirect <a class="el" href="group__websocketserver.xhtml#http-server">HTTP Server</a> which simplifies the deployment of tools that leverage the Ansys ADR 3D viewer web component. <br  />
</p>
<p>The timeout option specifies that a reservation that is made, but left unused for some number of seconds may be reclaimed by the system (e.g. the user reserved a service instance but did not activate it while viewing a web page containing the reservation token). The default timeout is 5min (300s) if left unspecified.</p>
<h2><a class="anchor" id="basic-operation"></a>
Basic Operation</h2>
<p>Websocketserver will route a TCP/IP stream from a listening socket to a client via the ws or wss protocol. Usually the client is a JavaScript application running in a browser. For example, one could tunnel the EnSight vnc protocol to a viewer in a webpage like this:</p>
<ol type="1">
<li>Launch EnSight with an embedded vnc service listening for connections on port 5900 <div class="fragment"><div class="line">bin\ensight.bat -vnc &quot;vnc://?primary_password=veronica&quot;</div>
</div><!-- fragment --></li>
<li>Launch websocketserver serving up some web pages (the JavaScript VNC client) on port 9000. The local host port 5900 should be served up via ws:// on port 9090 <div class="fragment"><div class="line">bin\cpython.bat nexus###\nexus_launcher\websocketserver.py --http_directory nexus### --http_port 9000 --client_hostname localhost --client_port 5900 --verbose 1 9090</div>
</div><!-- fragment --></li>
<li>In a web browser, browse to this URL <div class="fragment"><div class="line">http://localhost:9000/ansys###/nexus/novnc/vnc_envision.html?password=veronica&amp;autoconnect=true&amp;host=localhost&amp;port=9090</div>
</div><!-- fragment --> The browser-based VNC client will connect to the running EnSight instance and display the remote imagery. Websocketserver includes REST API to control its operation. <br  />
</li>
<li>The server may be stopped by browsing to the URL: <div class="fragment"><div class="line">http://localhost:9000/v1/stop</div>
</div><!-- fragment --></li>
</ol>
<h2><a class="anchor" id="builtin-service-operation"></a>
Builtin Service Operation</h2>
<p>Websocketserver allows for some pre-configured services, including EnSight and EnVision to be used. This can be used to support 3D remote graphics using EnVision like this:</p>
<ol type="1">
<li>Launch websocketserver serving up some web pages (http) on port 28000 and the web socket protocol on port 28001: <div class="fragment"><div class="line">bin\cpython.bat nexus###\nexus_launcher\websocketserver.py --http_directory nexus### --http_port 28000 --client_hostname localhost --local_session envision 4 --verbose 1 28001</div>
</div><!-- fragment --></li>
<li>In a web browser, browse to this URL: <div class="fragment"><div class="line">http://localhost:28000/ansys###/nexus/test/viewer_test_vnc.html</div>
</div><!-- fragment --></li>
</ol>
<p>The testing web page will be loaded. The upper panel displays a proxy image which may be clicked to launch a new EnVision session. The lower panel will automatically launch an EnVision session, interactively viewing a 3D dataset.</p>
<h2><a class="anchor" id="external-services"></a>
External Services</h2>
<p>Websocketserver provides a mechanism for to launch an application in response to a ws/wss request. The application being launched must provide the host and port number of a listening socket that websocketserver will connect to and tunnel via the ws/wss protocol to the caller. Each unique launching mechanism is referred to as a "service". Individual services may serve up multiple potential socket connections via websocketserver. A service instance may require significant system resources, so a REST-based service reservation/allocation system is built into websocketserver. <br  />
</p>
<p>Before a service can be instantiated, it must first be reserved. The reservation process marks the service as having been allocated, usually for use in a single web page. The reservation process associates a "token" with the potential service instance. Tokens are generally GUIDs, but should be treated as short strings that do not include any whitespace. A reservation may be requested via the <a class="el" href="group__websocketserver.xhtml#rest-api">REST API</a> interface. An allocated token is returned as the result of a successful reservation. Normally, an application would embed this token into the HTML/JavaScript of a web page. When an incoming ws/wss request is make with the aforementioned token, websocketserver will launch the hosting application. It will then connect the listening socket created during the launching process to the incoming ws/wss connection. When the w/wss connection is lost, websocketserver will arrange for the launched application to be stopped.</p>
<p>In the Basic Operation example where the socket being forwarded had previously been established, only the hostname and port of the websocketserver web socket service are included in the URL. For an external web service to be started by websocketserver, the allocated token must be passed in the URL that is used to begin the websocket stream so websocketserver knows what to launch. Expanding on the example above, the path of "websockify" is passed and the "token" passed in the query portion of the URL:</p>
<div class="fragment"><div class="line">http://localhost:9000/vnc_envision.html?path=websockify&amp;token={}&amp;session_name={}&amp;autoconnect=true&amp;host=127.0.0.1&amp;port=9090</div>
</div><!-- fragment --><p>Note: websocketserver actually ignores the path and relies only on the token. The path feature is designed to be used by a webserver (e.g. nginx) that might be providing a front-end proxy to websocketserver. The webserver can use the path to decide to proxy the request to websocketserver.</p>
<h3>Service Configuration</h3>
<p>Services are described to websocketserver via a service config file. This is a JSON format file provided by the end-user. It includes a list of "services" and a link to a Python script that encapsulates the startup and shutdown of a service instance. The script is responsible for initiating and terminating a socket connection that the websocketserver engine will make available via the websocket protocol using a URL containing the service specific token. An example might look like this: </p><div class="fragment"><div class="line">{</div>
<div class="line">  &quot;Local Software Session&quot;: {&quot;script&quot;: &quot;desktop_session.py&quot;, &quot;count&quot;: 2,</div>
<div class="line">                             &quot;options&quot;: {&quot;sizes&quot;: [&quot;12080x1024&quot;, &quot;1600x1200&quot;], &quot;display_base&quot;: 100}},</div>
<div class="line">  &quot;Cluster Node Session&quot;: {&quot;script&quot;: &quot;x11vnc_desktop_session.py&quot;, &quot;count&quot;: 1,</div>
<div class="line">                           &quot;options&quot;: {&quot;sizes&quot;: [&quot;1600x1200&quot;], &quot;group&quot;: &quot;ClusterRendering&quot;, &quot;host&quot;: &quot;n8&quot;}}</div>
<div class="line">}</div>
</div><!-- fragment --><p> This configuration file defines an object with multiple keys (e.g. "Local Software Session"). <br  />
 Each key is the name of a type of service. The value of each key is another object. <br  />
 There are three required keys in the object:</p>
<ul>
<li>script : the name of a Python script file responsible for creating an object that can start and stop a service.</li>
<li>count : the maximum number of simultaneous instances of this service type</li>
<li>options : a dictionary of optional data items that can be used by ADR to customize the web interface and any additional data items that can be used by the session instance</li>
</ul>
<p>Each type of service must provide the name of a Python "script" file. This file must create an instance of a Python object (a subclass of the RemoteServiceScript class) that is responsible for starting and ending a service instance. There can be multiple instances of each session type service at the same time. This is limited with the "count" key which specifies the maximum number of simultaneously allowed services of that type. When a service of a given type is started, an index number running from zero to this number minus one will be passed to the Python code. The code should use this number to ensure that each service instance uses non-conflicting resources (e.g. port numbers, node allocations, graphics cards, etc).</p>
<p>Additional pieces of data can be passed via the "options" object. The option dictionary is passed to the RemoteServiceScript creation method as 'common options' and by default is stored as the _common_options attribute on the RemoteServiceScript subclass instance. The system will also look for the "group" key in the options dictionary. In the example above, this key has been set to the value "ClusterRendering" for instances of the "Cluster Node Session" session type. If the "group" key is set to the name of an ADR administration group, the service type will only be made available to users who are members of that specific group. In the example, if you are not a member of the "ClusterRendering" group, you will not be allowed to create "Cluster Node Session" service.</p>
<p>If the service is intended to provide file viewing ability, the "file_ext" options dictionary key may be set to a list of filename extensions that the service knows how to view.</p>
<h2>Internal Services</h2>
<p>In addition to the external services specified in the JSON file specified by the &ndash;remote_session_config option, websocketserver support the notation of internal, built-in services. Two such services are currently defined: 'ensight' and 'envision'. The &ndash;local_session command line option specifies the number of each of these services websocketserver will make available. For example: &ndash;local_session ensight 2 will make two instances of EnSight available. The local session is created by launching the associated application on the local computer and the vnc server will be made available over the websocket protocol as per the external services described previously.</p>
<h2><a class="anchor" id="http-server"></a>
HTTP Server</h2>
<p>If &ndash;http_port is provided on the command line, websocketserver will start an HTTP server on that port that will serve up readonly copies of the file tree rooted at the directory pointed to by &ndash;http_directory. It will allow the user to browse the files and can be used to deliver additional web content. Two URL namespaces are reserved by the server. The /v1/ root pathname (and future /v{x}/ pathnames) are reserved for the <a class="el" href="group__websocketserver.xhtml#rest-api">REST API</a>. The /ansys/ root pathname is reserved for the purpose of serving other <a class="el" href="group__websocketserver.xhtml#ansys-nexus-viewer">Ansys services</a>.</p>
<h3><a class="anchor" id="ansys-nexus-viewer"></a>
Ansys ADR Viewer Service</h3>
<p>If the GET pathname starts with /ansys/, then the directory content served up will be the ADR /ansys directory. For example, if one specified &ndash;http_directory as /tmp, then <code><a href="http://{host}:{port}/tmp/foo">http://{host}:{port}/tmp/foo</a></code> would return the file /tmp/foo to the caller. The URL <code><a href="http://{host}:{port}/ansys">http://{host}:{port}/ansys</a>###/nexus/viewer-loader.js</code>, then the file returned will be <code>{install_root}/ansys###/nexus/viewer-loader.js</code>. This makes it easy to start a 3D viewer service via webcomponentviewer_api.</p>
<h3><a class="anchor" id="ensight-rest-api"></a>
EnSight REST API Service</h3>
<p>Starting with 2024 R1, EnSight now supports a <a href="https://ensight.docs.pyansys.com/dev/rest_api/rest_api.html">REST API</a>. Websocketserver can be configured to serve up this API as well. To do this, websocketserver needs to be able to create a gRPC connection to the EnSight instance. The &ndash;grpc_port command line option is used for this. It is assumed the host is the same as &ndash;client_hostname. Note that one must provide a security key in this case. That key will be used as the sessionid for the REST API.</p>
<h2><a class="anchor" id="rest-api"></a>
REST API</h2>
<p>Websocketserver includes a REST API that allows an external application (ADR) to stop the server, reserve a session and view the core status of the services layer. If the incoming GET pathname starts with /v1/, then the GET request is interpreted as being a REST API call. The current API is implemented using REST GET operations on the websocketserver HTML server port (&ndash;http_port). Note that &ndash;http_directory must be specified for the HTML server to be enabled. The API namespace is currently defined as:</p>
<ul>
<li><code>/v1/stop</code> - shutdown the server</li>
<li><code>/v1/status</code> - return the status of the current services as a JSON formatted string</li>
<li><code>/v1/status_view</code> - return the status of the current services as an HTML table (human readable)</li>
<li><code>/v1/reserve/{servicename}?option1=value1&amp;option2=value2</code> - reserve a service with the specified options</li>
<li><code>/v1/release/{token}</code> - release a reserved or active token</li>
</ul>
<h3>Security token</h3>
<p>The websocketserver REST API can be protected using a shared secret that must be included in all REST GET operations. When the websocketserver is started, the security token can be supplied via the 'WEBSOCKETSERVER_SECURITY_TOKEN' environmental variable or via the &ndash;security_token command line option. If the token is specified, then the query field 'security_token' must be supplied. For example, if the server is launched with "--security_token HELLO" then the REST URI for the status operation would look like: "/v1/status?security_token=HELLO". Without the token, a 401 error will result. </p>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
