<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: D:/Product-src/ensight/user_defined_src/readers/dvs/test_dvs_server.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_efb5d67553d49169c49ef58de7241528.xhtml">ensight</a></li><li class="navelem"><a class="el" href="dir_4e0d2d4294803448cbce42ae5b7dbd77.xhtml">user_defined_src</a></li><li class="navelem"><a class="el" href="dir_359f060799dd509662b36dfd7584eb2e.xhtml">readers</a></li><li class="navelem"><a class="el" href="dir_1e237ac59110de3c5c813eb754d30339.xhtml">dvs</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">test_dvs_server.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="test__dvs__server_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*  *************************************************************</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment"> *   Copyright 2017-2023 ANSYS, Inc.</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment"> *   All Rights Reserved.</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"> *</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment"> *        Restricted Rights Legend</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"> *</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"> *   Use, duplication, or disclosure of this</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment"> *   software and its documentation by the</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment"> *   Government is subject to restrictions as</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment"> *   set forth in subdivision [(b)(3)(ii)] of</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"> *   the Rights in Technical Data and Computer</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment"> *   Software clause at 52.227-7013.</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"> *  *************************************************************</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment"> */</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="preprocessor">#include &lt;stdlib.h&gt;</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="preprocessor">#include &lt;stdint.h&gt;</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="preprocessor">#include &lt;stdarg.h&gt;</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="preprocessor">#include &quot;<a class="code" href="dvs__server__interface_8h.xhtml">dvs_server_interface.h</a>&quot;</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="preprocessor">#include &quot;<a class="code" href="dynamic__visualization__store__enums_8h.xhtml">dynamic_visualization_store_enums.h</a>&quot;</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="preprocessor">#include &quot;logger.h&quot;</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#include &lt;atomic&gt;</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="preprocessor">#include &lt;mutex&gt;</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="preprocessor">#include &lt;thread&gt;</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="preprocessor">#include &lt;signal.h&gt;</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="keyword">static</span> std::atomic&lt;bool&gt; s_terminate{<span class="keyword">false</span>};</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="keyword">static</span> std::mutex s_server_mutex;</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword">static</span> <a class="code hl_class" href="class_d_v_s_1_1_i_server.xhtml">DVS::IServer</a>* s_server{<span class="keyword">nullptr</span>};</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="test__dvs__server_8cpp.xhtml#a89a8322bea357674e81ba9cbdefe0378">   55</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="test__dvs__server_8cpp.xhtml#a89a8322bea357674e81ba9cbdefe0378">signal_callback_handler</a>(<span class="keywordtype">int</span> signum)</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>{</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>    fprintf(stdout, <span class="stringliteral">&quot;Caught Signal: %i\n&quot;</span>, signum);</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    s_terminate = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    std::lock_guard&lt;std::mutex&gt; lock(s_server_mutex);</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>    <span class="keywordflow">if</span> (s_server)</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    {</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>        s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a6cb1f69ad4b9213dde48d4cd5b3f2111">terminating</a>();</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    }</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>}</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="test__dvs__server_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">   73</a></span><span class="keywordtype">int</span> <a class="code hl_function" href="test__dvs__server_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>{</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="comment">//Register a signal handler instead of just killing the app so</span></div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    <span class="comment">//we can shutdown gracefully</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    signal(SIGINT, <a class="code hl_function" href="test__dvs__server_8cpp.xhtml#a89a8322bea357674e81ba9cbdefe0378">signal_callback_handler</a>);</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    uint32_t port = 50055;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    uint32_t delay_ms = 500;</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    <span class="keywordtype">char</span> host[512] = {0};</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    strcpy(host, <span class="stringliteral">&quot;127.0.0.1&quot;</span>);</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    <span class="keywordtype">char</span> protocol[10] = {0};</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    strcpy(protocol, <span class="stringliteral">&quot;grpc&quot;</span>);</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>    <span class="keywordtype">char</span> secret[255] = {0};</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>    <span class="keywordtype">char</span> cache_uri[512] = {0};</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    <span class="keywordtype">char</span> dvs_file_loc[1024] = {0};</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    uint32_t debug_wait_sec = 0;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    uint32_t server_number = 0;</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    uint32_t local_ranks = 1;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    uint32_t server_verbosity = 3;</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    uint32_t timeout_sec = 15;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    uint32_t i = 1;</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    <span class="keywordflow">while</span> (i &lt; argc)</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    {</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>        <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-p&quot;</span>) == 0 ) &amp;&amp; (i &lt; argc - 1))</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>        {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>            i++;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>            port = atoi(argv[i]);</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>        }</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-h&quot;</span>) == 0) &amp;&amp; (i &lt; argc - 1))</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>        {</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>            i++;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>            strncpy(host, argv[i], 255);</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>        }</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-protocol&quot;</span>) == 0) &amp;&amp; (i &lt; argc - 1))</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>        {</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>            i++;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>            strncpy(protocol, argv[i], 10);</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>            <span class="keywordflow">if</span> (strcmp(protocol, <span class="stringliteral">&quot;grpc&quot;</span>) != 0 &amp;&amp; strcmp(protocol, <span class="stringliteral">&quot;null&quot;</span>) != 0 )</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>            {</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>                fprintf(stderr, <span class="stringliteral">&quot;protocol: %s invalid\n&quot;</span>, protocol);</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>                exit(1);</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>            }</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>        }</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-d&quot;</span>) == 0) &amp;&amp; (i &lt; argc - 1))</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>        {</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>            i++;</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>            delay_ms = atoi(argv[i]);</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>        }</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(argv[i], <span class="stringliteral">&quot;-secret&quot;</span>) == 0)</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>        {</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>            i++;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>            strncpy(secret, argv[i], 255);</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>        }</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(argv[i], <span class="stringliteral">&quot;-server&quot;</span>) == 0 &amp;&amp; (i &lt; argc - 3))</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>        {</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>            i++;</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>            server_number = atoi(argv[i++]);</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>            local_ranks = atoi(argv[i++]);</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>            server_verbosity = atoi(argv[i]);</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>        }</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(argv[i], <span class="stringliteral">&quot;-cache_uri&quot;</span>) == 0)</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>        {</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>            i++;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>            strncpy(cache_uri, argv[i], 512);</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>        }</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(argv[i], <span class="stringliteral">&quot;-debug_wait&quot;</span>) == 0)</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>        {</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>            i++;</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>            debug_wait_sec = atoi(argv[i]);</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>        }</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(argv[i], <span class="stringliteral">&quot;-timeout&quot;</span>) == 0)</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>        {</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>            i++;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>            timeout_sec = atoi(argv[i]);</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>        }</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(argv[i], <span class="stringliteral">&quot;-dvs_file&quot;</span>) == 0)</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>        {</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>            i++;</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>            strncpy(dvs_file_loc, argv[i], <span class="keyword">sizeof</span>(dvs_file_loc)-1);</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>        }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>        {</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>            fprintf(stderr, <span class="stringliteral">&quot;Unknown option: %s\n&quot;</span>, argv[i]);</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>            fprintf(stderr, <span class="stringliteral">&quot;Usage: %s [-p port] [-h host] [-d ms delay] [-s dx dy dz] \n&quot;</span>, argv[0]);</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>            fprintf(stderr, <span class="stringliteral">&quot;Options:\n&quot;</span>);</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>            fprintf(stderr, <span class="stringliteral">&quot;  -p port              Server port to connect to.  Default: %u\n&quot;</span>, port);</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>            fprintf(stderr, <span class="stringliteral">&quot;  -h host              Server hostname to connect to.  Default: %s\n&quot;</span>, host);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>            fprintf(stderr, <span class="stringliteral">&quot;  -protocol str        Server protocol. I.E. grpc or null. Default: grpc&quot;</span>);</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>            fprintf(stderr, <span class="stringliteral">&quot;  -d delay(ms)         Milliseconds to delay between server updates.  Default: %u\n&quot;</span>, delay_ms);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>            fprintf(stderr, <span class="stringliteral">&quot;  -secret string       Shared secret to use when talking with server Default: no shared secret\n&quot;</span>);</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>            fprintf(stderr, <span class="stringliteral">&quot;  -server n r v        Start a server using server number [n], expecting [r] local ranks for DVS connections to connect to with verbosity [v]. Local Rank Min/Max: 1/1000\n&quot;</span>);</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>            fprintf(stderr, <span class="stringliteral">&quot;  -cache_uri str       The URI for the server to use for the cache. Default: No cache\n&quot;</span>);</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>            fprintf(stderr, <span class="stringliteral">&quot;  -dvs_file str        Set a location for the dvs files to be created Default: ./\n&quot;</span>);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>            fprintf(stderr, <span class="stringliteral">&quot;  -timeout sec         Shutdown the server if no new data has been received within timeout. Default: %u sec\n&quot;</span>, timeout_sec);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>            fprintf(stderr, <span class="stringliteral">&quot;  -debug_wait s        Wait for [s] for debugging\n&quot;</span>);</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>            exit(1);</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>        }</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>        i++;</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>    }</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    <span class="comment">//This is just used for debugging/attaching to the app if some problem arises</span></div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>    <span class="keywordflow">if</span> (debug_wait_sec &gt; 0) {</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>        std::this_thread::sleep_for(std::chrono::seconds(debug_wait_sec));</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>    }</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    <span class="keywordtype">char</span> uri[512] = {0};</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    sprintf(uri, <span class="stringliteral">&quot;%s://%s:%u&quot;</span>, protocol, host, port);</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    <span class="comment">//The server URI is used to setup the protocol host and port of the server</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    <span class="comment">//(where and how clients need to connect). It will be something like:</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    <span class="comment">//grpc:://localhost:50055</span></div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    fprintf(stderr, <span class="stringliteral">&quot;Server URI: %s\n&quot;</span>, uri);</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    fprintf(stderr, <span class="stringliteral">&quot;Update Delay(ms): %u\n&quot;</span>, delay_ms);</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    {</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>        std::lock_guard&lt;std::mutex&gt; lock(s_server_mutex);</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>        s_server = DVS::CREATE_SERVER_INSTANCE(uri);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>    }</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>    <span class="keywordflow">if</span> (s_server == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>    {</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>        fprintf(stderr, <span class="stringliteral">&quot;Failed to create server\n&quot;</span>);</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>        exit(1);</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    }</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    <span class="keywordtype">char</span> temp[10];</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>    snprintf(temp, 10, <span class="stringliteral">&quot;%u&quot;</span>, server_verbosity);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c">set_option</a>(<span class="stringliteral">&quot;VERBOSE&quot;</span>,temp);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>    <span class="keywordflow">if</span> (strlen(cache_uri) &gt; 0)</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>    {</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>        <span class="comment">//If not using a cache_uri the cache will be all in memory, not</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>        <span class="comment">//really useful for this specific test server app but showing a simple example.</span></div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>        <span class="comment">//In the future you will be able to use the DVS Reader API to read data from</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>        <span class="comment">//memory using this instead of needing to read data from the cache.</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>        <span class="comment">//The cache URI should be something like: hdf5://localhost/D:/my_cache</span></div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>        s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c">set_option</a>(<span class="stringliteral">&quot;CACHE_URI&quot;</span>,cache_uri);</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>    }</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>    <span class="keywordflow">if</span> (strlen(dvs_file_loc) &gt; 0)</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>    {</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>        <span class="comment">//The DVS file location let&#39;s you point the location of the auto created</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>        <span class="comment">//.dvs files to another location, absolute or relative to the cache_uri location</span></div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>        s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c">set_option</a>(<span class="stringliteral">&quot;DVS_FILE_LOCATION&quot;</span>, dvs_file_loc);</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>    }</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>    <span class="keywordflow">if</span> (strlen(secret) &gt; 0)</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>    {</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>        <span class="comment">//This is needed if wanting to use a simple secret to allow clients</span></div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>        <span class="comment">//to connect to you. The clients will also need this secret.</span></div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>        s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c">set_option</a>(<span class="stringliteral">&quot;SERVER_SECURITY_SECRET&quot;</span>, secret);</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>    }</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>    <span class="comment">//The startup_unthreaded call will start/initialize the server and block until</span></div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    <span class="comment">//a all clients have initialized the dataset and sent a single timestep. A call</span></div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>    <span class="comment">//to s_server-&gt;terminating() can be seen above in the signal handler to allow you</span></div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    <span class="comment">//to exit this call early.</span></div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#ac61ce2698eec1adb521bbbf60cb78756">startup_unthreaded</a>(server_number, local_ranks);</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>    uint32_t size;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>    <span class="keyword">auto</span> _uri = s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a087c3fed77651e0f62d7189f44a32443">get_uri</a>();</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>    <span class="keywordflow">if</span> (_uri){</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>        fprintf(stderr, <span class="stringliteral">&quot;Actual Server URI: %s\n&quot;</span>, _uri);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>    }</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    <span class="comment">//For this example we are going to quit early if number pending or number complete have not</span></div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>    <span class="comment">//changed within timeout_sec seconds.</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    uint32_t num_pending = 0;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    uint32_t num_complete = 0;</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    <span class="keyword">auto</span> start_time = std::chrono::system_clock::now();</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>    <span class="keywordflow">while</span> (!s_terminate) {</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>        <span class="comment">//This is the main control loop of the server. DVS::IServer::update() just</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>        <span class="comment">//needs to be called in a loop to handle the server state until the server</span></div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>        <span class="comment">//should be terminated.</span></div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>        <span class="comment">//Note: update() will flush data to the cache so shutting down / exiting mid</span></div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>        <span class="comment">//update will likely cause cache corruption.</span></div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>        <a class="code hl_typedef" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> ret_val = s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#add6fcb530763dc217f5b3c17b25093c0">update</a>();</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>        <span class="comment">// Avoid burning up a CPU waiting for the I/O to complete</span></div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>        std::this_thread::sleep_for(std::chrono::milliseconds(delay_ms));</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span> </div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>        uint32_t cur_num_pending = 0;</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>        uint32_t cur_num_complete = 0;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>        s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a8a5339f222bcd46b06c2fa9a474b2c37">get_timestep_count</a>(cur_num_pending, cur_num_complete);</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>        <span class="keywordflow">if</span> (cur_num_pending == num_pending &amp;&amp; cur_num_complete == num_complete) {</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>            <span class="comment">//If our values haven&#39;t changed check to see if we should time out</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>            std::chrono::duration&lt;double&gt; elapsed_seconds = std::chrono::system_clock::now() - start_time;</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>            <span class="keywordflow">if</span> (elapsed_seconds.count() &gt; timeout_sec) {</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>                <span class="comment">//Terminate the server and quit out</span></div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>                s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a6cb1f69ad4b9213dde48d4cd5b3f2111">terminating</a>();</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>                s_terminate = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>            }</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>        }</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>        <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>            <span class="comment">//We are different so reset our counters</span></div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>            start_time = std::chrono::system_clock::now();</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>            num_pending = cur_num_pending;</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>            num_complete = cur_num_complete;</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>        }</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>    }</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>    num_pending = 1;</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    num_complete = 0;</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>    <span class="keywordflow">while</span> (num_pending &gt; 0) {</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>        <span class="comment">//This loop may or may not need to be done by a application. But is here</span></div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>        <span class="comment">//to show potential cleanup when terminating early. If terminating you may</span></div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>        <span class="comment">//want to finish the current in flight timestep. Since the server has been</span></div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>        <span class="comment">//told it is terminating in the signal handler above it will not accept new</span></div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>        <span class="comment">//timesteps but will allow pending timesteps to still complete.</span></div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>        <span class="comment">//Note: A user probably will want to do more due dilligence than this when</span></div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>        <span class="comment">//shutting down. A timestep that is waiting on a client that is hung or crashed</span></div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>        <span class="comment">//will never flip from pending-&gt;complete currently. This could cause this loop</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>        <span class="comment">//to be infinite waiting on a client who will never send its data.</span></div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>        <a class="code hl_typedef" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> error = s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#add6fcb530763dc217f5b3c17b25093c0">update</a>();</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>        <span class="keywordflow">if</span> (error != <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>            <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>        }</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>        <span class="comment">//If the update() call above isn&#39;t called in this loop num_pending will</span></div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>        <span class="comment">//never change also calling this loop to be infinite. We must update the server</span></div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>        <span class="comment">//to get timestep state changes.</span></div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>        error = s_server-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_server.xhtml#a8a5339f222bcd46b06c2fa9a474b2c37">get_timestep_count</a>(num_pending, num_complete);</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>        <span class="keywordflow">if</span> (error != <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>            <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>        }</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>        <span class="comment">// Avoid burning up a CPU waiting for the I/O to complete</span></div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>        std::this_thread::sleep_for(std::chrono::milliseconds(delay_ms));</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>    }</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span> </div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>    <span class="comment">//Destroy the server on exit, guarding against the s_server destruction here</span></div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>    <span class="comment">//in case the signal handler above is triggered.</span></div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>    std::lock_guard&lt;std::mutex&gt; lock(s_server_mutex);</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>    DVS::DESTROY_SERVER_INSTANCE(s_server);</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>    s_server = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span> </div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>}</div>
<div class="ttc" id="aclass_d_v_s_1_1_i_server_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_server.xhtml">DVS::IServer</a></div><div class="ttdoc">Interface class used to run a dynamic data server in a thread accepting incoming client connections.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__server__interface_8h_source.xhtml#l00056">dvs_server_interface.h:57</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_server_xhtml_a087c3fed77651e0f62d7189f44a32443"><div class="ttname"><a href="class_d_v_s_1_1_i_server.xhtml#a087c3fed77651e0f62d7189f44a32443">DVS::IServer::get_uri</a></div><div class="ttdeci">virtual const char * get_uri()=0</div><div class="ttdoc">Get URI of this server.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_server_xhtml_a1edb4dec67086f10bc0329b6adf9084c"><div class="ttname"><a href="class_d_v_s_1_1_i_server.xhtml#a1edb4dec67086f10bc0329b6adf9084c">DVS::IServer::set_option</a></div><div class="ttdeci">virtual void set_option(const char *key, const char *value)=0</div><div class="ttdoc">Set a specific option on the server, these are used during startup See See Server Options.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_server_xhtml_a6cb1f69ad4b9213dde48d4cd5b3f2111"><div class="ttname"><a href="class_d_v_s_1_1_i_server.xhtml#a6cb1f69ad4b9213dde48d4cd5b3f2111">DVS::IServer::terminating</a></div><div class="ttdeci">virtual dvs_ret terminating()=0</div><div class="ttdoc">Call to begin terminating the server.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_server_xhtml_a8a5339f222bcd46b06c2fa9a474b2c37"><div class="ttname"><a href="class_d_v_s_1_1_i_server.xhtml#a8a5339f222bcd46b06c2fa9a474b2c37">DVS::IServer::get_timestep_count</a></div><div class="ttdeci">virtual dvs_ret get_timestep_count(uint32_t &amp;num_pending, uint32_t &amp;num_complete) const =0</div><div class="ttdoc">return the current number of pending and complete timesteps in the server</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_server_xhtml_ac61ce2698eec1adb521bbbf60cb78756"><div class="ttname"><a href="class_d_v_s_1_1_i_server.xhtml#ac61ce2698eec1adb521bbbf60cb78756">DVS::IServer::startup_unthreaded</a></div><div class="ttdeci">virtual dvs_ret startup_unthreaded(uint32_t server_number, uint32_t local_ranks)=0</div><div class="ttdoc">Startup a server manually without threads.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_server_xhtml_add6fcb530763dc217f5b3c17b25093c0"><div class="ttname"><a href="class_d_v_s_1_1_i_server.xhtml#add6fcb530763dc217f5b3c17b25093c0">DVS::IServer::update</a></div><div class="ttdeci">virtual dvs_ret update()=0</div><div class="ttdoc">Perform a server update.</div></div>
<div class="ttc" id="advs__server__interface_8h_xhtml"><div class="ttname"><a href="dvs__server__interface_8h.xhtml">dvs_server_interface.h</a></div><div class="ttdoc">C++ Server API for using Dynamic Visualization Store Server.</div></div>
<div class="ttc" id="adynamic__visualization__store__enums_8h_xhtml"><div class="ttname"><a href="dynamic__visualization__store__enums_8h.xhtml">dynamic_visualization_store_enums.h</a></div><div class="ttdoc">Contains enums used in C/C++ API.</div></div>
<div class="ttc" id="adynamic__visualization__store__error__codes_8h_xhtml_a1d7466ae72e89fe36cbf2408b4f7d9c1"><div class="ttname"><a href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a></div><div class="ttdeci">int32_t dvs_ret</div><div class="ttdoc">Return value of methods, TODO.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__error__codes_8h_source.xhtml#l00032">dynamic_visualization_store_error_codes.h:32</a></div></div>
<div class="ttc" id="adynamic__visualization__store__error__codes_8h_xhtml_a83b88ce16159d34fe5ce63e7024462a7"><div class="ttname"><a href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a></div><div class="ttdeci">#define DVS_NONE</div><div class="ttdoc">No detected error has occurred.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__error__codes_8h_source.xhtml#l00099">dynamic_visualization_store_error_codes.h:99</a></div></div>
<div class="ttc" id="atest__dvs__server_8cpp_xhtml_a3c04138a5bfe5d72780bb7e82a18e627"><div class="ttname"><a href="test__dvs__server_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a></div><div class="ttdeci">int main(int argc, char **argv)</div><div class="ttdoc">Main method of test client application.</div><div class="ttdef"><b>Definition:</b> <a href="test__dvs__server_8cpp_source.xhtml#l00073">test_dvs_server.cpp:73</a></div></div>
<div class="ttc" id="atest__dvs__server_8cpp_xhtml_a89a8322bea357674e81ba9cbdefe0378"><div class="ttname"><a href="test__dvs__server_8cpp.xhtml#a89a8322bea357674e81ba9cbdefe0378">signal_callback_handler</a></div><div class="ttdeci">void signal_callback_handler(int signum)</div><div class="ttdoc">Simple signal handler to handle signal.</div><div class="ttdef"><b>Definition:</b> <a href="test__dvs__server_8cpp_source.xhtml#l00055">test_dvs_server.cpp:55</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
