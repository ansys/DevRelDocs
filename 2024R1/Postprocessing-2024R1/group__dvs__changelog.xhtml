<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: Changelog</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li class="current"><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Changelog<div class="ingroups"><a class="el" href="group__dvs__main.xhtml">Dynamic Visualization Store</a></div></div></div>
</div><!--header-->
<div class="contents">
<hr  />
<p> <a class="anchor" id="Whats-new-in-2024R1"></a> </p><h2>What's new in 2024 R1</h2>
<ul>
<li>64-bit Integer support<ul>
<li>It is now possible to send and read 64-bit integers through the DVS interfaces. It is so now possible, for instance, to send 64-bit Element and Node IDs, but the support is extended to any other entity, like variables for example. The 64-bit Integer support is also available for the DVS Reader API and the Merge Utility.</li>
</ul>
</li>
<li>Python Reader API<ul>
<li>The existing C++ Reader API is now available in Python throuh a wrapper API. The API is available using importing the dynamic_visualization_store module, with specific interfaces to create DVS Query objects, similarly to what is done using the C++ APIs (See <a class="el" href="group__dvs__reader.xhtml">DVS Reader</a>).</li>
</ul>
</li>
<li>(Beta) C/C++/Python API for copying data from a previous timestep<ul>
<li>A new API is available to copy data from a previous timestep. It is so possible to avoid resending large data like mesh/connectivity if already available. The APIs can be called at any time during the begin_update/end_update sequences, since it is actually executed only when the timestep is being completed by the DynamicDataReader instance.</li>
</ul>
</li>
</ul>
<hr  />
<p> <a class="anchor" id="Whats-new-in-2023R2"></a> </p><h2>What's new in 2023 R2</h2>
<ul>
<li>(Beta) 64-bit Integer support<ul>
<li>Initial support to store and load 64-bit integers in DVS is now available. The user can now send 64-bit integers values for entities like variables, node/element IDs and others. The support for the DVS reader API and the Merge utility is in progress.</li>
</ul>
</li>
<li>Notable robustness updates and bug fixes<ul>
<li>The gRPC libraries have been upgraded to version 1.46.5.1, commonly used by other Ansys products.</li>
<li>The use of std::regex has been replaced with fnmatch for better compatibility with other Ansys products.</li>
<li>It is now possible to send empty variable updates, if needed.</li>
<li>The delete_item API was reporting errors in the InSitu case. This has been fixed.</li>
</ul>
</li>
</ul>
<hr  />
<p> <a class="anchor" id="Whats-new-in-2023R1"></a> </p><h2>What's new in 2023 R1</h2>
<ul>
<li>Static libraries<ul>
<li>There are now static libraries built and located in the static/{arch} directories for Windows and Linux</li>
</ul>
</li>
<li>Dataset metadata API<ul>
<li>New <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac5c67fdc3806bf89eebbe49e6daea5c2" title="Add metadata for the current dataset.">dvs_add_metadata()</a> (C and Python) and <a class="el" href="class_d_v_s_1_1_i_client.xhtml#ab4144e59bfdcf9c095c6510c4298d160" title="Add metadata for the current dataset.">DVS::IClient::add_metadata()</a> (C++) API added to allow the setting of key/value pairs on the dataset object</li>
</ul>
</li>
<li>EnSight DVS Reader Element Filtering<ul>
<li>See <a class="el" href="group__group__dvs__metadata.xhtml#dvs_element_filtering">EnSight DVS Element Filtering</a></li>
</ul>
</li>
<li>Manual server control<ul>
<li>Some users had a need for more explicit server control so they could handle shutdown more cleanly and better handle threading for their applications. Previously there was one call to <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6699cf48b29583ab3391b9b8397e611c" title="Start the server.">DVS::IServer::startup()</a> which would start a server in a thread and run it until <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a7ce6bb49a2d383b0821267415a93802d" title="Shutdown the server, also called on server destruction by DVS::DESTROY_SERVER_INSTANCE()">DVS::IServer::shutdown()</a> was invoked. Now there are new methods exposed <a class="el" href="class_d_v_s_1_1_i_server.xhtml#ac61ce2698eec1adb521bbbf60cb78756" title="Startup a server manually without threads.">DVS::IServer::startup_unthreaded()</a>, <a class="el" href="class_d_v_s_1_1_i_server.xhtml#add6fcb530763dc217f5b3c17b25093c0" title="Perform a server update.">DVS::IServer::update()</a>, and <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6cb1f69ad4b9213dde48d4cd5b3f2111" title="Call to begin terminating the server.">DVS::IServer::terminating()</a> to allow for more manual control. For an example of the usage of these methods please see <a class="el" href="test__dvs__server_8cpp.xhtml" title="Test server to provide example of create a simple server application.">test_dvs_server.cpp</a>.</li>
</ul>
</li>
<li>Merged Reader API and Client API libraries into one library named libdvsapi<ul>
<li>The old libraries for libdvsclient and libdvsreader are now removed</li>
</ul>
</li>
<li>Merge Utility<ul>
<li>The dvs_utility app now can merge a dataset from one cache into another. The main use for this is to merge data from a restart run into the original dataset. Because of this it right now finds the earliest timestep in the dataset it is merging from and removes all timesteps &gt;= to it from the dataset it is merging to. This is available via dvs_utility.exe -merge {from Cache URI} {to Cache URI}.</li>
</ul>
</li>
<li>Delete Item API change<ul>
<li>Delete item calls now take an update number similar to the begin_update calls. This is to have delete item calls act more like a timestep update so they are asynchronous and happen in lock step with completed timesteps. The update number should be in the same "update timeline" as the begin_update calls (eg begin_update (update 0), begin_update (update 1), delete_item (update 2), begin_update (update 3))</li>
<li>See <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a5237ada583b0cb7817d12d1135f9349e" title="Delete an item.">dvs_delete_item()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#a5e8f192f5c683a8265dd94020506a0aa" title="Delete an item.">DVS::IClient::delete_item()</a></li>
</ul>
</li>
<li>Ability to modify existing timesteps<ul>
<li>It is now possible to modify existing timesteps in a DVS cache. Previously this was only available when running in situ. To do this a begin_update call is made (with a monotonically increasing update number) and a time value that matches a previously sent time. When the update has completed across all ranks it will be merged into the current timestep. It is important to note that the update is merged in and does not overwrite the previously sent data. So only changes are needed to be sent. So if a part mesh has been completely removed an empty update_nodes call must be made. Changes to the coordinates will automatically remove all nodal/element variables for that part. Changes to the connectivity will automatically remove all elemental variables for that part.</li>
</ul>
</li>
<li>Reader API fully released<ul>
<li>The Reader API (See <a class="el" href="group__dvs__reader.xhtml">DVS Reader</a>) has gone through much more extensive usage and testing.</li>
</ul>
</li>
<li>UTF8 Support Fixed<ul>
<li>The DVS library was improperly handling UTF8 strings. The initial intent was that all strings sent to DVS were UTF8. However with a lack of testing in that area that did not work correctly. As of version 1.2 UTF8 support should be working.</li>
</ul>
</li>
</ul>
<hr  />
<p> <a class="anchor" id="Whats-new-in-2022R2"></a> </p><h2>What's new in 2022 R2</h2>
<ul>
<li>DVS Reader API<ul>
<li>There is now a full external C++ Reader API available (See <a class="el" href="group__dvs__reader.xhtml">DVS Reader</a>)</li>
</ul>
</li>
<li>New logger example<ul>
<li>Added a LoggerVerbose class in <a class="el" href="logger__verbose_8h.xhtml" title="Verbosity based logger for DVS.">logger_verbose.h</a> as an example of logging based on verbosity instead of flags. The flag method wasn't really working well so we will be moving to using verbosity on the client and server in future versions to make logging more consistent.</li>
</ul>
</li>
<li>Logging<ul>
<li>Added a lot more logging into the server to diagnose potential problems with a DVS Server. Set the server option "VERBOSE" to 0-3 (0 being none or 3 being max).</li>
</ul>
</li>
<li>Notable Bug fixes<ul>
<li>Server logging verbosity was broken in 2022 R1, this has been fixed so setting server verbosity should start outputting more information.</li>
</ul>
</li>
</ul>
<hr  />
<p> <a class="anchor" id="Whats-new-in-2022R1"></a> </p><h2>What's new in 2022 R1</h2>
<ul>
<li>Versioning<ul>
<li>There is now a <a class="el" href="dynamic__visualization__store__version_8h.xhtml" title="C API for using Dynamic Visualization Store.">dynamic_visualization_store_version.h</a> file which has a DVS_CURRENT_API_VERSION defined in it. It follows the normal semantic versioning convention of X.Y.Z where any changes to Z are deemed compatible with the previous version but a change in X or Y is not.</li>
<li>This same versioning is built into the gRPC API as well and an error of DVS_VERSION_MISMATCH or DVS_VERSION_UNKNOWN will be returned if there is an issue.</li>
<li>To find the version the library was built with a user can call <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab8e85aad9b7ec78976db76017803a6b6" title="Get the current version of the built library.">dvs_get_version()</a> or <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aa5d98105d78c61e4e0c4043e28174fe1" title="Get the version of the client API.">DVS::IClient::get_version()</a>. The python version is available via the "version" attribute on the module.</li>
</ul>
</li>
<li>Code Restructuring<ul>
<li>A lot of code refactoring is ongoing to support the DVS Reader API, the code is beginning to be split into include and src directories. This work will be finished next release so that all headers needed to be included for use of the libraries will be within the include directory.</li>
</ul>
</li>
<li>DVS Reader API<ul>
<li>An alpha version of the DVS Reader API has been implemented. This can be access via the <a class="el" href="dvs__query__interface_8h.xhtml" title="DVS Reader API Query Interface.">include/dvs_query_interface.h</a> header file. Example usage of the API can be seen in the <a class="el" href="test__dvs__reader_8cpp.xhtml" title="Test client to exercise the C++ API of the Dynamic Visualization Store Reader API.">test_dvs_reader.cpp</a>. Full documentation will be added when the API is complete in 2022R2. Currently you can only open a dataset and read all of the part/plot/variable definitions and some basic information. Actual access to data will be exposed in the full release.</li>
</ul>
</li>
<li>Deletion Item API<ul>
<li>A user can now call the delete item API to remove a single or collection of timesteps from the dataset after initialization. See dvs_delete_item_api for more information.</li>
</ul>
</li>
<li>DVS File Location Server Options<ul>
<li>A user can now specify a different location for the .dvs files to be created for datasets that is separate from the cache location. See <a class="el" href="group__group__dvs__server.xhtml#dvs_server_options">Server Options</a> for more information.</li>
</ul>
</li>
</ul>
<hr  />
<p><a class="anchor" id="Whats-new-in-2021R1"></a> </p><h2>What's new in 2021 R1</h2>
<ul>
<li>Structured Meshes<ul>
<li>New APIs for parallelepiped and curvilinear structured meshes, see <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a0d0312c5143eb8de2e08a903c929d8c3" title="Update the nodes for a parallelepiped structured part.">dvs_update_nodes_parallelepiped()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#af69daaa5a2ac63f7ce31a2e8e3d66332" title="Update the nodes for a curvilinear structured part.">dvs_update_nodes_curvilinear()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#a1588c437020e0ba5702ec48460a792a9" title="Update the nodes for a parallelepiped structured part.">DVS::IClient::update_nodes_structured()</a> for more information. See <a class="el" href="test__dvs__client_8c.xhtml" title="Test client to exercise the C API of the Dynamic Visualization Store API.">test_dvs_client.c</a> and <a class="el" href="test__dvs__client__cxx_8cpp.xhtml" title="Test client to exercise the C++ API of the Dynamic Visualization Store API.">test_dvs_client_cxx.cpp</a> for example usage.<ul>
<li>Sending iblanking information is done through calls to <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aea17a7bbdc6ac8c2cdd4e6c35c1a8578" title="Update a field of scalars on nodes.">dvs_update_var_node_scalar()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#ae67a2884dd8f68f4757d8d7fac3828d3" title="Update nodal variable values.">DVS::IClient::update_var_node()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aa405c87964a066405de5426a3089702b">DVS_STRUCTURED_IBLANKED_NODES</a> (see <a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a>) as the variable id. Variable type for C++ API is <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0a7efbb6cac96595e63e8fa171bde1eb68" title="Scalar.">SCALAR</a>. See <a class="el" href="test__dvs__client_8c.xhtml" title="Test client to exercise the C API of the Dynamic Visualization Store API.">test_dvs_client.c</a> for examples.<ul>
<li>Valid iblanking values are <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a0e0ee6900f90f933e57cae688b6d9af3">DVS_IBLANK_EXTERIOR</a>, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#ac8f987404e3eba989ee90e4a1ffb955b">DVS_IBLANK_INTERIOR</a>, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a72b07503916fc120112f00b07a2a5ed1">DVS_IBLANK_BOUNDARY</a>, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aacf7a4e385cf72ee26356af937b3c609">DVS_IBLANK_INTERNAL_BOUNDARY</a>, <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#abab4ad5aaffe16664aaacb0850994cf7">DVS_IBLANK_SYMMETRY</a></li>
</ul>
</li>
<li>Sending ghost element information is done through calls to <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aae3c0a5237c193d05266fba6e6798a4c" title="Update a field of scalars on elements.">dvs_update_var_element_scalar()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aec8ed14b290237049976f68cb81b200f" title="Update elemental scalar variable values.">DVS::IClient::update_var_element()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a5f85a0e808c3bad9b9b616e62f5724c0">DVS_STRUCTURED_GHOST_ELEMENTS</a> (see <a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a>) as the variable id. Variable type for C++ API is <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af6aa6351345da4151507012681b3aff0a7efbb6cac96595e63e8fa171bde1eb68" title="Scalar.">SCALAR</a>. See <a class="el" href="test__dvs__client_8c.xhtml" title="Test client to exercise the C API of the Dynamic Visualization Store API.">test_dvs_client.c</a> for examples.</li>
</ul>
</li>
</ul>
</li>
<li>Dynamically add new part/variable/plot definitions between updates (doesn't remove definitions since they may be used by previously sent timesteps)<ul>
<li>After any update has finished you may call the <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a3744408f15cd4a36d19880d24d442a0d" title="begin setup of rank">dvs_begin_init()</a> / <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac4d82529053c964b76bd42916c51835e" title="end the initialization of the rank">dvs_end_init()</a> or <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aff782ecd341fddd87a22a15107efeb3b" title="Begins initialization for this rank.">DVS::IClient::begin_init()</a> / <a class="el" href="class_d_v_s_1_1_i_client.xhtml#aaf1641a1afbf8bb6257940be28dd94b2" title="Finish initialization for this rank.">DVS::IClient::end_init()</a> sequence to add new parts/variables/plots.</li>
<li><b>Note:</b> This does not allow you to change the dataset name or the unit system.</li>
</ul>
</li>
<li>Overwrite in-situ timesteps<ul>
<li>You may now send a new update for a previously sent timestep to completely overwrite which data is there. If EnSight is currently reading the data may require a reload_data python call to view the newly received timestep information (please contact Postprocessing team on how to do this).</li>
<li><b>Note:</b> Trying to overwrite a previously sent timestep while saving data to a cache will return an error. This is not yet allowed.</li>
</ul>
</li>
<li>Added Client API to retrieve already sent definitions, see <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a5a6cd68f61a53bce6780d3ef95038277" title="Get the number of dvs_part_info objects for this client session.">dvs_get_num_part_info()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a5b5a64e37bd6830f518947e7a0f7985e" title="Get the dvs_part_info object for this index.">dvs_get_part_info()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#af609f80df51a124a137c6476b7d3c958" title="Get the number of dvs_part_info objects this client has stored.">DVS::IClient::get_num_parts()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#a9a1e02d1e1764788a58db0f0ccce4cd4" title="Get the dvs_part_info object for a specific index.">DVS::IClient::get_part_info()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad75625cedecbcd365c868c9893c6c2d8" title="Get the number of dvs_var_info objects for this client session.">dvs_get_num_var_info()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a8992f4a5e6c36c5e4da67968b170313c" title="Get the dvs_var_info object for this index.">dvs_get_var_info()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#a85adbf75ade9d0ffc6d258c34dae1eb3" title="Get the number of dvs_var_info objects this client has stored.">DVS::IClient::get_num_vars()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#afb50715fd6d0ed4aa2df49b8cd9d93bb" title="Get the dvs_var_info object for a specific index.">DVS::IClient::get_var_info()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa44dcb6596c7833d2b9fe2a0435bb4c4" title="Get the number of dvs_plot_info objects for this client session.">dvs_get_num_plot_info()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac3fca7087e8b4366686cef98a95f241f" title="Get the dvs_plot_info object for this index.">dvs_get_plot_info()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#a80325aaa83f2d2f27f1aa8e5f167c4c6" title="Get the number of dvs_plot_info objects this client has stored.">DVS::IClient::get_num_plots()</a>, <a class="el" href="class_d_v_s_1_1_i_client.xhtml#a7753d7dfb238856722825403a5cb6d32" title="Get the dvs_plot_info object for a specific index.">DVS::IClient::get_plot_info()</a></li>
<li>Added Server API calls to retrieve the number of pending / complete timesteps to allow a user created server to know when all timesteps were flushed to disk so it could shutdown without losing data. See <a class="el" href="dynamic__visualization__store__api_8h.xhtml#adeb64f5db63b08a79f2a59a85c5d9683" title="Query a Dynamic Visualization Store server as to the number of timesteps it contains.">dvs_server_timestep_count()</a>, <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a8a5339f222bcd46b06c2fa9a474b2c37" title="return the current number of pending and complete timesteps in the server">DVS::IServer::get_timestep_count()</a>.</li>
<li>Improved read performance of cache</li>
<li>Improved performance of reading large numbers of parts/variables/plots when using multiple servers in EnSight</li>
<li>Improved memory usage</li>
</ul>
<hr  />
<p> <a class="anchor" id="Whats-new-in-2020R2"></a> </p><h2>What's new in 2020 R2</h2>
<ul>
<li>Major API Overhaul<ul>
<li>In getting ready for releasing the API for other teams to use we have gone ahead and redone much of the API to facilitate future changes. Please refer to documentation for new usage.</li>
</ul>
</li>
<li>Official API Name<ul>
<li>We made an official name for the API of Dynamic Visualization Store (DVS) as we are starting to officially roll this out to external applications. This affects both the C/C++ and Python APIs as we renamed the namespaces to match the new name, renamed headers, libraries and classes. The details of which are described below.</li>
<li><b>Note:</b> All files in the EnSight install now located in CEI/ensightXXX/src/readers/dvs where XXX is version 211 or greater.</li>
</ul>
</li>
<li>Major Client/Server connection API paradigm changed. Now you need to always create at least a shell server for the client to connect to. This change is to make API calls the same no matter what type of communication you are using, whether it be grpc or direct method calls (null protocol) currently or MPI etc. in the future.<ul>
<li>C API: Call the new <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> (see docs) with a uri, which returns the created server_id as a param, calling <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start()</a> if running the server locally, then use <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> passing in that server_id to connect to it.<ul>
<li>If the server is being locally started you can call <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start()</a> with the server_id, server_number and local_ranks count to start it running in a separate thread. Otherwise it will just act as an interface for the dvs client to communicate with.</li>
<li><b>Note:</b> If a server is started it MUST be started before connecting with a client.</li>
</ul>
</li>
<li>C++ API: Create a server instance <a class="el" href="dvs__server__interface_8h.xhtml#a852580b9a49ac305e4ae26ca637bcc75" title="Create a DVS::IServer instance for clients to connect to.">DVS::CREATE_SERVER_INSTANCE()</a> (see docs) with a uri. If running the server locally call <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6699cf48b29583ab3391b9b8397e611c" title="Start the server.">DVS::IServer::startup()</a> on the instance. Then pass that server instance into the <a class="el" href="dvs__client__interface_8h.xhtml#a2475075c9ab4c2e57a8f0b4ab5bc5df4" title="Factory method to create a dynamic data client interface instance.">DVS::CREATE_CLIENT_INSTANCE()</a> call to connect to that server.<ul>
<li>If the server is being locally started you can call <a class="el" href="class_d_v_s_1_1_i_server.xhtml#a6699cf48b29583ab3391b9b8397e611c" title="Start the server.">DVS::IServer::startup()</a> on the server to begin running it in a separate thread.</li>
<li><b>Note:</b> If a server is started it MUST be started before connecting with a client.</li>
</ul>
</li>
</ul>
</li>
<li>C API Changes<ul>
<li>Renamed ensight_dynamic_data_api.h to <a class="el" href="dynamic__visualization__store__api_8h.xhtml" title="C API for using Dynamic Visualization Store.">dynamic_visualization_store_api.h</a><ul>
<li>Renamed all prefixed methods and strucs from edd_ to dvs_ (i.e. edd_connect() to <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a>)</li>
</ul>
</li>
<li>Renamed ensight_dynamic_data_enums.h to <a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a><ul>
<li>Renamed all prefixes of enums from edd_ to dvs_ (i.e. edd_var_location to dvs_var_location)</li>
</ul>
</li>
<li>Shared library renamed from libdynamicdataclient to libdvsclient (extension varies depending on platform)</li>
<li>A server must always be created now for the client to connect to. This is done via <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> which as a param returns a server_id. This server_id is then used for other dvs_server_* methods and more importantly in the <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> call.<ul>
<li>Starting a server is done via <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start()</a> which takes the server_id as a param. Only need to start a server if running locally.</li>
<li><b>Note:</b> A locally run server must be started via <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start()</a> before calling <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a>.</li>
</ul>
</li>
<li><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> now takes a server_id (which is created from <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a>) and returns a session_id as a param. This session_id is used as the first param in all other client calls, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a3744408f15cd4a36d19880d24d442a0d" title="begin setup of rank">dvs_begin_init()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a4e8a904ae19fd7f2b0c300543bc42576" title="Add part info for simulation.">dvs_add_part_info()</a>, etc.<ul>
<li><b>Note:</b> A locally run server must be started before calling <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a>.</li>
</ul>
</li>
<li>All client calls (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a3744408f15cd4a36d19880d24d442a0d" title="begin setup of rank">dvs_begin_init()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a4e8a904ae19fd7f2b0c300543bc42576" title="Add part info for simulation.">dvs_add_part_info()</a>, etc.) now take a session_id (which is created from <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a>)</li>
</ul>
</li>
<li>C++ API Changes<ul>
<li>Renamed namespaces of classes from EDD to DVS. (i.e. EDD::CREATE_CLIENT_INSTANCE() to <a class="el" href="dvs__client__interface_8h.xhtml#a2475075c9ab4c2e57a8f0b4ab5bc5df4" title="Factory method to create a dynamic data client interface instance.">DVS::CREATE_CLIENT_INSTANCE()</a>)</li>
<li>Renamed dynamic_data_client_interface.h to <a class="el" href="dvs__client__interface_8h.xhtml" title="C++ Client API for using the Dynamic Visualization Store.">dvs_client_interface.h</a><ul>
<li>Interface class now <a class="el" href="class_d_v_s_1_1_i_client.xhtml" title="API for solvers to use to send data to EnSight servers.">DVS::IClient</a> instead of EDD::IDynamicDataClient</li>
</ul>
</li>
<li>Created <a class="el" href="dvs__server__interface_8h.xhtml" title="C++ Server API for using Dynamic Visualization Store Server.">dvs_server_interface.h</a> header for C++ Server API<ul>
<li>Access with <a class="el" href="class_d_v_s_1_1_i_server.xhtml" title="Interface class used to run a dynamic data server in a thread accepting incoming client connections.">DVS::IServer</a>* <a class="el" href="dvs__server__interface_8h.xhtml#a852580b9a49ac305e4ae26ca637bcc75" title="Create a DVS::IServer instance for clients to connect to.">DVS::CREATE_SERVER_INSTANCE()</a> and <a class="el" href="dvs__server__interface_8h.xhtml#adcdcbab1954ec53631a7136af7fc49b8" title="Destroy the server instance (also shutting it down if needed)">DVS::DESTROY_SERVER_INSTANCE()</a> methods</li>
</ul>
</li>
<li>Shared library renamed from libdynamicdataclient to libdvsclient (extension varies depending on platform)</li>
</ul>
</li>
<li>Python API Changes<ul>
<li>Package now named dynamic_visualization_store (file dynamic_visualization_store.pyd)</li>
<li>Example usage in <a class="el" href="test__dvs__client__simple_8py.xhtml">test_dvs_client_simple.py</a></li>
</ul>
</li>
<li>C/C++ Clients<ul>
<li>Renamed client binaries from test_edd_client* to test_dvs_client*<ul>
<li>See <a class="el" href="test__dvs__client_8c.xhtml" title="Test client to exercise the C API of the Dynamic Visualization Store API.">test_dvs_client.c</a> for updated example using new API</li>
</ul>
</li>
<li>Added C++ client example using C++ API, see <a class="el" href="test__dvs__client__cxx_8cpp.xhtml" title="Test client to exercise the C++ API of the Dynamic Visualization Store API.">test_dvs_client_cxx.cpp</a></li>
</ul>
</li>
<li>New protocol available for use. It uses what we are calling the NULL transport. Meaning it doesn't use the network to transport data the data goes directly over method calls within this process. Previously all dvs servers used network communication via grpc, now it is possible to go directly to a dvs server without needing a network connection, letting you directly write into the DVS cache if needed.</li>
<li>DVS File Changes<ul>
<li>Files read by EnSight now use the .dvs extension instead of .edd</li>
<li>Keyword option GRPC_SERVER_PORT_BASE renamed to SERVER_PORT_BASE</li>
<li>Keyword option GRPC_SERVER_PORT_MULT renamed to SERVER_PORT_MULT</li>
</ul>
</li>
<li>Cache Changes<ul>
<li>When using a cache a .dvs file will be auto created in the root cache folder named based on the dataset name which can be loaded by EnSight</li>
<li>Multiple datasets can now be stored and loaded from the same cache</li>
<li>Basic queries are enabled for .dvs files to allow the selection of specific datasets, parts, plots, and variables. See the <a class="el" href="group__group__dvs__uri.xhtml#dvs_cache_uri">Cache URIs</a> section for more info.</li>
<li>Disk caches now use sqlite databases for metadata for both hdf5:// disk:// caches.</li>
<li>Case and part constants now stored in cache </li>
</ul>
</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
