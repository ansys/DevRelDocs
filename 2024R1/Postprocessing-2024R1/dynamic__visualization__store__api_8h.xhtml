<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: D:/Product-src/ensight/user_defined_src/readers/dvs/dynamic_visualization_store_api.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_efb5d67553d49169c49ef58de7241528.xhtml">ensight</a></li><li class="navelem"><a class="el" href="dir_4e0d2d4294803448cbce42ae5b7dbd77.xhtml">user_defined_src</a></li><li class="navelem"><a class="el" href="dir_359f060799dd509662b36dfd7584eb2e.xhtml">readers</a></li><li class="navelem"><a class="el" href="dir_1e237ac59110de3c5c813eb754d30339.xhtml">dvs</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">dynamic_visualization_store_api.h File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdint.h&gt;</code><br />
<code>#include &quot;<a class="el" href="dynamic__visualization__store__enums_8h_source.xhtml">dynamic_visualization_store_enums.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="dynamic__visualization__store__error__codes_8h_source.xhtml">dynamic_visualization_store_error_codes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="dynamic__visualization__store__version_8h_source.xhtml">dynamic_visualization_store_version.h</a>&quot;</code><br />
<code>#include &quot;include/dvs_import_export.h&quot;</code><br />
</div>
<p><a href="dynamic__visualization__store__api_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a80c7c60e9cd61fcc0a0aacac09d66947"><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a80c7c60e9cd61fcc0a0aacac09d66947">dvs_log_func</a>) (void *, const char *)</td></tr>
<tr class="separator:a80c7c60e9cd61fcc0a0aacac09d66947"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab96812d4412a9af10e7e7924c572a7c9"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9">dvs_connect</a> (int32_t server_id, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aec8cbac60b9cafe5d1c0ad6593f05e9f">dvs_client_flags</a> flags, const char *secret, int32_t *session_id)</td></tr>
<tr class="separator:ab96812d4412a9af10e7e7924c572a7c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae57cf8cf0b10421aace6df32a98c60ae"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ae57cf8cf0b10421aace6df32a98c60ae">dvs_register_log_func</a> (int32_t session_id, void *user_data, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a80c7c60e9cd61fcc0a0aacac09d66947">dvs_log_func</a> func, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a9bca12092877a90e6c497994093a8609">dvs_log_flags</a> flags)</td></tr>
<tr class="separator:ae57cf8cf0b10421aace6df32a98c60ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8e85aad9b7ec78976db76017803a6b6"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab8e85aad9b7ec78976db76017803a6b6">dvs_get_version</a> ()</td></tr>
<tr class="separator:ab8e85aad9b7ec78976db76017803a6b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3744408f15cd4a36d19880d24d442a0d"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a3744408f15cd4a36d19880d24d442a0d">dvs_begin_init</a> (int32_t session_id, const char *dataset_name, uint32_t current_rank, uint32_t total_ranks, uint32_t num_chunks)</td></tr>
<tr class="separator:a3744408f15cd4a36d19880d24d442a0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14b52ceff846429259cab42ee11579f0"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a14b52ceff846429259cab42ee11579f0">dvs_set_unit_system</a> (int32_t session_id, const char *system)</td></tr>
<tr class="separator:a14b52ceff846429259cab42ee11579f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5c67fdc3806bf89eebbe49e6daea5c2"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac5c67fdc3806bf89eebbe49e6daea5c2">dvs_add_metadata</a> (int32_t session_id, const char *const metadata_keys[], const char *const metadata_vals[], uint32_t num_metadata_pairs)</td></tr>
<tr class="separator:ac5c67fdc3806bf89eebbe49e6daea5c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e8a904ae19fd7f2b0c300543bc42576"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a4e8a904ae19fd7f2b0c300543bc42576">dvs_add_part_info</a> (int32_t session_id, const struct <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> *parts, uint32_t num_parts)</td></tr>
<tr class="separator:a4e8a904ae19fd7f2b0c300543bc42576"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b9bbed0db0a5f3e91af8a02aed48e1e"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a0b9bbed0db0a5f3e91af8a02aed48e1e">dvs_add_var_info</a> (int32_t session_id, const struct <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> *vars, uint32_t num_vars)</td></tr>
<tr class="separator:a0b9bbed0db0a5f3e91af8a02aed48e1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe298f932fd909b7caabd6f430489b16"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#afe298f932fd909b7caabd6f430489b16">dvs_add_plot_info</a> (int32_t session_id, const struct <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> *plots, uint32_t num_plots)</td></tr>
<tr class="separator:afe298f932fd909b7caabd6f430489b16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a6cd68f61a53bce6780d3ef95038277"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a5a6cd68f61a53bce6780d3ef95038277">dvs_get_num_part_info</a> (int32_t session_id)</td></tr>
<tr class="separator:a5a6cd68f61a53bce6780d3ef95038277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad75625cedecbcd365c868c9893c6c2d8"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad75625cedecbcd365c868c9893c6c2d8">dvs_get_num_var_info</a> (int32_t session_id)</td></tr>
<tr class="separator:ad75625cedecbcd365c868c9893c6c2d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44dcb6596c7833d2b9fe2a0435bb4c4"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa44dcb6596c7833d2b9fe2a0435bb4c4">dvs_get_num_plot_info</a> (int32_t session_id)</td></tr>
<tr class="separator:aa44dcb6596c7833d2b9fe2a0435bb4c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b5a64e37bd6830f518947e7a0f7985e"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT const struct <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a5b5a64e37bd6830f518947e7a0f7985e">dvs_get_part_info</a> (int32_t session_id, uint32_t index)</td></tr>
<tr class="separator:a5b5a64e37bd6830f518947e7a0f7985e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefeb5e79919700a670799d9f3e8f0e2c"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aefeb5e79919700a670799d9f3e8f0e2c">dvs_get_part_id</a> (int32_t session_id, const char *name, uint32_t *id)</td></tr>
<tr class="separator:aefeb5e79919700a670799d9f3e8f0e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8992f4a5e6c36c5e4da67968b170313c"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT const struct <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a8992f4a5e6c36c5e4da67968b170313c">dvs_get_var_info</a> (int32_t session_id, uint32_t index)</td></tr>
<tr class="separator:a8992f4a5e6c36c5e4da67968b170313c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a355c95f11b171a15755f748da3349e67"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a355c95f11b171a15755f748da3349e67">dvs_get_var_id</a> (int32_t session_id, const char *name, uint32_t *id)</td></tr>
<tr class="separator:a355c95f11b171a15755f748da3349e67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3fca7087e8b4366686cef98a95f241f"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT const struct <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac3fca7087e8b4366686cef98a95f241f">dvs_get_plot_info</a> (int32_t session_id, uint32_t index)</td></tr>
<tr class="separator:ac3fca7087e8b4366686cef98a95f241f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ae625f138573f6fa9904f0609ca1eb1"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a3ae625f138573f6fa9904f0609ca1eb1">dvs_get_plot_id</a> (int32_t session_id, const char *name, uint32_t *id)</td></tr>
<tr class="separator:a3ae625f138573f6fa9904f0609ca1eb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4d82529053c964b76bd42916c51835e"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac4d82529053c964b76bd42916c51835e">dvs_end_init</a> (int32_t session_id)</td></tr>
<tr class="separator:ac4d82529053c964b76bd42916c51835e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaac598618be531e8aa2b72ad41e18537"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aaac598618be531e8aa2b72ad41e18537">dvs_begin_update</a> (int32_t session_id, uint32_t update_num, uint32_t rank, uint32_t chunk, float time)</td></tr>
<tr class="separator:aaac598618be531e8aa2b72ad41e18537"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2223790199210c6fd1f5ac5ade6c60a"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#af2223790199210c6fd1f5ac5ade6c60a">dvs_update_copy_previous_part</a> (int32_t session_id, uint32_t part_id, const char *options)</td></tr>
<tr class="separator:af2223790199210c6fd1f5ac5ade6c60a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fdc956a0712ef2a60195fa013e59222"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a7fdc956a0712ef2a60195fa013e59222">dvs_update_nodes</a> (int32_t session_id, uint32_t part_id, const float *x, const float *y, const float *z, uint32_t num_values)</td></tr>
<tr class="separator:a7fdc956a0712ef2a60195fa013e59222"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d0312c5143eb8de2e08a903c929d8c3"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a0d0312c5143eb8de2e08a903c929d8c3">dvs_update_nodes_parallelepiped</a> (int32_t session_id, uint32_t part_id, const uint32_t global_ijk_max[3], const uint32_t local_ijk_min[3], const uint32_t local_ijk_max[3], const float origin[3], const float dir_i[3], const float dir_j[3], const float dir_k[3], const float *i_vals, const float *j_vals, const float *k_vals)</td></tr>
<tr class="separator:a0d0312c5143eb8de2e08a903c929d8c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af69daaa5a2ac63f7ce31a2e8e3d66332"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#af69daaa5a2ac63f7ce31a2e8e3d66332">dvs_update_nodes_curvilinear</a> (int32_t session_id, uint32_t part_id, const uint32_t global_ijk_max[3], const uint32_t local_ijk_min[3], const uint32_t local_ijk_max[3], const float *x_vals, const float *y_vals, const float *z_vals)</td></tr>
<tr class="separator:af69daaa5a2ac63f7ce31a2e8e3d66332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05061077e83272567bbc43367c0b8e74"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a05061077e83272567bbc43367c0b8e74">dvs_update_elements</a> (int32_t session_id, uint32_t part_id, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const uint32_t *indices, uint32_t num_indices)</td></tr>
<tr class="separator:a05061077e83272567bbc43367c0b8e74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a763afb059b0301ba18fefe3cd126ce79"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a763afb059b0301ba18fefe3cd126ce79">dvs_update_elements_polygon</a> (int32_t session_id, uint32_t part_id, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const uint32_t *nodes_per_polygon, uint32_t nodes_per_polygon_size, const uint32_t *indices, uint32_t indices_size)</td></tr>
<tr class="separator:a763afb059b0301ba18fefe3cd126ce79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff070e9087ba34f41200ff0cd1d3002e"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aff070e9087ba34f41200ff0cd1d3002e">dvs_update_elements_polyhedral</a> (int32_t session_id, uint32_t part_id, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const uint32_t *faces_per_element, uint32_t faces_per_element_size, const uint32_t *nodes_per_face, uint32_t nodes_per_face_size, const uint32_t *indices, uint32_t indices_size)</td></tr>
<tr class="separator:aff070e9087ba34f41200ff0cd1d3002e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad97de401448e85da8cb13d3e45cfb227"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad97de401448e85da8cb13d3e45cfb227">dvs_update_var_case_scalar</a> (int32_t session_id, uint32_t var_id, float scalar)</td></tr>
<tr class="separator:ad97de401448e85da8cb13d3e45cfb227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a853ed7ef2608619b82dd51055cee3f60"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a853ed7ef2608619b82dd51055cee3f60">dvs_update_var_part_scalar</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, float scalar)</td></tr>
<tr class="separator:a853ed7ef2608619b82dd51055cee3f60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4e0ac12018e08551d6b8121971fea7e"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab4e0ac12018e08551d6b8121971fea7e">dvs_update_var_case_vector</a> (int32_t session_id, uint32_t var_id, const float *vec)</td></tr>
<tr class="separator:ab4e0ac12018e08551d6b8121971fea7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b8da4c016b09b93b3fcf71afe384b21"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a0b8da4c016b09b93b3fcf71afe384b21">dvs_update_var_part_vector</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, const float *vec)</td></tr>
<tr class="separator:a0b8da4c016b09b93b3fcf71afe384b21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3c0a5237c193d05266fba6e6798a4c"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aae3c0a5237c193d05266fba6e6798a4c">dvs_update_var_element_scalar</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const float *scalars, uint32_t num_vals)</td></tr>
<tr class="separator:aae3c0a5237c193d05266fba6e6798a4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a008017a6bb9e8c8488e392d3cf58f7ad"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a008017a6bb9e8c8488e392d3cf58f7ad">dvs_update_var_element_scalar_int64</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const int64_t *scalars, uint32_t num_vals)</td></tr>
<tr class="separator:a008017a6bb9e8c8488e392d3cf58f7ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea17a7bbdc6ac8c2cdd4e6c35c1a8578"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aea17a7bbdc6ac8c2cdd4e6c35c1a8578">dvs_update_var_node_scalar</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, const float *scalars, uint32_t num_vals)</td></tr>
<tr class="separator:aea17a7bbdc6ac8c2cdd4e6c35c1a8578"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c130a702347b1baa7e884303f3ce9d5"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a7c130a702347b1baa7e884303f3ce9d5">dvs_update_var_node_scalar_int64</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, const int64_t *scalars, uint32_t num_vals)</td></tr>
<tr class="separator:a7c130a702347b1baa7e884303f3ce9d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3cd5ecfd626ca40b1273634734f38d5"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#af3cd5ecfd626ca40b1273634734f38d5">dvs_update_var_element_vector</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a> type, const float *values, uint32_t num_values)</td></tr>
<tr class="separator:af3cd5ecfd626ca40b1273634734f38d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9086155711ed76c6141bdde2291f140a"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a9086155711ed76c6141bdde2291f140a">dvs_update_var_node_vector</a> (int32_t session_id, uint32_t var_id, uint32_t part_id, const float *values, uint32_t num_values)</td></tr>
<tr class="separator:a9086155711ed76c6141bdde2291f140a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a433ce5100e551dca71dee92b0afe1563"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a433ce5100e551dca71dee92b0afe1563">dvs_update_plot</a> (int32_t session_id, uint32_t plot_id, const float *x_values, const float *y_values, uint32_t num_values)</td></tr>
<tr class="separator:a433ce5100e551dca71dee92b0afe1563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae75177bf47fcb28313e79840bf778c75"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ae75177bf47fcb28313e79840bf778c75">dvs_end_update</a> (int32_t session_id)</td></tr>
<tr class="separator:ae75177bf47fcb28313e79840bf778c75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5237ada583b0cb7817d12d1135f9349e"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a5237ada583b0cb7817d12d1135f9349e">dvs_delete_item</a> (int32_t session_id, uint32_t update_num, uint32_t rank, const char *filter)</td></tr>
<tr class="separator:a5237ada583b0cb7817d12d1135f9349e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a345e9b656b994a3e1677b354077b2fff"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a345e9b656b994a3e1677b354077b2fff">dvs_print_stats</a> (int32_t session_id)</td></tr>
<tr class="separator:a345e9b656b994a3e1677b354077b2fff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf84206bdff4c0d6f00ada37f6eadf55"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#abf84206bdff4c0d6f00ada37f6eadf55">dvs_session_shutdown</a> (int32_t session_id)</td></tr>
<tr class="separator:abf84206bdff4c0d6f00ada37f6eadf55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc2aa26177a1b4a487b3c8f3f7b7b23d"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#adc2aa26177a1b4a487b3c8f3f7b7b23d">dvs_session_shutdown_all</a> ()</td></tr>
<tr class="separator:adc2aa26177a1b4a487b3c8f3f7b7b23d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a815bb1d2251e35e3bfd3c44a4a338052"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a815bb1d2251e35e3bfd3c44a4a338052">dvs_shutdown</a> ()</td></tr>
<tr class="separator:a815bb1d2251e35e3bfd3c44a4a338052"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06196ff56fe7f270172239c1be4ce0cd"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd">dvs_server_create</a> (const char *server_uri, int32_t *server_id)</td></tr>
<tr class="separator:a06196ff56fe7f270172239c1be4ce0cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8abdb8455cea44bbd9f509c1a063516"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ae8abdb8455cea44bbd9f509c1a063516">dvs_server_set_option</a> (int32_t server_id, const char *key, const char *value)</td></tr>
<tr class="separator:ae8abdb8455cea44bbd9f509c1a063516"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5722a5316ee73bdd998c9a327e8cb3d"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d">dvs_server_start</a> (int32_t server_id, uint32_t server_number, uint32_t local_ranks)</td></tr>
<tr class="separator:aa5722a5316ee73bdd998c9a327e8cb3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a996a1d0e1696ad7f991e44357d78a422"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a996a1d0e1696ad7f991e44357d78a422">dvs_server_started</a> (int32_t server_id, uint32_t *running)</td></tr>
<tr class="separator:a996a1d0e1696ad7f991e44357d78a422"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adeb64f5db63b08a79f2a59a85c5d9683"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#adeb64f5db63b08a79f2a59a85c5d9683">dvs_server_timestep_count</a> (int32_t server_id, uint32_t *num_pending, uint32_t *num_complete)</td></tr>
<tr class="separator:adeb64f5db63b08a79f2a59a85c5d9683"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad16ba277108c7187b0a11f461b1477ca"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad16ba277108c7187b0a11f461b1477ca">dvs_server_shutdown</a> (int32_t server_id)</td></tr>
<tr class="separator:ad16ba277108c7187b0a11f461b1477ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac16a3c06bb1968ddba06d83f5e2a1f56"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac16a3c06bb1968ddba06d83f5e2a1f56">dvs_server_shutdown_all</a> ()</td></tr>
<tr class="separator:ac16a3c06bb1968ddba06d83f5e2a1f56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11887bd000ddab30ababc765e244b094"><td class="memItemLeft" align="right" valign="top">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a11887bd000ddab30ababc765e244b094">dvs_server_get_uri</a> (int32_t server_id, char *uri, uint32_t *size)</td></tr>
<tr class="separator:a11887bd000ddab30ababc765e244b094"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><pre>
Setup the initial connection and needed information

1.) Call <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a>
2.) Call <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a>
3.) Provide a logging method (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#ae57cf8cf0b10421aace6df32a98c60ae" title="Register logging function for client to call (optional but recommended)">dvs_register_log_func()</a>) (optional)
4.) Begin initialization (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a3744408f15cd4a36d19880d24d442a0d" title="begin setup of rank">dvs_begin_init()</a>)
5.) Set unit system (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a14b52ceff846429259cab42ee11579f0" title="Set a unit system (optional but recommended)">dvs_set_unit_system()</a>) (optional)
6.) Add information about all parts if applicable (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a4e8a904ae19fd7f2b0c300543bc42576" title="Add part info for simulation.">dvs_add_part_info()</a>)
7.) Add information about all variables if applicable (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a0b9bbed0db0a5f3e91af8a02aed48e1e" title="Add var info for simulation.">dvs_add_var_info()</a>) (optional)
8.) Add information about all plots if applicable (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#afe298f932fd909b7caabd6f430489b16" title="Add plot info for simulation.">dvs_add_plot_info()</a>) (optional)
9.) End initialization (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac4d82529053c964b76bd42916c51835e" title="end the initialization of the rank">dvs_end_init()</a>)

Now at the end of each timestep we can push data to the ensight server

1.) Begin the update (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#aaac598618be531e8aa2b72ad41e18537" title="Method to begin an update.">dvs_begin_update()</a>)
2.) For Each Part
        Update mesh/nodes (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a7fdc956a0712ef2a60195fa013e59222" title="Update nodes for a specific part.">dvs_update_nodes()</a>)
3.) For Each Element Type
        Update Element (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a05061077e83272567bbc43367c0b8e74" title="Update elements for a specific part and element type.">dvs_update_elements()</a>)
4.) For Each Variable
        If location on case or part use corresponding update methods i.e. <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ad97de401448e85da8cb13d3e45cfb227" title="Update value of case scalar.">dvs_update_var_case_scalar()</a>,
        <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab4e0ac12018e08551d6b8121971fea7e" title="Update value of case vector.">dvs_update_var_case_vector()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a853ed7ef2608619b82dd51055cee3f60" title="Update value of part scalar.">dvs_update_var_part_scalar()</a>, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a0b8da4c016b09b93b3fcf71afe384b21" title="Update value of part scalar.">dvs_update_var_part_vector()</a>

        If location element or node use corresponding update methods i.e. <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aae3c0a5237c193d05266fba6e6798a4c" title="Update a field of scalars on elements.">dvs_update_var_element_scalar()</a>,
        <a class="el" href="dynamic__visualization__store__api_8h.xhtml#af3cd5ecfd626ca40b1273634734f38d5" title="Update a field of vectors on elements.">dvs_update_var_element_vector()</a>, dvs_update_var_node_scalar, <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a9086155711ed76c6141bdde2291f140a" title="Update a field of vectors on nodes.">dvs_update_var_node_vector()</a>
4.) For Each Plot
         Update plot values (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#a433ce5100e551dca71dee92b0afe1563" title="Update the data for a plot.">dvs_update_plot()</a>)
5.) End update (<a class="el" href="dynamic__visualization__store__api_8h.xhtml#ae75177bf47fcb28313e79840bf778c75" title="Call to end the update for this timestep/rank/chunk.">dvs_end_update()</a>)

On application shutdown let the API shut itself down

1.) Call <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a815bb1d2251e35e3bfd3c44a4a338052" title="Shuts down the api, performing any necessary cleanup, also calls dvs_server_shutdown_all() if any ser...">dvs_shutdown()</a> to cleanup data structures
</pre> 
<p class="definition">Definition in file <a class="el" href="dynamic__visualization__store__api_8h_source.xhtml">dynamic_visualization_store_api.h</a>.</p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="a80c7c60e9cd61fcc0a0aacac09d66947" name="a80c7c60e9cd61fcc0a0aacac09d66947"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80c7c60e9cd61fcc0a0aacac09d66947">&#9670;&#160;</a></span>dvs_log_func</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* dvs_log_func) (void *, const char *)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function pointer for logging methods. </p>
<p>void* param is for data to be sent back to logging method, might be NULL </p>

<p class="definition">Definition at line <a class="el" href="dynamic__visualization__store__api_8h_source.xhtml#l00143">143</a> of file <a class="el" href="dynamic__visualization__store__api_8h_source.xhtml">dynamic_visualization_store_api.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ac5c67fdc3806bf89eebbe49e6daea5c2" name="ac5c67fdc3806bf89eebbe49e6daea5c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5c67fdc3806bf89eebbe49e6daea5c2">&#9670;&#160;</a></span>dvs_add_metadata()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_add_metadata </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>metadata_keys</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>metadata_vals</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_metadata_pairs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add metadata for the current dataset. </p>
<p>Errors:</p><ul>
<li>DVS_NONE: Success</li>
<li>DVS_PARAM_NULL: Method called with NULL params or num_metadata_pairs == 0</li>
<li>DVS_CLIENT_INVALID_TRANSPORT: Internal error, should not happen</li>
<li>DVS_TRANSPORT_NULL_INVALID_SERVER: Internal error, should not happen</li>
<li>DVS_VERSION_MISMATCH: Client version out of date with server version, update server and client to match</li>
<li>DVS_VERSION_UNKNOWN: Unable to determine server version, update the server to match the client</li>
<li>DVS_TRANSPORT_SERVICE_FAILURE: Normally caused by server call retry time out or invalid secret key</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">metadata_keys</td><td>string array of UTF-8 Compatible string keys, each string should be null terminated </td></tr>
    <tr><td class="paramname">metadata_vals</td><td>string array of UTF-8 Compatible string values, each string should be null terminated </td></tr>
    <tr><td class="paramname">num_metadata_pairs</td><td>number of key/value pairs in the arrays </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret DVS_NONE on success, otherwise see method description </dd></dl>

</div>
</div>
<a id="a4e8a904ae19fd7f2b0c300543bc42576" name="a4e8a904ae19fd7f2b0c300543bc42576"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e8a904ae19fd7f2b0c300543bc42576">&#9670;&#160;</a></span>dvs_add_part_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_add_part_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> *&#160;</td>
          <td class="paramname"><em>parts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_parts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add part info for simulation. </p>
<p>Note: These cannot be changed once <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac4d82529053c964b76bd42916c51835e" title="end the initialization of the rank">dvs_end_init()</a> is called</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">parts</td><td>this solver handles </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_parts</td><td>size of parts array, maximum number of parts (2^30) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="afe298f932fd909b7caabd6f430489b16" name="afe298f932fd909b7caabd6f430489b16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe298f932fd909b7caabd6f430489b16">&#9670;&#160;</a></span>dvs_add_plot_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_add_plot_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> *&#160;</td>
          <td class="paramname"><em>plots</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_plots</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add plot info for simulation. </p>
<p>NOTE: These cannot be changed once end_init() is called.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">plots</td><td>plots this solver handles </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_plots</td><td>size of plots array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a0b9bbed0db0a5f3e91af8a02aed48e1e" name="a0b9bbed0db0a5f3e91af8a02aed48e1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b9bbed0db0a5f3e91af8a02aed48e1e">&#9670;&#160;</a></span>dvs_add_var_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_add_var_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> *&#160;</td>
          <td class="paramname"><em>vars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_vars</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add var info for simulation. </p>
<p>Note: These cannot be changed once <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac4d82529053c964b76bd42916c51835e" title="end the initialization of the rank">dvs_end_init()</a> is called</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vars</td><td>variables definitions which will be sent from this compute node </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_vars</td><td>size of var array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a3744408f15cd4a36d19880d24d442a0d" name="a3744408f15cd4a36d19880d24d442a0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3744408f15cd4a36d19880d24d442a0d">&#9670;&#160;</a></span>dvs_begin_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_begin_init </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dataset_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>current_rank</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>total_ranks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_chunks</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>begin setup of rank </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">dataset_name</td><td>name for dataset </td></tr>
    <tr><td class="paramname">current_rank</td><td>Rank this solver is processing (zero based) </td></tr>
    <tr><td class="paramname">total_ranks</td><td>Total number of ranks across solver nodes </td></tr>
    <tr><td class="paramname">num_chunks</td><td>Number of chunks for this rank (usually 1)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aaac598618be531e8aa2b72ad41e18537" name="aaac598618be531e8aa2b72ad41e18537"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaac598618be531e8aa2b72ad41e18537">&#9670;&#160;</a></span>dvs_begin_update()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_begin_update </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>update_num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>rank</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>chunk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Method to begin an update. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">update_num</td><td>update number of this update, must be monotonically increasing </td></tr>
    <tr><td class="paramname">rank</td><td>the rank we are sending an update for (zero based) </td></tr>
    <tr><td class="paramname">chunk</td><td>the chunk number this update is for (zero based) </td></tr>
    <tr><td class="paramname">time</td><td>time in seconds this update is for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ab96812d4412a9af10e7e7924c572a7c9" name="ab96812d4412a9af10e7e7924c572a7c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab96812d4412a9af10e7e7924c572a7c9">&#9670;&#160;</a></span>dvs_connect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_connect </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>server_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aec8cbac60b9cafe5d1c0ad6593f05e9f">dvs_client_flags</a>&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>secret</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>session_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Connect to dvs server. </p>
<p>This call will connect to a server that has been created using <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> If server is being created locally <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aa5722a5316ee73bdd998c9a327e8cb3d" title="Start a Dynamic Visualization Store server in a separate thread to receive data from solver node.">dvs_server_start()</a> must be called before connecting.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">server_id</td><td>id of server created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">flags</td><td>flags for client setup see dvs_client_flags (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a>) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">secret</td><td>shared secret to use for client, can be NULL </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">session_id</td><td>dynamic id created for connection, used for client dvs calls </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, otherwise -1 </dd></dl>

</div>
</div>
<a id="a5237ada583b0cb7817d12d1135f9349e" name="a5237ada583b0cb7817d12d1135f9349e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5237ada583b0cb7817d12d1135f9349e">&#9670;&#160;</a></span>dvs_delete_item()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_delete_item </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>update_num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>rank</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Delete an item. </p>
<p>This call must be called by every rank similarly to how begin_update happens.</p>
<p>Currently this will only allow for timesteps to be deleted. In the future it can be expanded to all objects via the filter mechanism (see <a class="el" href="group__group__dvs__filtering.xhtml#dvs_query_stanzas">Query Stanzas</a>). Currently this supports the operands of eq, gt, gte, lt, lte. Example: To delete all timesteps &gt;= time 1.1 the filter would be "/timestep.time/gte/1.1//" .</p>
<p>It also currently only supports one statement so /timestep.time/gt/1.1//and/timestep.time/lt/2.1// is not valid as of version 1.1.0.</p>
<p>Note: The update number should be monotonically increasing with the begin_update calls</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">update_num</td><td>update number of this update, must be monotonically increasing </td></tr>
    <tr><td class="paramname">rank</td><td>rank making this call </td></tr>
    <tr><td class="paramname">filter</td><td>filter for the item(s) to delete see detailed description for more info </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ac4d82529053c964b76bd42916c51835e" name="ac4d82529053c964b76bd42916c51835e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4d82529053c964b76bd42916c51835e">&#9670;&#160;</a></span>dvs_end_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_end_init </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>end the initialization of the rank </p>
<p>This must be called to let server know initialization for this rank is complete</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ae75177bf47fcb28313e79840bf778c75" name="ae75177bf47fcb28313e79840bf778c75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae75177bf47fcb28313e79840bf778c75">&#9670;&#160;</a></span>dvs_end_update()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_end_update </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call to end the update for this timestep/rank/chunk. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a5a6cd68f61a53bce6780d3ef95038277" name="a5a6cd68f61a53bce6780d3ef95038277"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a6cd68f61a53bce6780d3ef95038277">&#9670;&#160;</a></span>dvs_get_num_part_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT uint32_t dvs_get_num_part_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> objects for this client session. </p>
<p>Note: This checks the local client session information, does not contact server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>which client session id to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>uint32_t number of <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> objects, or 0 on error </dd></dl>

</div>
</div>
<a id="aa44dcb6596c7833d2b9fe2a0435bb4c4" name="aa44dcb6596c7833d2b9fe2a0435bb4c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa44dcb6596c7833d2b9fe2a0435bb4c4">&#9670;&#160;</a></span>dvs_get_num_plot_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT uint32_t dvs_get_num_plot_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> objects for this client session. </p>
<p>Note: This checks the local client session information, does not contact server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>which client session id to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>uint32_t number of <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> objects, or 0 on error </dd></dl>

</div>
</div>
<a id="ad75625cedecbcd365c868c9893c6c2d8" name="ad75625cedecbcd365c868c9893c6c2d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad75625cedecbcd365c868c9893c6c2d8">&#9670;&#160;</a></span>dvs_get_num_var_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT uint32_t dvs_get_num_var_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> objects for this client session. </p>
<p>Note: This checks the local client session information, does not contact server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>which client session id to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>uint32_t number of <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> objects, or 0 on error </dd></dl>

</div>
</div>
<a id="aefeb5e79919700a670799d9f3e8f0e2c" name="aefeb5e79919700a670799d9f3e8f0e2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefeb5e79919700a670799d9f3e8f0e2c">&#9670;&#160;</a></span>dvs_get_part_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_get_part_id </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the ID being used by the client for the named part. </p>
<p>Errors: DVS_NONE: Success DVS_INVALID_NAME: No object with name found DVS_ID_NO_VALID_SESSION: No session found matching session_id DVS_ID_INVALID_TYPE: Session id is of wrong type (possibly server) DVS_PARAM_NULL: Null param passed in</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">session_id</td><td>which client session id to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>the name of the part to search for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>UINT32_MAX on failure, otherwise the id of the part for this client </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="a5b5a64e37bd6830f518947e7a0f7985e" name="a5b5a64e37bd6830f518947e7a0f7985e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b5a64e37bd6830f518947e7a0f7985e">&#9670;&#160;</a></span>dvs_get_part_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT const struct <a class="el" href="structdvs__part__info.xhtml">dvs_part_info</a> * dvs_get_part_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> object for this index. </p>
<p>Note: This checks the local client session information, does not contact server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>which client session id to check </td></tr>
    <tr><td class="paramname">index</td><td>index of the <a class="el" href="structdvs__part__info.xhtml" title="Struct holding information for a part&#39;s definition.">dvs_part_info</a> object to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const dvs_part_info* object found or NULL on not found or error </dd></dl>

</div>
</div>
<a id="a3ae625f138573f6fa9904f0609ca1eb1" name="a3ae625f138573f6fa9904f0609ca1eb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ae625f138573f6fa9904f0609ca1eb1">&#9670;&#160;</a></span>dvs_get_plot_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_get_plot_id </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the ID being used by the client for the named plot. </p>
<p>Errors: DVS_NONE: Success DVS_INVALID_NAME: No object with name found DVS_ID_NO_VALID_SESSION: No session found matching session_id DVS_ID_INVALID_TYPE: Session id is of wrong type (possibly server) DVS_PARAM_NULL: Null param passed in</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">session_id</td><td>which client session id to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>the name of the plot to search for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>UINT32_MAX on failure, otherwise the id of the plot for this client </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="ac3fca7087e8b4366686cef98a95f241f" name="ac3fca7087e8b4366686cef98a95f241f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3fca7087e8b4366686cef98a95f241f">&#9670;&#160;</a></span>dvs_get_plot_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT const struct <a class="el" href="structdvs__plot__info.xhtml">dvs_plot_info</a> * dvs_get_plot_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> object for this index. </p>
<p>Note: This checks the local client session information, does not contact server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>which client session id to check </td></tr>
    <tr><td class="paramname">index</td><td>index of the <a class="el" href="structdvs__plot__info.xhtml" title="Struct holding information for a plot&#39;s definition.">dvs_plot_info</a> object to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const dvs_plot_info* object found or NULL on not found or error </dd></dl>

</div>
</div>
<a id="a355c95f11b171a15755f748da3349e67" name="a355c95f11b171a15755f748da3349e67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a355c95f11b171a15755f748da3349e67">&#9670;&#160;</a></span>dvs_get_var_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_get_var_id </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the ID being used by the client for the named var. </p>
<p>Errors: DVS_NONE: Success DVS_INVALID_NAME: No object with name found DVS_ID_NO_VALID_SESSION: No session found matching session_id DVS_ID_INVALID_TYPE: Session id is of wrong type (possibly server) DVS_PARAM_NULL: Null param passed in</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">session_id</td><td>which client session id to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>the name of the var to search for </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>UINT32_MAX on failure, otherwise the id of the var for this client </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>DVS_NONE on success, else see method description </dd></dl>

</div>
</div>
<a id="a8992f4a5e6c36c5e4da67968b170313c" name="a8992f4a5e6c36c5e4da67968b170313c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8992f4a5e6c36c5e4da67968b170313c">&#9670;&#160;</a></span>dvs_get_var_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT const struct <a class="el" href="structdvs__var__info.xhtml">dvs_var_info</a> * dvs_get_var_info </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> object for this index. </p>
<p>Note: This checks the local client session information, does not contact server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>which client session id to check </td></tr>
    <tr><td class="paramname">index</td><td>index of the <a class="el" href="structdvs__var__info.xhtml" title="Struct holding information for a variable&#39;s definiton.">dvs_var_info</a> object to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const dvs_var_info* object found or NULL on not found or error </dd></dl>

</div>
</div>
<a id="ab8e85aad9b7ec78976db76017803a6b6" name="ab8e85aad9b7ec78976db76017803a6b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8e85aad9b7ec78976db76017803a6b6">&#9670;&#160;</a></span>dvs_get_version()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT const char * dvs_get_version </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current version of the built library. </p>
<p>This gets the current semantic version of the DVS library. Can be checked against DVS_CURRENT_API_VERSION in <a class="el" href="dynamic__visualization__store__version_8h.xhtml" title="C API for using Dynamic Visualization Store.">dynamic_visualization_store_version.h</a></p>
<p>This version follows semantic versioning of MAJOR.MINOR.PATCH. Any change to MAJOR or MINOR should be considered incompatible and the library should be updated.</p>
<dl class="section return"><dt>Returns</dt><dd>const* the current version of the built library </dd></dl>

</div>
</div>
<a id="a345e9b656b994a3e1677b354077b2fff" name="a345e9b656b994a3e1677b354077b2fff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a345e9b656b994a3e1677b354077b2fff">&#9670;&#160;</a></span>dvs_print_stats()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_print_stats </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This will be deprecated, just placeholder for printing out stats that the client is collecting for prototyping. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae57cf8cf0b10421aace6df32a98c60ae" name="ae57cf8cf0b10421aace6df32a98c60ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae57cf8cf0b10421aace6df32a98c60ae">&#9670;&#160;</a></span>dvs_register_log_func()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_register_log_func </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="dynamic__visualization__store__api_8h.xhtml#a80c7c60e9cd61fcc0a0aacac09d66947">dvs_log_func</a>&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a9bca12092877a90e6c497994093a8609">dvs_log_flags</a>&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Register logging function for client to call (optional but recommended) </p>
<p>Will not see any logging messages if not registered</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">user_data</td><td>user data that will be passed into dvs_log_func calls </td></tr>
    <tr><td class="paramname">func</td><td>function pointer for logging (see dvs_log_func) </td></tr>
    <tr><td class="paramname">flags</td><td>which items to be logged, see dvs_log_flags (<a class="el" href="dynamic__visualization__store__enums_8h.xhtml" title="Contains enums used in C/C++ API.">dynamic_visualization_store_enums.h</a>) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a06196ff56fe7f270172239c1be4ce0cd" name="a06196ff56fe7f270172239c1be4ce0cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06196ff56fe7f270172239c1be4ce0cd">&#9670;&#160;</a></span>dvs_server_create()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_server_create </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>server_uri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>server_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a Dynamic Visualization Store server instance for the client to connect. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">server_uri</td><td>URI of server to create of the format protocol://hostname:port, i.e. grpc://localhost:50055 or null:// see <a class="el" href="group__group__dvs__uri.xhtml#dvs_server_uri">Server URIs</a> for more info. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">server_id</td><td>unique id dynamically created for this server, -1 if failure </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, else TODO </dd></dl>

</div>
</div>
<a id="a11887bd000ddab30ababc765e244b094" name="a11887bd000ddab30ababc765e244b094"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11887bd000ddab30ababc765e244b094">&#9670;&#160;</a></span>dvs_server_get_uri()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_server_get_uri </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>server_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>uri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the URI of the requested server. </p>
<div class="fragment"><div class="line"><span class="comment">// Usage:</span></div>
<div class="line">uint32_t uri_size = 0;</div>
<div class="line">err = <a class="code hl_function" href="dynamic__visualization__store__api_8h.xhtml#a11887bd000ddab30ababc765e244b094">dvs_server_get_uri</a>(server_id, NULL, &amp;uri_size);</div>
<div class="line">  <span class="keywordflow">if</span> (err == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> &amp;&amp; uri_size &gt;0){</div>
<div class="line">    <span class="keywordtype">char</span>* my_uri = (<span class="keywordtype">char</span>*)malloc (uri_size * <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>));</div>
<div class="line">    <a class="code hl_function" href="dynamic__visualization__store__api_8h.xhtml#a11887bd000ddab30ababc765e244b094">dvs_server_get_uri</a>(server_id, my_uri, &amp;uri_size);</div>
<div class="line">  }</div>
<div class="ttc" id="adynamic__visualization__store__api_8h_xhtml_a11887bd000ddab30ababc765e244b094"><div class="ttname"><a href="dynamic__visualization__store__api_8h.xhtml#a11887bd000ddab30ababc765e244b094">dvs_server_get_uri</a></div><div class="ttdeci">DVS_DLL_EXPORT dvs_ret dvs_server_get_uri(int32_t server_id, char *uri, uint32_t *size)</div><div class="ttdoc">Return the URI of the requested server.</div></div>
<div class="ttc" id="adynamic__visualization__store__error__codes_8h_xhtml_a83b88ce16159d34fe5ce63e7024462a7"><div class="ttname"><a href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a></div><div class="ttdeci">#define DVS_NONE</div><div class="ttdoc">No detected error has occurred.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__error__codes_8h_source.xhtml#l00099">dynamic_visualization_store_error_codes.h:99</a></div></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">server_id</td><td>the ID of the server </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">uri</td><td>an optional char array to be filled with the uri value </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">size</td><td>an optional uint32_t to be filled with the size of the uri array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>DVS_NONE if the server is running and a port is allocated. </dd></dl>

</div>
</div>
<a id="ae8abdb8455cea44bbd9f509c1a063516" name="ae8abdb8455cea44bbd9f509c1a063516"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8abdb8455cea44bbd9f509c1a063516">&#9670;&#160;</a></span>dvs_server_set_option()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_server_set_option </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>server_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an option to the server. </p>
<p>These options are used on server startup. Setting an option after a server is started will do nothing until the server is restarted (not common). See <a class="el" href="group__group__dvs__server.xhtml#dvs_server_options">Server Options</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">server_id</td><td>id of server from <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>Key for option to add, MAX LENGTH 2048 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value for option, MAX LENGTH 2048</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, else TODO </dd></dl>

</div>
</div>
<a id="ad16ba277108c7187b0a11f461b1477ca" name="ad16ba277108c7187b0a11f461b1477ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad16ba277108c7187b0a11f461b1477ca">&#9670;&#160;</a></span>dvs_server_shutdown()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_server_shutdown </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>server_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shutdown this server thread. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">server_id</td><td>id of server from <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, else TODO </dd></dl>

</div>
</div>
<a id="ac16a3c06bb1968ddba06d83f5e2a1f56" name="ac16a3c06bb1968ddba06d83f5e2a1f56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac16a3c06bb1968ddba06d83f5e2a1f56">&#9670;&#160;</a></span>dvs_server_shutdown_all()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT void dvs_server_shutdown_all </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shutdown all server threads. </p>

</div>
</div>
<a id="aa5722a5316ee73bdd998c9a327e8cb3d" name="aa5722a5316ee73bdd998c9a327e8cb3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5722a5316ee73bdd998c9a327e8cb3d">&#9670;&#160;</a></span>dvs_server_start()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_server_start </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>server_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>server_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>local_ranks</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start a Dynamic Visualization Store server in a separate thread to receive data from solver node. </p>
<p>server_number is used by the DVS server, for each group of servers this number should be unique and monotonically increasing with no gaps (valid: 0, 1, 2 invalid: 0, 2)</p>
<p>local_ranks is used to determine how many clients will be connecting to this server</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">server_id</td><td>id of server from <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> </td></tr>
    <tr><td class="paramname">server_number</td><td>The server number (zero based) for this server, should be unique for each server in this server group. </td></tr>
    <tr><td class="paramname">local_ranks</td><td>Number of local ranks this server will handle. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 if server started, else TODO </dd></dl>

</div>
</div>
<a id="a996a1d0e1696ad7f991e44357d78a422" name="a996a1d0e1696ad7f991e44357d78a422"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a996a1d0e1696ad7f991e44357d78a422">&#9670;&#160;</a></span>dvs_server_started()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_server_started </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>server_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>running</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check to see if a server was started with this server_num. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">server_id</td><td>id of server from <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">running</td><td>1 if running, else 0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, else TODO </dd></dl>

</div>
</div>
<a id="adeb64f5db63b08a79f2a59a85c5d9683" name="adeb64f5db63b08a79f2a59a85c5d9683"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adeb64f5db63b08a79f2a59a85c5d9683">&#9670;&#160;</a></span>dvs_server_timestep_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_server_timestep_count </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>server_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>num_pending</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>num_complete</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Query a Dynamic Visualization Store server as to the number of timesteps it contains. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">server_id</td><td>id of server from <a class="el" href="dynamic__visualization__store__api_8h.xhtml#a06196ff56fe7f270172239c1be4ce0cd" title="Create a Dynamic Visualization Store server instance for the client to connect.">dvs_server_create()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_pending</td><td>The number of incomplete timesteps currently in the server </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_complete</td><td>The number of complete timesteps currently in the server </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 on success, else TODO </dd></dl>

</div>
</div>
<a id="abf84206bdff4c0d6f00ada37f6eadf55" name="abf84206bdff4c0d6f00ada37f6eadf55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf84206bdff4c0d6f00ada37f6eadf55">&#9670;&#160;</a></span>dvs_session_shutdown()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_session_shutdown </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shutdown session. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="adc2aa26177a1b4a487b3c8f3f7b7b23d" name="adc2aa26177a1b4a487b3c8f3f7b7b23d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc2aa26177a1b4a487b3c8f3f7b7b23d">&#9670;&#160;</a></span>dvs_session_shutdown_all()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT void dvs_session_shutdown_all </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shutdown all connected sessions. </p>
<p>All previously returned session_id's from dvs_connect will be invalid once this call is made. </p>

</div>
</div>
<a id="a14b52ceff846429259cab42ee11579f0" name="a14b52ceff846429259cab42ee11579f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14b52ceff846429259cab42ee11579f0">&#9670;&#160;</a></span>dvs_set_unit_system()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_set_unit_system </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>system</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set a unit system (optional but recommended) </p>
<p>Note: This cannot be changed once <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac4d82529053c964b76bd42916c51835e" title="end the initialization of the rank">dvs_end_init()</a> is called</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">system</td><td>UTF-8 compatible unit system see: <a href="https://nexusdemo.ensight.com/docs/python/html/ENS_UNITSSchema.html">https://nexusdemo.ensight.com/docs/python/html/ENS_UNITSSchema.html</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a815bb1d2251e35e3bfd3c44a4a338052" name="a815bb1d2251e35e3bfd3c44a4a338052"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a815bb1d2251e35e3bfd3c44a4a338052">&#9670;&#160;</a></span>dvs_shutdown()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT void dvs_shutdown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shuts down the api, performing any necessary cleanup, also calls <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ac16a3c06bb1968ddba06d83f5e2a1f56" title="Shutdown all server threads.">dvs_server_shutdown_all()</a> if any servers are currently running. </p>

</div>
</div>
<a id="af2223790199210c6fd1f5ac5ade6c60a" name="af2223790199210c6fd1f5ac5ade6c60a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2223790199210c6fd1f5ac5ade6c60a">&#9670;&#160;</a></span>dvs_update_copy_previous_part()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_copy_previous_part </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy data from the previous timestep before applying other data. </p>
<p>Currently we only support the options of empty string, mesh or mesh.vars empty string and mesh.vars will copy the mesh, connectivity, and nodal/elemental variables. mesh only copies the mesh and connectivity. Note: Currently plots and case/part constant variables will not be copied via this option and must always be sent.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">part_id</td><td>the id of the part we are copying data for, UINT32_MAX to select all parts </td></tr>
    <tr><td class="paramname">options</td><td>options to copy, see method description </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a05061077e83272567bbc43367c0b8e74" name="a05061077e83272567bbc43367c0b8e74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05061077e83272567bbc43367c0b8e74">&#9670;&#160;</a></span>dvs_update_elements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_elements </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update elements for a specific part and element type. </p>
<p>This will update the elements for a part. The number of indices needed will vary depending on the type and the num_elements. I.E. if updating triangles with 3 elements the indices array should be of size 9 (3 triangles with 3 indices)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">part_id</td><td>unique id of part to update elements for (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramname">type</td><td>element type of elements to update (points, triangles, quads, etc.) </td></tr>
    <tr><td class="paramname">indices</td><td>node indices for each element, for ordering info per element type see EnSight's User Manual, section 9.2.3 Supported EnSight Gold Elements </td></tr>
    <tr><td class="paramname">num_indices</td><td>the size of the indices array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ret_val TODO </dd></dl>

</div>
</div>
<a id="a763afb059b0301ba18fefe3cd126ce79" name="a763afb059b0301ba18fefe3cd126ce79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a763afb059b0301ba18fefe3cd126ce79">&#9670;&#160;</a></span>dvs_update_elements_polygon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_elements_polygon </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>nodes_per_polygon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>nodes_per_polygon_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>indices_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update N-SIDED elements. </p>
<p>This method will send over a list of arbitrarily sized polygons. The nodes_per_polygon param is an array containing the size of each polygon. I.E. if sending a quadrangle, and a 25 sided element the nodes_per_polygon array might look like [4, 25]. The size of the indices array would be 4+25=29 in this example where the first 4 items in the indices array would correspond to the first item in the nodes_per_polygon array, the next 25 items in the indices array would correspond to the second item in the nodes_per_polygon array</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">part_id</td><td>unique id of part to update elements for (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramname">type</td><td>element type of elements to update (N_SIDED_POLYGON or N_SIDED_POLYGON_GHOST) </td></tr>
    <tr><td class="paramname">nodes_per_polygon</td><td>Array containing number of nodes in each element/polygon </td></tr>
    <tr><td class="paramname">nodes_per_polygon_size</td><td>size of nodes_per_polygon array </td></tr>
    <tr><td class="paramname">indices</td><td>Array of node indices for the polygons described in nodes_per_polygon </td></tr>
    <tr><td class="paramname">indices_size</td><td>Size of indices array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aff070e9087ba34f41200ff0cd1d3002e" name="aff070e9087ba34f41200ff0cd1d3002e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff070e9087ba34f41200ff0cd1d3002e">&#9670;&#160;</a></span>dvs_update_elements_polyhedral()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_elements_polyhedral </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>faces_per_element</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>faces_per_element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>nodes_per_face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>nodes_per_face_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>indices_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update N-FACED Elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">part_id</td><td>unique id of part to update elements for (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramname">type</td><td>element type of elements to update (CONVEX_POLYHEDRON or CONVEX_POLYHEDRON_GHOST) </td></tr>
    <tr><td class="paramname">faces_per_element</td><td>Array of how many faces are in each element </td></tr>
    <tr><td class="paramname">faces_per_element_size</td><td>size of faces_per_element array </td></tr>
    <tr><td class="paramname">nodes_per_face</td><td>Array of how many nodes each face contains </td></tr>
    <tr><td class="paramname">nodes_per_face_size</td><td>size of nodes_per_face array </td></tr>
    <tr><td class="paramname">indices</td><td>Node indices for elements </td></tr>
    <tr><td class="paramname">indices_size</td><td>size of node indices </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a7fdc956a0712ef2a60195fa013e59222" name="a7fdc956a0712ef2a60195fa013e59222"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fdc956a0712ef2a60195fa013e59222">&#9670;&#160;</a></span>dvs_update_nodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_nodes </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update nodes for a specific part. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>the id of part we are updating nodes for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>array of x components for nodes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>array of y components for nodes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z</td><td>array of z components for nodes </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>number of values in individual x/y/z arrays (max nodes in part 2^31) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="af69daaa5a2ac63f7ce31a2e8e3d66332" name="af69daaa5a2ac63f7ce31a2e8e3d66332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af69daaa5a2ac63f7ce31a2e8e3d66332">&#9670;&#160;</a></span>dvs_update_nodes_curvilinear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_nodes_curvilinear </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>global_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_min</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>x_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>y_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>z_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the nodes for a curvilinear structured part. </p>
<p>A curvilinear structured part is represented by the global IJK grid across ranks, the local sub-block's IJK rank, and the actual XYZ values for each IJK grid point in the local grid.</p>
<p>Local IJK Dimensions: The min/max represent a local sub-block from the overall global grid. This could be the entire range if not splitting the grid into multiple ranks or a specific slice. For example you could have a 2ix3jx4k grid where it was split across the I dimension. One rank would specify min/max IJK as min:[0,0,0], max:[0,2,3], the other rank would specify min/max IJK as min:[1,0,0], max:[1,2,3]. If sending the data all as one rank it would be the full range of: min:[0,0,0], max:[1,2,3]</p>
<p>IJK Vals: These specify the actual XYZ location for each IJK value in the grid. The order of these should be by the fastest changing dimension being I, the next being J, and the next being K. I.E. for a 2x2x2 grid the x_vals array would contain the X component for IJK values: [i0 j0 k0][i1 j0 k0][i0 j1 k0][i1 j1 k0][i0 j0 k1][i1 j0 k1][i0 j1 k1][i1 j1 k1].</p>
<p><b>Note:</b> iblanking information is sent via <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aea17a7bbdc6ac8c2cdd4e6c35c1a8578" title="Update a field of scalars on nodes.">dvs_update_var_node_scalar()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aa405c87964a066405de5426a3089702b">DVS_STRUCTURED_IBLANKED_NODES</a> as the variable id</p>
<p><b>Note:</b> Ghost element information is sent via <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aae3c0a5237c193d05266fba6e6798a4c" title="Update a field of scalars on elements.">dvs_update_var_element_scalar()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a5f85a0e808c3bad9b9b616e62f5724c0">DVS_STRUCTURED_GHOST_ELEMENTS</a> as the variable id</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">part_id</td><td>the id of part we are updating nodes for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">global_ijk_max</td><td>The one based global ijk max of the mesh across all ranks </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_min</td><td>the zero based local sub-block ijk min for this rank </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_max</td><td>the zero based local sub-block ijk max for this rank </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">x_vals</td><td>The actual X component for each IJK value for the local sub block (size (iMax-iMin+1)*(jMax-jMin+1)*(kMax-kMin+1)) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">y_vals</td><td>The actual Y component for each IJK value for the local sub block (size (iMax-iMin+1)*(jMax-jMin+1)*(kMax-kMin+1)) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">z_vals</td><td>The actual Z component for each IJK value for the local sub block (size (iMax-iMin+1)*(jMax-jMin+1)*(kMax-kMin+1)) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a0d0312c5143eb8de2e08a903c929d8c3" name="a0d0312c5143eb8de2e08a903c929d8c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d0312c5143eb8de2e08a903c929d8c3">&#9670;&#160;</a></span>dvs_update_nodes_parallelepiped()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_nodes_parallelepiped </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>global_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_min</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>local_ijk_max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>origin</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>dir_i</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>dir_j</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>dir_k</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>i_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>j_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>k_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the nodes for a parallelepiped structured part. </p>
<p>A parallelepiped structured part is represented by the global IJK grid across ranks, the local sub-block's IJK range, the ogigin of the IJK sub-block, the normalized direction (unit) vectors for each IJK dimension, and the absolute distances for each IJK index from the origin of this sub-block.</p>
<p>Global IJK Max: for a 2x3x4 grid would be: [2 3 4]</p>
<p>Local IJK Dimensions: The min/max represent a local sub-block from the overall global grid. This could be the entire range if not splitting the grid into multiple ranks or a specific slice. For example you could have a 2ix3jx4k grid where it was split across the I dimension. One rank would specify min/max IJK as min:[0,0,0], max:[0,2,3], the other rank would specify min/max IJK as min:[1,0,0], max:[1,2,3]. If sending the data all as one rank it would be the full range of: min:[0,0,0], max:[1,2,3]</p>
<p>Direction (Unit) Vectors: These represent the XYZ orientation of each IJK axis. I.E. if I==X J==Y K==Z the vectors would be dir_i: [1 0 0], dir_j: [0 1 0], dir_k: [0 0 1]</p>
<p>IJK Vals: These specify the absolute distance from the XYZ origin in each IJK direction(specified by the direction vectors). So if the distance was 1 between every I index, 2 between every J index, and 3 in between every K index the arrays would look like: i_vals: [0 1 2 3 4 5....] j_vals: [0 2 4 6 8 10....] k_vals: [0 3 6 9 12 15....]</p>
<p><b>Note:</b> iblanking information is sent via <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aea17a7bbdc6ac8c2cdd4e6c35c1a8578" title="Update a field of scalars on nodes.">dvs_update_var_node_scalar()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#aa405c87964a066405de5426a3089702b">DVS_STRUCTURED_IBLANKED_NODES</a> as the variable id</p>
<p><b>Note:</b> Ghost element information is sent via <a class="el" href="dynamic__visualization__store__api_8h.xhtml#aae3c0a5237c193d05266fba6e6798a4c" title="Update a field of scalars on elements.">dvs_update_var_element_scalar()</a> using <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#a5f85a0e808c3bad9b9b616e62f5724c0">DVS_STRUCTURED_GHOST_ELEMENTS</a> as the variable id</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">part_id</td><td>the id of part we are updating nodes for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">global_ijk_max</td><td>The one based global ijk max of the mesh across all ranks </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_min</td><td>the zero based local sub-block ijk min for this rank </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local_ijk_max</td><td>the zero based local sub-block ijk max for this rank </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">origin</td><td>the XYZ origin of this local ijk block </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dir_i</td><td>The normalized XYZ direction vector for the i dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dir_j</td><td>The normalized XYZ direction vector for the j dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dir_k</td><td>The normalized XYZ direction vector for the k dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i_vals</td><td>The absolute distance vector for each i index from the local sub block's origin of size iMax-iMin+1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">j_vals</td><td>The absolute distance vector for each j index from the local sub block's origin of size jMax-jMin+1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">k_vals</td><td>The absolute distance vector for each k index from the local sub block's origin of size kMax-kMin+1 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a433ce5100e551dca71dee92b0afe1563" name="a433ce5100e551dca71dee92b0afe1563"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a433ce5100e551dca71dee92b0afe1563">&#9670;&#160;</a></span>dvs_update_plot()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_plot </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>plot_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>x_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>y_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the data for a plot. </p>
<p>Update the data for a plot, the size of the x_values and y_values should match and be the same as num_values</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">plot_id</td><td>id of plot to update matching plot_infos sent with dvs_add_plot_info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x_values</td><td>array of x axis values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y_values</td><td>array of y axis values </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of arrays </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ad97de401448e85da8cb13d3e45cfb227" name="ad97de401448e85da8cb13d3e45cfb227"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad97de401448e85da8cb13d3e45cfb227">&#9670;&#160;</a></span>dvs_update_var_case_scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_case_scalar </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scalar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update value of case scalar. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">var_id</td><td>unique id of variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramname">scalar</td><td>value to update </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="ab4e0ac12018e08551d6b8121971fea7e" name="ab4e0ac12018e08551d6b8121971fea7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4e0ac12018e08551d6b8121971fea7e">&#9670;&#160;</a></span>dvs_update_var_case_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_case_vector </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>vec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update value of case vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id of variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vec</td><td>array of x,y,z values (size 3) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aae3c0a5237c193d05266fba6e6798a4c" name="aae3c0a5237c193d05266fba6e6798a4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3c0a5237c193d05266fba6e6798a4c">&#9670;&#160;</a></span>dvs_update_var_element_scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_element_scalar </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>scalars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update a field of scalars on elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id for variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>unique id for part element is associated with (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">type</td><td>element type to update </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scalars</td><td>array of scalars </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_vals</td><td>number of values in scalar array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a008017a6bb9e8c8488e392d3cf58f7ad" name="a008017a6bb9e8c8488e392d3cf58f7ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a008017a6bb9e8c8488e392d3cf58f7ad">&#9670;&#160;</a></span>dvs_update_var_element_scalar_int64()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_element_scalar_int64 </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>scalars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update a field of int64 scalars on elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id for variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>unique id for part element is associated with (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">type</td><td>element type to update </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scalars</td><td>array of scalars </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_vals</td><td>number of values in scalar array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="af3cd5ecfd626ca40b1273634734f38d5" name="af3cd5ecfd626ca40b1273634734f38d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3cd5ecfd626ca40b1273634734f38d5">&#9670;&#160;</a></span>dvs_update_var_element_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_element_vector </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="dynamic__visualization__store__enums_8h.xhtml#af1c8824b29a0ab747460216716cc2895">dvs_element_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update a field of vectors on elements. </p>
<p>Updates a field of vectors on elements, the size of all coordinate arrays must be the same.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id for variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>unique id for part to update (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">type</td><td>element type to update </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to udpate, should be the size of number of elements * 3, values are XYZ XYZ XYZ.......... XYZ </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="aea17a7bbdc6ac8c2cdd4e6c35c1a8578" name="aea17a7bbdc6ac8c2cdd4e6c35c1a8578"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea17a7bbdc6ac8c2cdd4e6c35c1a8578">&#9670;&#160;</a></span>dvs_update_var_node_scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_node_scalar </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>scalars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update a field of scalars on nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id for variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>unique id for part nodes are associated with (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scalars</td><td>array of scalars to set on variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_vals</td><td>number of values in scalar array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a7c130a702347b1baa7e884303f3ce9d5" name="a7c130a702347b1baa7e884303f3ce9d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c130a702347b1baa7e884303f3ce9d5">&#9670;&#160;</a></span>dvs_update_var_node_scalar_int64()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_node_scalar_int64 </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>scalars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_vals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update a field of int64 scalars on nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id for variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>unique id for part nodes are associated with (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scalars</td><td>array of scalars to set on variable </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_vals</td><td>number of values in scalar array <br  />
 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a9086155711ed76c6141bdde2291f140a" name="a9086155711ed76c6141bdde2291f140a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9086155711ed76c6141bdde2291f140a">&#9670;&#160;</a></span>dvs_update_var_node_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_node_vector </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>num_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update a field of vectors on nodes. </p>
<p>Updates a field of vectors on nodes, the size of all coordinate arrays must be the same.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id for variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>unique id for part to update (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>array of values to udpate, should be the size of number of nodes * 3, values are XYZ XYZ XYZ.......... XYZ </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">num_values</td><td>size of values array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a853ed7ef2608619b82dd51055cee3f60" name="a853ed7ef2608619b82dd51055cee3f60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a853ed7ef2608619b82dd51055cee3f60">&#9670;&#160;</a></span>dvs_update_var_part_scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_part_scalar </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scalar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update value of part scalar. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramname">var_id</td><td>unique id of variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramname">part_id</td><td>unique id of part associated with (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramname">scalar</td><td>value to update </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
<a id="a0b8da4c016b09b93b3fcf71afe384b21" name="a0b8da4c016b09b93b3fcf71afe384b21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b8da4c016b09b93b3fcf71afe384b21">&#9670;&#160;</a></span>dvs_update_var_part_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DVS_DLL_EXPORT <a class="el" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> dvs_update_var_part_vector </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>session_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>var_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>part_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>vec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update value of part scalar. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">session_id</td><td>id for session created by <a class="el" href="dynamic__visualization__store__api_8h.xhtml#ab96812d4412a9af10e7e7924c572a7c9" title="Connect to dvs server.">dvs_connect()</a> </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">var_id</td><td>unique id of variable to update (must match var added with dvs_add_var_info) </td></tr>
    <tr><td class="paramdir"></td><td class="paramname">part_id</td><td>unique id of part associated with (must match parts added with dvs_add_part_info) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vec</td><td>array of x,y,z values (size 3) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dvs_ret TODO </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
