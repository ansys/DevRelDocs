<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Veronica: D:/Product-src/ensight/user_defined_src/readers/dvs/test_dvs_reader.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="veronica_logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">Veronica
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Introduction</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <span id="MSearchSelect"                onmouseover="return searchBox.OnSearchSelectShow()"                onmouseout="return searchBox.OnSearchSelectHide()">&#160;</span>
          <input type="text" id="MSearchField" value="" placeholder="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_efb5d67553d49169c49ef58de7241528.xhtml">ensight</a></li><li class="navelem"><a class="el" href="dir_4e0d2d4294803448cbce42ae5b7dbd77.xhtml">user_defined_src</a></li><li class="navelem"><a class="el" href="dir_359f060799dd509662b36dfd7584eb2e.xhtml">readers</a></li><li class="navelem"><a class="el" href="dir_1e237ac59110de3c5c813eb754d30339.xhtml">dvs</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">test_dvs_reader.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="test__dvs__reader_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/**************************************************************</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">*</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">*   (C) 2021 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited.</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment">*</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">*   Restricted Rights Legend</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment">*</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment">*   Use, duplication, or disclosure of this</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">*   software and its documentation by the</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">*   Government is subject to restrictions as</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">*   set forth in subdivision [(b)(3)(ii)] of</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment">*   the Rights in Technical Data and Computer</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">*   Software clause at 52.227-7013.</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment">*</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">**************************************************************</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment">*/</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="preprocessor">#include &quot;<a class="code" href="dvs__query__interface_8h.xhtml">include/dvs_query_interface.h</a>&quot;</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="preprocessor">#include &quot;<a class="code" href="logger__verbose_8h.xhtml">logger_verbose.h</a>&quot;</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="preprocessor">#include &lt;thread&gt;</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="preprocessor">#include &lt;cfloat&gt;</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="keyword">static</span> <span class="keywordtype">void</span> logging_function(<span class="keywordtype">void</span>* user_data, <span class="keyword">const</span> <span class="keywordtype">char</span>* message)</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>{</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>    fprintf(stdout, message);</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>}</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="keyword">static</span> <span class="keywordtype">void</span> print(<span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* <span class="keywordtype">object</span>)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>{</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>    <span class="keywordflow">if</span> (<span class="keywordtype">object</span>)</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>    {</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>        std::string object_name = <span class="stringliteral">&quot;Unknown:&quot;</span>;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>        <span class="keywordflow">if</span> (object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a889c46624013cc3802c7164d153b95f6">get_type</a>() == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_object.xhtml#aa897daa1f7d0467515fd108c29015348a8b2484e08a16329d2d91c18c254f5ca6">DVS::IObject::PART</a>) {</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>            object_name = <span class="stringliteral">&quot;Part&quot;</span>;</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>        }</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a889c46624013cc3802c7164d153b95f6">get_type</a>() == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_object.xhtml#aa897daa1f7d0467515fd108c29015348abe80fa1e67dae7efb56fdb2936914cae">DVS::IObject::PLOT</a>) {</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>            object_name = <span class="stringliteral">&quot;Plot&quot;</span>;</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>        }</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>        fprintf( stdout, <span class="stringliteral">&quot;%s: Name: %s Type: %i\n&quot;</span>, object_name.c_str(), object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>(), object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a889c46624013cc3802c7164d153b95f6">get_type</a>() );</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>        fprintf( stdout, <span class="stringliteral">&quot;Dataset Name: %s\n&quot;</span>, object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#aea688a307b1cb02ae53e0e8fd3791e64">get_dataset</a>()-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>());</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>        fprintf( stdout, <span class="stringliteral">&quot;Metadata Size: %u\n&quot;</span>, object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a31db3b716cc815c2c73f826f24384f6a">get_num_metadata</a>());</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>        <span class="keywordflow">if</span> (object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a31db3b716cc815c2c73f826f24384f6a">get_num_metadata</a>()) {</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>            <span class="keywordflow">for</span> (uint32_t metadata_idx = 0; metadata_idx &lt; <span class="keywordtype">object</span>-&gt;get_num_metadata(); metadata_idx++) {</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>                fprintf(stdout, <span class="stringliteral">&quot;Key: %s, Val:%s &quot;</span>, object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a04ee2919ffeb46d966d4675c8cd4420c">get_metadata_key</a>(metadata_idx), object-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a7a37d603ccf93f7f1ec9f962fa9d1f61">get_metadata_value</a>(metadata_idx));</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>            }</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>        }</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>        fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>    }</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>}</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span><span class="keyword">static</span> <span class="keywordtype">void</span> print(<span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a>* var)</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>{</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>    <span class="keywordflow">if</span> (var)</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    {</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>        fprintf( stdout, <span class="stringliteral">&quot;Var: Name: %s, Type: %i, Location: %i, Unit Dim: %s, Unit Label: %s\n&quot;</span>,</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>        var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#ae837af2ee946d8f54695d1abf95c5cda">get_var_type</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a6aa67cf54eb22ee51a7bf5eeb778cee5">get_unit_dimension</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#aa484336b355e68f93069e97d771e4a6e">get_unit_label</a>());</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>        fprintf(stdout, <span class="stringliteral">&quot;Dataset Name: %s\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#acd4c1b8698417ac314a45143e92986d6">get_dataset</a>()-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>());</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>        fprintf( stdout, <span class="stringliteral">&quot;Metadata Size: %u\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a2deab60f72955106a4a4a3f67a0f295e">get_num_metadata</a>());</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>        <span class="keywordflow">if</span> (var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a2deab60f72955106a4a4a3f67a0f295e">get_num_metadata</a>()) {</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>            <span class="keywordflow">for</span> (uint32_t metadata_idx = 0; metadata_idx &lt; var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a2deab60f72955106a4a4a3f67a0f295e">get_num_metadata</a>(); metadata_idx++) {</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>                fprintf(stdout, <span class="stringliteral">&quot;Key: %s, Val:%s &quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#ae18e148e2d2996891560734e53cd9671">get_metadata_key</a>(metadata_idx), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a22432a4b79163a933a850a7a58dfe315">get_metadata_value</a>(metadata_idx));</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>            }</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>        }</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>        fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    }</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>}</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="test__dvs__reader_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">   94</a></span><span class="keywordtype">int</span> <a class="code hl_function" href="test__dvs__reader_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>{</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    <span class="keywordtype">char</span> cache_uri[512] = {0};</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    uint32_t debug_wait = 0;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    <span class="keywordtype">bool</span> all_coords = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    <span class="keywordtype">bool</span> all_connectivity = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordtype">bool</span> all_variable_data = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>    uint32_t i = 1;</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>    <span class="keywordflow">while</span> (i &lt; argc)</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>    {</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>        <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-cache_uri&quot;</span>) == 0) &amp;&amp; (i &lt; argc - 1))</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>        {</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>            i++;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>            strncpy(cache_uri, argv[i], 512);</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>        }</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-all_coords&quot;</span>) == 0))</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>        {</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>            all_coords = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>        }</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-all_conn&quot;</span>) == 0))</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>        {</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>            all_connectivity = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>        }</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-all_vars&quot;</span>) == 0))</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>        {</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>            all_variable_data = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>        }</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((strcmp(argv[i], <span class="stringliteral">&quot;-debug_wait&quot;</span>) == 0) &amp;&amp; (i &lt; argc - 1))</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>        {</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>            i++;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>            debug_wait = atoi(argv[i]);</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>        }</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>        {</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>            fprintf(stderr, <span class="stringliteral">&quot;Unknown option: %s\n&quot;</span>, argv[i]);</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>            fprintf(stderr, <span class="stringliteral">&quot;Usage: %s [-uri str] [-debug_wait ms] \n&quot;</span>, argv[0]);</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>            fprintf(stderr, <span class="stringliteral">&quot;Options:\n&quot;</span>);</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>            fprintf(stderr, <span class="stringliteral">&quot;  -cache_uri str       The URI for the reader to use for the cache. Default: No cache\n&quot;</span>);</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>            fprintf(stderr, <span class="stringliteral">&quot;  -all_coords          Print the full coordinates for the mesh chunks iterated over (not a good idea for large datasets)\n&quot;</span>);</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>            fprintf(stderr, <span class="stringliteral">&quot;  -all_conn            Print the full connectivity for the element blocks iterated over (not a good idea for large datasets)\n&quot;</span>);</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>            fprintf(stderr, <span class="stringliteral">&quot;  -all_vars            Print the full variable values for mesh chunks and element blocks (not a good idea for large datasets)\n&quot;</span>);</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>            fprintf(stderr, <span class="stringliteral">&quot;  -debug_wait s        Wait for [s] for debugging\n&quot;</span>);</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>            exit(1);</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>        }</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>        i++;</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    }</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    <span class="keywordflow">if</span> (debug_wait &gt; 0) {</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>        std::this_thread::sleep_for(std::chrono::seconds(debug_wait));</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>    }</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>    std::unique_ptr&lt;<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>, std::function&lt;void(<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>*)&gt;&gt; dataset_query(DVS::CREATE_QUERY_INSTANCE(),</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>                                                                                  [](<a class="code hl_class" href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a>* p){p-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#a257f79d7de21658c07dc602dfa6bbf34">release</a>();});</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    dataset_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_query.xhtml#ab6ce54c68281ea1676af650ebc5716a0">set_logger</a>(<span class="keyword">new</span> <a class="code hl_class" href="class_d_v_s_1_1_logger_verbose.xhtml">DVS::LoggerVerbose</a>(<span class="keyword">nullptr</span>, <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#aafcfd80cd55c92c53106bb56fdaf026da95f57c1525070266247b1a687f565f5b">dvs_verbosity::DVS_VERBOSE</a>, &amp;logging_function));</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    <span class="keyword">auto</span> err = dataset_query-&gt;add_uri(cache_uri);</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> !=  err) {</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    }</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span> </div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Timesteps for Query\n&quot;</span>);</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    uint32_t num_timesteps = 0;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    err = dataset_query-&gt;get_num_timesteps(num_timesteps);</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of timesteps\n&quot;</span>);</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>    }</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    std::vector&lt;float&gt; timesteps(num_timesteps, 0.f);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    dataset_query-&gt;get_timesteps(timesteps.data());</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>    fprintf(stdout, <span class="stringliteral">&quot;Timesteps: &quot;</span>);</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> time : timesteps) {</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>        fprintf (stdout, <span class="stringliteral">&quot; %f&quot;</span>, time);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    }</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Ranks for Query\n&quot;</span>);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    uint32_t num_ranks = 0;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>    err = dataset_query-&gt;get_num_ranks(num_ranks);</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of ranks\n&quot;</span>);</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    }</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    std::vector&lt;uint32_t&gt; global_ranks(num_ranks, 0);</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    dataset_query-&gt;get_ranks(global_ranks.data());</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> rank : global_ranks) {</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>        fprintf(stdout, <span class="stringliteral">&quot;%u &quot;</span>, rank);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    }</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing Max Chunks for Query\n&quot;</span>);</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>    uint32_t num_chunks_per_rank = 0;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>    err = dataset_query-&gt;get_num_chunks_per_rank(num_chunks_per_rank);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of chunks per rank\n&quot;</span>);</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    }</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>    std::vector&lt;uint32_t&gt; global_chunk_max(num_chunks_per_rank, 0);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    dataset_query-&gt;get_chunks_per_rank(global_chunk_max.data());</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> chunk : global_chunk_max) {</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>        fprintf(stdout, <span class="stringliteral">&quot;%u &quot;</span>, chunk);</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>    }</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Parts for Query\n&quot;</span>);</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>    uint32_t num_parts = 0;</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>    err = dataset_query-&gt;get_num_parts(num_parts);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of parts\n&quot;</span>);</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>    }</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>    <span class="keywordflow">for</span> (uint32_t part_index = 0; part_index &lt; num_parts; part_index++)</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>    {</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>        <span class="keyword">auto</span> part = dataset_query-&gt;get_part(part_index);</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>        <span class="keywordflow">if</span> (!part) <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>        print(part);</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>    }</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Plots for Query\n&quot;</span>);</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>    uint32_t num_plots = 0;</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>    err = dataset_query-&gt;get_num_plots(num_plots);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of plots\n&quot;</span>);</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    }</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    <span class="keywordflow">for</span> (uint32_t plot_index = 0; plot_index &lt; num_plots; plot_index++)</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>    {</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>        <span class="keyword">auto</span> plot = dataset_query-&gt;get_plot(plot_index);</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>        <span class="keywordflow">if</span> (!plot) <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>        print(plot);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>    }</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Vars for Query\n&quot;</span>);</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    uint32_t num_vars = 0;</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    err = dataset_query-&gt;get_num_variables(num_vars);</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of vars\n&quot;</span>);</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>    }</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_vars; var_index++)</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>    {</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>        <span class="keyword">auto</span> var = dataset_query-&gt;get_variable(var_index);</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>        <span class="keywordflow">if</span> (!var) <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>        print(var);</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>    }</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Case Variables for Query\n\n&quot;</span>);</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>    num_vars = 0;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>    err = dataset_query-&gt;get_num_variables(num_vars);</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of vars for case vars\n&quot;</span>);</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>    }</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>    <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_vars; var_index++)</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>    {</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>        <span class="keyword">auto</span> var = dataset_query-&gt;get_variable(var_index);</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>        <span class="keywordflow">if</span> (var &amp;&amp; var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() == <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a9c9b14644e9370719a51b7342bbc9c4d">dvs_var_location::CASE</a>) {</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>            <span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_dataset.xhtml">DVS::IDataset</a>* dataset = var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#acd4c1b8698417ac314a45143e92986d6">get_dataset</a>();</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>            std::vector&lt;float&gt; var_value(var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a9dbdd84e6f6342deae82ede6dcf2156e">get_float_count_per_value</a>());</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>            <span class="keywordflow">for</span> (<span class="keywordtype">float</span> timestep : timesteps) {</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == dataset_query-&gt;get_variable_data(dataset, var, timestep, var_value.data())) {</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>                    <span class="comment">//Only scalars are supported for case/part variables right now so we</span></div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>                    <span class="comment">//can just look at the first value</span></div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>                    fprintf(stdout, <span class="stringliteral">&quot;Dataset: %s, Var: %s, Time: %f, Value: %f\n&quot;</span>,</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>                            dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), timestep, var_value[0]);</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>                }</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>                <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>                    fprintf(stdout, <span class="stringliteral">&quot;Dataset: %s, Var: %s, Time: %f, No Value Found\n&quot;</span>,</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>                            dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), timestep);</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>                }</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>            }</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>        }</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>    }</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Part Variables for Query\n\n&quot;</span>);</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>    num_vars = 0;</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>    err = dataset_query-&gt;get_num_variables(num_vars);</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of vars for part vars\n&quot;</span>);</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>    }</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>    <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_vars; var_index++)</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>    {</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>        <span class="keyword">auto</span> var = dataset_query-&gt;get_variable(var_index);</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>        <span class="keywordflow">if</span> (var &amp;&amp; var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() == <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a173f98c603042f6241b70157d56e385f">dvs_var_location::PART</a>) {</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>            <span class="keyword">auto</span> dataset = var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#acd4c1b8698417ac314a45143e92986d6">get_dataset</a>();</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>            std::vector&lt;float&gt; var_value(var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a9dbdd84e6f6342deae82ede6dcf2156e">get_float_count_per_value</a>());</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>            <span class="keywordflow">for</span> (<span class="keywordtype">float</span> timestep : timesteps) {</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>                <span class="keywordflow">for</span> (uint32_t part_index = 0; part_index &lt; dataset-&gt;get_num_parts(); part_index++) {</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>                    <span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* part = dataset-&gt;get_part(part_index);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>                    <span class="keywordflow">if</span> (!part) {</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>                        <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>                    }</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>                    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == dataset_query-&gt;get_variable_data(part, var, timestep, var_value.data())) {</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>                        <span class="comment">//Only scalars are supported for case/part variables right now so we</span></div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>                        <span class="comment">//can just look at the first value</span></div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>                        fprintf(stdout, <span class="stringliteral">&quot;Dataset: %s, Part: %s, Var: %s, Time: %f, Value: %f\n&quot;</span>,</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>                                dataset-&gt;get_name(), part-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), timestep, var_value[0]);</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>                    }</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>                    <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>                        fprintf(stdout, <span class="stringliteral">&quot;Dataset: %s, Part: %s, Var: %s, Time: %f, No Value Found\n&quot;</span>,</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>                                dataset-&gt;get_name(), part-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>(), var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), timestep);</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>                    }</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>                }</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>            }</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>        }</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>    }</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Datasets for Query\n&quot;</span>);</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>    uint32_t num_datasets = 0;</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>    err = dataset_query-&gt;get_num_datasets(num_datasets);</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>        fprintf (stdout, <span class="stringliteral">&quot;Error getting number of datasets\n&quot;</span>);</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>    }</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>    <span class="keywordflow">for</span> (uint32_t dataset_idx = 0; dataset_idx &lt; num_datasets; dataset_idx++)</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>    {</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>        <a class="code hl_class" href="class_d_v_s_1_1_i_dataset.xhtml">DVS::IDataset</a>* dataset = dataset_query-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#aea688a307b1cb02ae53e0e8fd3791e64">get_dataset</a>(dataset_idx);</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>        <span class="keywordflow">if</span> (dataset)</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>        {</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>            fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>            fprintf(stdout, <span class="stringliteral">&quot;Dataset: %s Units System: %s\n&quot;</span>,</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>                    dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>(), dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#af69301cb1a2d466933e8fee162411a60">get_unit_system</a>() );</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>            <span class="keywordflow">for</span> (uint32_t cur_pair = 0; cur_pair &lt; dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a31db3b716cc815c2c73f826f24384f6a">get_num_metadata</a>(); cur_pair++) {</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>                fprintf(stdout, <span class="stringliteral">&quot;Key: %s, Val: %s\n&quot;</span>, dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a04ee2919ffeb46d966d4675c8cd4420c">get_metadata_key</a>(cur_pair), dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a7a37d603ccf93f7f1ec9f962fa9d1f61">get_metadata_value</a>(cur_pair));</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>            }</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>            std::vector&lt;uint32_t&gt; ranks(dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#a423774f63a6f5275d4d4f33da65f37b4">get_num_ranks</a>(), 0);</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>            dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#ac620a1f5fb513d636ed59d7b4552197a">get_ranks</a>(ranks.data());</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span> </div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>            fprintf(stdout, <span class="stringliteral">&quot;Ranks: &quot;</span>);</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> rank : ranks) {</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>                fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, rank);</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>            }</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span> </div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>            std::vector&lt;uint32_t&gt; chunks(dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#a5ec19061a478d6b2aea0976b9e79f73b">get_num_chunks_per_rank</a>(), 0);</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>            dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#afb023f6b10fd4c072e8c7cb140d666ae">get_chunks_per_rank</a>(chunks.data());</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>            fprintf(stdout, <span class="stringliteral">&quot;Chunks: &quot;</span>);</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> chunk : chunks) {</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>                fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, chunk);</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>            }</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>            <span class="keywordflow">for</span> (uint32_t part_idx = 0; part_idx &lt; dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#a69aa8f4d0ad2c4fd69e6443f662fbc1d">get_num_parts</a>(); part_idx++) {</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>                <span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* part = dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#af000ab1d7bfdd043cdc2b4f6cd4d682c">get_part</a>(part_idx);</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>                <span class="keywordflow">if</span> (!part) <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>                print(part);</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>            }</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span> </div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>            <span class="keywordflow">for</span> (uint32_t plot_idx = 0; plot_idx &lt; dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#a49e3b27865d865ba36dd5d7e5c659a6b">get_num_plots</a>(); plot_idx++) {</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>                <span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* plot = dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#a8f3bb3e37530f0b1dd6630fb6f9925f5">get_plot</a>(plot_idx);</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>                <span class="keywordflow">if</span> (!plot) <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>                print(plot);</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>            }</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span> </div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>            <span class="keywordflow">for</span> (uint32_t var_idx = 0; var_idx &lt; dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#acd0c0e81b283bce8044d9b4de796574a">get_num_variables</a>(); var_idx++) {</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>                <span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a>* var = dataset-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_dataset.xhtml#abfef24372147723533c9feebd55666c1">get_var</a>(var_idx);</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>                <span class="keywordflow">if</span> (!var) <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>                print(var);</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>            }</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>        }</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>    }</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span> </div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Mesh Chunks for Query\n&quot;</span>);</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>    uint32_t num_mesh_chunks = 0;</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>    err = dataset_query-&gt;get_num_mesh_chunks(num_mesh_chunks);</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of mesh chunks\n&quot;</span>);</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>    }</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>    <span class="keywordflow">for</span> (uint32_t index = 0; index &lt; num_mesh_chunks; index++) {</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>        <a class="code hl_class" href="class_d_v_s_1_1_i_mesh_chunk.xhtml">DVS::IMeshChunk</a>* mesh_chunk = dataset_query-&gt;get_mesh_chunk(index);</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>        <span class="keywordflow">if</span> (mesh_chunk) {</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>            <a class="code hl_enumeration" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144a">DVS::IMeshChunk::MeshType</a> type = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ab025d1550b2b3cd77faefecec5199852">get_type</a>();</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>            <span class="keyword">const</span> <a class="code hl_class" href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a>* part = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abb13b29450a5ccfaa9027cfda3ceb108">get_object</a>();</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>            <span class="keywordtype">float</span> time = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a32ad562394805327fbabffa322643701">get_time</a>();</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>            uint32_t rank = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6c520674083999e99bdf77b2b1eaacf8">get_rank</a>();</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>            uint32_t chunk = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6b894c57bfd1e70168290ce69ecc5af4">get_chunk</a>();</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span> </div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>            std::string coords_hash(mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_hash.xhtml#ac0dedeb8d9dfd442d49d16cb4ddfb221">get_hash_size</a>(), 0);</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>            <span class="keywordflow">if</span> (coords_hash.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_hash.xhtml#a51eaee86a6e2db4dda7f4326daa33874">get_hash</a>(&amp;(coords_hash[0]))) {</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not load coordinates hash\n&quot;</span>);</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>            }</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span> </div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>            fprintf(stdout, <span class="stringliteral">&quot;Mesh Chunk %u Type: %i Part: %s Rank: %u Chunk: %u Time: %f Hash: %s\n&quot;</span>,</div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>                    index, type, part-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">get_name</a>(), rank, chunk, time, coords_hash.c_str());</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span> </div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>            std::array&lt;uint32_t,3&gt; num_coords;</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span> </div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>            <a class="code hl_typedef" href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a> coord_ret = <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>;</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span> </div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span>            <span class="keywordflow">if</span> (type == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e">DVS::IMeshChunk::MeshType::UNSTRUCTURED</a>) {</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>                coord_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53">get_coords_size</a>(num_coords[0]);</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>                <span class="comment">//Coords of all axis match for unstructured</span></div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>                num_coords[1] = num_coords[2] = num_coords[0];</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>            }</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013">DVS::IMeshChunk::MeshType::CURVILINEAR</a>) {</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>                coord_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a70b1069fc8737730efa0fc01a0698fbd">get_coords_curv_size</a>(num_coords[0]);</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>                <span class="comment">//Coords of all axis match for curvilinear</span></div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>                num_coords[1] = num_coords[2] = num_coords[0];</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>            }</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aa95416cf06dfb48f6331a1f7c5c2704d2">DVS::IMeshChunk::MeshType::PARALLELEPIPED</a>) {</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>                coord_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abda21734e2f506b982b65007d17c92fd">get_coords_parallele_size</a>(num_coords[0], num_coords[1], num_coords[2]);</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>            }</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>            <span class="keywordflow">if</span> (coord_ret != <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: %d Loading Coords Size\n&quot;</span>, coord_ret);</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>            }</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span>            <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span>                fprintf(stdout, <span class="stringliteral">&quot;Size of coords arrays: X(I): %d Y(J): %d Z(K): %d\n&quot;</span>, num_coords[0], num_coords[1], num_coords[2]);</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>            }</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>            <span class="keywordflow">if</span> (coord_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> &amp;&amp; all_coords) {</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span> </div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>                std::vector&lt;float&gt; x_coords(num_coords[0]);</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>                std::vector&lt;float&gt; y_coords(num_coords[1]);</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>                std::vector&lt;float&gt; z_coords(num_coords[2]);</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span> </div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>                <span class="comment">//The vars are for structured data if needed</span></div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>                std::array&lt;float,3&gt; origin;</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>                std::array&lt;float,3&gt; dir_vec_i, dir_vec_j, dir_vec_k;</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>                std::array&lt;float,3&gt; local_ijk_min, local_ijk_max, global_ijk_max;</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span> </div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>                <span class="keywordflow">if</span> (type == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e">DVS::IMeshChunk::MeshType::UNSTRUCTURED</a>) {</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>                    coord_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7738e954570e849462ff493ec875bc80">get_coords</a>(x_coords.data(), y_coords.data(), z_coords.data());</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span> </div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>                    <span class="comment">//Validating the coords match if interleaved</span></div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>                    std::vector&lt;float&gt; interleaved(num_coords[0]+num_coords[1]+num_coords[2]);</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>                    <span class="keyword">auto</span> interleaved_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a39c2d8cc95f14ecbe9789908881c92a0">get_coords_interleaved</a>(interleaved.data());</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>                    <span class="keywordflow">if</span> (coord_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> &amp;&amp; interleaved_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>                        <span class="keywordtype">bool</span> good_values = x_coords[0] == interleaved[0];</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>                        good_values &amp;= y_coords[0] == interleaved[1];</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>                        good_values &amp;= z_coords[0] == interleaved[2];</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>                        <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; num_coords[0] &amp;&amp; good_values; i++) {</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>                            good_values &amp;= x_coords[i] == interleaved[i*3];</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>                            good_values &amp;= y_coords[i] == interleaved[i*3+1];</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>                            good_values &amp;= z_coords[i] == interleaved[i*3+2];</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span>                        }</div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>                        <span class="keywordflow">if</span> (!good_values) {</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Interleaved coords don&#39;t match non-interleaved\n&quot;</span>);</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>                        }</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>                    }</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (interleaved_ret != <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>                        <span class="comment">//Error message for coord_ret handled later</span></div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: %d, Getting interleaved coords\n&quot;</span>, interleaved_ret);</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>                    }</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>                }</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span>                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013">DVS::IMeshChunk::MeshType::CURVILINEAR</a>) {</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span>                    coord_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8da90ca355541bf876fa23ed267f94cb">get_coords_curv</a>(local_ijk_min.data(),</div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>                                                            local_ijk_max.data(),</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>                                                            global_ijk_max.data(),</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>                                                            x_coords.data(),</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>                                                            y_coords.data(),</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span>                                                            z_coords.data());</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>                    <span class="keywordflow">if</span> (coord_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>                        <span class="comment">//Error message for coord_ret handled later</span></div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>                        fprintf(stdout, <span class="stringliteral">&quot;LocalIJKMin: %f %f %f\n&quot;</span>, local_ijk_min[0], local_ijk_min[1], local_ijk_min[2]);</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>                        fprintf(stdout, <span class="stringliteral">&quot;LocalIJKMax: %f %f %f\n&quot;</span>, local_ijk_max[0], local_ijk_max[1], local_ijk_max[2]);</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>                        fprintf(stdout, <span class="stringliteral">&quot;GlobalIJKMax: %f %f %f\n&quot;</span>, global_ijk_max[0], global_ijk_max[1], global_ijk_max[2]);</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span>                    }</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span> </div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span>                    <span class="comment">//Validating the coords match if interleaved</span></div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span>                    std::vector&lt;float&gt; interleaved(num_coords[0]+num_coords[1]+num_coords[2]);</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>                    std::array&lt;float,3&gt; local_ijk_min_2, local_ijk_max_2, global_ijk_max_2;</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>                    <span class="keyword">auto</span> interleaved_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5c191e3ec6d65a527fc1f3224f84d503">get_coords_curv_interleaved</a>(local_ijk_min_2.data(),</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span>                                                                                   local_ijk_max_2.data(),</div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>                                                                                   global_ijk_max_2.data(),</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span>                                                                                   interleaved.data());</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>                    <span class="keywordflow">if</span> (coord_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> &amp;&amp; interleaved_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>                        <span class="keywordtype">bool</span> good_values = x_coords[0] == interleaved[0];</div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>                        good_values &amp;= y_coords[0] == interleaved[1];</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>                        good_values &amp;= z_coords[0] == interleaved[2];</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>                        <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; num_coords[0] &amp;&amp; good_values; i++) {</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>                            good_values &amp;= x_coords[i] == interleaved[i*3];</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>                            good_values &amp;= y_coords[i] == interleaved[i*3+1];</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>                            good_values &amp;= z_coords[i] == interleaved[i*3+2];</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span>                        }</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>                        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; 3 &amp;&amp; good_values; i++) {</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>                            good_values &amp;= local_ijk_min[i] == local_ijk_min_2[i];</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>                            good_values &amp;= local_ijk_max[i] == local_ijk_max_2[i];</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>                            good_values &amp;= global_ijk_max[i] == global_ijk_max_2[i];</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span>                        }</div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>                        <span class="keywordflow">if</span> (!good_values) {</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Interleaved curv coords don&#39;t match non-interleaved\n&quot;</span>);</div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>                        }</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>                    }</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span>                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (interleaved_ret != <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>                        <span class="comment">//Error message for coord_ret handled later</span></div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: %d, Getting interleaved curv coords\n&quot;</span>, interleaved_ret);</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span>                    }</div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span>                }</div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span>                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code hl_enumvalue" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aa95416cf06dfb48f6331a1f7c5c2704d2">DVS::IMeshChunk::MeshType::PARALLELEPIPED</a>) {</div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span>                    coord_ret = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123">get_coords_parallele</a>(origin.data(),</div>
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno">  500</span>                                                                 dir_vec_i.data(),</div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span>                                                                 dir_vec_j.data(),</div>
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno">  502</span>                                                                 dir_vec_k.data(),</div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span>                                                                 local_ijk_min.data(),</div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>                                                                 local_ijk_max.data(),</div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>                                                                 global_ijk_max.data(),</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>                                                                 x_coords.data(),</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>                                                                 y_coords.data(),</div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span>                                                                 z_coords.data());</div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span>                    <span class="keywordflow">if</span> (coord_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span>                        fprintf(stdout, <span class="stringliteral">&quot;Origin: %f %f %f\n&quot;</span>, origin[0], origin[1], origin[2]);</div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span>                        fprintf(stdout, <span class="stringliteral">&quot;DirVecI: %f, %f, %f\n&quot;</span>, dir_vec_i[0], dir_vec_i[1], dir_vec_i[2]);</div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span>                        fprintf(stdout, <span class="stringliteral">&quot;DirVecJ: %f, %f, %f\n&quot;</span>, dir_vec_j[0], dir_vec_j[1], dir_vec_j[2]);</div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>                        fprintf(stdout, <span class="stringliteral">&quot;DirVecK: %f, %f, %f\n&quot;</span>, dir_vec_k[0], dir_vec_k[1], dir_vec_k[2]);</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>                        fprintf(stdout, <span class="stringliteral">&quot;LocalIJKMin: %f %f %f\n&quot;</span>, local_ijk_min[0], local_ijk_min[1], local_ijk_min[2]);</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span>                        fprintf(stdout, <span class="stringliteral">&quot;LocalIJKMax: %f %f %f\n&quot;</span>, local_ijk_max[0], local_ijk_max[1], local_ijk_max[2]);</div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span>                        fprintf(stdout, <span class="stringliteral">&quot;GlobalIJKMax: %f %f %f\n&quot;</span>, global_ijk_max[0], global_ijk_max[1], global_ijk_max[2]);</div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span>                    }</div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span>                }</div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span> </div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span>                <span class="keywordflow">if</span> (coord_ret == <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a>) {</div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span>                    fprintf(stdout, <span class="stringliteral">&quot;X:&quot;</span>);</div>
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno">  522</span>                    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; num_coords[0]; i++) {</div>
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span>                        fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, x_coords[i]);</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span>                    }</div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span>                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno">  526</span> </div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno">  527</span>                    fprintf(stdout, <span class="stringliteral">&quot;Y:&quot;</span>);</div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span>                    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; num_coords[1]; i++) {</div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span>                        fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, y_coords[i]);</div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span>                    }</div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span>                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span> </div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span>                    fprintf(stdout, <span class="stringliteral">&quot;Z:&quot;</span>);</div>
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno">  534</span>                    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; num_coords[2]; i++) {</div>
<div class="line"><a id="l00535" name="l00535"></a><span class="lineno">  535</span>                        fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, z_coords[i]);</div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span>                    }</div>
<div class="line"><a id="l00537" name="l00537"></a><span class="lineno">  537</span>                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00538" name="l00538"></a><span class="lineno">  538</span>                }</div>
<div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span>                <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: %d, Getting coords\n&quot;</span>, coord_ret);</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span>                }</div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span>            }</div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span> </div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span>            uint32_t num_nodal_vars = 0;</div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno">  545</span>            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9">get_num_variables</a>(num_nodal_vars)) {</div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get num nodal vars\n&quot;</span>);</div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span>            }</div>
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno">  548</span>            <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_nodal_vars; var_index++) {</div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span>                <span class="keyword">auto</span> var = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3">get_variable</a>(var_index);</div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span>                <span class="keywordflow">if</span> (var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() != <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a59a889456a2d742fdca191dccb3e871d">dvs_var_location::NODE</a>) {</div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Var is not nodal and should be\n&quot;</span>);</div>
<div class="line"><a id="l00552" name="l00552"></a><span class="lineno">  552</span>                }</div>
<div class="line"><a id="l00553" name="l00553"></a><span class="lineno">  553</span> </div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span>                uint32_t num_var_values = 0;</div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span>                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc">get_variable_size</a>(var_index, num_var_values)) {</div>
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var data\n&quot;</span>);</div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>                }</div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span> </div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span>                std::string nodal_var_hash_1(mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a>(var_index), 0);</div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span>                std::string nodal_var_hash_2(mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a>(var), 0);</div>
<div class="line"><a id="l00561" name="l00561"></a><span class="lineno">  561</span>                <span class="keywordflow">if</span> (nodal_var_hash_1.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a>(var_index, &amp;(nodal_var_hash_1[0]))) {</div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var hash 1\n&quot;</span>);</div>
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno">  563</span>                }</div>
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span>                <span class="keywordflow">if</span> (nodal_var_hash_2.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a>(var, &amp;(nodal_var_hash_2[0]))) {</div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var hash 2\n&quot;</span>);</div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span>                }</div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span>                <span class="keywordflow">if</span> (nodal_var_hash_1 != nodal_var_hash_2) {</div>
<div class="line"><a id="l00568" name="l00568"></a><span class="lineno">  568</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Nodal var hashes do not match\n&quot;</span>);</div>
<div class="line"><a id="l00569" name="l00569"></a><span class="lineno">  569</span>                }</div>
<div class="line"><a id="l00570" name="l00570"></a><span class="lineno">  570</span> </div>
<div class="line"><a id="l00571" name="l00571"></a><span class="lineno">  571</span>                fprintf(stdout, <span class="stringliteral">&quot;Nodal Var: %s, Num Values: %u, Hash: %s\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), num_var_values, nodal_var_hash_1.c_str());</div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno">  572</span>                <span class="keywordflow">if</span> (all_variable_data) {</div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span>                    <span class="keywordtype">float</span> min = FLT_MAX-1;</div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>                    <span class="keywordtype">float</span> max = -1*min;</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span>                    std::vector&lt;float&gt; var_data(num_var_values);</div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span>                    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ae7fe3d3b75e14f1cdd0d810e30a35fe0">get_variable_data</a>(var_index, var_data.data())) {</div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var data\n&quot;</span>);</div>
<div class="line"><a id="l00578" name="l00578"></a><span class="lineno">  578</span>                    }</div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span>                    fprintf(stdout, <span class="stringliteral">&quot;VarData:&quot;</span>);</div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span>                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : var_data) {</div>
<div class="line"><a id="l00581" name="l00581"></a><span class="lineno">  581</span>                        fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, val);</div>
<div class="line"><a id="l00582" name="l00582"></a><span class="lineno">  582</span>                        <span class="keywordflow">if</span> (val &lt; min) {</div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span>                            min = val;</div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span>                        }</div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span>                        <span class="keywordflow">if</span> (val &gt; max) {</div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span>                            max = val;</div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span>                        }</div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span>                    }</div>
<div class="line"><a id="l00589" name="l00589"></a><span class="lineno">  589</span>                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno">  590</span>                    fprintf(stdout, <span class="stringliteral">&quot;Min: %f, Max: %f\n&quot;</span>, min, max);</div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>                }</div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span>            }</div>
<div class="line"><a id="l00593" name="l00593"></a><span class="lineno">  593</span> </div>
<div class="line"><a id="l00594" name="l00594"></a><span class="lineno">  594</span>            fprintf(stdout, <span class="stringliteral">&quot;*******************************\n&quot;</span></div>
<div class="line"><a id="l00595" name="l00595"></a><span class="lineno">  595</span>                            <span class="stringliteral">&quot;Mesh Chunk: Test New Interfaces for Floats\n&quot;</span></div>
<div class="line"><a id="l00596" name="l00596"></a><span class="lineno">  596</span>                            <span class="stringliteral">&quot;*******************************\n&quot;</span>);</div>
<div class="line"><a id="l00597" name="l00597"></a><span class="lineno">  597</span>            uint32_t num_nodal_vars_floats = 0;</div>
<div class="line"><a id="l00598" name="l00598"></a><span class="lineno">  598</span>            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9">get_num_variables</a>(num_nodal_vars_floats, DVS::VAR_TYPE::FLOAT)) {</div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get num nodal vars\n&quot;</span>);</div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span>            }</div>
<div class="line"><a id="l00601" name="l00601"></a><span class="lineno">  601</span>            <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_nodal_vars_floats; ++var_index) {</div>
<div class="line"><a id="l00602" name="l00602"></a><span class="lineno">  602</span>                <span class="keyword">auto</span> var = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3">get_variable</a>(var_index, DVS::VAR_TYPE::FLOAT);</div>
<div class="line"><a id="l00603" name="l00603"></a><span class="lineno">  603</span>                <span class="keywordflow">if</span> (var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() != <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a59a889456a2d742fdca191dccb3e871d">dvs_var_location::NODE</a>) {</div>
<div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Var is not nodal and should be\n&quot;</span>);</div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno">  605</span>                }</div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span> </div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span>                uint32_t num_var_values = 0;</div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span>                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc">get_variable_size</a>(var_index, num_var_values, DVS::VAR_TYPE::FLOAT)) {</div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var data\n&quot;</span>);</div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span>                }</div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span> </div>
<div class="line"><a id="l00612" name="l00612"></a><span class="lineno">  612</span>                std::string nodal_var_hash_1(mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a>(var_index, DVS::VAR_TYPE::FLOAT), 0);</div>
<div class="line"><a id="l00613" name="l00613"></a><span class="lineno">  613</span>                std::string nodal_var_hash_2(mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a>(var), 0);</div>
<div class="line"><a id="l00614" name="l00614"></a><span class="lineno">  614</span>                <span class="keywordflow">if</span> (nodal_var_hash_1.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a>(var_index, &amp;(nodal_var_hash_1[0]), DVS::VAR_TYPE::FLOAT)) {</div>
<div class="line"><a id="l00615" name="l00615"></a><span class="lineno">  615</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var hash 1\n&quot;</span>);</div>
<div class="line"><a id="l00616" name="l00616"></a><span class="lineno">  616</span>                }</div>
<div class="line"><a id="l00617" name="l00617"></a><span class="lineno">  617</span>                <span class="keywordflow">if</span> (nodal_var_hash_2.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a>(var, &amp;(nodal_var_hash_2[0]))) {</div>
<div class="line"><a id="l00618" name="l00618"></a><span class="lineno">  618</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var hash 2\n&quot;</span>);</div>
<div class="line"><a id="l00619" name="l00619"></a><span class="lineno">  619</span>                }</div>
<div class="line"><a id="l00620" name="l00620"></a><span class="lineno">  620</span>                <span class="keywordflow">if</span> (nodal_var_hash_1 != nodal_var_hash_2) {</div>
<div class="line"><a id="l00621" name="l00621"></a><span class="lineno">  621</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Nodal var hashes do not match\n&quot;</span>);</div>
<div class="line"><a id="l00622" name="l00622"></a><span class="lineno">  622</span>                }</div>
<div class="line"><a id="l00623" name="l00623"></a><span class="lineno">  623</span> </div>
<div class="line"><a id="l00624" name="l00624"></a><span class="lineno">  624</span>                fprintf(stdout, <span class="stringliteral">&quot;Nodal Var: %s, Num Values: %u, Hash: %s\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), num_var_values, nodal_var_hash_1.c_str());</div>
<div class="line"><a id="l00625" name="l00625"></a><span class="lineno">  625</span>                <span class="keywordflow">if</span> (all_variable_data) {</div>
<div class="line"><a id="l00626" name="l00626"></a><span class="lineno">  626</span>                    <span class="keywordtype">float</span> min = FLT_MAX-1;</div>
<div class="line"><a id="l00627" name="l00627"></a><span class="lineno">  627</span>                    <span class="keywordtype">float</span> max = -1*min;</div>
<div class="line"><a id="l00628" name="l00628"></a><span class="lineno">  628</span>                    std::vector&lt;float&gt; var_data(num_var_values);</div>
<div class="line"><a id="l00629" name="l00629"></a><span class="lineno">  629</span>                    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ae7fe3d3b75e14f1cdd0d810e30a35fe0">get_variable_data</a>(var_index, var_data.data())) {</div>
<div class="line"><a id="l00630" name="l00630"></a><span class="lineno">  630</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var data\n&quot;</span>);</div>
<div class="line"><a id="l00631" name="l00631"></a><span class="lineno">  631</span>                    }</div>
<div class="line"><a id="l00632" name="l00632"></a><span class="lineno">  632</span>                    fprintf(stdout, <span class="stringliteral">&quot;VarData:&quot;</span>);</div>
<div class="line"><a id="l00633" name="l00633"></a><span class="lineno">  633</span>                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : var_data) {</div>
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno">  634</span>                        std::cout &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; val;</div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span>                        <span class="keywordflow">if</span> (val &lt; min) {</div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span>                            min = val;</div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span>                        }</div>
<div class="line"><a id="l00638" name="l00638"></a><span class="lineno">  638</span>                        <span class="keywordflow">if</span> (val &gt; max) {</div>
<div class="line"><a id="l00639" name="l00639"></a><span class="lineno">  639</span>                            max = val;</div>
<div class="line"><a id="l00640" name="l00640"></a><span class="lineno">  640</span>                        }</div>
<div class="line"><a id="l00641" name="l00641"></a><span class="lineno">  641</span>                    }</div>
<div class="line"><a id="l00642" name="l00642"></a><span class="lineno">  642</span>                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00643" name="l00643"></a><span class="lineno">  643</span>                    std::cout &lt;&lt; <span class="stringliteral">&quot;Min: &quot;</span> &lt;&lt; min &lt;&lt; <span class="stringliteral">&quot;, Max: &quot;</span> &lt;&lt; max &lt;&lt; std::endl;</div>
<div class="line"><a id="l00644" name="l00644"></a><span class="lineno">  644</span>                }</div>
<div class="line"><a id="l00645" name="l00645"></a><span class="lineno">  645</span>            }</div>
<div class="line"><a id="l00646" name="l00646"></a><span class="lineno">  646</span> </div>
<div class="line"><a id="l00647" name="l00647"></a><span class="lineno">  647</span>            fprintf(stdout, <span class="stringliteral">&quot;*******************************\n&quot;</span></div>
<div class="line"><a id="l00648" name="l00648"></a><span class="lineno">  648</span>                            <span class="stringliteral">&quot;Mesh Chunk: Test New Interfaces for Int64s\n&quot;</span></div>
<div class="line"><a id="l00649" name="l00649"></a><span class="lineno">  649</span>                            <span class="stringliteral">&quot;*******************************\n&quot;</span>);</div>
<div class="line"><a id="l00650" name="l00650"></a><span class="lineno">  650</span>            uint32_t num_nodal_vars_int64s = 0;</div>
<div class="line"><a id="l00651" name="l00651"></a><span class="lineno">  651</span>            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9">get_num_variables</a>(num_nodal_vars_int64s, DVS::VAR_TYPE::INT64)) {</div>
<div class="line"><a id="l00652" name="l00652"></a><span class="lineno">  652</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get num nodal vars\n&quot;</span>);</div>
<div class="line"><a id="l00653" name="l00653"></a><span class="lineno">  653</span>            }</div>
<div class="line"><a id="l00654" name="l00654"></a><span class="lineno">  654</span>            <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_nodal_vars_int64s; ++var_index) {</div>
<div class="line"><a id="l00655" name="l00655"></a><span class="lineno">  655</span>                <span class="keyword">auto</span> var = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3">get_variable</a>(var_index, DVS::VAR_TYPE::INT64);</div>
<div class="line"><a id="l00656" name="l00656"></a><span class="lineno">  656</span>                <span class="keywordflow">if</span> (var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() != <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a59a889456a2d742fdca191dccb3e871d">dvs_var_location::NODE</a>) {</div>
<div class="line"><a id="l00657" name="l00657"></a><span class="lineno">  657</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Var is not nodal and should be\n&quot;</span>);</div>
<div class="line"><a id="l00658" name="l00658"></a><span class="lineno">  658</span>                }</div>
<div class="line"><a id="l00659" name="l00659"></a><span class="lineno">  659</span> </div>
<div class="line"><a id="l00660" name="l00660"></a><span class="lineno">  660</span>                uint32_t num_var_values = 0;</div>
<div class="line"><a id="l00661" name="l00661"></a><span class="lineno">  661</span>                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc">get_variable_size</a>(var_index, num_var_values, DVS::VAR_TYPE::INT64)) {</div>
<div class="line"><a id="l00662" name="l00662"></a><span class="lineno">  662</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var data\n&quot;</span>);</div>
<div class="line"><a id="l00663" name="l00663"></a><span class="lineno">  663</span>                }</div>
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno">  664</span> </div>
<div class="line"><a id="l00665" name="l00665"></a><span class="lineno">  665</span>                std::string nodal_var_hash_1(mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a>(var_index, DVS::VAR_TYPE::INT64), 0);</div>
<div class="line"><a id="l00666" name="l00666"></a><span class="lineno">  666</span>                std::string nodal_var_hash_2(mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">get_var_hash_size</a>(var), 0);</div>
<div class="line"><a id="l00667" name="l00667"></a><span class="lineno">  667</span>                <span class="keywordflow">if</span> (nodal_var_hash_1.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a>(var_index, &amp;(nodal_var_hash_1[0]), DVS::VAR_TYPE::INT64)) {</div>
<div class="line"><a id="l00668" name="l00668"></a><span class="lineno">  668</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var hash 1\n&quot;</span>);</div>
<div class="line"><a id="l00669" name="l00669"></a><span class="lineno">  669</span>                }</div>
<div class="line"><a id="l00670" name="l00670"></a><span class="lineno">  670</span>                <span class="keywordflow">if</span> (nodal_var_hash_2.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">get_var_hash</a>(var, &amp;(nodal_var_hash_2[0]))) {</div>
<div class="line"><a id="l00671" name="l00671"></a><span class="lineno">  671</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var hash 2\n&quot;</span>);</div>
<div class="line"><a id="l00672" name="l00672"></a><span class="lineno">  672</span>                }</div>
<div class="line"><a id="l00673" name="l00673"></a><span class="lineno">  673</span>                <span class="keywordflow">if</span> (nodal_var_hash_1 != nodal_var_hash_2) {</div>
<div class="line"><a id="l00674" name="l00674"></a><span class="lineno">  674</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Nodal var hashes do not match\n&quot;</span>);</div>
<div class="line"><a id="l00675" name="l00675"></a><span class="lineno">  675</span>                }</div>
<div class="line"><a id="l00676" name="l00676"></a><span class="lineno">  676</span> </div>
<div class="line"><a id="l00677" name="l00677"></a><span class="lineno">  677</span>                fprintf(stdout, <span class="stringliteral">&quot;Nodal Var: %s, Num Values: %u, Hash: %s\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), num_var_values, nodal_var_hash_1.c_str());</div>
<div class="line"><a id="l00678" name="l00678"></a><span class="lineno">  678</span>                <span class="keywordflow">if</span> (all_variable_data) {</div>
<div class="line"><a id="l00679" name="l00679"></a><span class="lineno">  679</span>                    int64_t min = INT64_MAX-1;</div>
<div class="line"><a id="l00680" name="l00680"></a><span class="lineno">  680</span>                    int64_t max = -1*min;</div>
<div class="line"><a id="l00681" name="l00681"></a><span class="lineno">  681</span>                    std::vector&lt;int64_t&gt; var_data(num_var_values);</div>
<div class="line"><a id="l00682" name="l00682"></a><span class="lineno">  682</span>                    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ae7fe3d3b75e14f1cdd0d810e30a35fe0">get_variable_data</a>(var_index, var_data.data())) {</div>
<div class="line"><a id="l00683" name="l00683"></a><span class="lineno">  683</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get nodal var data\n&quot;</span>);</div>
<div class="line"><a id="l00684" name="l00684"></a><span class="lineno">  684</span>                    }</div>
<div class="line"><a id="l00685" name="l00685"></a><span class="lineno">  685</span>                    fprintf(stdout, <span class="stringliteral">&quot;VarData:&quot;</span>);</div>
<div class="line"><a id="l00686" name="l00686"></a><span class="lineno">  686</span>                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : var_data) {</div>
<div class="line"><a id="l00687" name="l00687"></a><span class="lineno">  687</span>                        std::cout &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; val;</div>
<div class="line"><a id="l00688" name="l00688"></a><span class="lineno">  688</span>                        <span class="keywordflow">if</span> (val &lt; min) {</div>
<div class="line"><a id="l00689" name="l00689"></a><span class="lineno">  689</span>                            min = val;</div>
<div class="line"><a id="l00690" name="l00690"></a><span class="lineno">  690</span>                        }</div>
<div class="line"><a id="l00691" name="l00691"></a><span class="lineno">  691</span>                        <span class="keywordflow">if</span> (val &gt; max) {</div>
<div class="line"><a id="l00692" name="l00692"></a><span class="lineno">  692</span>                            max = val;</div>
<div class="line"><a id="l00693" name="l00693"></a><span class="lineno">  693</span>                        }</div>
<div class="line"><a id="l00694" name="l00694"></a><span class="lineno">  694</span>                    }</div>
<div class="line"><a id="l00695" name="l00695"></a><span class="lineno">  695</span>                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00696" name="l00696"></a><span class="lineno">  696</span>                    std::cout &lt;&lt; <span class="stringliteral">&quot;Min: &quot;</span> &lt;&lt; min &lt;&lt; <span class="stringliteral">&quot;, Max: &quot;</span> &lt;&lt; max &lt;&lt; std::endl;</div>
<div class="line"><a id="l00697" name="l00697"></a><span class="lineno">  697</span>                }</div>
<div class="line"><a id="l00698" name="l00698"></a><span class="lineno">  698</span>            }</div>
<div class="line"><a id="l00699" name="l00699"></a><span class="lineno">  699</span> </div>
<div class="line"><a id="l00700" name="l00700"></a><span class="lineno">  700</span> </div>
<div class="line"><a id="l00701" name="l00701"></a><span class="lineno">  701</span> </div>
<div class="line"><a id="l00702" name="l00702"></a><span class="lineno">  702</span> </div>
<div class="line"><a id="l00703" name="l00703"></a><span class="lineno">  703</span> </div>
<div class="line"><a id="l00704" name="l00704"></a><span class="lineno">  704</span> </div>
<div class="line"><a id="l00705" name="l00705"></a><span class="lineno">  705</span> </div>
<div class="line"><a id="l00706" name="l00706"></a><span class="lineno">  706</span>            uint32_t num_element_blocks = 0;</div>
<div class="line"><a id="l00707" name="l00707"></a><span class="lineno">  707</span>            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5f3772e845d3ffe73c4a6525d78ab2ad">get_num_element_blocks</a>(num_element_blocks)) {</div>
<div class="line"><a id="l00708" name="l00708"></a><span class="lineno">  708</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get number of element blocks\n&quot;</span>);</div>
<div class="line"><a id="l00709" name="l00709"></a><span class="lineno">  709</span>            }</div>
<div class="line"><a id="l00710" name="l00710"></a><span class="lineno">  710</span>            std::vector&lt;dvs_element_type&gt; element_block_types(num_element_blocks);</div>
<div class="line"><a id="l00711" name="l00711"></a><span class="lineno">  711</span>            mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a44a916bcd71f4d6b33661b249d52c61b">get_element_block_types</a>(element_block_types.data());</div>
<div class="line"><a id="l00712" name="l00712"></a><span class="lineno">  712</span>            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; elem_type : element_block_types) {</div>
<div class="line"><a id="l00713" name="l00713"></a><span class="lineno">  713</span>                <span class="keyword">auto</span> elem_block = mesh_chunk-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7ca84ad8d766514684790bacd31803fc">get_element_block_by_type</a>(elem_type);</div>
<div class="line"><a id="l00714" name="l00714"></a><span class="lineno">  714</span>                <span class="keywordflow">if</span> (elem_block) {</div>
<div class="line"><a id="l00715" name="l00715"></a><span class="lineno">  715</span>                    <span class="keywordflow">switch</span>(elem_block-&gt;get_element_type())</div>
<div class="line"><a id="l00716" name="l00716"></a><span class="lineno">  716</span>                    {</div>
<div class="line"><a id="l00717" name="l00717"></a><span class="lineno">  717</span>                        <span class="keywordflow">case</span> N_SIDED_POLYGON:</div>
<div class="line"><a id="l00718" name="l00718"></a><span class="lineno">  718</span>                        <span class="keywordflow">case</span> N_SIDED_POLYGON_GHOST:</div>
<div class="line"><a id="l00719" name="l00719"></a><span class="lineno">  719</span>                        {</div>
<div class="line"><a id="l00720" name="l00720"></a><span class="lineno">  720</span>                            uint32_t dummy = 0;</div>
<div class="line"><a id="l00721" name="l00721"></a><span class="lineno">  721</span>                            uint32_t num_elements = 0;</div>
<div class="line"><a id="l00722" name="l00722"></a><span class="lineno">  722</span>                            uint32_t nodes_per_polygon_size = 0;</div>
<div class="line"><a id="l00723" name="l00723"></a><span class="lineno">  723</span>                            uint32_t indices_size = 0;</div>
<div class="line"><a id="l00724" name="l00724"></a><span class="lineno">  724</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_num_elements(num_elements)) {</div>
<div class="line"><a id="l00725" name="l00725"></a><span class="lineno">  725</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR getting number of elements\n&quot;</span>);</div>
<div class="line"><a id="l00726" name="l00726"></a><span class="lineno">  726</span>                            }</div>
<div class="line"><a id="l00727" name="l00727"></a><span class="lineno">  727</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_nodes_per_element(dummy)) {</div>
<div class="line"><a id="l00728" name="l00728"></a><span class="lineno">  728</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_nodes_per_element should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00729" name="l00729"></a><span class="lineno">  729</span>                            }</div>
<div class="line"><a id="l00730" name="l00730"></a><span class="lineno">  730</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_size(dummy)) {</div>
<div class="line"><a id="l00731" name="l00731"></a><span class="lineno">  731</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00732" name="l00732"></a><span class="lineno">  732</span>                            }</div>
<div class="line"><a id="l00733" name="l00733"></a><span class="lineno">  733</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity(<span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00734" name="l00734"></a><span class="lineno">  734</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00735" name="l00735"></a><span class="lineno">  735</span>                            }</div>
<div class="line"><a id="l00736" name="l00736"></a><span class="lineno">  736</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polyhedral_size(dummy, dummy, dummy)) {</div>
<div class="line"><a id="l00737" name="l00737"></a><span class="lineno">  737</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polyhedral_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00738" name="l00738"></a><span class="lineno">  738</span>                            }</div>
<div class="line"><a id="l00739" name="l00739"></a><span class="lineno">  739</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polyhedral(<span class="keyword">nullptr</span>,<span class="keyword">nullptr</span>,<span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00740" name="l00740"></a><span class="lineno">  740</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polyhedral should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00741" name="l00741"></a><span class="lineno">  741</span>                            }</div>
<div class="line"><a id="l00742" name="l00742"></a><span class="lineno">  742</span> </div>
<div class="line"><a id="l00743" name="l00743"></a><span class="lineno">  743</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity_polygon_size(nodes_per_polygon_size, indices_size)) {</div>
<div class="line"><a id="l00744" name="l00744"></a><span class="lineno">  744</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR with get_connectivity_polygon_size()\n&quot;</span>);</div>
<div class="line"><a id="l00745" name="l00745"></a><span class="lineno">  745</span>                            }</div>
<div class="line"><a id="l00746" name="l00746"></a><span class="lineno">  746</span> </div>
<div class="line"><a id="l00747" name="l00747"></a><span class="lineno">  747</span>                            std::string conn_hash(elem_block-&gt;get_hash_size(), 0);</div>
<div class="line"><a id="l00748" name="l00748"></a><span class="lineno">  748</span>                            <span class="keywordflow">if</span> (conn_hash.empty() || elem_block-&gt;get_hash(&amp;(conn_hash[0]))) {</div>
<div class="line"><a id="l00749" name="l00749"></a><span class="lineno">  749</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not load connectivity hash\n&quot;</span>);</div>
<div class="line"><a id="l00750" name="l00750"></a><span class="lineno">  750</span>                            }</div>
<div class="line"><a id="l00751" name="l00751"></a><span class="lineno">  751</span>                            fprintf(stdout, <span class="stringliteral">&quot;- Unstructured Polygon Element: Type: %i, Ghost: %u, Number of Elements: %u, Nodes Per Poly: %u,  Indices Size: %u, Hash: %s\n&quot;</span>,</div>
<div class="line"><a id="l00752" name="l00752"></a><span class="lineno">  752</span>                                    elem_type, elem_block-&gt;get_is_ghost(), num_elements, nodes_per_polygon_size, indices_size, conn_hash.c_str());</div>
<div class="line"><a id="l00753" name="l00753"></a><span class="lineno">  753</span> </div>
<div class="line"><a id="l00754" name="l00754"></a><span class="lineno">  754</span> </div>
<div class="line"><a id="l00755" name="l00755"></a><span class="lineno">  755</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity_polygon(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00756" name="l00756"></a><span class="lineno">  756</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polygon\n&quot;</span>);</div>
<div class="line"><a id="l00757" name="l00757"></a><span class="lineno">  757</span>                            }</div>
<div class="line"><a id="l00758" name="l00758"></a><span class="lineno">  758</span> </div>
<div class="line"><a id="l00759" name="l00759"></a><span class="lineno">  759</span>                            <span class="keywordflow">if</span> (all_connectivity) {</div>
<div class="line"><a id="l00760" name="l00760"></a><span class="lineno">  760</span>                                std::vector&lt;uint32_t&gt; nodes_per_polygon(nodes_per_polygon_size);</div>
<div class="line"><a id="l00761" name="l00761"></a><span class="lineno">  761</span>                                std::vector&lt;uint32_t&gt; indices(indices_size);</div>
<div class="line"><a id="l00762" name="l00762"></a><span class="lineno">  762</span> </div>
<div class="line"><a id="l00763" name="l00763"></a><span class="lineno">  763</span>                                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity_polygon(nodes_per_polygon.data(),</div>
<div class="line"><a id="l00764" name="l00764"></a><span class="lineno">  764</span>                                                                                     indices.data())) {</div>
<div class="line"><a id="l00765" name="l00765"></a><span class="lineno">  765</span>                                    fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polygon\n&quot;</span>);</div>
<div class="line"><a id="l00766" name="l00766"></a><span class="lineno">  766</span>                                }</div>
<div class="line"><a id="l00767" name="l00767"></a><span class="lineno">  767</span>                                <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00768" name="l00768"></a><span class="lineno">  768</span>                                    fprintf(stdout, <span class="stringliteral">&quot;NPP:&quot;</span>);</div>
<div class="line"><a id="l00769" name="l00769"></a><span class="lineno">  769</span>                                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; nodes : nodes_per_polygon) {</div>
<div class="line"><a id="l00770" name="l00770"></a><span class="lineno">  770</span>                                        fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, nodes);</div>
<div class="line"><a id="l00771" name="l00771"></a><span class="lineno">  771</span>                                    }</div>
<div class="line"><a id="l00772" name="l00772"></a><span class="lineno">  772</span>                                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00773" name="l00773"></a><span class="lineno">  773</span>                                    fprintf(stdout, <span class="stringliteral">&quot;Indices:&quot;</span>);</div>
<div class="line"><a id="l00774" name="l00774"></a><span class="lineno">  774</span>                                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; index : indices) {</div>
<div class="line"><a id="l00775" name="l00775"></a><span class="lineno">  775</span>                                        fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, index);</div>
<div class="line"><a id="l00776" name="l00776"></a><span class="lineno">  776</span>                                    }</div>
<div class="line"><a id="l00777" name="l00777"></a><span class="lineno">  777</span>                                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00778" name="l00778"></a><span class="lineno">  778</span>                                }</div>
<div class="line"><a id="l00779" name="l00779"></a><span class="lineno">  779</span>                            }</div>
<div class="line"><a id="l00780" name="l00780"></a><span class="lineno">  780</span>                            <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00781" name="l00781"></a><span class="lineno">  781</span>                        }</div>
<div class="line"><a id="l00782" name="l00782"></a><span class="lineno">  782</span>                        <span class="keywordflow">case</span> CONVEX_POLYHEDRON:</div>
<div class="line"><a id="l00783" name="l00783"></a><span class="lineno">  783</span>                        <span class="keywordflow">case</span> CONVEX_POLYHEDRON_GHOST:</div>
<div class="line"><a id="l00784" name="l00784"></a><span class="lineno">  784</span>                        {</div>
<div class="line"><a id="l00785" name="l00785"></a><span class="lineno">  785</span>                            uint32_t dummy = 0;</div>
<div class="line"><a id="l00786" name="l00786"></a><span class="lineno">  786</span>                            uint32_t num_elements = 0;</div>
<div class="line"><a id="l00787" name="l00787"></a><span class="lineno">  787</span>                            uint32_t faces_per_elem_size = 0;</div>
<div class="line"><a id="l00788" name="l00788"></a><span class="lineno">  788</span>                            uint32_t nodes_per_face_size = 0;</div>
<div class="line"><a id="l00789" name="l00789"></a><span class="lineno">  789</span>                            uint32_t indices_size = 0;</div>
<div class="line"><a id="l00790" name="l00790"></a><span class="lineno">  790</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_num_elements(num_elements)) {</div>
<div class="line"><a id="l00791" name="l00791"></a><span class="lineno">  791</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR getting number of elements\n&quot;</span>);</div>
<div class="line"><a id="l00792" name="l00792"></a><span class="lineno">  792</span>                            }</div>
<div class="line"><a id="l00793" name="l00793"></a><span class="lineno">  793</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_nodes_per_element(dummy)) {</div>
<div class="line"><a id="l00794" name="l00794"></a><span class="lineno">  794</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_nodes_per_element should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00795" name="l00795"></a><span class="lineno">  795</span>                            }</div>
<div class="line"><a id="l00796" name="l00796"></a><span class="lineno">  796</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_size(dummy)) {</div>
<div class="line"><a id="l00797" name="l00797"></a><span class="lineno">  797</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00798" name="l00798"></a><span class="lineno">  798</span>                            }</div>
<div class="line"><a id="l00799" name="l00799"></a><span class="lineno">  799</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polygon_size(dummy, dummy)) {</div>
<div class="line"><a id="l00800" name="l00800"></a><span class="lineno">  800</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polygon_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00801" name="l00801"></a><span class="lineno">  801</span>                            }</div>
<div class="line"><a id="l00802" name="l00802"></a><span class="lineno">  802</span> </div>
<div class="line"><a id="l00803" name="l00803"></a><span class="lineno">  803</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity_polyhedral_size(faces_per_elem_size, nodes_per_face_size, indices_size)) {</div>
<div class="line"><a id="l00804" name="l00804"></a><span class="lineno">  804</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR with get_connectivity_polyhedral_size\n&quot;</span>);</div>
<div class="line"><a id="l00805" name="l00805"></a><span class="lineno">  805</span>                            }</div>
<div class="line"><a id="l00806" name="l00806"></a><span class="lineno">  806</span> </div>
<div class="line"><a id="l00807" name="l00807"></a><span class="lineno">  807</span>                            std::string conn_hash(elem_block-&gt;get_hash_size(), 0);</div>
<div class="line"><a id="l00808" name="l00808"></a><span class="lineno">  808</span>                            <span class="keywordflow">if</span> (conn_hash.empty() || elem_block-&gt;get_hash(&amp;(conn_hash[0]))) {</div>
<div class="line"><a id="l00809" name="l00809"></a><span class="lineno">  809</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not load connectivity hash\n&quot;</span>);</div>
<div class="line"><a id="l00810" name="l00810"></a><span class="lineno">  810</span>                            }</div>
<div class="line"><a id="l00811" name="l00811"></a><span class="lineno">  811</span> </div>
<div class="line"><a id="l00812" name="l00812"></a><span class="lineno">  812</span>                            fprintf(stdout, <span class="stringliteral">&quot;- Unstructured Polyhedral Element: Type: %i, Ghost: %u, Number of Elements: %u, FPE: %u NPF: %u Indices: %u, Hash: %s\n&quot;</span>,</div>
<div class="line"><a id="l00813" name="l00813"></a><span class="lineno">  813</span>                                    elem_type, elem_block-&gt;get_is_ghost(), num_elements, faces_per_elem_size, nodes_per_face_size, indices_size, conn_hash.c_str());</div>
<div class="line"><a id="l00814" name="l00814"></a><span class="lineno">  814</span> </div>
<div class="line"><a id="l00815" name="l00815"></a><span class="lineno">  815</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity_polyhedral(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00816" name="l00816"></a><span class="lineno">  816</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polyhedral\n&quot;</span>);</div>
<div class="line"><a id="l00817" name="l00817"></a><span class="lineno">  817</span>                            }</div>
<div class="line"><a id="l00818" name="l00818"></a><span class="lineno">  818</span> </div>
<div class="line"><a id="l00819" name="l00819"></a><span class="lineno">  819</span>                            <span class="keywordflow">if</span> (all_connectivity) {</div>
<div class="line"><a id="l00820" name="l00820"></a><span class="lineno">  820</span>                                std::vector&lt;uint32_t&gt; faces_per_element(faces_per_elem_size);</div>
<div class="line"><a id="l00821" name="l00821"></a><span class="lineno">  821</span>                                std::vector&lt;uint32_t&gt; nodes_per_face(nodes_per_face_size);</div>
<div class="line"><a id="l00822" name="l00822"></a><span class="lineno">  822</span>                                std::vector&lt;uint32_t&gt; indices(indices_size);</div>
<div class="line"><a id="l00823" name="l00823"></a><span class="lineno">  823</span> </div>
<div class="line"><a id="l00824" name="l00824"></a><span class="lineno">  824</span>                                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity_polyhedral(faces_per_element.data(),</div>
<div class="line"><a id="l00825" name="l00825"></a><span class="lineno">  825</span>                                                                             nodes_per_face.data(),</div>
<div class="line"><a id="l00826" name="l00826"></a><span class="lineno">  826</span>                                                                             indices.data())) {</div>
<div class="line"><a id="l00827" name="l00827"></a><span class="lineno">  827</span>                                    fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polyhedral\n&quot;</span>);</div>
<div class="line"><a id="l00828" name="l00828"></a><span class="lineno">  828</span>                                }</div>
<div class="line"><a id="l00829" name="l00829"></a><span class="lineno">  829</span>                                <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00830" name="l00830"></a><span class="lineno">  830</span>                                    fprintf(stdout, <span class="stringliteral">&quot;FPE:&quot;</span>);</div>
<div class="line"><a id="l00831" name="l00831"></a><span class="lineno">  831</span>                                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; faces : faces_per_element) {</div>
<div class="line"><a id="l00832" name="l00832"></a><span class="lineno">  832</span>                                        fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, faces);</div>
<div class="line"><a id="l00833" name="l00833"></a><span class="lineno">  833</span>                                    }</div>
<div class="line"><a id="l00834" name="l00834"></a><span class="lineno">  834</span>                                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00835" name="l00835"></a><span class="lineno">  835</span>                                    fprintf(stdout, <span class="stringliteral">&quot;NPF:&quot;</span>);</div>
<div class="line"><a id="l00836" name="l00836"></a><span class="lineno">  836</span>                                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; nodes : nodes_per_face) {</div>
<div class="line"><a id="l00837" name="l00837"></a><span class="lineno">  837</span>                                        fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, nodes);</div>
<div class="line"><a id="l00838" name="l00838"></a><span class="lineno">  838</span>                                    }</div>
<div class="line"><a id="l00839" name="l00839"></a><span class="lineno">  839</span>                                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00840" name="l00840"></a><span class="lineno">  840</span>                                    fprintf(stdout, <span class="stringliteral">&quot;Indices:&quot;</span>);</div>
<div class="line"><a id="l00841" name="l00841"></a><span class="lineno">  841</span>                                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; index : indices) {</div>
<div class="line"><a id="l00842" name="l00842"></a><span class="lineno">  842</span>                                        fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, index);</div>
<div class="line"><a id="l00843" name="l00843"></a><span class="lineno">  843</span>                                    }</div>
<div class="line"><a id="l00844" name="l00844"></a><span class="lineno">  844</span>                                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00845" name="l00845"></a><span class="lineno">  845</span>                                }</div>
<div class="line"><a id="l00846" name="l00846"></a><span class="lineno">  846</span>                            }</div>
<div class="line"><a id="l00847" name="l00847"></a><span class="lineno">  847</span>                            <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00848" name="l00848"></a><span class="lineno">  848</span>                        }</div>
<div class="line"><a id="l00849" name="l00849"></a><span class="lineno">  849</span>                        <span class="keywordflow">case</span> STRUCTURED:</div>
<div class="line"><a id="l00850" name="l00850"></a><span class="lineno">  850</span>                        {</div>
<div class="line"><a id="l00851" name="l00851"></a><span class="lineno">  851</span>                            uint32_t dummy = 0;</div>
<div class="line"><a id="l00852" name="l00852"></a><span class="lineno">  852</span>                            uint32_t num_elements = 0;</div>
<div class="line"><a id="l00853" name="l00853"></a><span class="lineno">  853</span>                            uint32_t nodes_per_element = 0;</div>
<div class="line"><a id="l00854" name="l00854"></a><span class="lineno">  854</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_num_elements(num_elements)) {</div>
<div class="line"><a id="l00855" name="l00855"></a><span class="lineno">  855</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_num_elements\n&quot;</span>);</div>
<div class="line"><a id="l00856" name="l00856"></a><span class="lineno">  856</span>                            }</div>
<div class="line"><a id="l00857" name="l00857"></a><span class="lineno">  857</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_nodes_per_element(nodes_per_element)) {</div>
<div class="line"><a id="l00858" name="l00858"></a><span class="lineno">  858</span>                                fprintf(stdout, <span class="stringliteral">&quot;Error get_nodes_per_element\n&quot;</span>);</div>
<div class="line"><a id="l00859" name="l00859"></a><span class="lineno">  859</span>                            }</div>
<div class="line"><a id="l00860" name="l00860"></a><span class="lineno">  860</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_size(dummy)) {</div>
<div class="line"><a id="l00861" name="l00861"></a><span class="lineno">  861</span>                                fprintf(stdout, <span class="stringliteral">&quot;Error get_connectivity_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00862" name="l00862"></a><span class="lineno">  862</span>                            }</div>
<div class="line"><a id="l00863" name="l00863"></a><span class="lineno">  863</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity(<span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00864" name="l00864"></a><span class="lineno">  864</span>                                fprintf(stdout, <span class="stringliteral">&quot;Error get_connectivity should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00865" name="l00865"></a><span class="lineno">  865</span>                            }</div>
<div class="line"><a id="l00866" name="l00866"></a><span class="lineno">  866</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polygon_size(dummy,dummy)) {</div>
<div class="line"><a id="l00867" name="l00867"></a><span class="lineno">  867</span>                                fprintf(stdout, <span class="stringliteral">&quot;Error get_connectivity_polygon_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00868" name="l00868"></a><span class="lineno">  868</span>                            }</div>
<div class="line"><a id="l00869" name="l00869"></a><span class="lineno">  869</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polygon(<span class="keyword">nullptr</span>,<span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00870" name="l00870"></a><span class="lineno">  870</span>                                fprintf(stdout, <span class="stringliteral">&quot;Error get_connectivity_polygon should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00871" name="l00871"></a><span class="lineno">  871</span>                            }</div>
<div class="line"><a id="l00872" name="l00872"></a><span class="lineno">  872</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polyhedral_size(dummy,dummy,dummy)) {</div>
<div class="line"><a id="l00873" name="l00873"></a><span class="lineno">  873</span>                                fprintf(stdout, <span class="stringliteral">&quot;Error get_connectivity_polyhedral_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00874" name="l00874"></a><span class="lineno">  874</span>                            }</div>
<div class="line"><a id="l00875" name="l00875"></a><span class="lineno">  875</span>                            std::string conn_hash(elem_block-&gt;get_hash_size(), 0);</div>
<div class="line"><a id="l00876" name="l00876"></a><span class="lineno">  876</span>                            <span class="keywordflow">if</span> (conn_hash.empty() || elem_block-&gt;get_hash(&amp;(conn_hash[0]))) {</div>
<div class="line"><a id="l00877" name="l00877"></a><span class="lineno">  877</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not load connectivity hash\n&quot;</span>);</div>
<div class="line"><a id="l00878" name="l00878"></a><span class="lineno">  878</span>                            }</div>
<div class="line"><a id="l00879" name="l00879"></a><span class="lineno">  879</span>                            fprintf(stdout, <span class="stringliteral">&quot;- Structured Element: Type: %i NPE: %u Hash: %s\n&quot;</span>, elem_type, nodes_per_element, conn_hash.c_str());</div>
<div class="line"><a id="l00880" name="l00880"></a><span class="lineno">  880</span>                            <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00881" name="l00881"></a><span class="lineno">  881</span>                        }</div>
<div class="line"><a id="l00882" name="l00882"></a><span class="lineno">  882</span>                        <span class="keywordflow">case</span> UNDEFINED:</div>
<div class="line"><a id="l00883" name="l00883"></a><span class="lineno">  883</span>                        <span class="keywordflow">case</span> UNDEFINED_PARALLELEPIPED:</div>
<div class="line"><a id="l00884" name="l00884"></a><span class="lineno">  884</span>                        <span class="keywordflow">case</span> UNDEFINED_CURVILINEAR:</div>
<div class="line"><a id="l00885" name="l00885"></a><span class="lineno">  885</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR, undefined element type found\n&quot;</span>);</div>
<div class="line"><a id="l00886" name="l00886"></a><span class="lineno">  886</span>                            <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00887" name="l00887"></a><span class="lineno">  887</span> </div>
<div class="line"><a id="l00888" name="l00888"></a><span class="lineno">  888</span>                        <span class="keywordflow">default</span>:</div>
<div class="line"><a id="l00889" name="l00889"></a><span class="lineno">  889</span>                        {</div>
<div class="line"><a id="l00890" name="l00890"></a><span class="lineno">  890</span>                            uint32_t dummy = 0;</div>
<div class="line"><a id="l00891" name="l00891"></a><span class="lineno">  891</span>                            uint32_t num_elements = 0;</div>
<div class="line"><a id="l00892" name="l00892"></a><span class="lineno">  892</span>                            uint32_t nodes_per_elem = 0;</div>
<div class="line"><a id="l00893" name="l00893"></a><span class="lineno">  893</span>                            uint32_t indices_size = 0;</div>
<div class="line"><a id="l00894" name="l00894"></a><span class="lineno">  894</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_num_elements(num_elements)) {</div>
<div class="line"><a id="l00895" name="l00895"></a><span class="lineno">  895</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR getting number of elements\n&quot;</span>);</div>
<div class="line"><a id="l00896" name="l00896"></a><span class="lineno">  896</span>                            }</div>
<div class="line"><a id="l00897" name="l00897"></a><span class="lineno">  897</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_nodes_per_element(nodes_per_elem)) {</div>
<div class="line"><a id="l00898" name="l00898"></a><span class="lineno">  898</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR getting nodes per element\n&quot;</span>);</div>
<div class="line"><a id="l00899" name="l00899"></a><span class="lineno">  899</span>                            }</div>
<div class="line"><a id="l00900" name="l00900"></a><span class="lineno">  900</span> </div>
<div class="line"><a id="l00901" name="l00901"></a><span class="lineno">  901</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polygon_size(dummy, dummy)) {</div>
<div class="line"><a id="l00902" name="l00902"></a><span class="lineno">  902</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polygon_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00903" name="l00903"></a><span class="lineno">  903</span>                            }</div>
<div class="line"><a id="l00904" name="l00904"></a><span class="lineno">  904</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polygon(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00905" name="l00905"></a><span class="lineno">  905</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polygon should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00906" name="l00906"></a><span class="lineno">  906</span>                            }</div>
<div class="line"><a id="l00907" name="l00907"></a><span class="lineno">  907</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polyhedral_size(dummy, dummy, dummy)) {</div>
<div class="line"><a id="l00908" name="l00908"></a><span class="lineno">  908</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polyhedral_size should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00909" name="l00909"></a><span class="lineno">  909</span>                            }</div>
<div class="line"><a id="l00910" name="l00910"></a><span class="lineno">  910</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> == elem_block-&gt;get_connectivity_polyhedral(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00911" name="l00911"></a><span class="lineno">  911</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_polyhedral should be invalid for this type\n&quot;</span>);</div>
<div class="line"><a id="l00912" name="l00912"></a><span class="lineno">  912</span>                            }</div>
<div class="line"><a id="l00913" name="l00913"></a><span class="lineno">  913</span> </div>
<div class="line"><a id="l00914" name="l00914"></a><span class="lineno">  914</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity_size(indices_size)) {</div>
<div class="line"><a id="l00915" name="l00915"></a><span class="lineno">  915</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity_size\n&quot;</span>);</div>
<div class="line"><a id="l00916" name="l00916"></a><span class="lineno">  916</span>                            }</div>
<div class="line"><a id="l00917" name="l00917"></a><span class="lineno">  917</span> </div>
<div class="line"><a id="l00918" name="l00918"></a><span class="lineno">  918</span>                            std::string conn_hash(elem_block-&gt;get_hash_size(), 0);</div>
<div class="line"><a id="l00919" name="l00919"></a><span class="lineno">  919</span>                            <span class="keywordflow">if</span> (conn_hash.empty() || elem_block-&gt;get_hash(&amp;(conn_hash[0]))) {</div>
<div class="line"><a id="l00920" name="l00920"></a><span class="lineno">  920</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not load connectivity hash\n&quot;</span>);</div>
<div class="line"><a id="l00921" name="l00921"></a><span class="lineno">  921</span>                            }</div>
<div class="line"><a id="l00922" name="l00922"></a><span class="lineno">  922</span> </div>
<div class="line"><a id="l00923" name="l00923"></a><span class="lineno">  923</span>                            fprintf(stdout, <span class="stringliteral">&quot;- Unstructured Basic Element: Type: %i, Ghost: %u, Number of Elements: %u, Nodes Per Elem: %u, Indices Size: %u, Hash: %s\n&quot;</span>,</div>
<div class="line"><a id="l00924" name="l00924"></a><span class="lineno">  924</span>                            elem_type, elem_block-&gt;get_is_ghost(), num_elements, nodes_per_elem, indices_size, conn_hash.c_str());</div>
<div class="line"><a id="l00925" name="l00925"></a><span class="lineno">  925</span> </div>
<div class="line"><a id="l00926" name="l00926"></a><span class="lineno">  926</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity(<span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00927" name="l00927"></a><span class="lineno">  927</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity\n&quot;</span>);</div>
<div class="line"><a id="l00928" name="l00928"></a><span class="lineno">  928</span>                            }</div>
<div class="line"><a id="l00929" name="l00929"></a><span class="lineno">  929</span> </div>
<div class="line"><a id="l00930" name="l00930"></a><span class="lineno">  930</span>                            <span class="keywordflow">if</span> (all_connectivity) {</div>
<div class="line"><a id="l00931" name="l00931"></a><span class="lineno">  931</span>                                std::vector&lt;uint32_t&gt; indices(indices_size);</div>
<div class="line"><a id="l00932" name="l00932"></a><span class="lineno">  932</span>                                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_connectivity(indices.data())) {</div>
<div class="line"><a id="l00933" name="l00933"></a><span class="lineno">  933</span>                                    fprintf(stdout, <span class="stringliteral">&quot;ERROR get_connectivity\n&quot;</span>);</div>
<div class="line"><a id="l00934" name="l00934"></a><span class="lineno">  934</span>                                }</div>
<div class="line"><a id="l00935" name="l00935"></a><span class="lineno">  935</span>                                <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00936" name="l00936"></a><span class="lineno">  936</span>                                    fprintf(stdout, <span class="stringliteral">&quot;Indices:&quot;</span>);</div>
<div class="line"><a id="l00937" name="l00937"></a><span class="lineno">  937</span>                                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; index : indices) {</div>
<div class="line"><a id="l00938" name="l00938"></a><span class="lineno">  938</span>                                        fprintf(stdout, <span class="stringliteral">&quot; %u&quot;</span>, index);</div>
<div class="line"><a id="l00939" name="l00939"></a><span class="lineno">  939</span>                                    }</div>
<div class="line"><a id="l00940" name="l00940"></a><span class="lineno">  940</span>                                    fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00941" name="l00941"></a><span class="lineno">  941</span>                                }</div>
<div class="line"><a id="l00942" name="l00942"></a><span class="lineno">  942</span>                            }</div>
<div class="line"><a id="l00943" name="l00943"></a><span class="lineno">  943</span>                            <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00944" name="l00944"></a><span class="lineno">  944</span>                        }</div>
<div class="line"><a id="l00945" name="l00945"></a><span class="lineno">  945</span>                    }</div>
<div class="line"><a id="l00946" name="l00946"></a><span class="lineno">  946</span> </div>
<div class="line"><a id="l00947" name="l00947"></a><span class="lineno">  947</span>                    uint32_t num_elemental_vars = 0;</div>
<div class="line"><a id="l00948" name="l00948"></a><span class="lineno">  948</span>                    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_num_variables(num_elemental_vars)) {</div>
<div class="line"><a id="l00949" name="l00949"></a><span class="lineno">  949</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get num elemental vars\n&quot;</span>);</div>
<div class="line"><a id="l00950" name="l00950"></a><span class="lineno">  950</span>                    }</div>
<div class="line"><a id="l00951" name="l00951"></a><span class="lineno">  951</span>                    </div>
<div class="line"><a id="l00952" name="l00952"></a><span class="lineno">  952</span>                    <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_elemental_vars; var_index++) {</div>
<div class="line"><a id="l00953" name="l00953"></a><span class="lineno">  953</span>                        <span class="keyword">auto</span> var = elem_block-&gt;get_variable(var_index);</div>
<div class="line"><a id="l00954" name="l00954"></a><span class="lineno">  954</span>                        <span class="keywordflow">if</span> (var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() != <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a3d10bfe84917127ab3347aa5c6309f33">dvs_var_location::ELEMENT</a>) {</div>
<div class="line"><a id="l00955" name="l00955"></a><span class="lineno">  955</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Var is not elemental and should be\n&quot;</span>);</div>
<div class="line"><a id="l00956" name="l00956"></a><span class="lineno">  956</span>                        }</div>
<div class="line"><a id="l00957" name="l00957"></a><span class="lineno">  957</span> </div>
<div class="line"><a id="l00958" name="l00958"></a><span class="lineno">  958</span>                        uint32_t num_elem_var_values = 0;</div>
<div class="line"><a id="l00959" name="l00959"></a><span class="lineno">  959</span>                        <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_variable_data(var_index, &amp;num_elem_var_values, <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l00960" name="l00960"></a><span class="lineno">  960</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elemental var data\n&quot;</span>);</div>
<div class="line"><a id="l00961" name="l00961"></a><span class="lineno">  961</span>                        }</div>
<div class="line"><a id="l00962" name="l00962"></a><span class="lineno">  962</span>                        std::string elem_var_hash_1(elem_block-&gt;get_var_hash_size(var_index), 0);</div>
<div class="line"><a id="l00963" name="l00963"></a><span class="lineno">  963</span>                        std::string elem_var_hash_2(elem_block-&gt;get_var_hash_size(var), 0);</div>
<div class="line"><a id="l00964" name="l00964"></a><span class="lineno">  964</span>                        <span class="keywordflow">if</span> (elem_var_hash_1.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_var_hash(var_index, &amp;(elem_var_hash_1[0]))) {</div>
<div class="line"><a id="l00965" name="l00965"></a><span class="lineno">  965</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elem var hash 1\n&quot;</span>);</div>
<div class="line"><a id="l00966" name="l00966"></a><span class="lineno">  966</span>                        }</div>
<div class="line"><a id="l00967" name="l00967"></a><span class="lineno">  967</span>                        <span class="keywordflow">if</span> (elem_var_hash_2.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_var_hash(var, &amp;(elem_var_hash_2[0]))) {</div>
<div class="line"><a id="l00968" name="l00968"></a><span class="lineno">  968</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elem var hash 2\n&quot;</span>);</div>
<div class="line"><a id="l00969" name="l00969"></a><span class="lineno">  969</span>                        }</div>
<div class="line"><a id="l00970" name="l00970"></a><span class="lineno">  970</span>                        <span class="keywordflow">if</span> (elem_var_hash_1 != elem_var_hash_2) {</div>
<div class="line"><a id="l00971" name="l00971"></a><span class="lineno">  971</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Elem var hashes do not match\n&quot;</span>);</div>
<div class="line"><a id="l00972" name="l00972"></a><span class="lineno">  972</span>                        }</div>
<div class="line"><a id="l00973" name="l00973"></a><span class="lineno">  973</span>                        fprintf(stdout, <span class="stringliteral">&quot;Elemental Var: %s, Num Values: %u, Hash: %s\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), num_elem_var_values, elem_var_hash_1.c_str());</div>
<div class="line"><a id="l00974" name="l00974"></a><span class="lineno">  974</span> </div>
<div class="line"><a id="l00975" name="l00975"></a><span class="lineno">  975</span>                        <span class="keywordflow">if</span> (all_variable_data) {</div>
<div class="line"><a id="l00976" name="l00976"></a><span class="lineno">  976</span>                            std::vector&lt;float&gt; elem_var_data(num_elem_var_values);</div>
<div class="line"><a id="l00977" name="l00977"></a><span class="lineno">  977</span>                            <span class="keywordtype">float</span> min = FLT_MAX-1;</div>
<div class="line"><a id="l00978" name="l00978"></a><span class="lineno">  978</span>                            <span class="keywordtype">float</span> max = -1*min;</div>
<div class="line"><a id="l00979" name="l00979"></a><span class="lineno">  979</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_variable_data(var_index, <span class="keyword">nullptr</span>, elem_var_data.data())) {</div>
<div class="line"><a id="l00980" name="l00980"></a><span class="lineno">  980</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elemental var data\n&quot;</span>);</div>
<div class="line"><a id="l00981" name="l00981"></a><span class="lineno">  981</span>                            }</div>
<div class="line"><a id="l00982" name="l00982"></a><span class="lineno">  982</span>                            fprintf(stdout, <span class="stringliteral">&quot;VarData:&quot;</span>);</div>
<div class="line"><a id="l00983" name="l00983"></a><span class="lineno">  983</span>                            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : elem_var_data) {</div>
<div class="line"><a id="l00984" name="l00984"></a><span class="lineno">  984</span>                                fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, val);</div>
<div class="line"><a id="l00985" name="l00985"></a><span class="lineno">  985</span>                                <span class="keywordflow">if</span> (val &lt; min) {</div>
<div class="line"><a id="l00986" name="l00986"></a><span class="lineno">  986</span>                                    min = val;</div>
<div class="line"><a id="l00987" name="l00987"></a><span class="lineno">  987</span>                                }</div>
<div class="line"><a id="l00988" name="l00988"></a><span class="lineno">  988</span>                                <span class="keywordflow">if</span> (val &gt; max) {</div>
<div class="line"><a id="l00989" name="l00989"></a><span class="lineno">  989</span>                                    max = val;</div>
<div class="line"><a id="l00990" name="l00990"></a><span class="lineno">  990</span>                                }</div>
<div class="line"><a id="l00991" name="l00991"></a><span class="lineno">  991</span>                            }</div>
<div class="line"><a id="l00992" name="l00992"></a><span class="lineno">  992</span>                            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l00993" name="l00993"></a><span class="lineno">  993</span>                            fprintf(stdout, <span class="stringliteral">&quot;Min: %f, Max: %f\n&quot;</span>, min, max);</div>
<div class="line"><a id="l00994" name="l00994"></a><span class="lineno">  994</span>                        }</div>
<div class="line"><a id="l00995" name="l00995"></a><span class="lineno">  995</span>                    }</div>
<div class="line"><a id="l00996" name="l00996"></a><span class="lineno">  996</span>                    </div>
<div class="line"><a id="l00997" name="l00997"></a><span class="lineno">  997</span> </div>
<div class="line"><a id="l00998" name="l00998"></a><span class="lineno">  998</span>                    fprintf(stdout, <span class="stringliteral">&quot;*******************************\n&quot;</span></div>
<div class="line"><a id="l00999" name="l00999"></a><span class="lineno">  999</span>                                    <span class="stringliteral">&quot;Elem Block: Test New Interfaces for Floats\n&quot;</span></div>
<div class="line"><a id="l01000" name="l01000"></a><span class="lineno"> 1000</span>                                    <span class="stringliteral">&quot;*******************************\n&quot;</span>);</div>
<div class="line"><a id="l01001" name="l01001"></a><span class="lineno"> 1001</span>                    uint32_t num_elemental_vars_floats = 0;</div>
<div class="line"><a id="l01002" name="l01002"></a><span class="lineno"> 1002</span>                    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_num_variables(num_elemental_vars_floats, DVS::VAR_TYPE::FLOAT)) {</div>
<div class="line"><a id="l01003" name="l01003"></a><span class="lineno"> 1003</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get num elemental vars\n&quot;</span>);</div>
<div class="line"><a id="l01004" name="l01004"></a><span class="lineno"> 1004</span>                    }</div>
<div class="line"><a id="l01005" name="l01005"></a><span class="lineno"> 1005</span>                    <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_elemental_vars_floats; var_index++) {</div>
<div class="line"><a id="l01006" name="l01006"></a><span class="lineno"> 1006</span>                        <span class="keyword">auto</span> var = elem_block-&gt;get_variable(var_index, DVS::VAR_TYPE::FLOAT);</div>
<div class="line"><a id="l01007" name="l01007"></a><span class="lineno"> 1007</span>                        <span class="keywordflow">if</span> (var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() != <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a3d10bfe84917127ab3347aa5c6309f33">dvs_var_location::ELEMENT</a>) {</div>
<div class="line"><a id="l01008" name="l01008"></a><span class="lineno"> 1008</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Var is not elemental and should be\n&quot;</span>);</div>
<div class="line"><a id="l01009" name="l01009"></a><span class="lineno"> 1009</span>                        }</div>
<div class="line"><a id="l01010" name="l01010"></a><span class="lineno"> 1010</span> </div>
<div class="line"><a id="l01011" name="l01011"></a><span class="lineno"> 1011</span>                        uint32_t num_elem_var_values = 0;</div>
<div class="line"><a id="l01012" name="l01012"></a><span class="lineno"> 1012</span>                        <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_variable_size(var_index, num_elem_var_values, DVS::VAR_TYPE::FLOAT)) {</div>
<div class="line"><a id="l01013" name="l01013"></a><span class="lineno"> 1013</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elemental var data\n&quot;</span>);</div>
<div class="line"><a id="l01014" name="l01014"></a><span class="lineno"> 1014</span>                        }</div>
<div class="line"><a id="l01015" name="l01015"></a><span class="lineno"> 1015</span>                        std::string elem_var_hash_1(elem_block-&gt;get_var_hash_size(var_index, DVS::VAR_TYPE::FLOAT), 0);</div>
<div class="line"><a id="l01016" name="l01016"></a><span class="lineno"> 1016</span>                        std::string elem_var_hash_2(elem_block-&gt;get_var_hash_size(var), 0);</div>
<div class="line"><a id="l01017" name="l01017"></a><span class="lineno"> 1017</span>                        <span class="keywordflow">if</span> (elem_var_hash_1.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_var_hash(var_index, &amp;(elem_var_hash_1[0]), DVS::VAR_TYPE::FLOAT)) {</div>
<div class="line"><a id="l01018" name="l01018"></a><span class="lineno"> 1018</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elem var hash 1\n&quot;</span>);</div>
<div class="line"><a id="l01019" name="l01019"></a><span class="lineno"> 1019</span>                        }</div>
<div class="line"><a id="l01020" name="l01020"></a><span class="lineno"> 1020</span>                        <span class="keywordflow">if</span> (elem_var_hash_2.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_var_hash(var, &amp;(elem_var_hash_2[0]))) {</div>
<div class="line"><a id="l01021" name="l01021"></a><span class="lineno"> 1021</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elem var hash 2\n&quot;</span>);</div>
<div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span>                        }</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span>                        <span class="keywordflow">if</span> (elem_var_hash_1 != elem_var_hash_2) {</div>
<div class="line"><a id="l01024" name="l01024"></a><span class="lineno"> 1024</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Elem var hashes do not match\n&quot;</span>);</div>
<div class="line"><a id="l01025" name="l01025"></a><span class="lineno"> 1025</span>                        }</div>
<div class="line"><a id="l01026" name="l01026"></a><span class="lineno"> 1026</span>                        fprintf(stdout, <span class="stringliteral">&quot;Elemental Var: %s, Num Values: %u, Hash: %s\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), num_elem_var_values, elem_var_hash_1.c_str());</div>
<div class="line"><a id="l01027" name="l01027"></a><span class="lineno"> 1027</span> </div>
<div class="line"><a id="l01028" name="l01028"></a><span class="lineno"> 1028</span>                        <span class="keywordflow">if</span> (all_variable_data) {</div>
<div class="line"><a id="l01029" name="l01029"></a><span class="lineno"> 1029</span>                            std::vector&lt;float&gt; elem_var_data(num_elem_var_values);</div>
<div class="line"><a id="l01030" name="l01030"></a><span class="lineno"> 1030</span>                            <span class="keywordtype">float</span> min = FLT_MAX-1;</div>
<div class="line"><a id="l01031" name="l01031"></a><span class="lineno"> 1031</span>                            <span class="keywordtype">float</span> max = -1*min;</div>
<div class="line"><a id="l01032" name="l01032"></a><span class="lineno"> 1032</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_variable_data(var_index, elem_var_data.data())) {</div>
<div class="line"><a id="l01033" name="l01033"></a><span class="lineno"> 1033</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elemental var data\n&quot;</span>);</div>
<div class="line"><a id="l01034" name="l01034"></a><span class="lineno"> 1034</span>                            }</div>
<div class="line"><a id="l01035" name="l01035"></a><span class="lineno"> 1035</span>                            fprintf(stdout, <span class="stringliteral">&quot;VarData:&quot;</span>);</div>
<div class="line"><a id="l01036" name="l01036"></a><span class="lineno"> 1036</span>                            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : elem_var_data) {</div>
<div class="line"><a id="l01037" name="l01037"></a><span class="lineno"> 1037</span>                                fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, val);</div>
<div class="line"><a id="l01038" name="l01038"></a><span class="lineno"> 1038</span>                                <span class="keywordflow">if</span> (val &lt; min) {</div>
<div class="line"><a id="l01039" name="l01039"></a><span class="lineno"> 1039</span>                                    min = val;</div>
<div class="line"><a id="l01040" name="l01040"></a><span class="lineno"> 1040</span>                                }</div>
<div class="line"><a id="l01041" name="l01041"></a><span class="lineno"> 1041</span>                                <span class="keywordflow">if</span> (val &gt; max) {</div>
<div class="line"><a id="l01042" name="l01042"></a><span class="lineno"> 1042</span>                                    max = val;</div>
<div class="line"><a id="l01043" name="l01043"></a><span class="lineno"> 1043</span>                                }</div>
<div class="line"><a id="l01044" name="l01044"></a><span class="lineno"> 1044</span>                            }</div>
<div class="line"><a id="l01045" name="l01045"></a><span class="lineno"> 1045</span>                            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l01046" name="l01046"></a><span class="lineno"> 1046</span>                            fprintf(stdout, <span class="stringliteral">&quot;Min: %f, Max: %f\n&quot;</span>, min, max);</div>
<div class="line"><a id="l01047" name="l01047"></a><span class="lineno"> 1047</span>                        }</div>
<div class="line"><a id="l01048" name="l01048"></a><span class="lineno"> 1048</span>                    }</div>
<div class="line"><a id="l01049" name="l01049"></a><span class="lineno"> 1049</span> </div>
<div class="line"><a id="l01050" name="l01050"></a><span class="lineno"> 1050</span> </div>
<div class="line"><a id="l01051" name="l01051"></a><span class="lineno"> 1051</span>                    fprintf(stdout, <span class="stringliteral">&quot;*******************************\n&quot;</span></div>
<div class="line"><a id="l01052" name="l01052"></a><span class="lineno"> 1052</span>                                    <span class="stringliteral">&quot;Elem Block: Test New Interfaces for INT64S\n&quot;</span></div>
<div class="line"><a id="l01053" name="l01053"></a><span class="lineno"> 1053</span>                                    <span class="stringliteral">&quot;*******************************\n&quot;</span>);</div>
<div class="line"><a id="l01054" name="l01054"></a><span class="lineno"> 1054</span>                    uint32_t num_elemental_vars_int64s = 0;</div>
<div class="line"><a id="l01055" name="l01055"></a><span class="lineno"> 1055</span>                    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_num_variables(num_elemental_vars_int64s, DVS::VAR_TYPE::INT64)) {</div>
<div class="line"><a id="l01056" name="l01056"></a><span class="lineno"> 1056</span>                        fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get num elemental vars\n&quot;</span>);</div>
<div class="line"><a id="l01057" name="l01057"></a><span class="lineno"> 1057</span>                    }</div>
<div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span>                    <span class="keywordflow">for</span> (uint32_t var_index = 0; var_index &lt; num_elemental_vars_int64s; var_index++) {</div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span>                        <span class="keyword">auto</span> var = elem_block-&gt;get_variable(var_index, DVS::VAR_TYPE::INT64);</div>
<div class="line"><a id="l01060" name="l01060"></a><span class="lineno"> 1060</span>                        <span class="keywordflow">if</span> (var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">get_var_location</a>() != <a class="code hl_enumvalue" href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a3d10bfe84917127ab3347aa5c6309f33">dvs_var_location::ELEMENT</a>) {</div>
<div class="line"><a id="l01061" name="l01061"></a><span class="lineno"> 1061</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Var is not elemental and should be\n&quot;</span>);</div>
<div class="line"><a id="l01062" name="l01062"></a><span class="lineno"> 1062</span>                        }</div>
<div class="line"><a id="l01063" name="l01063"></a><span class="lineno"> 1063</span> </div>
<div class="line"><a id="l01064" name="l01064"></a><span class="lineno"> 1064</span>                        uint32_t num_elem_var_values = 0;</div>
<div class="line"><a id="l01065" name="l01065"></a><span class="lineno"> 1065</span>                        <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_variable_size(var_index, num_elem_var_values, DVS::VAR_TYPE::INT64)) {</div>
<div class="line"><a id="l01066" name="l01066"></a><span class="lineno"> 1066</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elemental var data\n&quot;</span>);</div>
<div class="line"><a id="l01067" name="l01067"></a><span class="lineno"> 1067</span>                        }</div>
<div class="line"><a id="l01068" name="l01068"></a><span class="lineno"> 1068</span>                        std::string elem_var_hash_1(elem_block-&gt;get_var_hash_size(var_index, DVS::VAR_TYPE::INT64), 0);</div>
<div class="line"><a id="l01069" name="l01069"></a><span class="lineno"> 1069</span>                        std::string elem_var_hash_2(elem_block-&gt;get_var_hash_size(var), 0);</div>
<div class="line"><a id="l01070" name="l01070"></a><span class="lineno"> 1070</span>                        <span class="keywordflow">if</span> (elem_var_hash_1.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_var_hash(var_index, &amp;(elem_var_hash_1[0]), DVS::VAR_TYPE::INT64)) {</div>
<div class="line"><a id="l01071" name="l01071"></a><span class="lineno"> 1071</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elem var hash 1\n&quot;</span>);</div>
<div class="line"><a id="l01072" name="l01072"></a><span class="lineno"> 1072</span>                        }</div>
<div class="line"><a id="l01073" name="l01073"></a><span class="lineno"> 1073</span>                        <span class="keywordflow">if</span> (elem_var_hash_2.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_var_hash(var, &amp;(elem_var_hash_2[0]))) {</div>
<div class="line"><a id="l01074" name="l01074"></a><span class="lineno"> 1074</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elem var hash 2\n&quot;</span>);</div>
<div class="line"><a id="l01075" name="l01075"></a><span class="lineno"> 1075</span>                        }</div>
<div class="line"><a id="l01076" name="l01076"></a><span class="lineno"> 1076</span>                        <span class="keywordflow">if</span> (elem_var_hash_1 != elem_var_hash_2) {</div>
<div class="line"><a id="l01077" name="l01077"></a><span class="lineno"> 1077</span>                            fprintf(stdout, <span class="stringliteral">&quot;ERROR: Elem var hashes do not match\n&quot;</span>);</div>
<div class="line"><a id="l01078" name="l01078"></a><span class="lineno"> 1078</span>                        }</div>
<div class="line"><a id="l01079" name="l01079"></a><span class="lineno"> 1079</span>                        fprintf(stdout, <span class="stringliteral">&quot;Elemental Var: %s, Num Values: %u, Hash: %s\n&quot;</span>, var-&gt;<a class="code hl_function" href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">get_name</a>(), num_elem_var_values, elem_var_hash_1.c_str());</div>
<div class="line"><a id="l01080" name="l01080"></a><span class="lineno"> 1080</span> </div>
<div class="line"><a id="l01081" name="l01081"></a><span class="lineno"> 1081</span>                        <span class="keywordflow">if</span> (all_variable_data) {</div>
<div class="line"><a id="l01082" name="l01082"></a><span class="lineno"> 1082</span>                            std::vector&lt;int64_t&gt; elem_var_data(num_elem_var_values);</div>
<div class="line"><a id="l01083" name="l01083"></a><span class="lineno"> 1083</span>                            int64_t min = INT64_MAX-1;</div>
<div class="line"><a id="l01084" name="l01084"></a><span class="lineno"> 1084</span>                            int64_t max = -1*min;</div>
<div class="line"><a id="l01085" name="l01085"></a><span class="lineno"> 1085</span>                            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != elem_block-&gt;get_variable_data(var_index, elem_var_data.data())) {</div>
<div class="line"><a id="l01086" name="l01086"></a><span class="lineno"> 1086</span>                                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get elemental var data\n&quot;</span>);</div>
<div class="line"><a id="l01087" name="l01087"></a><span class="lineno"> 1087</span>                            }</div>
<div class="line"><a id="l01088" name="l01088"></a><span class="lineno"> 1088</span>                            fprintf(stdout, <span class="stringliteral">&quot;VarData:&quot;</span>);</div>
<div class="line"><a id="l01089" name="l01089"></a><span class="lineno"> 1089</span>                            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : elem_var_data) {</div>
<div class="line"><a id="l01090" name="l01090"></a><span class="lineno"> 1090</span>                                std::cout &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; val;</div>
<div class="line"><a id="l01091" name="l01091"></a><span class="lineno"> 1091</span>                                <span class="keywordflow">if</span> (val &lt; min) {</div>
<div class="line"><a id="l01092" name="l01092"></a><span class="lineno"> 1092</span>                                    min = val;</div>
<div class="line"><a id="l01093" name="l01093"></a><span class="lineno"> 1093</span>                                }</div>
<div class="line"><a id="l01094" name="l01094"></a><span class="lineno"> 1094</span>                                <span class="keywordflow">if</span> (val &gt; max) {</div>
<div class="line"><a id="l01095" name="l01095"></a><span class="lineno"> 1095</span>                                    max = val;</div>
<div class="line"><a id="l01096" name="l01096"></a><span class="lineno"> 1096</span>                                }</div>
<div class="line"><a id="l01097" name="l01097"></a><span class="lineno"> 1097</span>                            }</div>
<div class="line"><a id="l01098" name="l01098"></a><span class="lineno"> 1098</span>                            fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l01099" name="l01099"></a><span class="lineno"> 1099</span>                            std::cout &lt;&lt; <span class="stringliteral">&quot;Min: &quot;</span> &lt;&lt; min &lt;&lt; <span class="stringliteral">&quot;, Max: &quot;</span> &lt;&lt; max &lt;&lt; std::endl;</div>
<div class="line"><a id="l01100" name="l01100"></a><span class="lineno"> 1100</span>                        }</div>
<div class="line"><a id="l01101" name="l01101"></a><span class="lineno"> 1101</span>                    }</div>
<div class="line"><a id="l01102" name="l01102"></a><span class="lineno"> 1102</span> </div>
<div class="line"><a id="l01103" name="l01103"></a><span class="lineno"> 1103</span> </div>
<div class="line"><a id="l01104" name="l01104"></a><span class="lineno"> 1104</span> </div>
<div class="line"><a id="l01105" name="l01105"></a><span class="lineno"> 1105</span>                }</div>
<div class="line"><a id="l01106" name="l01106"></a><span class="lineno"> 1106</span>            } <span class="comment">// For elem block types</span></div>
<div class="line"><a id="l01107" name="l01107"></a><span class="lineno"> 1107</span>        }</div>
<div class="line"><a id="l01108" name="l01108"></a><span class="lineno"> 1108</span>        fprintf (stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l01109" name="l01109"></a><span class="lineno"> 1109</span>    } <span class="comment">// For mesh chunks</span></div>
<div class="line"><a id="l01110" name="l01110"></a><span class="lineno"> 1110</span> </div>
<div class="line"><a id="l01111" name="l01111"></a><span class="lineno"> 1111</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l01112" name="l01112"></a><span class="lineno"> 1112</span>    fprintf(stdout, <span class="stringliteral">&quot;Listing All Plot Chunks for Query\n&quot;</span>);</div>
<div class="line"><a id="l01113" name="l01113"></a><span class="lineno"> 1113</span>    fprintf(stdout, <span class="stringliteral">&quot;---------------------------\n&quot;</span>);</div>
<div class="line"><a id="l01114" name="l01114"></a><span class="lineno"> 1114</span> </div>
<div class="line"><a id="l01115" name="l01115"></a><span class="lineno"> 1115</span>    uint32_t num_plot_chunks = 0;</div>
<div class="line"><a id="l01116" name="l01116"></a><span class="lineno"> 1116</span>    err = dataset_query-&gt;get_num_plot_chunks(num_plot_chunks);</div>
<div class="line"><a id="l01117" name="l01117"></a><span class="lineno"> 1117</span>    <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != err) {</div>
<div class="line"><a id="l01118" name="l01118"></a><span class="lineno"> 1118</span>        fprintf(stdout, <span class="stringliteral">&quot;Error getting number of plot chunks\n&quot;</span>);</div>
<div class="line"><a id="l01119" name="l01119"></a><span class="lineno"> 1119</span>        <span class="keywordflow">return</span> err;</div>
<div class="line"><a id="l01120" name="l01120"></a><span class="lineno"> 1120</span>    }</div>
<div class="line"><a id="l01121" name="l01121"></a><span class="lineno"> 1121</span>    <span class="keywordflow">for</span> (uint32_t plot_index = 0; plot_index &lt; num_plot_chunks; plot_index++) {</div>
<div class="line"><a id="l01122" name="l01122"></a><span class="lineno"> 1122</span>        <span class="keyword">auto</span> plot = dataset_query-&gt;get_plot_chunk(plot_index);</div>
<div class="line"><a id="l01123" name="l01123"></a><span class="lineno"> 1123</span>        <span class="keywordflow">if</span> (plot) {</div>
<div class="line"><a id="l01124" name="l01124"></a><span class="lineno"> 1124</span>            <span class="keyword">auto</span> plot_def = plot-&gt;get_object();</div>
<div class="line"><a id="l01125" name="l01125"></a><span class="lineno"> 1125</span>            std::string name;</div>
<div class="line"><a id="l01126" name="l01126"></a><span class="lineno"> 1126</span>            <span class="keywordflow">if</span> (plot_def) {</div>
<div class="line"><a id="l01127" name="l01127"></a><span class="lineno"> 1127</span>                name = plot_def-&gt;get_name();</div>
<div class="line"><a id="l01128" name="l01128"></a><span class="lineno"> 1128</span>            }</div>
<div class="line"><a id="l01129" name="l01129"></a><span class="lineno"> 1129</span>            <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l01130" name="l01130"></a><span class="lineno"> 1130</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: No plot definition for plot data\n&quot;</span>);</div>
<div class="line"><a id="l01131" name="l01131"></a><span class="lineno"> 1131</span>            }</div>
<div class="line"><a id="l01132" name="l01132"></a><span class="lineno"> 1132</span>            <span class="keywordtype">float</span> time = plot-&gt;get_time();</div>
<div class="line"><a id="l01133" name="l01133"></a><span class="lineno"> 1133</span>            uint32_t rank = plot-&gt;get_rank();</div>
<div class="line"><a id="l01134" name="l01134"></a><span class="lineno"> 1134</span> </div>
<div class="line"><a id="l01135" name="l01135"></a><span class="lineno"> 1135</span>            std::string hash(plot-&gt;get_hash_size(), 0);</div>
<div class="line"><a id="l01136" name="l01136"></a><span class="lineno"> 1136</span>            <span class="keywordflow">if</span> (hash.empty() || <a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != plot-&gt;get_hash(&amp;(hash[0]))) {</div>
<div class="line"><a id="l01137" name="l01137"></a><span class="lineno"> 1137</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get plot hash\n&quot;</span>);</div>
<div class="line"><a id="l01138" name="l01138"></a><span class="lineno"> 1138</span>            }</div>
<div class="line"><a id="l01139" name="l01139"></a><span class="lineno"> 1139</span> </div>
<div class="line"><a id="l01140" name="l01140"></a><span class="lineno"> 1140</span>            fprintf(stdout, <span class="stringliteral">&quot;Plot: %s, Time: %f, Rank: %d, Hash: %s\n&quot;</span>,</div>
<div class="line"><a id="l01141" name="l01141"></a><span class="lineno"> 1141</span>                    name.c_str(), time, rank, hash.c_str());</div>
<div class="line"><a id="l01142" name="l01142"></a><span class="lineno"> 1142</span> </div>
<div class="line"><a id="l01143" name="l01143"></a><span class="lineno"> 1143</span>            uint32_t num_values = 0;</div>
<div class="line"><a id="l01144" name="l01144"></a><span class="lineno"> 1144</span>            <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != plot-&gt;get_data(&amp;num_values, <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a id="l01145" name="l01145"></a><span class="lineno"> 1145</span>                fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get plot number of values\n&quot;</span>);</div>
<div class="line"><a id="l01146" name="l01146"></a><span class="lineno"> 1146</span>            }</div>
<div class="line"><a id="l01147" name="l01147"></a><span class="lineno"> 1147</span> </div>
<div class="line"><a id="l01148" name="l01148"></a><span class="lineno"> 1148</span>            <span class="keywordflow">if</span> (num_values &gt; 0) {</div>
<div class="line"><a id="l01149" name="l01149"></a><span class="lineno"> 1149</span>                std::vector&lt;float&gt; x_values(num_values);</div>
<div class="line"><a id="l01150" name="l01150"></a><span class="lineno"> 1150</span>                std::vector&lt;float&gt; y_values(num_values);</div>
<div class="line"><a id="l01151" name="l01151"></a><span class="lineno"> 1151</span> </div>
<div class="line"><a id="l01152" name="l01152"></a><span class="lineno"> 1152</span>                <span class="keywordflow">if</span> (<a class="code hl_define" href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a> != plot-&gt;get_data(<span class="keyword">nullptr</span>, x_values.data(), y_values.data())) {</div>
<div class="line"><a id="l01153" name="l01153"></a><span class="lineno"> 1153</span>                    fprintf(stdout, <span class="stringliteral">&quot;ERROR: Could not get plot data values\n&quot;</span>);</div>
<div class="line"><a id="l01154" name="l01154"></a><span class="lineno"> 1154</span>                }</div>
<div class="line"><a id="l01155" name="l01155"></a><span class="lineno"> 1155</span> </div>
<div class="line"><a id="l01156" name="l01156"></a><span class="lineno"> 1156</span>                fprintf(stdout, <span class="stringliteral">&quot;X Values:&quot;</span>);</div>
<div class="line"><a id="l01157" name="l01157"></a><span class="lineno"> 1157</span>                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; num_values; i++) {</div>
<div class="line"><a id="l01158" name="l01158"></a><span class="lineno"> 1158</span>                    fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, x_values[i]);</div>
<div class="line"><a id="l01159" name="l01159"></a><span class="lineno"> 1159</span>                }</div>
<div class="line"><a id="l01160" name="l01160"></a><span class="lineno"> 1160</span>                fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l01161" name="l01161"></a><span class="lineno"> 1161</span> </div>
<div class="line"><a id="l01162" name="l01162"></a><span class="lineno"> 1162</span>                fprintf(stdout, <span class="stringliteral">&quot;Y Values:&quot;</span>);</div>
<div class="line"><a id="l01163" name="l01163"></a><span class="lineno"> 1163</span>                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; num_values; i++) {</div>
<div class="line"><a id="l01164" name="l01164"></a><span class="lineno"> 1164</span>                    fprintf(stdout, <span class="stringliteral">&quot; %f&quot;</span>, y_values[i]);</div>
<div class="line"><a id="l01165" name="l01165"></a><span class="lineno"> 1165</span>                }</div>
<div class="line"><a id="l01166" name="l01166"></a><span class="lineno"> 1166</span>                fprintf(stdout, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a id="l01167" name="l01167"></a><span class="lineno"> 1167</span>            }</div>
<div class="line"><a id="l01168" name="l01168"></a><span class="lineno"> 1168</span>        }</div>
<div class="line"><a id="l01169" name="l01169"></a><span class="lineno"> 1169</span>    }</div>
<div class="line"><a id="l01170" name="l01170"></a><span class="lineno"> 1170</span> </div>
<div class="line"><a id="l01171" name="l01171"></a><span class="lineno"> 1171</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l01172" name="l01172"></a><span class="lineno"> 1172</span> </div>
<div class="line"><a id="l01173" name="l01173"></a><span class="lineno"> 1173</span> </div>
<div class="line"><a id="l01174" name="l01174"></a><span class="lineno"> 1174</span>}</div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml">DVS::IDataset</a></div><div class="ttdoc">Interface for datasets for the DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__dataset__interface_8h_source.xhtml#l00043">dvs_dataset_interface.h:44</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_a423774f63a6f5275d4d4f33da65f37b4"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#a423774f63a6f5275d4d4f33da65f37b4">DVS::IDataset::get_num_ranks</a></div><div class="ttdeci">virtual uint32_t get_num_ranks() const =0</div><div class="ttdoc">Get the number of ranks for the dataset.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_a49e3b27865d865ba36dd5d7e5c659a6b"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#a49e3b27865d865ba36dd5d7e5c659a6b">DVS::IDataset::get_num_plots</a></div><div class="ttdeci">virtual uint32_t get_num_plots() const =0</div><div class="ttdoc">Get the number of plots for this datasets.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_a5ec19061a478d6b2aea0976b9e79f73b"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#a5ec19061a478d6b2aea0976b9e79f73b">DVS::IDataset::get_num_chunks_per_rank</a></div><div class="ttdeci">virtual uint32_t get_num_chunks_per_rank() const =0</div><div class="ttdoc">Get the size of the chunks_per_rank array for get_chunks_per_rank()</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_a69aa8f4d0ad2c4fd69e6443f662fbc1d"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#a69aa8f4d0ad2c4fd69e6443f662fbc1d">DVS::IDataset::get_num_parts</a></div><div class="ttdeci">virtual uint32_t get_num_parts() const =0</div><div class="ttdoc">Get the number of parts for this dataset.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_a8f3bb3e37530f0b1dd6630fb6f9925f5"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#a8f3bb3e37530f0b1dd6630fb6f9925f5">DVS::IDataset::get_plot</a></div><div class="ttdeci">virtual const DVS::IObject * get_plot(uint32_t index) const =0</div><div class="ttdoc">Get the plot object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_abfef24372147723533c9feebd55666c1"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#abfef24372147723533c9feebd55666c1">DVS::IDataset::get_var</a></div><div class="ttdeci">virtual const DVS::IVar * get_var(uint32_t index) const =0</div><div class="ttdoc">Get the var object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_ac620a1f5fb513d636ed59d7b4552197a"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#ac620a1f5fb513d636ed59d7b4552197a">DVS::IDataset::get_ranks</a></div><div class="ttdeci">virtual dvs_ret get_ranks(uint32_t *ranks) const =0</div><div class="ttdoc">Get an array of the ranks for this dataset query.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_acd0c0e81b283bce8044d9b4de796574a"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#acd0c0e81b283bce8044d9b4de796574a">DVS::IDataset::get_num_variables</a></div><div class="ttdeci">virtual uint32_t get_num_variables() const =0</div><div class="ttdoc">Get the number of variables for this dataset.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_af000ab1d7bfdd043cdc2b4f6cd4d682c"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#af000ab1d7bfdd043cdc2b4f6cd4d682c">DVS::IDataset::get_part</a></div><div class="ttdeci">virtual const DVS::IObject * get_part(uint32_t index) const =0</div><div class="ttdoc">Get a part by index.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_af69301cb1a2d466933e8fee162411a60"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#af69301cb1a2d466933e8fee162411a60">DVS::IDataset::get_unit_system</a></div><div class="ttdeci">virtual const char * get_unit_system() const =0</div><div class="ttdoc">Get the unit system of the dataset.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_dataset_xhtml_afb023f6b10fd4c072e8c7cb140d666ae"><div class="ttname"><a href="class_d_v_s_1_1_i_dataset.xhtml#afb023f6b10fd4c072e8c7cb140d666ae">DVS::IDataset::get_chunks_per_rank</a></div><div class="ttdeci">virtual dvs_ret get_chunks_per_rank(uint32_t *chunks_per_rank) const =0</div><div class="ttdoc">Get the number of chunks for each rank.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_hash_xhtml_a51eaee86a6e2db4dda7f4326daa33874"><div class="ttname"><a href="class_d_v_s_1_1_i_hash.xhtml#a51eaee86a6e2db4dda7f4326daa33874">DVS::IHash::get_hash</a></div><div class="ttdeci">virtual dvs_ret get_hash(char *hash) const =0</div><div class="ttdoc">Get the hash of the data.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_hash_xhtml_ac0dedeb8d9dfd442d49d16cb4ddfb221"><div class="ttname"><a href="class_d_v_s_1_1_i_hash.xhtml#ac0dedeb8d9dfd442d49d16cb4ddfb221">DVS::IHash::get_hash_size</a></div><div class="ttdeci">virtual uint32_t get_hash_size() const =0</div><div class="ttdoc">Get the size of the hash to use with IHash::get_hash()</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml">DVS::IMeshChunk</a></div><div class="ttdoc">Mesh Chunk Interface for DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__mesh__chunk__interface_8h_source.xhtml#l00048">dvs_mesh_chunk_interface.h:49</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a0b819acf4a968957e8ba90876dd880d9"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0b819acf4a968957e8ba90876dd880d9">DVS::IMeshChunk::get_num_variables</a></div><div class="ttdeci">virtual dvs_ret get_num_variables(uint32_t &amp;num_vars, VAR_TYPE type=VAR_TYPE::FLOAT) const =0</div><div class="ttdoc">Get the number of nodal variables this mesh chunk has data for, based on the specified type.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a0fe402e619754256a19e0087b76e2c53"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a0fe402e619754256a19e0087b76e2c53">DVS::IMeshChunk::get_coords_size</a></div><div class="ttdeci">virtual dvs_ret get_coords_size(uint32_t &amp;component_size)=0</div><div class="ttdoc">Get the size of each coordinate component for unstructured meshes.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a32ad562394805327fbabffa322643701"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a32ad562394805327fbabffa322643701">DVS::IMeshChunk::get_time</a></div><div class="ttdeci">virtual float get_time() const =0</div><div class="ttdoc">Get the time for this mesh chunk.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a39c2d8cc95f14ecbe9789908881c92a0"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a39c2d8cc95f14ecbe9789908881c92a0">DVS::IMeshChunk::get_coords_interleaved</a></div><div class="ttdeci">virtual dvs_ret get_coords_interleaved(float *coords)=0</div><div class="ttdoc">Get the coords for a unstructured meshes interleaved in a single array.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a3fbe50455053f953a39707671d8b3ab3"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a3fbe50455053f953a39707671d8b3ab3">DVS::IMeshChunk::get_variable</a></div><div class="ttdeci">virtual const DVS::IVar * get_variable(uint32_t index, VAR_TYPE type=VAR_TYPE::FLOAT) const =0</div><div class="ttdoc">Get the variable definition associates with the nodal variable for this index and the specified type.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a44a916bcd71f4d6b33661b249d52c61b"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a44a916bcd71f4d6b33661b249d52c61b">DVS::IMeshChunk::get_element_block_types</a></div><div class="ttdeci">virtual dvs_ret get_element_block_types(dvs_element_type *element_types) const =0</div><div class="ttdoc">Get an array of the element block types for this mesh chunk.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a5c191e3ec6d65a527fc1f3224f84d503"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5c191e3ec6d65a527fc1f3224f84d503">DVS::IMeshChunk::get_coords_curv_interleaved</a></div><div class="ttdeci">virtual dvs_ret get_coords_curv_interleaved(float local_ijk_min[3], float local_ijk_max[3], float global_ijk_max[3], float *coords)=0</div><div class="ttdoc">Get the coords for structured curvilinear meshes interleaved in a single array.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a5f3772e845d3ffe73c4a6525d78ab2ad"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a5f3772e845d3ffe73c4a6525d78ab2ad">DVS::IMeshChunk::get_num_element_blocks</a></div><div class="ttdeci">virtual dvs_ret get_num_element_blocks(uint32_t &amp;num_elem_blocks) const =0</div><div class="ttdoc">Get the number of element blocks for this mesh chunk.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a6b894c57bfd1e70168290ce69ecc5af4"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6b894c57bfd1e70168290ce69ecc5af4">DVS::IMeshChunk::get_chunk</a></div><div class="ttdeci">virtual uint32_t get_chunk() const =0</div><div class="ttdoc">Get the chunk for this mesh chunk.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a6c520674083999e99bdf77b2b1eaacf8"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6c520674083999e99bdf77b2b1eaacf8">DVS::IMeshChunk::get_rank</a></div><div class="ttdeci">virtual uint32_t get_rank() const =0</div><div class="ttdoc">Get the rank for the mesh chunk.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a6d0e7efa6c204cbb7730ef1bf4024fbc"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a6d0e7efa6c204cbb7730ef1bf4024fbc">DVS::IMeshChunk::get_variable_size</a></div><div class="ttdeci">virtual dvs_ret get_variable_size(uint32_t index, uint32_t &amp;num_values, VAR_TYPE type=VAR_TYPE::FLOAT) const =0</div><div class="ttdoc">Get the variable size via the index and specified type.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a70b1069fc8737730efa0fc01a0698fbd"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a70b1069fc8737730efa0fc01a0698fbd">DVS::IMeshChunk::get_coords_curv_size</a></div><div class="ttdeci">virtual dvs_ret get_coords_curv_size(uint32_t &amp;component_size)=0</div><div class="ttdoc">Get the size of each coordinate component for structured curvilinear meshes.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a7738e954570e849462ff493ec875bc80"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7738e954570e849462ff493ec875bc80">DVS::IMeshChunk::get_coords</a></div><div class="ttdeci">virtual dvs_ret get_coords(float *x_coords, float *y_coords, float *z_coords)=0</div><div class="ttdoc">Get the coordinates for an unstructured mesh.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a7ca84ad8d766514684790bacd31803fc"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a7ca84ad8d766514684790bacd31803fc">DVS::IMeshChunk::get_element_block_by_type</a></div><div class="ttdeci">virtual DVS::IElementBlock * get_element_block_by_type(dvs_element_type type)=0</div><div class="ttdoc">Get the element block by element type.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a8b7de1a1e47e05ab63f6bb41ccf5144a"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144a">DVS::IMeshChunk::MeshType</a></div><div class="ttdeci">MeshType</div><div class="ttdoc">The different mesh types allowed.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__mesh__chunk__interface_8h_source.xhtml#l00063">dvs_mesh_chunk_interface.h:64</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a8b7de1a1e47e05ab63f6bb41ccf5144aa95416cf06dfb48f6331a1f7c5c2704d2"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aa95416cf06dfb48f6331a1f7c5c2704d2">DVS::IMeshChunk::PARALLELEPIPED</a></div><div class="ttdeci">@ PARALLELEPIPED</div><div class="ttdoc">Parallelepiped structured mesh data.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__mesh__chunk__interface_8h_source.xhtml#l00067">dvs_mesh_chunk_interface.h:67</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aab7e091dc6959aa447a0b6a44be352013">DVS::IMeshChunk::CURVILINEAR</a></div><div class="ttdeci">@ CURVILINEAR</div><div class="ttdoc">Curvilinear structured mesh data.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__mesh__chunk__interface_8h_source.xhtml#l00068">dvs_mesh_chunk_interface.h:68</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8b7de1a1e47e05ab63f6bb41ccf5144aabd8a1a2f952443e439d96cbea674208e">DVS::IMeshChunk::UNSTRUCTURED</a></div><div class="ttdeci">@ UNSTRUCTURED</div><div class="ttdoc">Unstructured mesh data.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__mesh__chunk__interface_8h_source.xhtml#l00066">dvs_mesh_chunk_interface.h:66</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a8da90ca355541bf876fa23ed267f94cb"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a8da90ca355541bf876fa23ed267f94cb">DVS::IMeshChunk::get_coords_curv</a></div><div class="ttdeci">virtual dvs_ret get_coords_curv(float local_ijk_min[3], float local_ijk_max[3], float global_ijk_max[3], float *x_coords, float *y_coords, float *z_coords)=0</div><div class="ttdoc">Get coordinate data for a structured curvilinear mesh.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_a959ecd945a3e46b25b4e816a35eb4123"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#a959ecd945a3e46b25b4e816a35eb4123">DVS::IMeshChunk::get_coords_parallele</a></div><div class="ttdeci">virtual dvs_ret get_coords_parallele(float origin[3], float dir_vec_i[3], float dir_vec_j[3], float dir_vec_k[3], float local_ijk_min[3], float local_ijk_max[3], float global_ijk_max[3], float *i_vals, float *j_vals, float *k_vals)=0</div><div class="ttdoc">Get the ijk mesh information for structured parallelepiped mesh chunks.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_ab025d1550b2b3cd77faefecec5199852"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ab025d1550b2b3cd77faefecec5199852">DVS::IMeshChunk::get_type</a></div><div class="ttdeci">virtual MeshType get_type() const =0</div><div class="ttdoc">Get the type of mesh chunk.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_abb13b29450a5ccfaa9027cfda3ceb108"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abb13b29450a5ccfaa9027cfda3ceb108">DVS::IMeshChunk::get_object</a></div><div class="ttdeci">virtual const DVS::IObject * get_object() const =0</div><div class="ttdoc">Get the object definiton this mesh chunk is associated with.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_abda21734e2f506b982b65007d17c92fd"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#abda21734e2f506b982b65007d17c92fd">DVS::IMeshChunk::get_coords_parallele_size</a></div><div class="ttdeci">virtual dvs_ret get_coords_parallele_size(uint32_t &amp;i_vals_size, uint32_t &amp;j_vals_size, uint32_t &amp;k_vals_size)=0</div><div class="ttdoc">Get the size of each ijk component for structured parallelpiped meshes.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_mesh_chunk_xhtml_ae7fe3d3b75e14f1cdd0d810e30a35fe0"><div class="ttname"><a href="class_d_v_s_1_1_i_mesh_chunk.xhtml#ae7fe3d3b75e14f1cdd0d810e30a35fe0">DVS::IMeshChunk::get_variable_data</a></div><div class="ttdeci">virtual dvs_ret get_variable_data(uint32_t index, float *array) const =0</div><div class="ttdoc">Get the variable data by index.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml">DVS::IObject</a></div><div class="ttdoc">Interface for part/plot objects for DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__object__interface_8h_source.xhtml#l00044">dvs_object_interface.h:45</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_a04ee2919ffeb46d966d4675c8cd4420c"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#a04ee2919ffeb46d966d4675c8cd4420c">DVS::IObject::get_metadata_key</a></div><div class="ttdeci">virtual const char * get_metadata_key(uint32_t index) const =0</div><div class="ttdoc">Get the metadata key by index.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_a31db3b716cc815c2c73f826f24384f6a"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#a31db3b716cc815c2c73f826f24384f6a">DVS::IObject::get_num_metadata</a></div><div class="ttdeci">virtual uint32_t get_num_metadata() const =0</div><div class="ttdoc">Get the number of metadata objects.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_a39be8b08200f75b20a7b5cf715ba9dd3"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#a39be8b08200f75b20a7b5cf715ba9dd3">DVS::IObject::get_name</a></div><div class="ttdeci">virtual const char * get_name() const =0</div><div class="ttdoc">Get the name of the object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_a7a37d603ccf93f7f1ec9f962fa9d1f61"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#a7a37d603ccf93f7f1ec9f962fa9d1f61">DVS::IObject::get_metadata_value</a></div><div class="ttdeci">virtual const char * get_metadata_value(uint32_t index) const =0</div><div class="ttdoc">Get the metadata value by index.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_a889c46624013cc3802c7164d153b95f6"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#a889c46624013cc3802c7164d153b95f6">DVS::IObject::get_type</a></div><div class="ttdeci">virtual ObjectDefType get_type() const =0</div><div class="ttdoc">Get the type of the object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_aa897daa1f7d0467515fd108c29015348a8b2484e08a16329d2d91c18c254f5ca6"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#aa897daa1f7d0467515fd108c29015348a8b2484e08a16329d2d91c18c254f5ca6">DVS::IObject::PART</a></div><div class="ttdeci">@ PART</div><div class="ttdoc">Type for a part object.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__object__interface_8h_source.xhtml#l00061">dvs_object_interface.h:61</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_aa897daa1f7d0467515fd108c29015348abe80fa1e67dae7efb56fdb2936914cae"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#aa897daa1f7d0467515fd108c29015348abe80fa1e67dae7efb56fdb2936914cae">DVS::IObject::PLOT</a></div><div class="ttdeci">@ PLOT</div><div class="ttdoc">Type for a plot object.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__object__interface_8h_source.xhtml#l00062">dvs_object_interface.h:62</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_object_xhtml_aea688a307b1cb02ae53e0e8fd3791e64"><div class="ttname"><a href="class_d_v_s_1_1_i_object.xhtml#aea688a307b1cb02ae53e0e8fd3791e64">DVS::IObject::get_dataset</a></div><div class="ttdeci">virtual const DVS::IDataset * get_dataset() const =0</div><div class="ttdoc">Get the reference dataset for this object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml">DVS::IQuery</a></div><div class="ttdoc">The query interface for the DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__query__interface_8h_source.xhtml#l00076">dvs_query_interface.h:77</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_a257f79d7de21658c07dc602dfa6bbf34"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#a257f79d7de21658c07dc602dfa6bbf34">DVS::IQuery::release</a></div><div class="ttdeci">virtual void release()=0</div><div class="ttdoc">Release the memory of the query.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_query_xhtml_ab6ce54c68281ea1676af650ebc5716a0"><div class="ttname"><a href="class_d_v_s_1_1_i_query.xhtml#ab6ce54c68281ea1676af650ebc5716a0">DVS::IQuery::set_logger</a></div><div class="ttdeci">virtual void set_logger(DVS::ILogger *logger)=0</div><div class="ttdoc">Set the logger object.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_hash_xhtml_a17fff1548eb276edd326a0af08f6a7c4"><div class="ttname"><a href="class_d_v_s_1_1_i_var_hash.xhtml#a17fff1548eb276edd326a0af08f6a7c4">DVS::IVarHash::get_var_hash</a></div><div class="ttdeci">virtual dvs_ret get_var_hash(uint32_t index, char *hash, VAR_TYPE type=VAR_TYPE::FLOAT) const =0</div><div class="ttdoc">Get the hash of the variable data.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_hash_xhtml_a85c3ade756029207e15b1c8de8cd5c1b"><div class="ttname"><a href="class_d_v_s_1_1_i_var_hash.xhtml#a85c3ade756029207e15b1c8de8cd5c1b">DVS::IVarHash::get_var_hash_size</a></div><div class="ttdeci">virtual uint32_t get_var_hash_size(uint32_t index, VAR_TYPE type=VAR_TYPE::FLOAT) const =0</div><div class="ttdoc">Get the size of the hash to use with IVarHash::get_var_hash()</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml">DVS::IVar</a></div><div class="ttdoc">Interface for variables for the DVS Reader API.</div><div class="ttdef"><b>Definition:</b> <a href="dvs__var__interface_8h_source.xhtml#l00057">dvs_var_interface.h:58</a></div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_a12b24dd196d3ddf3dbbdc29eca9cca3f"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#a12b24dd196d3ddf3dbbdc29eca9cca3f">DVS::IVar::get_name</a></div><div class="ttdeci">virtual const char * get_name() const =0</div><div class="ttdoc">Get the name of the variable.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_a22432a4b79163a933a850a7a58dfe315"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#a22432a4b79163a933a850a7a58dfe315">DVS::IVar::get_metadata_value</a></div><div class="ttdeci">virtual const char * get_metadata_value(uint32_t index) const =0</div><div class="ttdoc">Get the metadata value base on the index.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_a2deab60f72955106a4a4a3f67a0f295e"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#a2deab60f72955106a4a4a3f67a0f295e">DVS::IVar::get_num_metadata</a></div><div class="ttdeci">virtual uint32_t get_num_metadata() const =0</div><div class="ttdoc">Get the num metadata values on this var.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_a6aa67cf54eb22ee51a7bf5eeb778cee5"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#a6aa67cf54eb22ee51a7bf5eeb778cee5">DVS::IVar::get_unit_dimension</a></div><div class="ttdeci">virtual const char * get_unit_dimension() const =0</div><div class="ttdoc">Get the unit dimensions as string.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_a7e97f43d3d1057267399c0e66deadd3d"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#a7e97f43d3d1057267399c0e66deadd3d">DVS::IVar::get_var_location</a></div><div class="ttdeci">virtual dvs_var_location get_var_location() const =0</div><div class="ttdoc">Get the var location.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_a9dbdd84e6f6342deae82ede6dcf2156e"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#a9dbdd84e6f6342deae82ede6dcf2156e">DVS::IVar::get_float_count_per_value</a></div><div class="ttdeci">virtual uint32_t get_float_count_per_value() const =0</div><div class="ttdoc">Get the number of floats per value.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_aa484336b355e68f93069e97d771e4a6e"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#aa484336b355e68f93069e97d771e4a6e">DVS::IVar::get_unit_label</a></div><div class="ttdeci">virtual const char * get_unit_label() const =0</div><div class="ttdoc">Get the unit label as string.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_acd4c1b8698417ac314a45143e92986d6"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#acd4c1b8698417ac314a45143e92986d6">DVS::IVar::get_dataset</a></div><div class="ttdeci">virtual const DVS::IDataset * get_dataset() const =0</div><div class="ttdoc">Get the reference dataset for this var.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_ae18e148e2d2996891560734e53cd9671"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#ae18e148e2d2996891560734e53cd9671">DVS::IVar::get_metadata_key</a></div><div class="ttdeci">virtual const char * get_metadata_key(uint32_t index) const =0</div><div class="ttdoc">Get a metadata key based on the index.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_i_var_xhtml_ae837af2ee946d8f54695d1abf95c5cda"><div class="ttname"><a href="class_d_v_s_1_1_i_var.xhtml#ae837af2ee946d8f54695d1abf95c5cda">DVS::IVar::get_var_type</a></div><div class="ttdeci">virtual dvs_var_type get_var_type() const =0</div><div class="ttdoc">Get the type of var.</div></div>
<div class="ttc" id="aclass_d_v_s_1_1_logger_verbose_xhtml"><div class="ttname"><a href="class_d_v_s_1_1_logger_verbose.xhtml">DVS::LoggerVerbose</a></div><div class="ttdoc">Logger class based on verbosity.</div><div class="ttdef"><b>Definition:</b> <a href="logger__verbose_8h_source.xhtml#l00039">logger_verbose.h:40</a></div></div>
<div class="ttc" id="advs__query__interface_8h_xhtml"><div class="ttname"><a href="dvs__query__interface_8h.xhtml">dvs_query_interface.h</a></div><div class="ttdoc">DVS Reader API Query Interface.</div></div>
<div class="ttc" id="adynamic__visualization__store__enums_8h_xhtml_aafcfd80cd55c92c53106bb56fdaf026da95f57c1525070266247b1a687f565f5b"><div class="ttname"><a href="dynamic__visualization__store__enums_8h.xhtml#aafcfd80cd55c92c53106bb56fdaf026da95f57c1525070266247b1a687f565f5b">DVS_VERBOSE</a></div><div class="ttdeci">@ DVS_VERBOSE</div><div class="ttdoc">Displays informational messages, warnings, errors.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__enums_8h_source.xhtml#l00086">dynamic_visualization_store_enums.h:86</a></div></div>
<div class="ttc" id="adynamic__visualization__store__enums_8h_xhtml_af4f0eba512eff253854b44d7ce078491a173f98c603042f6241b70157d56e385f"><div class="ttname"><a href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a173f98c603042f6241b70157d56e385f">PART</a></div><div class="ttdeci">@ PART</div><div class="ttdoc">This is a variable for an entire part.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__enums_8h_source.xhtml#l00021">dynamic_visualization_store_enums.h:21</a></div></div>
<div class="ttc" id="adynamic__visualization__store__enums_8h_xhtml_af4f0eba512eff253854b44d7ce078491a3d10bfe84917127ab3347aa5c6309f33"><div class="ttname"><a href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a3d10bfe84917127ab3347aa5c6309f33">ELEMENT</a></div><div class="ttdeci">@ ELEMENT</div><div class="ttdoc">This is a field variable per each element of a part.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__enums_8h_source.xhtml#l00020">dynamic_visualization_store_enums.h:20</a></div></div>
<div class="ttc" id="adynamic__visualization__store__enums_8h_xhtml_af4f0eba512eff253854b44d7ce078491a59a889456a2d742fdca191dccb3e871d"><div class="ttname"><a href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a59a889456a2d742fdca191dccb3e871d">NODE</a></div><div class="ttdeci">@ NODE</div><div class="ttdoc">This is a field variable per each node of a part's mesh.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__enums_8h_source.xhtml#l00019">dynamic_visualization_store_enums.h:19</a></div></div>
<div class="ttc" id="adynamic__visualization__store__enums_8h_xhtml_af4f0eba512eff253854b44d7ce078491a9c9b14644e9370719a51b7342bbc9c4d"><div class="ttname"><a href="dynamic__visualization__store__enums_8h.xhtml#af4f0eba512eff253854b44d7ce078491a9c9b14644e9370719a51b7342bbc9c4d">CASE</a></div><div class="ttdeci">@ CASE</div><div class="ttdoc">This is a variable for an entire case (i.e. dataset)</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__enums_8h_source.xhtml#l00022">dynamic_visualization_store_enums.h:22</a></div></div>
<div class="ttc" id="adynamic__visualization__store__error__codes_8h_xhtml_a1d7466ae72e89fe36cbf2408b4f7d9c1"><div class="ttname"><a href="dynamic__visualization__store__error__codes_8h.xhtml#a1d7466ae72e89fe36cbf2408b4f7d9c1">dvs_ret</a></div><div class="ttdeci">int32_t dvs_ret</div><div class="ttdoc">Return value of methods, TODO.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__error__codes_8h_source.xhtml#l00032">dynamic_visualization_store_error_codes.h:32</a></div></div>
<div class="ttc" id="adynamic__visualization__store__error__codes_8h_xhtml_a83b88ce16159d34fe5ce63e7024462a7"><div class="ttname"><a href="dynamic__visualization__store__error__codes_8h.xhtml#a83b88ce16159d34fe5ce63e7024462a7">DVS_NONE</a></div><div class="ttdeci">#define DVS_NONE</div><div class="ttdoc">No detected error has occurred.</div><div class="ttdef"><b>Definition:</b> <a href="dynamic__visualization__store__error__codes_8h_source.xhtml#l00099">dynamic_visualization_store_error_codes.h:99</a></div></div>
<div class="ttc" id="alogger__verbose_8h_xhtml"><div class="ttname"><a href="logger__verbose_8h.xhtml">logger_verbose.h</a></div><div class="ttdoc">Verbosity based logger for DVS.</div></div>
<div class="ttc" id="atest__dvs__reader_8cpp_xhtml_a3c04138a5bfe5d72780bb7e82a18e627"><div class="ttname"><a href="test__dvs__reader_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a></div><div class="ttdeci">int main(int argc, char **argv)</div><div class="ttdoc">Main method of test reader application.</div><div class="ttdef"><b>Definition:</b> <a href="test__dvs__reader_8cpp_source.xhtml#l00094">test_dvs_reader.cpp:94</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/>
<small>&#160;&#160;&copy; <script type="text/javascript">document.write(new Date().getFullYear());</script> ANSYS Inc. All rights reserved.</small>
 <span style="float:right"><small>Generated by <a href="http://www.doxygen.org/index.html">doxygen</a>&nbsp;&nbsp;</small></span>
