<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): SimpleTrainingPlan Struct Reference</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('struct_simple_training_plan.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="struct_simple_training_plan-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SimpleTrainingPlan Struct Reference<div class="ingroups"><a class="el" href="group__training__plan.xhtml">MOP training plan</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>TrainingPlan assigns a in a set of sample each sample a status on how the sample is to be treated during the training of a model A model is trained for a set of outputs.  
 <a href="struct_simple_training_plan.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:afc52921c8d133bb463c1dfa5a8b7ef22"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#afc52921c8d133bb463c1dfa5a8b7ef22">getInputs</a> (::data_handler::DataHandlerBase datahandler) override</td></tr>
<tr class="memdesc:afc52921c8d133bb463c1dfa5a8b7ef22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the inputs fitting the training plan from the datahandler.  <a href="#afc52921c8d133bb463c1dfa5a8b7ef22">More...</a><br /></td></tr>
<tr class="separator:afc52921c8d133bb463c1dfa5a8b7ef22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a255c5ecec66209c6f30d3d5f15177859"><td class="memItemLeft" align="right" valign="top">virtual string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a255c5ecec66209c6f30d3d5f15177859">getMOPIdent</a> () override</td></tr>
<tr class="memdesc:a255c5ecec66209c6f30d3d5f15177859"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the <a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> ident the TrainingPlan is created for.  <a href="#a255c5ecec66209c6f30d3d5f15177859">More...</a><br /></td></tr>
<tr class="separator:a255c5ecec66209c6f30d3d5f15177859"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f9260c1f6f8527fb75fa5950f52dfa"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a11f9260c1f6f8527fb75fa5950f52dfa">getOutputs</a> (::data_handler::DataHandlerBase datahandler) override</td></tr>
<tr class="memdesc:a11f9260c1f6f8527fb75fa5950f52dfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the outputs fitting the training plan from the datahandler.  <a href="#a11f9260c1f6f8527fb75fa5950f52dfa">More...</a><br /></td></tr>
<tr class="separator:a11f9260c1f6f8527fb75fa5950f52dfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b8e899313418568acbb9ed5b2ce6ade"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__training__plan.xhtml#gafce529ac7282fd94c419e8bea8492268">SampleUsage</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a2b8e899313418568acbb9ed5b2ce6ade">getSampleUsageInSet</a> (uint64_t i, uint64_t j) override</td></tr>
<tr class="memdesc:a2b8e899313418568acbb9ed5b2ce6ade"><td class="mdescLeft">&#160;</td><td class="mdescRight">getSampleUsage accessor of the j-th sample in the i-th training set  <a href="#a2b8e899313418568acbb9ed5b2ce6ade">More...</a><br /></td></tr>
<tr class="separator:a2b8e899313418568acbb9ed5b2ce6ade"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c419ba361cd6d96b71e12bf657d940b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__training__plan.xhtml#gafce529ac7282fd94c419e8bea8492268">SampleUsage</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a6c419ba361cd6d96b71e12bf657d940b">getSampleUsageInSetRef</a> (uint64_t i, uint64_t j) override</td></tr>
<tr class="memdesc:a6c419ba361cd6d96b71e12bf657d940b"><td class="mdescLeft">&#160;</td><td class="mdescRight">getSampleUsageRef non- accessor of the j-th sample in the i-th training set  <a href="#a6c419ba361cd6d96b71e12bf657d940b">More...</a><br /></td></tr>
<tr class="separator:a6c419ba361cd6d96b71e12bf657d940b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7afbd5f5b1743bc2423ca855fe2603ab"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__common.xhtml#gad5ca470fd07552bf1da82219827c4ec0">ParameterImportance</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a7afbd5f5b1743bc2423ca855fe2603ab">inputImportance</a> (uint64_t i) override</td></tr>
<tr class="memdesc:a7afbd5f5b1743bc2423ca855fe2603ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">parameter returns the ParameterImportance for the i-th parameter  <a href="#a7afbd5f5b1743bc2423ca855fe2603ab">More...</a><br /></td></tr>
<tr class="separator:a7afbd5f5b1743bc2423ca855fe2603ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ae62e6cab293f7c236e9bf273768f1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__common.xhtml#gad5ca470fd07552bf1da82219827c4ec0">ParameterImportance</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#aa2ae62e6cab293f7c236e9bf273768f1">inputImportanceInSubspace</a> (uint64_t i, uint64_t j, uint64_t o=0) override</td></tr>
<tr class="memdesc:aa2ae62e6cab293f7c236e9bf273768f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">inputImportanceInSubspace returns true if the input j is in the subspace i for the given o-th output in the output-matrix.  <a href="#aa2ae62e6cab293f7c236e9bf273768f1">More...</a><br /></td></tr>
<tr class="separator:aa2ae62e6cab293f7c236e9bf273768f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4450a95cde865da632771935f1c57b3"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#ad4450a95cde865da632771935f1c57b3">isValid</a> (::data_handler::DataHandlerBase datahandler) override</td></tr>
<tr class="memdesc:ad4450a95cde865da632771935f1c57b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the training plan is valid for the give datahandler.  <a href="#ad4450a95cde865da632771935f1c57b3">More...</a><br /></td></tr>
<tr class="separator:ad4450a95cde865da632771935f1c57b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae989fb2bbddfd907494bed60516e03d"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#aae989fb2bbddfd907494bed60516e03d">numInputs</a> () override</td></tr>
<tr class="memdesc:aae989fb2bbddfd907494bed60516e03d"><td class="mdescLeft">&#160;</td><td class="mdescRight">numInputs returns the number of inputs used and defined in this training plan  <a href="#aae989fb2bbddfd907494bed60516e03d">More...</a><br /></td></tr>
<tr class="separator:aae989fb2bbddfd907494bed60516e03d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a762eb06ef18a50d3041ce79215855763"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a762eb06ef18a50d3041ce79215855763">numOutputs</a> () override</td></tr>
<tr class="memdesc:a762eb06ef18a50d3041ce79215855763"><td class="mdescLeft">&#160;</td><td class="mdescRight">numOutputs returns the number of outputs used in this training plan  <a href="#a762eb06ef18a50d3041ce79215855763">More...</a><br /></td></tr>
<tr class="separator:a762eb06ef18a50d3041ce79215855763"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3ec25fce42515bda59cd6e7154a8258"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#ad3ec25fce42515bda59cd6e7154a8258">numSamplesInSet</a> (uint64_t i) override</td></tr>
<tr class="memdesc:ad3ec25fce42515bda59cd6e7154a8258"><td class="mdescLeft">&#160;</td><td class="mdescRight">numSamplesInSet returns the number of elements (samples) in the training set  <a href="#ad3ec25fce42515bda59cd6e7154a8258">More...</a><br /></td></tr>
<tr class="separator:ad3ec25fce42515bda59cd6e7154a8258"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76d26675967b395d8924915b06fd44f9"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a76d26675967b395d8924915b06fd44f9">numSets</a> () override</td></tr>
<tr class="memdesc:a76d26675967b395d8924915b06fd44f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">numSets returns the number of training sets in the training plan  <a href="#a76d26675967b395d8924915b06fd44f9">More...</a><br /></td></tr>
<tr class="separator:a76d26675967b395d8924915b06fd44f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52bd33805e42f83fcad54b402b9d4ced"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a52bd33805e42f83fcad54b402b9d4ced">numSubspaces</a> (uint64_t i=0) override</td></tr>
<tr class="memdesc:a52bd33805e42f83fcad54b402b9d4ced"><td class="mdescLeft">&#160;</td><td class="mdescRight">numSubspaces returns the number of filtered subspaces available in the Training Plan to the i-th output in the output matrix  <a href="#a52bd33805e42f83fcad54b402b9d4ced">More...</a><br /></td></tr>
<tr class="separator:a52bd33805e42f83fcad54b402b9d4ced"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacc683995d55549d854c2d2420aef90c"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#aacc683995d55549d854c2d2420aef90c">numTestSamplesInSet</a> (uint64_t i) override</td></tr>
<tr class="memdesc:aacc683995d55549d854c2d2420aef90c"><td class="mdescLeft">&#160;</td><td class="mdescRight">numTestSamplesInSet returns the number of elements (samples) in the training set  <a href="#aacc683995d55549d854c2d2420aef90c">More...</a><br /></td></tr>
<tr class="separator:aacc683995d55549d854c2d2420aef90c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad37730c1466388aa53eaeccc3be698d8"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#ad37730c1466388aa53eaeccc3be698d8">numTrainingSamplesInSet</a> (uint64_t i) override</td></tr>
<tr class="memdesc:ad37730c1466388aa53eaeccc3be698d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">numTrainingSamplesInSet returns the number of elements (samples) in the training set  <a href="#ad37730c1466388aa53eaeccc3be698d8">More...</a><br /></td></tr>
<tr class="separator:ad37730c1466388aa53eaeccc3be698d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ed6ac9232f95cc9f4f7871fc0531bb2"><td class="memItemLeft" align="right" valign="top"><a id="a7ed6ac9232f95cc9f4f7871fc0531bb2"></a>
<a class="el" href="struct_simple_training_plan.xhtml">SimpleTrainingPlan</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a7ed6ac9232f95cc9f4f7871fc0531bb2">operator=</a> (<a class="el" href="struct_simple_training_plan.xhtml">SimpleTrainingPlan</a>)=default</td></tr>
<tr class="memdesc:a7ed6ac9232f95cc9f4f7871fc0531bb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy-Assignment. <br /></td></tr>
<tr class="separator:a7ed6ac9232f95cc9f4f7871fc0531bb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a233e0c56c9d1e12b9bc6503a37bc3d8c"><td class="memItemLeft" align="right" valign="top">virtual uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a233e0c56c9d1e12b9bc6503a37bc3d8c">output</a> (uint64_t i) override</td></tr>
<tr class="memdesc:a233e0c56c9d1e12b9bc6503a37bc3d8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">parameter returns the index of the i-th output in the output matrix  <a href="#a233e0c56c9d1e12b9bc6503a37bc3d8c">More...</a><br /></td></tr>
<tr class="separator:a233e0c56c9d1e12b9bc6503a37bc3d8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e3f96174684a90e8567342ca3ef171a"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a9e3f96174684a90e8567342ca3ef171a">setInputs</a> (::data_handler::DataHandlerBase datahandler, <a class="el" href="class_matrix.xhtml">Matrix</a> inputs)</td></tr>
<tr class="memdesc:a9e3f96174684a90e8567342ca3ef171a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the inputs fitting the training plan from the datahandler.  <a href="#a9e3f96174684a90e8567342ca3ef171a">More...</a><br /></td></tr>
<tr class="separator:a9e3f96174684a90e8567342ca3ef171a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a337403848bc684e14fc40d51f42813"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a1a337403848bc684e14fc40d51f42813">setOutputs</a> (::data_handler::DataHandlerBase datahandler, <a class="el" href="class_matrix.xhtml">Matrix</a> outputs)</td></tr>
<tr class="memdesc:a1a337403848bc684e14fc40d51f42813"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the outputs fitting the training plan from the datahandler.  <a href="#a1a337403848bc684e14fc40d51f42813">More...</a><br /></td></tr>
<tr class="separator:a1a337403848bc684e14fc40d51f42813"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2d903e7c07dc51458d25391ea5c3bf2"><td class="memItemLeft" align="right" valign="top"><a id="ab2d903e7c07dc51458d25391ea5c3bf2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#ab2d903e7c07dc51458d25391ea5c3bf2">SimpleTrainingPlan</a> ()=default</td></tr>
<tr class="memdesc:ab2d903e7c07dc51458d25391ea5c3bf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:ab2d903e7c07dc51458d25391ea5c3bf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7b5914712bf07337eb081fc3ac51321"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#aa7b5914712bf07337eb081fc3ac51321">SimpleTrainingPlan</a> (TrainingPlanVector plan, ParameterImportanceVector params, IndexVector output_map, SubspaceMatrixList subspace_matrix_list, uint64_t num_inputs, string mop_ident=handler::defaultMOPIdent)</td></tr>
<tr class="memdesc:aa7b5914712bf07337eb081fc3ac51321"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializing Constructor.  <a href="#aa7b5914712bf07337eb081fc3ac51321">More...</a><br /></td></tr>
<tr class="separator:aa7b5914712bf07337eb081fc3ac51321"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a148ac409e6a636e27a0a5babd033e340"><td class="memItemLeft" align="right" valign="top"><a id="a148ac409e6a636e27a0a5babd033e340"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_training_plan.xhtml#a148ac409e6a636e27a0a5babd033e340">SimpleTrainingPlan</a> (<a class="el" href="struct_simple_training_plan.xhtml">SimpleTrainingPlan</a>)=default</td></tr>
<tr class="memdesc:a148ac409e6a636e27a0a5babd033e340"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy-Contructor. <br /></td></tr>
<tr class="separator:a148ac409e6a636e27a0a5babd033e340"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a60d4ce785dc80f084f8aef0f6fc32ac9"><td class="memItemLeft" align="right" valign="top"><a id="a60d4ce785dc80f084f8aef0f6fc32ac9"></a>
ParameterImportanceVector&#160;</td><td class="memItemRight" valign="bottom"><b>m_input_importance</b></td></tr>
<tr class="separator:a60d4ce785dc80f084f8aef0f6fc32ac9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29cdeff4c0854e3f29a8e933974cda97"><td class="memItemLeft" align="right" valign="top"><a id="a29cdeff4c0854e3f29a8e933974cda97"></a>
string&#160;</td><td class="memItemRight" valign="bottom"><b>m_mop_ident</b></td></tr>
<tr class="separator:a29cdeff4c0854e3f29a8e933974cda97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9b71b61a67b18665895e943bdc3a172"><td class="memItemLeft" align="right" valign="top"><a id="ab9b71b61a67b18665895e943bdc3a172"></a>
uint64_t&#160;</td><td class="memItemRight" valign="bottom"><b>m_num_inputs</b></td></tr>
<tr class="separator:ab9b71b61a67b18665895e943bdc3a172"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa603e63bcc57491f9fe42cb2af9fba3d"><td class="memItemLeft" align="right" valign="top"><a id="aa603e63bcc57491f9fe42cb2af9fba3d"></a>
IndexVector&#160;</td><td class="memItemRight" valign="bottom"><b>m_output_mapping</b></td></tr>
<tr class="separator:aa603e63bcc57491f9fe42cb2af9fba3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af68dafed0a8bfe0617e1e68e1cecd647"><td class="memItemLeft" align="right" valign="top"><a id="af68dafed0a8bfe0617e1e68e1cecd647"></a>
SubspaceMatrixList&#160;</td><td class="memItemRight" valign="bottom"><b>m_subspace_matrix_list</b></td></tr>
<tr class="separator:af68dafed0a8bfe0617e1e68e1cecd647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3768372cdbae9882fdff823579f8ba73"><td class="memItemLeft" align="right" valign="top"><a id="a3768372cdbae9882fdff823579f8ba73"></a>
TrainingPlanVector&#160;</td><td class="memItemRight" valign="bottom"><b>m_training</b></td></tr>
<tr class="separator:a3768372cdbae9882fdff823579f8ba73"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>TrainingPlan assigns a in a set of sample each sample a status on how the sample is to be treated during the training of a model A model is trained for a set of outputs. </p>
<ul>
<li>if the set is a singleton (one element), the trained model is a scalar one</li>
<li>if the set has more than one element the output dimension should be consistent for all samples. if it is not consistent, we are dealing with incomplete samples. Either the model itself has then to decide how to handle this or this should be handled before the competition is defined i.e. by the (Scalar)<a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> The training plan is <em>not</em> concerned with failed/incomplete inputs. It should always handle a consistent input/output pair </li>
</ul>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa7b5914712bf07337eb081fc3ac51321"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7b5914712bf07337eb081fc3ac51321">&#9670;&nbsp;</a></span>SimpleTrainingPlan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_simple_training_plan.xhtml">SimpleTrainingPlan</a> </td>
          <td>(</td>
          <td class="paramtype">TrainingPlanVector&#160;</td>
          <td class="paramname"><em>plan</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ParameterImportanceVector&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IndexVector&#160;</td>
          <td class="paramname"><em>output_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SubspaceMatrixList&#160;</td>
          <td class="paramname"><em>subspace_matrix_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>num_inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>mop_ident</em> = <code>handler::defaultMOPIdent</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializing Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">plan</td><td>A collection of lists that describe for each sample if its used for training, testing or is ignored Multiple lists are used for instance in the Leave-One-Out or cross-validation scenario </td></tr>
    <tr><td class="paramname">params</td><td>Defines for each input parameter its importance (if it is ignored, mandatory or optional) </td></tr>
    <tr><td class="paramname">output_map</td><td>Defines how the vectors in the output matrix are mapped to the actual output in the training </td></tr>
    <tr><td class="paramname">subspace_matrix_list</td><td>Defines a list of possible input subspaces for each output (after output mapping). This may be used by model for increased approximation quality. </td></tr>
    <tr><td class="paramname">num_inputs</td><td>The number of inputs for the training </td></tr>
    <tr><td class="paramname">mop_dent</td><td>The mops ident </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="afc52921c8d133bb463c1dfa5a8b7ef22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc52921c8d133bb463c1dfa5a8b7ef22">&#9670;&nbsp;</a></span>getInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="class_matrix.xhtml">Matrix</a> getInputs </td>
          <td>(</td>
          <td class="paramtype">::data_handler::DataHandlerBase&#160;</td>
          <td class="paramname"><em>datahandler</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the inputs fitting the training plan from the datahandler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">datahandler</td><td>The datahandler to get the data from </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The (scalar) input data </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a6e262334d7e27b9f05121454531fa5b6">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a255c5ecec66209c6f30d3d5f15177859"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a255c5ecec66209c6f30d3d5f15177859">&#9670;&nbsp;</a></span>getMOPIdent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual string getMOPIdent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the <a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> ident the TrainingPlan is created for. </p>
<dl class="section return"><dt>Returns</dt><dd>The ident for the <a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a5df8016765ccb017b2ff5778e3e81558">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a11f9260c1f6f8527fb75fa5950f52dfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11f9260c1f6f8527fb75fa5950f52dfa">&#9670;&nbsp;</a></span>getOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="class_matrix.xhtml">Matrix</a> getOutputs </td>
          <td>(</td>
          <td class="paramtype">::data_handler::DataHandlerBase&#160;</td>
          <td class="paramname"><em>datahandler</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the outputs fitting the training plan from the datahandler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">datahandler</td><td>The datahandler to get the data from </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The (scalar) output data </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a8de106670ace9e349ee9c149741b8e44">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a2b8e899313418568acbb9ed5b2ce6ade"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b8e899313418568acbb9ed5b2ce6ade">&#9670;&nbsp;</a></span>getSampleUsageInSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="group__training__plan.xhtml#gafce529ac7282fd94c419e8bea8492268">SampleUsage</a> getSampleUsageInSet </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>getSampleUsage accessor of the j-th sample in the i-th training set </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>Index of the training set </td></tr>
    <tr><td class="paramname">j</td><td>Index of the sample in training set i </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The sample at the given indices </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a1c4be324fc1e91c3039a49631f6e2cc9">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a6c419ba361cd6d96b71e12bf657d940b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c419ba361cd6d96b71e12bf657d940b">&#9670;&nbsp;</a></span>getSampleUsageInSetRef()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="group__training__plan.xhtml#gafce529ac7282fd94c419e8bea8492268">SampleUsage</a> getSampleUsageInSetRef </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>getSampleUsageRef non- accessor of the j-th sample in the i-th training set </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>Index of the training set </td></tr>
    <tr><td class="paramname">j</td><td>Index of the sample in training set i </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The sample at the given indices </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#af67b70402c8a7610ce4a99c252f53681">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a7afbd5f5b1743bc2423ca855fe2603ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7afbd5f5b1743bc2423ca855fe2603ab">&#9670;&nbsp;</a></span>inputImportance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="group__common.xhtml#gad5ca470fd07552bf1da82219827c4ec0">ParameterImportance</a> inputImportance </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>parameter returns the ParameterImportance for the i-th parameter </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>The index of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The ParameterUsage of parameter i </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#ab9acd4287a8208fa9a32867cafaf8e46">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="aa2ae62e6cab293f7c236e9bf273768f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2ae62e6cab293f7c236e9bf273768f1">&#9670;&nbsp;</a></span>inputImportanceInSubspace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="group__common.xhtml#gad5ca470fd07552bf1da82219827c4ec0">ParameterImportance</a> inputImportanceInSubspace </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>o</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>inputImportanceInSubspace returns true if the input j is in the subspace i for the given o-th output in the output-matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>Index of the subspace </td></tr>
    <tr><td class="paramname">j</td><td>Index of the input parameter </td></tr>
    <tr><td class="paramname">o</td><td>The o-th output the input is important to </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ParameterImportance of input j in subspace i for the given output </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a60399ab71c2fcf3a21c9a613997c4822">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="ad4450a95cde865da632771935f1c57b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4450a95cde865da632771935f1c57b3">&#9670;&nbsp;</a></span>isValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool isValid </td>
          <td>(</td>
          <td class="paramtype">::data_handler::DataHandlerBase&#160;</td>
          <td class="paramname"><em>datahandler</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the training plan is valid for the give datahandler. </p>
<dl class="section return"><dt>Returns</dt><dd>true iff the training plan is valid </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#aed20b1ee85452a87a9e10f39077b94a3">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="aae989fb2bbddfd907494bed60516e03d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae989fb2bbddfd907494bed60516e03d">&#9670;&nbsp;</a></span>numInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t numInputs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>numInputs returns the number of inputs used and defined in this training plan </p>
<dl class="section return"><dt>Returns</dt><dd>The number of parameters the training plan is defined on </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a5c973e14b896504b0522fc953bb3b2dc">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a762eb06ef18a50d3041ce79215855763"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a762eb06ef18a50d3041ce79215855763">&#9670;&nbsp;</a></span>numOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t numOutputs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>numOutputs returns the number of outputs used in this training plan </p>
<dl class="section return"><dt>Returns</dt><dd>The number of outputs the training plan is defined on </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#aad28bd2bb818cf6c433e22e22768086c">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="ad3ec25fce42515bda59cd6e7154a8258"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3ec25fce42515bda59cd6e7154a8258">&#9670;&nbsp;</a></span>numSamplesInSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t numSamplesInSet </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>numSamplesInSet returns the number of elements (samples) in the training set </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>The index of the training set </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of elements in set i </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a0ef7e16a9a52c22ecb59f6148accae62">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a76d26675967b395d8924915b06fd44f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76d26675967b395d8924915b06fd44f9">&#9670;&nbsp;</a></span>numSets()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t numSets </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>numSets returns the number of training sets in the training plan </p>
<dl class="section return"><dt>Returns</dt><dd>The number of training sets </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#ad536b0ba37fa27e95a51c0aa3afc96da">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a52bd33805e42f83fcad54b402b9d4ced"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52bd33805e42f83fcad54b402b9d4ced">&#9670;&nbsp;</a></span>numSubspaces()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t numSubspaces </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>numSubspaces returns the number of filtered subspaces available in the Training Plan to the i-th output in the output matrix </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>The index of the output </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of Subspaces </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a44682836a8190246e4db84f997a003cc">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="aacc683995d55549d854c2d2420aef90c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacc683995d55549d854c2d2420aef90c">&#9670;&nbsp;</a></span>numTestSamplesInSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t numTestSamplesInSet </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>numTestSamplesInSet returns the number of elements (samples) in the training set </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>The index of the training set </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of elements in set i </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a88109fe981a2b192eb8e09a87ae563ed">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="ad37730c1466388aa53eaeccc3be698d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad37730c1466388aa53eaeccc3be698d8">&#9670;&nbsp;</a></span>numTrainingSamplesInSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t numTrainingSamplesInSet </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>numTrainingSamplesInSet returns the number of elements (samples) in the training set </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>The index of the training set </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of elements in set i </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a13261fec66c7bbac8c07123619300275">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a233e0c56c9d1e12b9bc6503a37bc3d8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a233e0c56c9d1e12b9bc6503a37bc3d8c">&#9670;&nbsp;</a></span>output()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual uint64_t output </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>parameter returns the index of the i-th output in the output matrix </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>The index of the parameter </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The index of output i in the output matrix </dd></dl>

<p>Implements <a class="el" href="struct_training_plan_base.xhtml#a3e0dff9e7373d9800e8abe6a61af4c16">TrainingPlanBase</a>.</p>

</div>
</div>
<a id="a9e3f96174684a90e8567342ca3ef171a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e3f96174684a90e8567342ca3ef171a">&#9670;&nbsp;</a></span>setInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual setInputs </td>
          <td>(</td>
          <td class="paramtype">::data_handler::DataHandlerBase&#160;</td>
          <td class="paramname"><em>datahandler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td>
          <td class="paramname"><em>inputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts the inputs fitting the training plan from the datahandler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">datahandler</td><td>The datahandler to set the data in </td></tr>
    <tr><td class="paramname">inputs</td><td>The data to set </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1a337403848bc684e14fc40d51f42813"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a337403848bc684e14fc40d51f42813">&#9670;&nbsp;</a></span>setOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual setOutputs </td>
          <td>(</td>
          <td class="paramtype">::data_handler::DataHandlerBase&#160;</td>
          <td class="paramname"><em>datahandler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td>
          <td class="paramname"><em>outputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts the outputs fitting the training plan from the datahandler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">datahandler</td><td>The datahandler to set the data in </td></tr>
    <tr><td class="paramname">outputs</td><td>The data to set </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
