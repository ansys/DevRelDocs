<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): SerializableTraits&lt; T &gt; Struct Template Reference</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('struct_serializable_traits.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="struct_serializable_traits-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SerializableTraits&lt; T &gt; Struct Template Reference<div class="ingroups"><a class="el" href="group__json.xhtml">MOP json</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>This header provides a unified way to handle the Json serialization of parameters of different types. Each parameter is stored in an expressive way defining the Type, Range, Value and Multiplicity (Signlton/List) of the serialize object. This is achieved by having a traits class being defined for the parameters Type. Some standard definitions for ints, uints, numbers, strings are available but for serializing custom enums you would typically define this yourself. When de-/serializing a parameter of this type you the would only call the load/save functions depending on single/container parameters.  
 <a href="struct_serializable_traits.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aa1bfb2e6cce804883a900653fdf640db"><td class="memItemLeft" align="right" valign="top"><a id="aa1bfb2e6cce804883a900653fdf640db"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_serializable_traits.xhtml#aa1bfb2e6cce804883a900653fdf640db">CreateRange</a> = <a class="el" href="struct_create_range_none.xhtml">CreateRangeNone</a></td></tr>
<tr class="memdesc:aa1bfb2e6cce804883a900653fdf640db"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Range Type to work with. <br /></td></tr>
<tr class="separator:aa1bfb2e6cce804883a900653fdf640db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab097986696f004853b8989b257f6bcdf"><td class="memItemLeft" align="right" valign="top"><a id="ab097986696f004853b8989b257f6bcdf"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_serializable_traits.xhtml#ab097986696f004853b8989b257f6bcdf">SerializedType</a> = string</td></tr>
<tr class="memdesc:ab097986696f004853b8989b257f6bcdf"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type to serialize into. <br /></td></tr>
<tr class="separator:ab097986696f004853b8989b257f6bcdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19462713b2aab2dae2c87c15f262c1df"><td class="memItemLeft" align="right" valign="top"><a id="a19462713b2aab2dae2c87c15f262c1df"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_serializable_traits.xhtml#a19462713b2aab2dae2c87c15f262c1df">Type</a> = T</td></tr>
<tr class="memdesc:a19462713b2aab2dae2c87c15f262c1df"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type to serialize. <br /></td></tr>
<tr class="separator:a19462713b2aab2dae2c87c15f262c1df"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a722bfc2616239aa9f198a76b73b69743"><td class="memItemLeft" align="right" valign="top"><a id="a722bfc2616239aa9f198a76b73b69743"></a>
static <a class="el" href="struct_serializable_traits.xhtml#ab097986696f004853b8989b257f6bcdf">SerializedType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_serializable_traits.xhtml#a722bfc2616239aa9f198a76b73b69743">access</a> (<a class="el" href="class_json_value.xhtml">JsonValue</a> v)</td></tr>
<tr class="memdesc:a722bfc2616239aa9f198a76b73b69743"><td class="mdescLeft">&#160;</td><td class="mdescRight">How to access the serializes type in the JsonObject. <br /></td></tr>
<tr class="separator:a722bfc2616239aa9f198a76b73b69743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d26534c31e8c5b1b9c9684c59c1a524"><td class="memItemLeft" align="right" valign="top"><a id="a1d26534c31e8c5b1b9c9684c59c1a524"></a>
static <a class="el" href="struct_serializable_traits.xhtml#a19462713b2aab2dae2c87c15f262c1df">Type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_serializable_traits.xhtml#a1d26534c31e8c5b1b9c9684c59c1a524">convertFrom</a> (<a class="el" href="struct_serializable_traits.xhtml#ab097986696f004853b8989b257f6bcdf">SerializedType</a> s)</td></tr>
<tr class="memdesc:a1d26534c31e8c5b1b9c9684c59c1a524"><td class="mdescLeft">&#160;</td><td class="mdescRight">How to turn the SerializedType into the Type. <br /></td></tr>
<tr class="separator:a1d26534c31e8c5b1b9c9684c59c1a524"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add861d4bddc999ecd369aa4f9709973a"><td class="memItemLeft" align="right" valign="top"><a id="add861d4bddc999ecd369aa4f9709973a"></a>
static <a class="el" href="struct_serializable_traits.xhtml#ab097986696f004853b8989b257f6bcdf">SerializedType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_serializable_traits.xhtml#add861d4bddc999ecd369aa4f9709973a">convertTo</a> (<a class="el" href="struct_serializable_traits.xhtml#a19462713b2aab2dae2c87c15f262c1df">Type</a> t)</td></tr>
<tr class="memdesc:add861d4bddc999ecd369aa4f9709973a"><td class="mdescLeft">&#160;</td><td class="mdescRight">How to turn the Type into the SerializedType. <br /></td></tr>
<tr class="separator:add861d4bddc999ecd369aa4f9709973a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a707b939a71a610e3f3dcb789ccf014b8"><td class="memItemLeft" align="right" valign="top"><a id="a707b939a71a610e3f3dcb789ccf014b8"></a>
static constexpr char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_serializable_traits.xhtml#a707b939a71a610e3f3dcb789ccf014b8">name</a> ()</td></tr>
<tr class="memdesc:a707b939a71a610e3f3dcb789ccf014b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">The name of the type in the serialization. <br /></td></tr>
<tr class="separator:a707b939a71a610e3f3dcb789ccf014b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
struct SerializableTraits&lt; T &gt;</h3>

<p>This header provides a unified way to handle the Json serialization of parameters of different types. Each parameter is stored in an expressive way defining the Type, Range, Value and Multiplicity (Signlton/List) of the serialize object. This is achieved by having a traits class being defined for the parameters Type. Some standard definitions for ints, uints, numbers, strings are available but for serializing custom enums you would typically define this yourself. When de-/serializing a parameter of this type you the would only call the load/save functions depending on single/container parameters. </p>
<p>Traits class to give all necessary information on the type You want to serialize. See the json_parameter.ipp file for standard definitions </p><dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>The type to serialize </td></tr>
  </table>
  </dd>
</dl>
</div></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
