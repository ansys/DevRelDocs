<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): CreateCustomModelInterface Struct Reference</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('struct_create_custom_model_interface.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="struct_create_custom_model_interface-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">CreateCustomModelInterface Struct Reference<div class="ingroups"><a class="el" href="group__models.xhtml">MOP models</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>This class is exported as an director class through SWIG allowing the python context to define derivations from it. A user is then able to implement her own classes satisfying this interface and then being used with the <a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> framework.  
 <a href="struct_create_custom_model_interface.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a31de2088e35819f6e03dc305bcc22294"><td class="memItemLeft" align="right" valign="top"><a id="a31de2088e35819f6e03dc305bcc22294"></a>
virtual string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#a31de2088e35819f6e03dc305bcc22294">__class_name_internal__</a> ()</td></tr>
<tr class="memdesc:a31de2088e35819f6e03dc305bcc22294"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal helper function to use with de-/serialization. <br /></td></tr>
<tr class="separator:a31de2088e35819f6e03dc305bcc22294"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c21bb60a1ae5e9c3e6ee1c7cfb6c86d"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#a8c21bb60a1ae5e9c3e6ee1c7cfb6c86d">compute</a> (::data_handler::DataHandlerBase datahandler, <a class="el" href="struct_training_plan_base.xhtml">TrainingPlanBase</a> training_plan, quality_measure::QualityMeasureBase quality_measure, <a class="el" href="class_custom_model.xhtml">CustomModel</a> model)</td></tr>
<tr class="memdesc:a8c21bb60a1ae5e9c3e6ee1c7cfb6c86d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trains the model in the goal language and returns a handle to the newly trained model that is used to access the model in the PluginModelManager.  <a href="#a8c21bb60a1ae5e9c3e6ee1c7cfb6c86d">More...</a><br /></td></tr>
<tr class="separator:a8c21bb60a1ae5e9c3e6ee1c7cfb6c86d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d5202c0fb80141117dfbfbb41a46a77"><td class="memItemLeft" align="right" valign="top">virtual string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#a2d5202c0fb80141117dfbfbb41a46a77">displayName</a> ()</td></tr>
<tr class="memdesc:a2d5202c0fb80141117dfbfbb41a46a77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name to be displayen in all GUI situations Fallback is class name.  <a href="#a2d5202c0fb80141117dfbfbb41a46a77">More...</a><br /></td></tr>
<tr class="separator:a2d5202c0fb80141117dfbfbb41a46a77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1111f254a4d5749fb9e1d62a0bf976f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_property_list.xhtml">PropertyList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#a1111f254a4d5749fb9e1d62a0bf976f0">getProperties</a> ()</td></tr>
<tr class="memdesc:a1111f254a4d5749fb9e1d62a0bf976f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function makes the properties set on the C++ <a class="el" href="class_custom_model.xhtml">CustomModel</a> class accessible to the Python context.  <a href="#a1111f254a4d5749fb9e1d62a0bf976f0">More...</a><br /></td></tr>
<tr class="separator:a1111f254a4d5749fb9e1d62a0bf976f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1637eb7dcd73ee7adfe215c49b330f44"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#a1637eb7dcd73ee7adfe215c49b330f44">isValid</a> (::data_handler::DataHandlerBase datahandler, <a class="el" href="struct_training_plan_base.xhtml">TrainingPlanBase</a> training_plan)</td></tr>
<tr class="memdesc:a1637eb7dcd73ee7adfe215c49b330f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is used to check whether the model may be trained or not A python CreateModel... class shall implement this function to let the <a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> check if the datahandler and training plan are suitable to actually train the model.  <a href="#a1637eb7dcd73ee7adfe215c49b330f44">More...</a><br /></td></tr>
<tr class="separator:a1637eb7dcd73ee7adfe215c49b330f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a4c33e8a236524ef9d522558e547b27"><td class="memItemLeft" align="right" valign="top">virtual string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#a5a4c33e8a236524ef9d522558e547b27">licenseLevel</a> ()</td></tr>
<tr class="memdesc:a5a4c33e8a236524ef9d522558e547b27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a user definable license level for this <a class="el" href="class_custom_model.xhtml">CustomModel</a> "Pro", "Premium" (default), "Enterprise".  <a href="#a5a4c33e8a236524ef9d522558e547b27">More...</a><br /></td></tr>
<tr class="separator:a5a4c33e8a236524ef9d522558e547b27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64a299a9067f1d5c4d8eeb74b39e9f94"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#a64a299a9067f1d5c4d8eeb74b39e9f94">loadJson</a> (<a class="el" href="class_json_value.xhtml">JsonValue</a> root)</td></tr>
<tr class="memdesc:a64a299a9067f1d5c4d8eeb74b39e9f94"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is used to read the CreateCustomModels configuration state from the the given string. How this is done needs to be implemented in Python.  <a href="#a64a299a9067f1d5c4d8eeb74b39e9f94">More...</a><br /></td></tr>
<tr class="separator:a64a299a9067f1d5c4d8eeb74b39e9f94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8451e71159211ca3e07325fd1f0eeb8"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_custom_model_interface.xhtml#ab8451e71159211ca3e07325fd1f0eeb8">saveJson</a> (<a class="el" href="class_json_value.xhtml">JsonValue</a> root)</td></tr>
<tr class="memdesc:ab8451e71159211ca3e07325fd1f0eeb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function returns the state as a Json from the Python of the <a class="el" href="struct_custom_model_interface.xhtml" title="This class provides an API for the CustomModels to be implemented in Python. It is exported as an dir...">CustomModelInterface</a> to be included in the <a class="el" href="class_custom_model.xhtml">CustomModel</a>. It needs to be overloaded in Python.  <a href="#ab8451e71159211ca3e07325fd1f0eeb8">More...</a><br /></td></tr>
<tr class="separator:ab8451e71159211ca3e07325fd1f0eeb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class is exported as an director class through SWIG allowing the python context to define derivations from it. A user is then able to implement her own classes satisfying this interface and then being used with the <a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> framework. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a8c21bb60a1ae5e9c3e6ee1c7cfb6c86d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c21bb60a1ae5e9c3e6ee1c7cfb6c86d">&#9670;&nbsp;</a></span>compute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool compute </td>
          <td>(</td>
          <td class="paramtype">::data_handler::DataHandlerBase&#160;</td>
          <td class="paramname"><em>datahandler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_training_plan_base.xhtml">TrainingPlanBase</a>&#160;</td>
          <td class="paramname"><em>training_plan</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">quality_measure::QualityMeasureBase&#160;</td>
          <td class="paramname"><em>quality_measure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_custom_model.xhtml">CustomModel</a>&#160;</td>
          <td class="paramname"><em>model</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Trains the model in the goal language and returns a handle to the newly trained model that is used to access the model in the PluginModelManager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">datahandler</td><td>The data to train the model with </td></tr>
    <tr><td class="paramname">training_plan</td><td>The training plan to use when training the model </td></tr>
    <tr><td class="paramname">quality_measure</td><td>The quality measure to evaluate the models prognosis quality with </td></tr>
    <tr><td class="paramname">model</td><td>The custom model that handles/stores the newly created custom model </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true is the <a class="el" href="class_custom_model.xhtml">CustomModel</a> could be created </dd></dl>

</div>
</div>
<a id="a2d5202c0fb80141117dfbfbb41a46a77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d5202c0fb80141117dfbfbb41a46a77">&#9670;&nbsp;</a></span>displayName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual string displayName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the name to be displayen in all GUI situations Fallback is class name. </p>
<dl class="section return"><dt>Returns</dt><dd>the display name </dd></dl>

</div>
</div>
<a id="a1111f254a4d5749fb9e1d62a0bf976f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1111f254a4d5749fb9e1d62a0bf976f0">&#9670;&nbsp;</a></span>getProperties()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_property_list.xhtml">PropertyList</a> getProperties </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function makes the properties set on the C++ <a class="el" href="class_custom_model.xhtml">CustomModel</a> class accessible to the Python context. </p>
<dl class="section return"><dt>Returns</dt><dd>A property list </dd></dl>

</div>
</div>
<a id="a1637eb7dcd73ee7adfe215c49b330f44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1637eb7dcd73ee7adfe215c49b330f44">&#9670;&nbsp;</a></span>isValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool isValid </td>
          <td>(</td>
          <td class="paramtype">::data_handler::DataHandlerBase&#160;</td>
          <td class="paramname"><em>datahandler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_training_plan_base.xhtml">TrainingPlanBase</a>&#160;</td>
          <td class="paramname"><em>training_plan</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function is used to check whether the model may be trained or not A python CreateModel... class shall implement this function to let the <a class="el" href="class_m_o_p.xhtml" title="a group of random fields belonging together (either a single random field, or multiple cross-correlat...">MOP</a> check if the datahandler and training plan are suitable to actually train the model. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">datahandler</td><td>The datahandler containing the data for the training </td></tr>
    <tr><td class="paramname">training_plan</td><td>The training_plan describing how to train the model </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true iff the models training is likely to succeed </dd></dl>

</div>
</div>
<a id="a5a4c33e8a236524ef9d522558e547b27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a4c33e8a236524ef9d522558e547b27">&#9670;&nbsp;</a></span>licenseLevel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual string licenseLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a user definable license level for this <a class="el" href="class_custom_model.xhtml">CustomModel</a> "Pro", "Premium" (default), "Enterprise". </p>
<dl class="section return"><dt>Returns</dt><dd>one of these values ("Premium" by default) </dd></dl>

</div>
</div>
<a id="a64a299a9067f1d5c4d8eeb74b39e9f94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64a299a9067f1d5c4d8eeb74b39e9f94">&#9670;&nbsp;</a></span>loadJson()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool loadJson </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_json_value.xhtml">JsonValue</a>&#160;</td>
          <td class="paramname"><em>root</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function is used to read the CreateCustomModels configuration state from the the given string. How this is done needs to be implemented in Python. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">state</td><td>The Json string as produced by the saveJson function </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True iff loading the state was successful </dd></dl>

</div>
</div>
<a id="ab8451e71159211ca3e07325fd1f0eeb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8451e71159211ca3e07325fd1f0eeb8">&#9670;&nbsp;</a></span>saveJson()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool saveJson </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_json_value.xhtml">JsonValue</a>&#160;</td>
          <td class="paramname"><em>root</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function returns the state as a Json from the Python of the <a class="el" href="struct_custom_model_interface.xhtml" title="This class provides an API for the CustomModels to be implemented in Python. It is exported as an dir...">CustomModelInterface</a> to be included in the <a class="el" href="class_custom_model.xhtml">CustomModel</a>. It needs to be overloaded in Python. </p>
<dl class="section return"><dt>Returns</dt><dd>The serialization of the python instance </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
