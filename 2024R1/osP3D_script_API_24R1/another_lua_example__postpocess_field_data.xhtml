<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): A simple example to post process field data computing the 3-vec norm</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('another_lua_example__postpocess_field_data.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">A simple example to post process field data computing the 3-vec norm </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><div class="fragment"><div class="line">-- -------------</div><div class="line">-- User input --</div><div class="line">-- -------------</div><div class="line">-- set base path to input data</div><div class="line">bpath = &quot;examples/lsdyna/metal_forming__eroded_elements/sampling&quot;</div><div class="line">-- set project path and name</div><div class="line">ppath = &quot;normdisp.sdb&quot;</div><div class="line">-- OK to overwrite? (If false and ppath exists, an error will be thrown)</div><div class="line">overwrite = true</div><div class="line"></div><div class="line">-- Load reference mesh </div><div class="line">mesh = sos.importMesh_LSDynaK( bpath .. &quot;/ref-mesh.k&quot; );</div><div class="line">sos.setReferenceMesh(sos.database(), mesh);</div><div class="line">mesh = nil </div><div class="line">print( &quot;Finished: Set new reference mesh&quot;);</div><div class="line"></div><div class="line">-- execute: Import Field Designs</div><div class="line">sos.referenceDesign():setBasePath( bpath .. &quot;/Design0001&quot; );</div><div class="line">sos.referenceDesign():addFile_LSPrePost( sos.database(), bpath .. &quot;/Design0001/NW/displacements.k&quot;);</div><div class="line">importer = sos.ImportDesigns(sos.referenceDesign());</div><div class="line">importer:scanDesignRanges();</div><div class="line">importer:filterDesignsByOptiSLang( bpath .. &quot;/optislang_bin_file.bin&quot; );</div><div class="line">importer:import(sos.database())</div><div class="line">print( &quot;Finished: Import field designs&quot;);</div><div class="line"></div><div class="line"></div><div class="line">-- deactivate incomplete designs (keep data sets with eroded elements)</div><div class="line">sos.database():deactivateIncompleteDesigns();</div><div class="line"></div><div class="line">print(&quot;Compute displacement norm&quot;)</div><div class="line">-- get node data</div><div class="line">all_node_objects = sos.database():data():filterType(sos.NODE_DATA)</div><div class="line">-- get number of designs</div><div class="line">n_designs = all_node_objects:filterQuantity(&quot;NODAL_DISPLACEMENT[1]&quot;):samples():size()</div><div class="line">-- get design IDs</div><div class="line">designs = all_node_objects:filterQuantity(&quot;NODAL_DISPLACEMENT[1]&quot;):samples():designs()</div><div class="line"></div><div class="line">-- loop over designs</div><div class="line">for ni=0,n_designs-1 do</div><div class="line"></div><div class="line">    -- designs[ni] gives the design ID for the running index</div><div class="line">    print(&quot;processing design #&quot; .. designs[ni])</div><div class="line"></div><div class="line">    -- get nodal displacement components for each design</div><div class="line">    -- find(designs[ni]...) avoids sorting problems</div><div class="line">    cmp1 = sos.database():data():find(designs[ni], &quot;NODAL_DISPLACEMENT[1]&quot;):getData()</div><div class="line">    cmp2 = sos.database():data():find(designs[ni], &quot;NODAL_DISPLACEMENT[2]&quot;):getData()</div><div class="line">    cmp3 = sos.database():data():find(designs[ni], &quot;NODAL_DISPLACEMENT[3]&quot;):getData()</div><div class="line"></div><div class="line">    -- compute displacement norm</div><div class="line">    -- operator :CW() extracts elements from tmath vector for element-wise operations</div><div class="line">    norm = (cmp1:CW():Square() + cmp2:CW():Square() + cmp3:CW():Square()):CW():Sqrt()</div><div class="line"></div><div class="line">    -- get indicators of missing data (eroded elements) for each component for each design</div><div class="line">    miss1 = sos.database():data():find(designs[ni], &quot;NODAL_DISPLACEMENT[1]&quot;):getMissingData():getData()</div><div class="line">    miss2 = sos.database():data():find(designs[ni], &quot;NODAL_DISPLACEMENT[2]&quot;):getMissingData():getData()</div><div class="line">    miss3 = sos.database():data():find(designs[ni], &quot;NODAL_DISPLACEMENT[3]&quot;):getMissingData():getData()</div><div class="line"></div><div class="line">    -- union of missing data indicators of all components</div><div class="line">    missing_obj = (miss1 + miss2 + miss3):CW():Min(1)</div><div class="line"></div><div class="line">    -- create node data object of displacement norm with missing data indicator</div><div class="line">    norm_obj = sos.createNodeDataObject( sos.database(), norm, missing_obj, true)</div><div class="line"></div><div class="line">    -- store displacement norm as new quantity for each design</div><div class="line">    sos.database():data():insert( sos.DataObjectKey(designs[ni], &quot;NODAL_DISPLACEMENT_NORM&quot;), norm_obj)</div><div class="line"></div><div class="line">    end</div><div class="line"></div><div class="line">-- execute: Save database file as</div><div class="line">settings = sos.SaveDataBaseSettings( ppath );</div><div class="line">settings.replace_files = overwrite;</div><div class="line">sos.saveDataBase(sos.database(), settings);</div><div class="line">print( &quot;Finished: Save database file&quot;);</div></div><!-- fragment --> </div></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
