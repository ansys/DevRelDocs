<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): Module tmath</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('md_doc_swig_doc_src_tmath.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Module tmath </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h2>Overview</h2>
<p>The module <em>tmath</em> provides data types and algorithms for basic linear algebra. It was attempted to provide a natural access to the mathematical grammar, thus, merging the programming idioms of Lua, C++ and arithmetic languages like MATLAB (TM).</p>
<p>The package is, however, embedded into the language Lua and is, thus, dependent on its logic and syntax. Therefore, sometimes the syntax appears uncommon. For example, any object has a certain datatype. Functions can only be applied to objects of specific datatypes. The same is true for operators and methods which are tied to their lefthand argument. For example, the "*" operator is attached to its left hand neighbour. In programming languages, the terms "A*B" and "A:operator*(B)" are equivalent. Since we can define operators for our own datatypes, but not for Lua's internal "number" type, we can provide the operator "matrix*number", but not "number*matrix".</p>
<h2>Dense linear algebra</h2>
<h3>Creating matrices</h3>
<p>There are several ways to create matrices. The simpliest way is to call its constructor</p>
<blockquote class="doxtable">
<p>A = tmath.Matrix(3,4) <span class="comment">-- create 3x4 matrix</span><br />
 B = tmath.Matrix(3) <span class="comment">-- create 3x1 vector (of type <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a>)</span><br />
 C = tmath.Vector(3) <span class="comment">-- create 3x1 vector (of type <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a>)</span><br />
 </p>
</blockquote>
<p>Calling the constructor will only create and return an object of type "Matrix" of the specified size, but without initializing the values. Although the uninitialized values are around zero on most computers, initial values must be assigned by a separate command, e.g. </p><blockquote class="doxtable">
<p>A = tmath.Matrix (3 ,4)<br />
 value = 2.1; value1 = 1<br />
 value2 = 2<br />
 A:SetZero() <span class="comment">-- zero matrix</span><br />
 A:SetOnes() <span class="comment">-- all elements are ”1”</span><br />
 A:SetConstant(value) <span class="comment">-- all elements are =”value”</span><br />
 A:SetIdentity() <span class="comment">-- (rectangular) identity matrix</span><br />
 A:SetLinearCols(value1, value2) <span class="comment">-- linear columns from value1 to value2</span><br />
 A:SetLinearRows(value1, value2) <span class="comment">-- linear rows</span><br />
 A:SetRandom() <span class="comment">-- random numbers ( -1 .. 1 )</span><br />
 </p>
</blockquote>
<p>To simplify creation and initialization convenience functions are defined such as </p><blockquote class="doxtable">
<p>A = tmath.Identity(3) <span class="comment">-- 3x3 identity matrix</span><br />
 A = tmath.ZeroMatrix(3, 4)<br />
 B = tmath.ZeroVector(4)<br />
 </p>
</blockquote>
<p>It is also possible to read the contents of matrices from input </p><blockquote class="doxtable">
<p>A = tmath.Matrix(2, 3)<br />
 tmath.Read(A, 1, 2, 3, 4, 5, 6)<br />
 <span class="comment">-- even better ( using 2−dimensional Lua tables as input )</span><br />
 B = tmath.Matrix( {{1 ,2 ,3}, {4 ,5 ,6}} );<br />
 </p>
</blockquote>
<p>When defining a matrix by Lua tables, it is possible to combine existing matrix objects. These objects will be interpreted as row vectors: </p><blockquote class="doxtable">
<p>A = tmath.ZeroVector (4)<br />
 B = tmath.Identity (2)<br />
 C = tmath.Matrix ({ A, <span class="comment">-- 0 0 0 0</span><br />
 {5,6,7,8}, <span class="comment">-- 5 6 7 8</span><br />
 B }) <span class="comment">-- 1 0 0 1</span><br />
 </p>
</blockquote>
<h3>Assigning values</h3>
<p>Assigning values to objects may differ in various programming languages. In C++ and MATLAB the contents of an object is copied into the other. In Lua, however, only a new identifier is created for the right hand object, i.e. Lua's assign command </p><blockquote class="doxtable">
<p>A = tmath.ZeroVector(3) <span class="comment">-- create a new <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> object and assign it to ident "A"</span><br />
 B = A <span class="comment">-- assign the object behind "A" to the ident "B"</span><br />
 </p>
</blockquote>
<p>will create the identifier "B" which refers to the same matrix object as "A" (The first command will create a <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> object on the right hand side and assign it to the identifier "A" on its left side).</p>
<p>As long as new objects will be created on the right side, the assign operator is equal to what is known from C++ , i.e. </p><blockquote class="doxtable">
<p>A = tmath.Identity(3)&gt;<br />
 B = A*(-3) + tmath.Identity(3)<br />
 </p>
</blockquote>
<p>Herein, the arithmetic operators always create and return new temporary objects of type <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a>. The last created object will then be assigned to the identifier "B".</p>
<p>If the value should be assigned (and not the object itself) then <em>tmath</em> provides copy constructors for many data types, i.e. </p><blockquote class="doxtable">
<p>A = tmath.ZeroVector(3) <span class="comment">-- create a new <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> object and assign it to ident "A"</span><br />
 B = tmath.Matrix(A) <span class="comment">-- create a new <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> object which has equal content with "A" and assign it to ident "B"</span><br />
 </p>
</blockquote>
<p>There are some case, where the "=" operator is not applicable. Then the only way to copy data is to use the "Assign" method. This may happen if you want to assign a value to a matrix which is part of another userdata object. For example, there is a finite element object which stores a force vector and gives access to it via a referencing method: </p><blockquote class="doxtable">
<p>force = fem_object:RestoringForce() <span class="comment">-- call the method to return a reference to a <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> object stored in "fem_object"</span><br />
 force = tmath.Matrix(fem_object:RestoringForce()) <span class="comment">-- create a copy of the internal force vector</span><br />
 B = tmath.Vector(force:Rows())&gt;<br />
 fem_object:RestoringForce() = B <span class="comment">-- will produce an error because the left side is a userdata</span><br />
 fem_object:RestoringForce():Assign( B ) <span class="comment">-- will copy the contents from "B" to "fem_object:RestoringForce()"</span><br />
 </p>
</blockquote>
<p>For such cases, the <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> class is equipped with the method "Assign" which directly assigns the given value to itself.</p>
<p>A very fast way to transfer data is the "Swap" method which swaps the pointer to the data buffer of two <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> objects: </p><blockquote class="doxtable">
<p>A = tmath.Identity(3)<br />
 B = tmath.ZeroVector(4)<br />
 B:Swap(A); <span class="comment">-- "A" will now be a zero vector, "B" is an identity matrix</span><br />
</p>
</blockquote>
</div></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
