<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): Scene Class Reference</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('class_scene.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_scene-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Scene Class Reference<div class="ingroups"><a class="el" href="group__graphics.xhtml">Graphics</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>A class for 3D visualization of a structure Additionally, it can display palettes and text annotations as well as rich text labels. Internally, a representation in terms of triangles only is used. Qt separation: This class contains no functionality relying on Qt classes. All methods using Qt classes are virtual and have no implementation, calling DYNARDO_LOG_WARN instead. Their implementation is done in SceneQt, part of the sos_qt_extensions module. Class <a class="el" href="class_scene.xhtml" title="A class for 3D visualization of a structure Additionally, it can display palettes and text annotation...">Scene</a> is NO QObject, but SceneQt is. Instances of <a class="el" href="class_scene.xhtml" title="A class for 3D visualization of a structure Additionally, it can display palettes and text annotation...">Scene</a> or SceneQt are created with application_makeScene(), implemented in the sos_qt_extensions or sos_noqt_extensions module respectively.  
 <a href="class_scene.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a4c474d2ab45fc796266bff9ba22d8323"><td class="memItemLeft" align="right" valign="top"><a id="a4c474d2ab45fc796266bff9ba22d8323"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><b>contourType</b> { <b>noContourPlot</b> = 0, 
<b>lineContourPlot</b>, 
<b>surfaceContourPlot</b>, 
<b>singleSurfaceContourPlot</b>
 }</td></tr>
<tr class="separator:a4c474d2ab45fc796266bff9ba22d8323"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0c458cbcacccfd574f0c16bf306390fc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a0c458cbcacccfd574f0c16bf306390fc">addVal2String</a> (float value, string the_string)</td></tr>
<tr class="memdesc:a0c458cbcacccfd574f0c16bf306390fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">adds a value pair to the container storing information on mapping discrete number values into strings  <a href="#a0c458cbcacccfd574f0c16bf306390fc">More...</a><br /></td></tr>
<tr class="separator:a0c458cbcacccfd574f0c16bf306390fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22aa99b9fa77bbba1697b4d8e56feb17"><td class="memItemLeft" align="right" valign="top"><a id="a22aa99b9fa77bbba1697b4d8e56feb17"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a22aa99b9fa77bbba1697b4d8e56feb17">clearVal2String</a> ()</td></tr>
<tr class="memdesc:a22aa99b9fa77bbba1697b4d8e56feb17"><td class="mdescLeft">&#160;</td><td class="mdescRight">clears the container storing information on mapping discrete number values into strings <br /></td></tr>
<tr class="separator:a22aa99b9fa77bbba1697b4d8e56feb17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7a0db005a63454245516cc1bab98d98"><td class="memItemLeft" align="right" valign="top"><a id="ab7a0db005a63454245516cc1bab98d98"></a>
unsigned char *&#160;</td><td class="memItemRight" valign="bottom"><b>getContourColors</b> ()</td></tr>
<tr class="separator:ab7a0db005a63454245516cc1bab98d98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecaf29127f497864d3cdea3f82dd265b"><td class="memItemLeft" align="right" valign="top"><a id="aecaf29127f497864d3cdea3f82dd265b"></a>
char *&#160;</td><td class="memItemRight" valign="bottom"><b>getContourNormals</b> ()</td></tr>
<tr class="separator:aecaf29127f497864d3cdea3f82dd265b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac011a3ca4491573e77c601dfffa50e62"><td class="memItemLeft" align="right" valign="top"><a id="ac011a3ca4491573e77c601dfffa50e62"></a>
short *&#160;</td><td class="memItemRight" valign="bottom"><b>getContourVertices</b> ()</td></tr>
<tr class="separator:ac011a3ca4491573e77c601dfffa50e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b2761818729165f8534f1c03e701b8a"><td class="memItemLeft" align="right" valign="top"><a id="a4b2761818729165f8534f1c03e701b8a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a4b2761818729165f8534f1c03e701b8a">getDrawToFile</a> ()</td></tr>
<tr class="memdesc:a4b2761818729165f8534f1c03e701b8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">get info if drawing to file <br /></td></tr>
<tr class="separator:a4b2761818729165f8534f1c03e701b8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad01ff5ed5303bfdfc3f893c0bd743cbf"><td class="memItemLeft" align="right" valign="top"><a id="ad01ff5ed5303bfdfc3f893c0bd743cbf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getHiliteReferenceSet</b> ()</td></tr>
<tr class="separator:ad01ff5ed5303bfdfc3f893c0bd743cbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfeb154fec37a514081a1001b9e54410"><td class="memItemLeft" align="right" valign="top"><a id="adfeb154fec37a514081a1001b9e54410"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>getNumContours</b> ()</td></tr>
<tr class="separator:adfeb154fec37a514081a1001b9e54410"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02f49ababafef22d1443a058be08d60d"><td class="memItemLeft" align="right" valign="top"><a id="a02f49ababafef22d1443a058be08d60d"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>getNumOutlines</b> ()</td></tr>
<tr class="separator:a02f49ababafef22d1443a058be08d60d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b2014ba4302052bb6304daedd888419"><td class="memItemLeft" align="right" valign="top"><a id="a6b2014ba4302052bb6304daedd888419"></a>
virtual int&#160;</td><td class="memItemRight" valign="bottom"><b>getNumSelectedVertices</b> ()</td></tr>
<tr class="separator:a6b2014ba4302052bb6304daedd888419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf6dd208a4635a2635dbce09a2d4b585"><td class="memItemLeft" align="right" valign="top"><a id="aaf6dd208a4635a2635dbce09a2d4b585"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>getNumSlices</b> ()</td></tr>
<tr class="separator:aaf6dd208a4635a2635dbce09a2d4b585"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56327f39388aeeaa829b0ffce68feda3"><td class="memItemLeft" align="right" valign="top"><a id="a56327f39388aeeaa829b0ffce68feda3"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>getNumTriangles</b> ()</td></tr>
<tr class="separator:a56327f39388aeeaa829b0ffce68feda3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669068651be5ffb3e9a6a88aad8352c3"><td class="memItemLeft" align="right" valign="top"><a id="a669068651be5ffb3e9a6a88aad8352c3"></a>
short *&#160;</td><td class="memItemRight" valign="bottom"><b>getOutlineVertices</b> ()</td></tr>
<tr class="separator:a669068651be5ffb3e9a6a88aad8352c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93663a88ad977ec4a59b397251464e94"><td class="memItemLeft" align="right" valign="top"><a id="a93663a88ad977ec4a59b397251464e94"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a93663a88ad977ec4a59b397251464e94">getScaleDeco</a> ()</td></tr>
<tr class="memdesc:a93663a88ad977ec4a59b397251464e94"><td class="mdescLeft">&#160;</td><td class="mdescRight">get scale factor for deco elements <br /></td></tr>
<tr class="separator:a93663a88ad977ec4a59b397251464e94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59abc97a118d7e2154650fe6530e80d5"><td class="memItemLeft" align="right" valign="top"><a id="a59abc97a118d7e2154650fe6530e80d5"></a>
virtual unsigned char *&#160;</td><td class="memItemRight" valign="bottom"><b>getSelectedColors</b> ()</td></tr>
<tr class="separator:a59abc97a118d7e2154650fe6530e80d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e10241056920e5078877e96362a0809"><td class="memItemLeft" align="right" valign="top"><a id="a7e10241056920e5078877e96362a0809"></a>
virtual char *&#160;</td><td class="memItemRight" valign="bottom"><b>getSelectedNormals</b> ()</td></tr>
<tr class="separator:a7e10241056920e5078877e96362a0809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c9bc7260535beb589356dc70795a25e"><td class="memItemLeft" align="right" valign="top"><a id="a6c9bc7260535beb589356dc70795a25e"></a>
short *&#160;</td><td class="memItemRight" valign="bottom"><b>getSelectedVertices</b> ()</td></tr>
<tr class="separator:a6c9bc7260535beb589356dc70795a25e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49bdb59d9685f3743b9ad520963dac8f"><td class="memItemLeft" align="right" valign="top"><a id="a49bdb59d9685f3743b9ad520963dac8f"></a>
unsigned char *&#160;</td><td class="memItemRight" valign="bottom"><b>getSliceColors</b> ()</td></tr>
<tr class="separator:a49bdb59d9685f3743b9ad520963dac8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa108d718b3da8769e1658954148dad76"><td class="memItemLeft" align="right" valign="top"><a id="aa108d718b3da8769e1658954148dad76"></a>
char *&#160;</td><td class="memItemRight" valign="bottom"><b>getSliceNormals</b> ()</td></tr>
<tr class="separator:aa108d718b3da8769e1658954148dad76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e76324f42015d9e85d9a26e5293c2d3"><td class="memItemLeft" align="right" valign="top"><a id="a4e76324f42015d9e85d9a26e5293c2d3"></a>
short *&#160;</td><td class="memItemRight" valign="bottom"><b>getSliceVertices</b> ()</td></tr>
<tr class="separator:a4e76324f42015d9e85d9a26e5293c2d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad361e56c548792dc62db0b14f5190342"><td class="memItemLeft" align="right" valign="top"><a id="ad361e56c548792dc62db0b14f5190342"></a>
unsigned char *&#160;</td><td class="memItemRight" valign="bottom"><b>getTriangleColors</b> ()</td></tr>
<tr class="separator:ad361e56c548792dc62db0b14f5190342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ea90ee20bf828c81b0639a10a393cde"><td class="memItemLeft" align="right" valign="top"><a id="a5ea90ee20bf828c81b0639a10a393cde"></a>
char *&#160;</td><td class="memItemRight" valign="bottom"><b>getTriangleNormals</b> ()</td></tr>
<tr class="separator:a5ea90ee20bf828c81b0639a10a393cde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a100981d002d6cd43d36b943cdaa425b4"><td class="memItemLeft" align="right" valign="top"><a id="a100981d002d6cd43d36b943cdaa425b4"></a>
short *&#160;</td><td class="memItemRight" valign="bottom"><b>getTriangleVertices</b> ()</td></tr>
<tr class="separator:a100981d002d6cd43d36b943cdaa425b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6ad2d8ff2483839d4a5a6c24b52b970"><td class="memItemLeft" align="right" valign="top"><a id="aa6ad2d8ff2483839d4a5a6c24b52b970"></a>
number&#160;</td><td class="memItemRight" valign="bottom"><b>getVBO_ID</b> (boost::uint32_t i)</td></tr>
<tr class="separator:aa6ad2d8ff2483839d4a5a6c24b52b970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a135c1f6b7262808f6656622559f3a395"><td class="memItemLeft" align="right" valign="top"><a id="a135c1f6b7262808f6656622559f3a395"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><b>getZBuffer</b> ()</td></tr>
<tr class="separator:a135c1f6b7262808f6656622559f3a395"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a588e63558c84812068b8cc8f1f9c954a"><td class="memItemLeft" align="right" valign="top"><a id="a588e63558c84812068b8cc8f1f9c954a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>hasVBO</b> ()</td></tr>
<tr class="separator:a588e63558c84812068b8cc8f1f9c954a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76ba769d6afb6a1ada0f0663afd082dc"><td class="memItemLeft" align="right" valign="top"><a id="a76ba769d6afb6a1ada0f0663afd082dc"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a76ba769d6afb6a1ada0f0663afd082dc">setDrawToFile</a> (bool b)</td></tr>
<tr class="memdesc:a76ba769d6afb6a1ada0f0663afd082dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">set info if drawing to file <br /></td></tr>
<tr class="separator:a76ba769d6afb6a1ada0f0663afd082dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6e22d0784ec8ed158b0a9914134db5f"><td class="memItemLeft" align="right" valign="top"><a id="ad6e22d0784ec8ed158b0a9914134db5f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setHiliteReferenceSet</b> (bool t)</td></tr>
<tr class="separator:ad6e22d0784ec8ed158b0a9914134db5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cdb03542df7b59c4c5ae61a6a5a28a9"><td class="memItemLeft" align="right" valign="top"><a id="a9cdb03542df7b59c4c5ae61a6a5a28a9"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a9cdb03542df7b59c4c5ae61a6a5a28a9">setScaleDeco</a> (int scale)</td></tr>
<tr class="memdesc:a9cdb03542df7b59c4c5ae61a6a5a28a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">set scale factor for deco elements <br /></td></tr>
<tr class="separator:a9cdb03542df7b59c4c5ae61a6a5a28a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae10301ca34867794475da15ab669cc2b"><td class="memItemLeft" align="right" valign="top"><a id="ae10301ca34867794475da15ab669cc2b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setZBuffer</b> (MatrixXhf buf)</td></tr>
<tr class="separator:ae10301ca34867794475da15ab669cc2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a44b8695185991dcda6a8d707f6342f70"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a44b8695185991dcda6a8d707f6342f70">Scene</a> (graphics::VerticesNormalsVisibility vnv, <a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>)</td></tr>
<tr class="memdesc:a44b8695185991dcda6a8d707f6342f70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, requires the description of the structure in terms of a <a class="el" href="struct_vertices_normals_visibility.xhtml" title="Data containing information about the structure in simplified form. ">VerticesNormalsVisibility</a> object. Initializes some defaults.  <a href="#a44b8695185991dcda6a8d707f6342f70">More...</a><br /></td></tr>
<tr class="separator:a44b8695185991dcda6a8d707f6342f70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade3be4eb3bd7ff334e43f050f359e4b7"><td class="memItemLeft" align="right" valign="top"><a id="ade3be4eb3bd7ff334e43f050f359e4b7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setShading</b> (bool t)</td></tr>
<tr class="separator:ade3be4eb3bd7ff334e43f050f359e4b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a852e5a281a49a0ae09cf6459f5be449a"><td class="memItemLeft" align="right" valign="top"><a id="a852e5a281a49a0ae09cf6459f5be449a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getShading</b> ()</td></tr>
<tr class="separator:a852e5a281a49a0ae09cf6459f5be449a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cee40244e85772d527d1cdfce18859f"><td class="memItemLeft" align="right" valign="top"><a id="a2cee40244e85772d527d1cdfce18859f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>SetTitle</b> (string title)</td></tr>
<tr class="separator:a2cee40244e85772d527d1cdfce18859f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a651d92a8c37690633d229e8385ab7d8f"><td class="memItemLeft" align="right" valign="top"><a id="a651d92a8c37690633d229e8385ab7d8f"></a>
string&#160;</td><td class="memItemRight" valign="bottom"><b>GetTitle</b> ()</td></tr>
<tr class="separator:a651d92a8c37690633d229e8385ab7d8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae554939d03428e1df57efc57ce1d3a3"><td class="memItemLeft" align="right" valign="top"><a id="aae554939d03428e1df57efc57ce1d3a3"></a>
<a class="el" href="group__data.xhtml#ga1bebf1e22deb3cd41d7d99ddcdb15379">dataobject_types</a>&#160;</td><td class="memItemRight" valign="bottom"><b>getDataType</b> ()</td></tr>
<tr class="separator:aae554939d03428e1df57efc57ce1d3a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac1ae503284deaac314d229ae5c69b4f"><td class="memItemLeft" align="right" valign="top"><a id="aac1ae503284deaac314d229ae5c69b4f"></a>
<a class="el" href="class_data_object_key.xhtml">DataObjectKey</a>&#160;</td><td class="memItemRight" valign="bottom"><b>getDataIdent</b> ()</td></tr>
<tr class="separator:aac1ae503284deaac314d229ae5c69b4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a409e05a5f45af16b718f74360a118941"><td class="memItemLeft" align="right" valign="top"><a id="a409e05a5f45af16b718f74360a118941"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>hasData</b> ()</td></tr>
<tr class="separator:a409e05a5f45af16b718f74360a118941"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29d5f953c715f16deea4b2b2950aedd9"><td class="memItemLeft" align="right" valign="top"><a id="a29d5f953c715f16deea4b2b2950aedd9"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>hasNodeData</b> ()</td></tr>
<tr class="separator:a29d5f953c715f16deea4b2b2950aedd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedfcd60db2f81881828ddf066c08f2a4"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aedfcd60db2f81881828ddf066c08f2a4">databaseImage</a> (std::vector&lt; char &gt; vec, int image_resolution_x, int image_resolution_y)</td></tr>
<tr class="memdesc:aedfcd60db2f81881828ddf066c08f2a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the small mesh image to save with the database header, without Qt: returns empty image!  <a href="#aedfcd60db2f81881828ddf066c08f2a4">More...</a><br /></td></tr>
<tr class="separator:aedfcd60db2f81881828ddf066c08f2a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Control OpenGL</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods controlling the OpenGL context </p>
</div></td></tr>
<tr class="memitem:a19cf736ac5a3d9c598653deaf643a1ba"><td class="memItemLeft" align="right" valign="top"><a id="a19cf736ac5a3d9c598653deaf643a1ba"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a19cf736ac5a3d9c598653deaf643a1ba">setUninitializedGL</a> ()</td></tr>
<tr class="memdesc:a19cf736ac5a3d9c598653deaf643a1ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells the <a class="el" href="class_scene.xhtml" title="A class for 3D visualization of a structure Additionally, it can display palettes and text annotation...">Scene</a> that its associated GL context needs to reload all Vertex Buffer Objects (VBOs) <br /></td></tr>
<tr class="separator:a19cf736ac5a3d9c598653deaf643a1ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac2b0ed07003b99270a380cc50f29f60"><td class="memItemLeft" align="right" valign="top"><a id="aac2b0ed07003b99270a380cc50f29f60"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>initializedGL</b> ()</td></tr>
<tr class="separator:aac2b0ed07003b99270a380cc50f29f60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d769b7b9a4271a48eb4774da7d82c8"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a06d769b7b9a4271a48eb4774da7d82c8">Prepare</a> ()</td></tr>
<tr class="memdesc:a06d769b7b9a4271a48eb4774da7d82c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears all OpenGL Vertex Buffers first and re-initializes them afterwards.  <a href="#a06d769b7b9a4271a48eb4774da7d82c8">More...</a><br /></td></tr>
<tr class="separator:a06d769b7b9a4271a48eb4774da7d82c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e8d27ff57c6aabb0b6ae631b54d12a9"><td class="memItemLeft" align="right" valign="top"><a id="a2e8d27ff57c6aabb0b6ae631b54d12a9"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>UnPrepare</b> ()</td></tr>
<tr class="separator:a2e8d27ff57c6aabb0b6ae631b54d12a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e95b25f0e01f8b7eaef2a15d2939e1d"><td class="memItemLeft" align="right" valign="top"><a id="a7e95b25f0e01f8b7eaef2a15d2939e1d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>SetMode</b> (graphics::renderMode mode)</td></tr>
<tr class="separator:a7e95b25f0e01f8b7eaef2a15d2939e1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9132074e6b817d8c90e6b14c298c7b42"><td class="memItemLeft" align="right" valign="top"><a id="a9132074e6b817d8c90e6b14c298c7b42"></a>
graphics::renderMode&#160;</td><td class="memItemRight" valign="bottom"><b>GetMode</b> ()</td></tr>
<tr class="separator:a9132074e6b817d8c90e6b14c298c7b42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">RENDER</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods controlling the rendering </p>
</div></td></tr>
<tr class="memitem:a463529fc5f2589372708e416b315efe1"><td class="memItemLeft" align="right" valign="top"><a id="a463529fc5f2589372708e416b315efe1"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>getStructureAlpha</b> ()</td></tr>
<tr class="separator:a463529fc5f2589372708e416b315efe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a652c2a92b3b3d8100f782aa21409ae61"><td class="memItemLeft" align="right" valign="top"><a id="a652c2a92b3b3d8100f782aa21409ae61"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>getIsoSurfaceAlpha</b> ()</td></tr>
<tr class="separator:a652c2a92b3b3d8100f782aa21409ae61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5da521188e89896fe5393383f6977f45"><td class="memItemLeft" align="right" valign="top"><a id="a5da521188e89896fe5393383f6977f45"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setStructureAlpha</b> (float <a class="el" href="group__tmath.xhtml#ga7e205066f67b9e3fd4c8cbd5859e8da3">a</a>)</td></tr>
<tr class="separator:a5da521188e89896fe5393383f6977f45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7b41bc3076c8e3e464d5185e1e4902f"><td class="memItemLeft" align="right" valign="top"><a id="af7b41bc3076c8e3e464d5185e1e4902f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setIsoSurfaceAlpha</b> (float <a class="el" href="group__tmath.xhtml#ga7e205066f67b9e3fd4c8cbd5859e8da3">a</a>)</td></tr>
<tr class="separator:af7b41bc3076c8e3e464d5185e1e4902f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5306f657c8705eb5afba78f6c316dbc0"><td class="memItemLeft" align="right" valign="top"><a id="a5306f657c8705eb5afba78f6c316dbc0"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setClipBorder</b> (float border)</td></tr>
<tr class="separator:a5306f657c8705eb5afba78f6c316dbc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab36b056f22bdb9f707d98be15a3559d6"><td class="memItemLeft" align="right" valign="top"><a id="ab36b056f22bdb9f707d98be15a3559d6"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>getClipBorder</b> ()</td></tr>
<tr class="separator:ab36b056f22bdb9f707d98be15a3559d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee20126ab6036a17b91f83c1cb14ced6"><td class="memItemLeft" align="right" valign="top"><a id="aee20126ab6036a17b91f83c1cb14ced6"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setDrawOutline</b> (bool t)</td></tr>
<tr class="separator:aee20126ab6036a17b91f83c1cb14ced6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6b6193a67c57643726b5bb456763e0d"><td class="memItemLeft" align="right" valign="top"><a id="ad6b6193a67c57643726b5bb456763e0d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getDrawOutline</b> ()</td></tr>
<tr class="separator:ad6b6193a67c57643726b5bb456763e0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa760c21ad4548b6499c1ac07b865e6d4"><td class="memItemLeft" align="right" valign="top"><a id="aa760c21ad4548b6499c1ac07b865e6d4"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setDrawSurfaces</b> (bool t)</td></tr>
<tr class="separator:aa760c21ad4548b6499c1ac07b865e6d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5586383678e5d00e9aa8f285e25605f3"><td class="memItemLeft" align="right" valign="top"><a id="a5586383678e5d00e9aa8f285e25605f3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getDrawSurfaces</b> ()</td></tr>
<tr class="separator:a5586383678e5d00e9aa8f285e25605f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0e9d6094e0d54be97136fd4ed36c375"><td class="memItemLeft" align="right" valign="top"><a id="ab0e9d6094e0d54be97136fd4ed36c375"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setDrawWireframe</b> (bool t)</td></tr>
<tr class="separator:ab0e9d6094e0d54be97136fd4ed36c375"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af93a2efeb6a3ae8c7187af829c6240ed"><td class="memItemLeft" align="right" valign="top"><a id="af93a2efeb6a3ae8c7187af829c6240ed"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getDrawWireframe</b> ()</td></tr>
<tr class="separator:af93a2efeb6a3ae8c7187af829c6240ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18c9a2068ad515009b03e44be5761512"><td class="memItemLeft" align="right" valign="top"><a id="a18c9a2068ad515009b03e44be5761512"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getDrawEdges</b> ()</td></tr>
<tr class="separator:a18c9a2068ad515009b03e44be5761512"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8b5f37ad3f6eaa46dd01df960260957"><td class="memItemLeft" align="right" valign="top"><a id="ad8b5f37ad3f6eaa46dd01df960260957"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setShowInvisibleLabels</b> (bool t)</td></tr>
<tr class="separator:ad8b5f37ad3f6eaa46dd01df960260957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e353c74ce24051bbeaa55ea407df26"><td class="memItemLeft" align="right" valign="top"><a id="a38e353c74ce24051bbeaa55ea407df26"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getShowInvisibleLabels</b> ()</td></tr>
<tr class="separator:a38e353c74ce24051bbeaa55ea407df26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7478525388f191dbde98ddcddbf36fa1"><td class="memItemLeft" align="right" valign="top"><a id="a7478525388f191dbde98ddcddbf36fa1"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>setNeedsUpdate</b> (bool t)</td></tr>
<tr class="separator:a7478525388f191dbde98ddcddbf36fa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1cae728d29d471fb9e38da761ef8b99"><td class="memItemLeft" align="right" valign="top"><a id="ac1cae728d29d471fb9e38da761ef8b99"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getNeedsUpdate</b> ()</td></tr>
<tr class="separator:ac1cae728d29d471fb9e38da761ef8b99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7de6866c2cf7898475d12d3cea26e58"><td class="memItemLeft" align="right" valign="top"><a id="ae7de6866c2cf7898475d12d3cea26e58"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>RenderDeco</b> (number ww, number hh, QPainter m_pt)</td></tr>
<tr class="separator:ae7de6866c2cf7898475d12d3cea26e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9335ca5e694dbd00c99fb6814da163"><td class="memItemLeft" align="right" valign="top"><a id="a5f9335ca5e694dbd00c99fb6814da163"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>RenderCoorAxes</b> (number ww, number hh, QPainter m_pt)</td></tr>
<tr class="separator:a5f9335ca5e694dbd00c99fb6814da163"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac12402e165f10a89aee0167f6d392564"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ac12402e165f10a89aee0167f6d392564">File</a> (string filename)</td></tr>
<tr class="memdesc:ac12402e165f10a89aee0167f6d392564"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renders the scene into a QImage of current size.  <a href="#ac12402e165f10a89aee0167f6d392564">More...</a><br /></td></tr>
<tr class="separator:ac12402e165f10a89aee0167f6d392564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bd2e6ade908831beb8f828d9a5f2d4b"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a5bd2e6ade908831beb8f828d9a5f2d4b">File</a> (string filename, int ww, int hh)</td></tr>
<tr class="memdesc:a5bd2e6ade908831beb8f828d9a5f2d4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renders the contents of the scene to an image file of given size.  <a href="#a5bd2e6ade908831beb8f828d9a5f2d4b">More...</a><br /></td></tr>
<tr class="separator:a5bd2e6ade908831beb8f828d9a5f2d4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ae6619ae28358041ab7261d57377bcb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a7ae6619ae28358041ab7261d57377bcb">ActivateNodeValues</a> ()</td></tr>
<tr class="memdesc:a7ae6619ae28358041ab7261d57377bcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Render the scene into a QPaintDevice.  <a href="#a7ae6619ae28358041ab7261d57377bcb">More...</a><br /></td></tr>
<tr class="separator:a7ae6619ae28358041ab7261d57377bcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b6be1b89b5d6363b23a4a6cff310bd0"><td class="memItemLeft" align="right" valign="top"><a id="a1b6be1b89b5d6363b23a4a6cff310bd0"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ActivateElementValues</b> ()</td></tr>
<tr class="separator:a1b6be1b89b5d6363b23a4a6cff310bd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac30a5c478071bddc29e58719b422171e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ac30a5c478071bddc29e58719b422171e">AssignValues</a> (<a class="el" href="class_all_render_data.xhtml">AllRenderData</a> p_render_data, <a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, <a class="el" href="class_scene_manager.xhtml">SceneManager</a> *scene_manager)</td></tr>
<tr class="memdesc:ac30a5c478071bddc29e58719b422171e"><td class="mdescLeft">&#160;</td><td class="mdescRight">defines data to be rendered  <a href="#ac30a5c478071bddc29e58719b422171e">More...</a><br /></td></tr>
<tr class="separator:ac30a5c478071bddc29e58719b422171e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19f2ead60d9392ab7ca45217412733e1"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a19f2ead60d9392ab7ca45217412733e1">SetValues</a> (Eigen::VectorXd inputs, <a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, bool reset_scene_options, <a class="el" href="class_scene_manager.xhtml">SceneManager</a> *scene_manager)</td></tr>
<tr class="memdesc:a19f2ead60d9392ab7ca45217412733e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assign values to the vertices of the structure which are then used for coloring.  <a href="#a19f2ead60d9392ab7ca45217412733e1">More...</a><br /></td></tr>
<tr class="separator:a19f2ead60d9392ab7ca45217412733e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27c842466c304c3af705ef763e9d3227"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a27c842466c304c3af705ef763e9d3227">SetGeometricStabilization</a> (bool enable_flag, <a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, <a class="el" href="class_scene_manager.xhtml">SceneManager</a> *scene_manager)</td></tr>
<tr class="memdesc:a27c842466c304c3af705ef763e9d3227"><td class="mdescLeft">&#160;</td><td class="mdescRight">enables/disables mesh smoothening for gemetric imperfections  <a href="#a27c842466c304c3af705ef763e9d3227">More...</a><br /></td></tr>
<tr class="separator:a27c842466c304c3af705ef763e9d3227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b808aad5a0ae3633f3a8f7996fd54f4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a6b808aad5a0ae3633f3a8f7996fd54f4">SetGeometricScaling</a> (number scaling, <a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, <a class="el" href="class_scene_manager.xhtml">SceneManager</a> *scene_manager)</td></tr>
<tr class="memdesc:a6b808aad5a0ae3633f3a8f7996fd54f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">defines the scaling factor for geometric variations  <a href="#a6b808aad5a0ae3633f3a8f7996fd54f4">More...</a><br /></td></tr>
<tr class="separator:a6b808aad5a0ae3633f3a8f7996fd54f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5faf4e8d764eeca136784351140025cd"><td class="memItemLeft" align="right" valign="top"><a id="a5faf4e8d764eeca136784351140025cd"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a5faf4e8d764eeca136784351140025cd">recalculateAndApplyMorphedGeometry</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>)</td></tr>
<tr class="memdesc:a5faf4e8d764eeca136784351140025cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">recalculates mesh morphing and applies result to triangle geometry and unconnected points. <br /></td></tr>
<tr class="separator:a5faf4e8d764eeca136784351140025cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2371590e3c2ff4f94f97f63d6e263d9"><td class="memItemLeft" align="right" valign="top"><a id="ad2371590e3c2ff4f94f97f63d6e263d9"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ad2371590e3c2ff4f94f97f63d6e263d9">ClearMorphedCoordinates</a> ()</td></tr>
<tr class="memdesc:ad2371590e3c2ff4f94f97f63d6e263d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">deletes all containers with morphed geometry forcing the system to use unmorphed geometry <br /></td></tr>
<tr class="separator:ad2371590e3c2ff4f94f97f63d6e263d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2dd43e7fcc9b0712604a7c65b8346b4"><td class="memItemLeft" align="right" valign="top">graphics::VertexValues&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#af2dd43e7fcc9b0712604a7c65b8346b4">getValues</a> ()</td></tr>
<tr class="memdesc:af2dd43e7fcc9b0712604a7c65b8346b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to the original scene data.  <a href="#af2dd43e7fcc9b0712604a7c65b8346b4">More...</a><br /></td></tr>
<tr class="separator:af2dd43e7fcc9b0712604a7c65b8346b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46ea48f94b200ee97dcac0d006f07cbd"><td class="memItemLeft" align="right" valign="top"><a id="a46ea48f94b200ee97dcac0d006f07cbd"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>OriginalElementValues</b> ()</td></tr>
<tr class="separator:a46ea48f94b200ee97dcac0d006f07cbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa91519ee2577348afcfa5d9eb7a814c1"><td class="memItemLeft" align="right" valign="top"><a id="aa91519ee2577348afcfa5d9eb7a814c1"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>OriginalNodeValues</b> ()</td></tr>
<tr class="separator:aa91519ee2577348afcfa5d9eb7a814c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27b3a6ec5bcbe749801375a2b1db35e2"><td class="memItemLeft" align="right" valign="top"><a id="a27b3a6ec5bcbe749801375a2b1db35e2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a27b3a6ec5bcbe749801375a2b1db35e2">SetContourType</a> (graphics::Scene::contourType contourType)</td></tr>
<tr class="memdesc:a27b3a6ec5bcbe749801375a2b1db35e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the type of contour to be shown. Can be none, line or surface type. <br /></td></tr>
<tr class="separator:a27b3a6ec5bcbe749801375a2b1db35e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d561084bb7c615c3373c4403a164046"><td class="memItemLeft" align="right" valign="top">graphics::Scene::contourType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a1d561084bb7c615c3373c4403a164046">GetContourType</a> ()</td></tr>
<tr class="memdesc:a1d561084bb7c615c3373c4403a164046"><td class="mdescLeft">&#160;</td><td class="mdescRight">GetContourType.  <a href="#a1d561084bb7c615c3373c4403a164046">More...</a><br /></td></tr>
<tr class="separator:a1d561084bb7c615c3373c4403a164046"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad41fa1a2627ed00f1c0f139548772f8"><td class="memItemLeft" align="right" valign="top">number&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aad41fa1a2627ed00f1c0f139548772f8">getContourSize</a> ()</td></tr>
<tr class="memdesc:aad41fa1a2627ed00f1c0f139548772f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">get numnber of contour levels  <a href="#aad41fa1a2627ed00f1c0f139548772f8">More...</a><br /></td></tr>
<tr class="separator:aad41fa1a2627ed00f1c0f139548772f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeac36bc4124c2674fcb3ecf2a783afab"><td class="memItemLeft" align="right" valign="top">Eigen::VectorXf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aeac36bc4124c2674fcb3ecf2a783afab">getContours</a> ()</td></tr>
<tr class="memdesc:aeac36bc4124c2674fcb3ecf2a783afab"><td class="mdescLeft">&#160;</td><td class="mdescRight">get contour levels  <a href="#aeac36bc4124c2674fcb3ecf2a783afab">More...</a><br /></td></tr>
<tr class="separator:aeac36bc4124c2674fcb3ecf2a783afab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d16fb79739a2d07661a478102f3aa44"><td class="memItemLeft" align="right" valign="top"><a id="a3d16fb79739a2d07661a478102f3aa44"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a3d16fb79739a2d07661a478102f3aa44">SetContours</a> (number c)</td></tr>
<tr class="memdesc:a3d16fb79739a2d07661a478102f3aa44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set single contour level, keep current type. <br /></td></tr>
<tr class="separator:a3d16fb79739a2d07661a478102f3aa44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad62197df88c13e27549cb99635c33516"><td class="memItemLeft" align="right" valign="top"><a id="ad62197df88c13e27549cb99635c33516"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ad62197df88c13e27549cb99635c33516">SetContours</a> (graphics::Scene::contourType ct)</td></tr>
<tr class="memdesc:ad62197df88c13e27549cb99635c33516"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set contour levels as defined in the current palette. <br /></td></tr>
<tr class="separator:ad62197df88c13e27549cb99635c33516"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">font</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Substitute all white pixels from the margin with transparent ones</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>QImage with white pixels near the margins </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a QImage <br />
 Methods controlling the font used in the scene to display text </dd></dl>
</div></td></tr>
<tr class="memitem:addd456f71665ba4ffed7167e33b5e183"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#addd456f71665ba4ffed7167e33b5e183">SetFont</a> (string <a class="el" href="class_scene.xhtml#a0c20b047e7c89c25e95ad212000a64d0">font</a>, number fontsize)</td></tr>
<tr class="memdesc:addd456f71665ba4ffed7167e33b5e183"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the font for all text to be shown in the scene.  <a href="#addd456f71665ba4ffed7167e33b5e183">More...</a><br /></td></tr>
<tr class="separator:addd456f71665ba4ffed7167e33b5e183"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ababbd02caffc98e21bdd737de704e921"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ababbd02caffc98e21bdd737de704e921">SetFont</a> (QFont <a class="el" href="class_scene.xhtml#a0c20b047e7c89c25e95ad212000a64d0">font</a>)</td></tr>
<tr class="memdesc:ababbd02caffc98e21bdd737de704e921"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the font for all text to be shown in the scene.  <a href="#ababbd02caffc98e21bdd737de704e921">More...</a><br /></td></tr>
<tr class="separator:ababbd02caffc98e21bdd737de704e921"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c20b047e7c89c25e95ad212000a64d0"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a0c20b047e7c89c25e95ad212000a64d0">font</a> (QFont font)</td></tr>
<tr class="separator:a0c20b047e7c89c25e95ad212000a64d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">coloring</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods controlling the coloring behaviour in the scene </p>
</div></td></tr>
<tr class="memitem:a5b89a1b148f14e71c185082060849d35"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a5b89a1b148f14e71c185082060849d35">SetBackground</a> (unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)</td></tr>
<tr class="memdesc:a5b89a1b148f14e71c185082060849d35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the first background color for the scene.  <a href="#a5b89a1b148f14e71c185082060849d35">More...</a><br /></td></tr>
<tr class="separator:a5b89a1b148f14e71c185082060849d35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eb860f4f2e9a8c1964064ba259beb82"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a3eb860f4f2e9a8c1964064ba259beb82">GetBackground</a> (unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)</td></tr>
<tr class="memdesc:a3eb860f4f2e9a8c1964064ba259beb82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the first background color for the scene.  <a href="#a3eb860f4f2e9a8c1964064ba259beb82">More...</a><br /></td></tr>
<tr class="separator:a3eb860f4f2e9a8c1964064ba259beb82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a903ffdb01a728c442b01876f25d6dfba"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a903ffdb01a728c442b01876f25d6dfba">SetBackground2</a> (unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)</td></tr>
<tr class="memdesc:a903ffdb01a728c442b01876f25d6dfba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the second background color for the scene. This defines a vertical color gradient together with the first background color.  <a href="#a903ffdb01a728c442b01876f25d6dfba">More...</a><br /></td></tr>
<tr class="separator:a903ffdb01a728c442b01876f25d6dfba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4254e5b8f8d3af416333fe1f7ba7cd90"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a4254e5b8f8d3af416333fe1f7ba7cd90">GetBackground2</a> (unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)</td></tr>
<tr class="memdesc:a4254e5b8f8d3af416333fe1f7ba7cd90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the second background color for the scene. This defines a vertical color gradient together with the first background color.  <a href="#a4254e5b8f8d3af416333fe1f7ba7cd90">More...</a><br /></td></tr>
<tr class="separator:a4254e5b8f8d3af416333fe1f7ba7cd90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dd9ff673aab54e78217089fc1517078"><td class="memItemLeft" align="right" valign="top"><a id="a1dd9ff673aab54e78217089fc1517078"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a1dd9ff673aab54e78217089fc1517078">RemoveBackgrounds</a> ()</td></tr>
<tr class="memdesc:a1dd9ff673aab54e78217089fc1517078"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears all background coloring. <br /></td></tr>
<tr class="separator:a1dd9ff673aab54e78217089fc1517078"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2df1ee76ffef04e39be521fe300522"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aab2df1ee76ffef04e39be521fe300522">palettePercentageRange</a> ()</td></tr>
<tr class="separator:aab2df1ee76ffef04e39be521fe300522"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45647fa73b7519f83aa151af826fdf77"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a45647fa73b7519f83aa151af826fdf77">setPaletteType</a> (PaletteTypePtr <a class="el" href="class_scene.xhtml#a181f4d63c649e319f7f6ac56a905554e">palette</a>)</td></tr>
<tr class="memdesc:a45647fa73b7519f83aa151af826fdf77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assign a color/value palette to the scene. Only one palette can be assigned.  <a href="#a45647fa73b7519f83aa151af826fdf77">More...</a><br /></td></tr>
<tr class="separator:a45647fa73b7519f83aa151af826fdf77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff517029b952bf157f2bf8bcc11a107e"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aff517029b952bf157f2bf8bcc11a107e">setPalettePosition</a> (graphics::Position pos)</td></tr>
<tr class="memdesc:aff517029b952bf157f2bf8bcc11a107e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the position for the current palette.  <a href="#aff517029b952bf157f2bf8bcc11a107e">More...</a><br /></td></tr>
<tr class="separator:aff517029b952bf157f2bf8bcc11a107e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a118f5a9866367b8685c74b480f76b87c"><td class="memItemLeft" align="right" valign="top"><a id="a118f5a9866367b8685c74b480f76b87c"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>setPaletteProperties</b> (PaletteSceneProperties prop)</td></tr>
<tr class="separator:a118f5a9866367b8685c74b480f76b87c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64acf2cdfcf625cf407b9081f0410ce1"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a64acf2cdfcf625cf407b9081f0410ce1">setPalettePercentageRange</a> (bool percentage_range=true)</td></tr>
<tr class="memdesc:a64acf2cdfcf625cf407b9081f0410ce1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a relative, percentage palette range.  <a href="#a64acf2cdfcf625cf407b9081f0410ce1">More...</a><br /></td></tr>
<tr class="separator:a64acf2cdfcf625cf407b9081f0410ce1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a2632c3ace59d8df8a771b526361e35"><td class="memItemLeft" align="right" valign="top"><a id="a8a2632c3ace59d8df8a771b526361e35"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>setPaletteRange</b> (number xmin, number xmax)</td></tr>
<tr class="separator:a8a2632c3ace59d8df8a771b526361e35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8df63a3e9d777471160a69e8e84baa06"><td class="memItemLeft" align="right" valign="top"><a id="a8df63a3e9d777471160a69e8e84baa06"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a8df63a3e9d777471160a69e8e84baa06">removePalette</a> ()</td></tr>
<tr class="memdesc:a8df63a3e9d777471160a69e8e84baa06"><td class="mdescLeft">&#160;</td><td class="mdescRight">remove palette <br /></td></tr>
<tr class="separator:a8df63a3e9d777471160a69e8e84baa06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22c9ec48ade46ce4b5ac8ae2faca0c74"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a22c9ec48ade46ce4b5ac8ae2faca0c74">SetCoorAxesPosition</a> (graphics::Position pos)</td></tr>
<tr class="memdesc:a22c9ec48ade46ce4b5ac8ae2faca0c74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the position for the coordinate axes.  <a href="#a22c9ec48ade46ce4b5ac8ae2faca0c74">More...</a><br /></td></tr>
<tr class="separator:a22c9ec48ade46ce4b5ac8ae2faca0c74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf46406c17bdfd85b67f54769014ed68"><td class="memItemLeft" align="right" valign="top"><a id="acf46406c17bdfd85b67f54769014ed68"></a>
virtual graphics::Position&#160;</td><td class="memItemRight" valign="bottom"><b>GetCoorAxesPosition</b> ()</td></tr>
<tr class="separator:acf46406c17bdfd85b67f54769014ed68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a181f4d63c649e319f7f6ac56a905554e"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a181f4d63c649e319f7f6ac56a905554e">palette</a> (Palette palette)</td></tr>
<tr class="memdesc:a181f4d63c649e319f7f6ac56a905554e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get current palette.  <a href="#a181f4d63c649e319f7f6ac56a905554e">More...</a><br /></td></tr>
<tr class="separator:a181f4d63c649e319f7f6ac56a905554e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa4883622f174770b2586ac1b3e6a72"><td class="memItemLeft" align="right" valign="top"><a id="affa4883622f174770b2586ac1b3e6a72"></a>
virtual graphics::Position&#160;</td><td class="memItemRight" valign="bottom"><b>GetPalettePosition</b> ()</td></tr>
<tr class="separator:affa4883622f174770b2586ac1b3e6a72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:aa14ba183af3e666e498c4e6c5fdbf3ae"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aa14ba183af3e666e498c4e6c5fdbf3ae">SetCoorSystemPosition</a> (graphics::Position pos)</td></tr>
<tr class="memdesc:aa14ba183af3e666e498c4e6c5fdbf3ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the position for the coordinate system.  <a href="#aa14ba183af3e666e498c4e6c5fdbf3ae">More...</a><br /></td></tr>
<tr class="separator:aa14ba183af3e666e498c4e6c5fdbf3ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dd25a855f3ee48c8bf7de7072f2bde6"><td class="memItemLeft" align="right" valign="top"><a id="a4dd25a855f3ee48c8bf7de7072f2bde6"></a>
virtual graphics::Position&#160;</td><td class="memItemRight" valign="bottom"><b>GetCoorSystemPosition</b> ()</td></tr>
<tr class="separator:a4dd25a855f3ee48c8bf7de7072f2bde6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ae359d9f8147e0cfb7eb7565d2506348b"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ae359d9f8147e0cfb7eb7565d2506348b">SetLegendPosition</a> (graphics::Position pos)</td></tr>
<tr class="memdesc:ae359d9f8147e0cfb7eb7565d2506348b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the position for the legend.  <a href="#ae359d9f8147e0cfb7eb7565d2506348b">More...</a><br /></td></tr>
<tr class="separator:ae359d9f8147e0cfb7eb7565d2506348b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b5f6e27ca5802651927951d6a28d2ab"><td class="memItemLeft" align="right" valign="top"><a id="a9b5f6e27ca5802651927951d6a28d2ab"></a>
virtual graphics::Position&#160;</td><td class="memItemRight" valign="bottom"><b>GetLegendPosition</b> ()</td></tr>
<tr class="separator:a9b5f6e27ca5802651927951d6a28d2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a2336f6b9901c23c398f9a29a7d031f41"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a2336f6b9901c23c398f9a29a7d031f41">SetMarkPosition</a> (graphics::Position pos)</td></tr>
<tr class="memdesc:a2336f6b9901c23c398f9a29a7d031f41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the position for the watermark.  <a href="#a2336f6b9901c23c398f9a29a7d031f41">More...</a><br /></td></tr>
<tr class="separator:a2336f6b9901c23c398f9a29a7d031f41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99f4c7d61dfb278ada803ba4da617350"><td class="memItemLeft" align="right" valign="top"><a id="a99f4c7d61dfb278ada803ba4da617350"></a>
graphics::Position&#160;</td><td class="memItemRight" valign="bottom"><b>GetMarkPosition</b> ()</td></tr>
<tr class="separator:a99f4c7d61dfb278ada803ba4da617350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:aaf4dfaefcc8bee887ae9b8018824c6d0"><td class="memItemLeft" align="right" valign="top"><a id="aaf4dfaefcc8bee887ae9b8018824c6d0"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aaf4dfaefcc8bee887ae9b8018824c6d0">SetRichLabel</a> (RichLabel richlabel)</td></tr>
<tr class="memdesc:aaf4dfaefcc8bee887ae9b8018824c6d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assign a rich text label to the scene. Only one rich text label can be assigned. <br /></td></tr>
<tr class="separator:aaf4dfaefcc8bee887ae9b8018824c6d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af87422e6ef851dcb428af7948c77d7e2"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#af87422e6ef851dcb428af7948c77d7e2">GetRichLabel</a> (RichLabel richlabel)</td></tr>
<tr class="memdesc:af87422e6ef851dcb428af7948c77d7e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">GetRichLabel.  <a href="#af87422e6ef851dcb428af7948c77d7e2">More...</a><br /></td></tr>
<tr class="separator:af87422e6ef851dcb428af7948c77d7e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee13914671bc3c32064ca985adddc623"><td class="memItemLeft" align="right" valign="top"><a id="aee13914671bc3c32064ca985adddc623"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>AddLabel</b> (float x, float y, float z, string text, bool alVis=false)</td></tr>
<tr class="separator:aee13914671bc3c32064ca985adddc623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b299565ee64354c82f4c01773ac8c35"><td class="memItemLeft" align="right" valign="top"><a id="a2b299565ee64354c82f4c01773ac8c35"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>RemoveLabels</b> ()</td></tr>
<tr class="separator:a2b299565ee64354c82f4c01773ac8c35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">ruler</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods controlling the ruler </p>
</div></td></tr>
<tr class="memitem:a07454bde8fde4da8663bf1c11af4bfd2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a07454bde8fde4da8663bf1c11af4bfd2">setRuler</a> (bool on)</td></tr>
<tr class="memdesc:a07454bde8fde4da8663bf1c11af4bfd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets visibility of ruler.  <a href="#a07454bde8fde4da8663bf1c11af4bfd2">More...</a><br /></td></tr>
<tr class="separator:a07454bde8fde4da8663bf1c11af4bfd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae103953ef85891c75590ac14875409b8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ae103953ef85891c75590ac14875409b8">showRuler</a> ()</td></tr>
<tr class="separator:ae103953ef85891c75590ac14875409b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">VIEW</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods controlling the scene view </p>
</div></td></tr>
<tr class="memitem:a7aef90b83a24d2a1ea4d8729afc3cfc5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a7aef90b83a24d2a1ea4d8729afc3cfc5">setPerspective</a> (bool persp)</td></tr>
<tr class="separator:a7aef90b83a24d2a1ea4d8729afc3cfc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c0815264ec971f6464513386bdf6245"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a7c0815264ec971f6464513386bdf6245">setCoordinateAxes</a> (bool persp)</td></tr>
<tr class="separator:a7c0815264ec971f6464513386bdf6245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0b92d97141bfb67678abdab74c2b71c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ad0b92d97141bfb67678abdab74c2b71c">setCoordinateAxesLabels</a> (string x, string y, string z)</td></tr>
<tr class="separator:ad0b92d97141bfb67678abdab74c2b71c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41f1cdefdd5165beee995e366b508a7c"><td class="memItemLeft" align="right" valign="top"><a id="a41f1cdefdd5165beee995e366b508a7c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>getPerspective</b> ()</td></tr>
<tr class="separator:a41f1cdefdd5165beee995e366b508a7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2a32ef93b413945ed7fff804e1e76a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a5c2a32ef93b413945ed7fff804e1e76a">getCoordinateAxes</a> ()</td></tr>
<tr class="separator:a5c2a32ef93b413945ed7fff804e1e76a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa129dfdc61a2fe7267b6c25b32009871"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aa129dfdc61a2fe7267b6c25b32009871">SetRotation</a> (float angle, float x, float y, float z)</td></tr>
<tr class="memdesc:aa129dfdc61a2fe7267b6c25b32009871"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resetting all rotatation information to its origin setting the new definition afterwards.  <a href="#aa129dfdc61a2fe7267b6c25b32009871">More...</a><br /></td></tr>
<tr class="separator:aa129dfdc61a2fe7267b6c25b32009871"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3188f4e6122602d4fe6379b9fdf99dd5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a3188f4e6122602d4fe6379b9fdf99dd5">AddRotation</a> (float angle)</td></tr>
<tr class="memdesc:a3188f4e6122602d4fe6379b9fdf99dd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the given angle to the actual rotation The rotation axis is determined by GetRotation.  <a href="#a3188f4e6122602d4fe6379b9fdf99dd5">More...</a><br /></td></tr>
<tr class="separator:a3188f4e6122602d4fe6379b9fdf99dd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ad20e2855d48cab373d7f054207f8cb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a3ad20e2855d48cab373d7f054207f8cb">AddRotation</a> (float angle, float x, float y, float z)</td></tr>
<tr class="memdesc:a3ad20e2855d48cab373d7f054207f8cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the given angle to the actual rotation.  <a href="#a3ad20e2855d48cab373d7f054207f8cb">More...</a><br /></td></tr>
<tr class="separator:a3ad20e2855d48cab373d7f054207f8cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf7d622731c0777294b1ed09e7a610b5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#acf7d622731c0777294b1ed09e7a610b5">GetRotation</a> (float angle, float x, float y, float z)</td></tr>
<tr class="memdesc:acf7d622731c0777294b1ed09e7a610b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">get current rotation expressed in angle/axis form  <a href="#acf7d622731c0777294b1ed09e7a610b5">More...</a><br /></td></tr>
<tr class="separator:acf7d622731c0777294b1ed09e7a610b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40123121aca4d237fde6675075a6314a"><td class="memItemLeft" align="right" valign="top"><a id="a40123121aca4d237fde6675075a6314a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>RemoveRotations</b> ()</td></tr>
<tr class="separator:a40123121aca4d237fde6675075a6314a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7d59fffd8b830f1e34093328b47824c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ac7d59fffd8b830f1e34093328b47824c">SetPan</a> (float x, float y)</td></tr>
<tr class="memdesc:ac7d59fffd8b830f1e34093328b47824c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the current pan values in (pixel, coordinate system?)  <a href="#ac7d59fffd8b830f1e34093328b47824c">More...</a><br /></td></tr>
<tr class="separator:ac7d59fffd8b830f1e34093328b47824c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd72fcc9bd1a9d2defcb9f8f08a2bb14"><td class="memItemLeft" align="right" valign="top"><a id="abd72fcc9bd1a9d2defcb9f8f08a2bb14"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#abd72fcc9bd1a9d2defcb9f8f08a2bb14">AddPan</a> (float x, float y)</td></tr>
<tr class="memdesc:abd72fcc9bd1a9d2defcb9f8f08a2bb14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the scene in x and y direction. <br /></td></tr>
<tr class="separator:abd72fcc9bd1a9d2defcb9f8f08a2bb14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67d1de4455103bb4997c22ba7a4c31eb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a67d1de4455103bb4997c22ba7a4c31eb">GetPan</a> (float x, float y)</td></tr>
<tr class="memdesc:a67d1de4455103bb4997c22ba7a4c31eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the current pan values  <a href="#a67d1de4455103bb4997c22ba7a4c31eb">More...</a><br /></td></tr>
<tr class="separator:a67d1de4455103bb4997c22ba7a4c31eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10665bbab8fb55ce789916651c2656f4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a10665bbab8fb55ce789916651c2656f4">SetScale</a> (float z)</td></tr>
<tr class="memdesc:a10665bbab8fb55ce789916651c2656f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets current length scale and zoom factor accordingly.  <a href="#a10665bbab8fb55ce789916651c2656f4">More...</a><br /></td></tr>
<tr class="separator:a10665bbab8fb55ce789916651c2656f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68b37648d648187291cb2eee2001a725"><td class="memItemLeft" align="right" valign="top"><a id="a68b37648d648187291cb2eee2001a725"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a68b37648d648187291cb2eee2001a725">GetScale</a> ()</td></tr>
<tr class="memdesc:a68b37648d648187291cb2eee2001a725"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets current length scale and zoom factor accordingly, see <a class="el" href="class_scene.xhtml#a10665bbab8fb55ce789916651c2656f4" title="Sets current length scale and zoom factor accordingly. ">SetScale()</a> <br /></td></tr>
<tr class="separator:a68b37648d648187291cb2eee2001a725"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc373e739b0f1a7a6e4ac8feff19f3c1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#abc373e739b0f1a7a6e4ac8feff19f3c1">SetZoom</a> (float z)</td></tr>
<tr class="memdesc:abc373e739b0f1a7a6e4ac8feff19f3c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets current zoom factor.  <a href="#abc373e739b0f1a7a6e4ac8feff19f3c1">More...</a><br /></td></tr>
<tr class="separator:abc373e739b0f1a7a6e4ac8feff19f3c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a8f15cdb6f9afa40bd41e056b18f288"><td class="memItemLeft" align="right" valign="top"><a id="a2a8f15cdb6f9afa40bd41e056b18f288"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a2a8f15cdb6f9afa40bd41e056b18f288">AddZoom</a> (float x)</td></tr>
<tr class="memdesc:a2a8f15cdb6f9afa40bd41e056b18f288"><td class="mdescLeft">&#160;</td><td class="mdescRight">AddZoom. <br /></td></tr>
<tr class="separator:a2a8f15cdb6f9afa40bd41e056b18f288"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3254afc12d576278d55c2d3d28f78189"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a3254afc12d576278d55c2d3d28f78189">GetZoom</a> ()</td></tr>
<tr class="memdesc:a3254afc12d576278d55c2d3d28f78189"><td class="mdescLeft">&#160;</td><td class="mdescRight">get current zoom factor  <a href="#a3254afc12d576278d55c2d3d28f78189">More...</a><br /></td></tr>
<tr class="separator:a3254afc12d576278d55c2d3d28f78189"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85b4703cde35c8301a2fa0ae6756817d"><td class="memItemLeft" align="right" valign="top"><a id="a85b4703cde35c8301a2fa0ae6756817d"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>getScale</b> () const</td></tr>
<tr class="separator:a85b4703cde35c8301a2fa0ae6756817d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6277d778c4be02d094b9767f2dcb9e1a"><td class="memItemLeft" align="right" valign="top"><a id="a6277d778c4be02d094b9767f2dcb9e1a"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>getRealScale</b> () const</td></tr>
<tr class="separator:a6277d778c4be02d094b9767f2dcb9e1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73a961c5973fd81d74b8dea9eaa4dca7"><td class="memItemLeft" align="right" valign="top"><a id="a73a961c5973fd81d74b8dea9eaa4dca7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a73a961c5973fd81d74b8dea9eaa4dca7">Autoscale</a> ()</td></tr>
<tr class="memdesc:a73a961c5973fd81d74b8dea9eaa4dca7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust scaling such that the entire structure is visible when be viewed from all angles. <br /></td></tr>
<tr class="separator:a73a961c5973fd81d74b8dea9eaa4dca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a33a471ea882fd9d56114b5b1c694f1"><td class="memItemLeft" align="right" valign="top"><a id="a1a33a471ea882fd9d56114b5b1c694f1"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a1a33a471ea882fd9d56114b5b1c694f1">Fit</a> ()</td></tr>
<tr class="memdesc:a1a33a471ea882fd9d56114b5b1c694f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust scaling such that the entire structure fills the viewport when viewed from current angle. <br /></td></tr>
<tr class="separator:a1a33a471ea882fd9d56114b5b1c694f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa30a3648e39044563841842c7e204ae"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3f&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aaa30a3648e39044563841842c7e204ae">mappedVector</a> (Eigen::Vector3f orig)</td></tr>
<tr class="memdesc:aaa30a3648e39044563841842c7e204ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maps actual position vector into view space (-32767 - 32767)  <a href="#aaa30a3648e39044563841842c7e204ae">More...</a><br /></td></tr>
<tr class="separator:aaa30a3648e39044563841842c7e204ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SLICING</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods controlling the slice </p>
</div></td></tr>
<tr class="memitem:acd1504f6a3c038cffa4b004b7f794227"><td class="memItemLeft" align="right" valign="top"><a id="acd1504f6a3c038cffa4b004b7f794227"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#acd1504f6a3c038cffa4b004b7f794227">initSlice</a> ()</td></tr>
<tr class="memdesc:acd1504f6a3c038cffa4b004b7f794227"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes a slicing plane in the half of the scene viewer widget in the viewing direction of the user Initializes a slicing plane in body coordinate system cutting through the half of the scene viewer widget. The normal vector is defined in the screen plane pointing in x-direction (from left to right) suppressing all body parts left to the slicing plane. <br /></td></tr>
<tr class="separator:acd1504f6a3c038cffa4b004b7f794227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd45c2ddbf316f7650c7ff2817759d0c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#acd45c2ddbf316f7650c7ff2817759d0c">SetSlice</a> (std::vector&lt; float &gt; pt, std::vector&lt; float &gt; dir)</td></tr>
<tr class="memdesc:acd45c2ddbf316f7650c7ff2817759d0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines a slicing plane in Hessian normal form in terms of a point and a direction vector.  <a href="#acd45c2ddbf316f7650c7ff2817759d0c">More...</a><br /></td></tr>
<tr class="separator:acd45c2ddbf316f7650c7ff2817759d0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38dd17334b3049e6973e3c90f373f970"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a38dd17334b3049e6973e3c90f373f970">SetSlice</a> (float <a class="el" href="group__tmath.xhtml#ga7e205066f67b9e3fd4c8cbd5859e8da3">a</a>, float b, float c, float d)</td></tr>
<tr class="memdesc:a38dd17334b3049e6973e3c90f373f970"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines a slicing plane in Hessian normal form by normalizing the paramters $a$, $b$, $c$, and $d$ given Only points with coordinates satisfying $ax+by+cz+d &gt; 0$ are shown, the rest is suppressed.  <a href="#a38dd17334b3049e6973e3c90f373f970">More...</a><br /></td></tr>
<tr class="separator:a38dd17334b3049e6973e3c90f373f970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa9bdea86739707baeafce9b104ebad5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aaa9bdea86739707baeafce9b104ebad5">isSliced</a> ()</td></tr>
<tr class="separator:aaa9bdea86739707baeafce9b104ebad5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01f31efb33bd550d6e61d7698ecbefd5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a01f31efb33bd550d6e61d7698ecbefd5">getSlice</a> (float <a class="el" href="group__tmath.xhtml#ga7e205066f67b9e3fd4c8cbd5859e8da3">a</a>, float b, float c, float d)</td></tr>
<tr class="memdesc:a01f31efb33bd550d6e61d7698ecbefd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get current slicing plane in Hessian normal form given by the equation <img class="formulaInl" alt="$\hat{n}x = -p$" src="form_2.png"/>.  <a href="#a01f31efb33bd550d6e61d7698ecbefd5">More...</a><br /></td></tr>
<tr class="separator:a01f31efb33bd550d6e61d7698ecbefd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05abf562d065b7fd4657ade1385c8bca"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a05abf562d065b7fd4657ade1385c8bca">removeSlice</a> ()</td></tr>
<tr class="separator:a05abf562d065b7fd4657ade1385c8bca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc6aea2f4993b0c88332fb86628a25ae"><td class="memItemLeft" align="right" valign="top"><a id="afc6aea2f4993b0c88332fb86628a25ae"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>currentMatrix</b> (QMatrix4x4 mat)</td></tr>
<tr class="separator:afc6aea2f4993b0c88332fb86628a25ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dbdd22cdfb5ef078f7d8660a9a5d2be"><td class="memItemLeft" align="right" valign="top"><a id="a0dbdd22cdfb5ef078f7d8660a9a5d2be"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>projectPoint</b> (number x, number y, number z, number u, numberv, number w, QMatrix4x4 mat)</td></tr>
<tr class="separator:a0dbdd22cdfb5ef078f7d8660a9a5d2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1fa8134f54d8328ae648f6413dff419"><td class="memItemLeft" align="right" valign="top"><a id="ac1fa8134f54d8328ae648f6413dff419"></a>
Eigen::Quaternionf&#160;</td><td class="memItemRight" valign="bottom"><b>rotQuaternion</b> () const</td></tr>
<tr class="separator:ac1fa8134f54d8328ae648f6413dff419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">SELECTION</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods controlling the selection </p>
</div></td></tr>
<tr class="memitem:a287f51df5268007e4828159bcff3079c"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a287f51df5268007e4828159bcff3079c">select</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, <a class="el" href="class_element.xhtml">Element</a> *element, number value, bool showLabel)</td></tr>
<tr class="memdesc:a287f51df5268007e4828159bcff3079c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests if the given element is in FEM set and if so marks it with value given as selected.  <a href="#a287f51df5268007e4828159bcff3079c">More...</a><br /></td></tr>
<tr class="separator:a287f51df5268007e4828159bcff3079c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5798cbc7576fa42d09c369280a82c571"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a5798cbc7576fa42d09c369280a82c571">select</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, Point *node, number value, bool isPoint, bool showLabel)</td></tr>
<tr class="memdesc:a5798cbc7576fa42d09c369280a82c571"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests if the given node is in an active FEM set and if so marks it with value given as selected.  <a href="#a5798cbc7576fa42d09c369280a82c571">More...</a><br /></td></tr>
<tr class="separator:a5798cbc7576fa42d09c369280a82c571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c62fd0ee90f6a105651e10e8948c539"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a2c62fd0ee90f6a105651e10e8948c539">selectEntitiesInRect</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, QRect rect, bool keep_selection, number max_selectable, bool showLabel)</td></tr>
<tr class="memdesc:a2c62fd0ee90f6a105651e10e8948c539"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls the select method for all visible mapped vertices/nodes and triangles/elements in a selection rectangle on the screen The called select method ensures that only items within an active FEM set will be selectable. See select for further information.  <a href="#a2c62fd0ee90f6a105651e10e8948c539">More...</a><br /></td></tr>
<tr class="separator:a2c62fd0ee90f6a105651e10e8948c539"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36515a6829bc53e9ecde031ee8b541e2"><td class="memItemLeft" align="right" valign="top"><a id="a36515a6829bc53e9ecde031ee8b541e2"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a36515a6829bc53e9ecde031ee8b541e2">markVerticesAsSelected</a> ()</td></tr>
<tr class="memdesc:a36515a6829bc53e9ecde031ee8b541e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks all vertices of the scene belonging to selected points as selected (used for visualization only) <br /></td></tr>
<tr class="separator:a36515a6829bc53e9ecde031ee8b541e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3603df3ad7f023009963aa4da35d4d07"><td class="memItemLeft" align="right" valign="top"><a id="a3603df3ad7f023009963aa4da35d4d07"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a3603df3ad7f023009963aa4da35d4d07">markTrianglesAsSelected</a> ()</td></tr>
<tr class="memdesc:a3603df3ad7f023009963aa4da35d4d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks all triangles of the scene belonging to selected elements as selected (used for visualization only) <br /></td></tr>
<tr class="separator:a3603df3ad7f023009963aa4da35d4d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4562daf9688f00502b7de9b2ae3d9b0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ab4562daf9688f00502b7de9b2ae3d9b0">isSelected</a> (<a class="el" href="class_element.xhtml">Element</a> *element)</td></tr>
<tr class="memdesc:ab4562daf9688f00502b7de9b2ae3d9b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">isSelected  <a href="#ab4562daf9688f00502b7de9b2ae3d9b0">More...</a><br /></td></tr>
<tr class="separator:ab4562daf9688f00502b7de9b2ae3d9b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e3f8c78ffaccf19202959faf583b07"><td class="memItemLeft" align="right" valign="top"><a id="a83e3f8c78ffaccf19202959faf583b07"></a>
virtual number&#160;</td><td class="memItemRight" valign="bottom"><b>getNumSelectedTriangles</b> ()</td></tr>
<tr class="separator:a83e3f8c78ffaccf19202959faf583b07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3bdf9b1987b1fb7cab665ce1c9d086a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ab3bdf9b1987b1fb7cab665ce1c9d086a">isSelected</a> (Point *node)</td></tr>
<tr class="memdesc:ab3bdf9b1987b1fb7cab665ce1c9d086a"><td class="mdescLeft">&#160;</td><td class="mdescRight">isSelected  <a href="#ab3bdf9b1987b1fb7cab665ce1c9d086a">More...</a><br /></td></tr>
<tr class="separator:ab3bdf9b1987b1fb7cab665ce1c9d086a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a4f0c3d3fde7277dfb093f42d345286"><td class="memItemLeft" align="right" valign="top"><a id="a4a4f0c3d3fde7277dfb093f42d345286"></a>
virtual number&#160;</td><td class="memItemRight" valign="bottom"><b>getNumSelectedVertices</b> ()</td></tr>
<tr class="separator:a4a4f0c3d3fde7277dfb093f42d345286"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca131179fa2863e4ef450a8af8128de6"><td class="memItemLeft" align="right" valign="top"><a id="aca131179fa2863e4ef450a8af8128de6"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aca131179fa2863e4ef450a8af8128de6">clearSelection</a> ()</td></tr>
<tr class="memdesc:aca131179fa2863e4ef450a8af8128de6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets all selection markers. Resets all selection markers including: Vertices, Triangles, Nodes, Elements, Labels. Does not perform an automatic redraw. <br /></td></tr>
<tr class="separator:aca131179fa2863e4ef450a8af8128de6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a6db54dad5010ed5efc232966141ec5"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a4a6db54dad5010ed5efc232966141ec5">getSelectedElementIndices</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>)</td></tr>
<tr class="separator:a4a6db54dad5010ed5efc232966141ec5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae604ebacbf443a780c7f3b08011c57ad"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ae604ebacbf443a780c7f3b08011c57ad">getSelectedNodeIndices</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>)</td></tr>
<tr class="separator:ae604ebacbf443a780c7f3b08011c57ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4f042c5b46694ad58ac461ff82d8f30"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#af4f042c5b46694ad58ac461ff82d8f30">printSelectionInfo</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>)</td></tr>
<tr class="memdesc:af4f042c5b46694ad58ac461ff82d8f30"><td class="mdescLeft">&#160;</td><td class="mdescRight">prints some limited information on the current selection  <a href="#af4f042c5b46694ad58ac461ff82d8f30">More...</a><br /></td></tr>
<tr class="separator:af4f042c5b46694ad58ac461ff82d8f30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd5054f148dedb37797199c08f46f3c8"><td class="memItemLeft" align="right" valign="top"><a id="acd5054f148dedb37797199c08f46f3c8"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#acd5054f148dedb37797199c08f46f3c8">selectNodesFromVertices</a> ()</td></tr>
<tr class="memdesc:acd5054f148dedb37797199c08f46f3c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs through all selected vertices and selects their node counterparts as well. <br /></td></tr>
<tr class="separator:acd5054f148dedb37797199c08f46f3c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a089be830d387c1aa3930bd8b00a5bbbe"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a089be830d387c1aa3930bd8b00a5bbbe">getNodeDistance</a> (MatrixXhf coor, QRect rect, bool surfaceOnly, QMatrix4x4 mat)</td></tr>
<tr class="memdesc:a089be830d387c1aa3930bd8b00a5bbbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the distance between the mapped nodal coordinates and the midpoint of the selection rectangle given. Maps the nodal coordinates given to window coordinates and returns the distance between this point and the midpoint of the window selection rectangle given.  <a href="#a089be830d387c1aa3930bd8b00a5bbbe">More...</a><br /></td></tr>
<tr class="separator:a089be830d387c1aa3930bd8b00a5bbbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c2b6fa2fcf5d4c04a16bea9324bee98"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a0c2b6fa2fcf5d4c04a16bea9324bee98">getNodeDistance</a> (Point *node, QRect rect, bool surfaceOnly, QMatrix4x4 mat)</td></tr>
<tr class="memdesc:a0c2b6fa2fcf5d4c04a16bea9324bee98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the distance between the mapped nodal coordinates and the midpoint of the selection rectangle given. Maps the nodal coordinates given to window coordinates and returns the distance between this point and the midpoint of the window selection rectangle given.  <a href="#a0c2b6fa2fcf5d4c04a16bea9324bee98">More...</a><br /></td></tr>
<tr class="separator:a0c2b6fa2fcf5d4c04a16bea9324bee98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48b4d34cfd3c3176c6ebbc0f2dc4e2c3"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a48b4d34cfd3c3176c6ebbc0f2dc4e2c3">getElementDistance</a> (<a class="el" href="class_element.xhtml">Element</a> *element, QRect rect, QMatrix4x4 mat)</td></tr>
<tr class="memdesc:a48b4d34cfd3c3176c6ebbc0f2dc4e2c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the distance between the mapped mean value of the elements nodal coordinates and the midpoint of the selection rectangle given Maps the mean value of the elements nodal coordinates components given to window coordinates and returns the distance between this point and the midpoint of the window selection rectangle given.  <a href="#a48b4d34cfd3c3176c6ebbc0f2dc4e2c3">More...</a><br /></td></tr>
<tr class="separator:a48b4d34cfd3c3176c6ebbc0f2dc4e2c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd61a4289ca5f64efe0624cbbf6c0b84"><td class="memItemLeft" align="right" valign="top"><a id="abd61a4289ca5f64efe0624cbbf6c0b84"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>printSelectedNodes</b> ()</td></tr>
<tr class="separator:abd61a4289ca5f64efe0624cbbf6c0b84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa67c0fa02b255224bdaaaf9bef628274"><td class="memItemLeft" align="right" valign="top"><a id="aa67c0fa02b255224bdaaaf9bef628274"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>printSelectedElements</b> ()</td></tr>
<tr class="separator:aa67c0fa02b255224bdaaaf9bef628274"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad32d6c900eb671165a88735cba9e3652"><td class="memItemLeft" align="right" valign="top"><a id="ad32d6c900eb671165a88735cba9e3652"></a>
graphics::VerticesNormalsVisibility&#160;</td><td class="memItemRight" valign="bottom"><b>getvnv</b> ()</td></tr>
<tr class="separator:ad32d6c900eb671165a88735cba9e3652"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Miscellaneous</h2></td></tr>
<tr class="memitem:ac12d16e763ecf92d27276b9790568dcb"><td class="memItemLeft" align="right" valign="top"><a id="ac12d16e763ecf92d27276b9790568dcb"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ac12d16e763ecf92d27276b9790568dcb">m_current_scene_tet_coordinates</a></td></tr>
<tr class="memdesc:ac12d16e763ecf92d27276b9790568dcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Currently used coordinates for the tet vertices. Is empty if the undeformed coordinates are used. <br /></td></tr>
<tr class="separator:ac12d16e763ecf92d27276b9790568dcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57944d6e68fa650994e96d8a926a2943"><td class="memItemLeft" align="right" valign="top"><a id="a57944d6e68fa650994e96d8a926a2943"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a57944d6e68fa650994e96d8a926a2943">m_have_current_coordinates</a></td></tr>
<tr class="memdesc:a57944d6e68fa650994e96d8a926a2943"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do we have changed coordinates? <br /></td></tr>
<tr class="separator:a57944d6e68fa650994e96d8a926a2943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e44c68b6c09ba0ba8dded2e71fa86cb"><td class="memItemLeft" align="right" valign="top"><a id="a9e44c68b6c09ba0ba8dded2e71fa86cb"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a9e44c68b6c09ba0ba8dded2e71fa86cb">m_current_scene_coordinates</a></td></tr>
<tr class="memdesc:a9e44c68b6c09ba0ba8dded2e71fa86cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Currently used coordinates for the vertices. Is empty, if the undeformed coordinates are used. <br /></td></tr>
<tr class="separator:a9e44c68b6c09ba0ba8dded2e71fa86cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54e9c71fb5aba9c14aff6f23cc191231"><td class="memItemLeft" align="right" valign="top"><a id="a54e9c71fb5aba9c14aff6f23cc191231"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a54e9c71fb5aba9c14aff6f23cc191231">m_current_unconnected_point_coordinates</a></td></tr>
<tr class="memdesc:a54e9c71fb5aba9c14aff6f23cc191231"><td class="mdescLeft">&#160;</td><td class="mdescRight">Currently used coordinates for the vertices. Is empty, if the undeformed coordinates are used. <br /></td></tr>
<tr class="separator:a54e9c71fb5aba9c14aff6f23cc191231"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebda26bb5fbe2afd6d73f6806347c837"><td class="memItemLeft" align="right" valign="top"><a id="aebda26bb5fbe2afd6d73f6806347c837"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aebda26bb5fbe2afd6d73f6806347c837">m_current_scene_normals</a></td></tr>
<tr class="memdesc:aebda26bb5fbe2afd6d73f6806347c837"><td class="mdescLeft">&#160;</td><td class="mdescRight">Currently used normals for the vertices. Is empty if the undeformed coordinates are used. <br /></td></tr>
<tr class="separator:aebda26bb5fbe2afd6d73f6806347c837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8192e2ef00396b79b33f94b20cb912b9"><td class="memItemLeft" align="right" valign="top"><a id="a8192e2ef00396b79b33f94b20cb912b9"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a8192e2ef00396b79b33f94b20cb912b9">m_current_scene_outline_coordinates</a></td></tr>
<tr class="memdesc:a8192e2ef00396b79b33f94b20cb912b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Currently used coordinates for the outline vertices. Is empty if the undeformed coordinates are used. <br /></td></tr>
<tr class="separator:a8192e2ef00396b79b33f94b20cb912b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f7cd78b0ef0471105b44151e6e0868f"><td class="memItemLeft" align="right" valign="top">MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a4f7cd78b0ef0471105b44151e6e0868f">currentTetCoordinates</a> () const</td></tr>
<tr class="separator:a4f7cd78b0ef0471105b44151e6e0868f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7719777eeb3c9b36b8df97eb00975286"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a7719777eeb3c9b36b8df97eb00975286">haveCurrentCoordinates</a> ()</td></tr>
<tr class="separator:a7719777eeb3c9b36b8df97eb00975286"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a187466469cfb07571f9f494a236d8466"><td class="memItemLeft" align="right" valign="top">MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a187466469cfb07571f9f494a236d8466">currentCoordinates</a> () const</td></tr>
<tr class="separator:a187466469cfb07571f9f494a236d8466"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a743a4d711e53b93bbb253a9229a3c101"><td class="memItemLeft" align="right" valign="top"><a id="a743a4d711e53b93bbb253a9229a3c101"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a743a4d711e53b93bbb253a9229a3c101">getCurrentUnconnectedPointCoordinates</a> ()</td></tr>
<tr class="memdesc:a743a4d711e53b93bbb253a9229a3c101"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns either the raw unconnected point coordinates or the (hacked) morphed point coordinates if mesh morphing was enabled <br /></td></tr>
<tr class="separator:a743a4d711e53b93bbb253a9229a3c101"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b325a6f280742d3b06a20196c57f01e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a7b325a6f280742d3b06a20196c57f01e">SetUnconnectedPointCoordinates</a> (<a class="el" href="class_matrix.xhtml">Matrix</a> coor)</td></tr>
<tr class="memdesc:a7b325a6f280742d3b06a20196c57f01e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets morphed coordinates of unconnected points.  <a href="#a7b325a6f280742d3b06a20196c57f01e">More...</a><br /></td></tr>
<tr class="separator:a7b325a6f280742d3b06a20196c57f01e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15961a85b2b62c89830eb160d7948a64"><td class="memItemLeft" align="right" valign="top"><a id="a15961a85b2b62c89830eb160d7948a64"></a>
MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a15961a85b2b62c89830eb160d7948a64">getRawUnconnectedPointCoordinates</a> ()</td></tr>
<tr class="memdesc:a15961a85b2b62c89830eb160d7948a64"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the coordinates of all points without modification <br /></td></tr>
<tr class="separator:a15961a85b2b62c89830eb160d7948a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4c92104420ac579c07946e7bcf7564"><td class="memItemLeft" align="right" valign="top"><a id="aef4c92104420ac579c07946e7bcf7564"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aef4c92104420ac579c07946e7bcf7564">getRawModelScaleWithoutTheStrangeTransformations</a> ()</td></tr>
<tr class="memdesc:aef4c92104420ac579c07946e7bcf7564"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the value that is probably the model space scale <br /></td></tr>
<tr class="separator:aef4c92104420ac579c07946e7bcf7564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a324de892023edd0712d2c2d5d9a9645d"><td class="memItemLeft" align="right" valign="top">MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a324de892023edd0712d2c2d5d9a9645d">currentNormals</a> () const</td></tr>
<tr class="separator:a324de892023edd0712d2c2d5d9a9645d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48d519bbc7d9edcff9ad8e3a16098fab"><td class="memItemLeft" align="right" valign="top">MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a48d519bbc7d9edcff9ad8e3a16098fab">currentOutlineCoordinates</a> () const</td></tr>
<tr class="separator:a48d519bbc7d9edcff9ad8e3a16098fab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acff3ea4a0700643aedfe199133e81084"><td class="memItemLeft" align="right" valign="top">Eigen::MatrixXf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#acff3ea4a0700643aedfe199133e81084">getSphereVertices</a> ()</td></tr>
<tr class="memdesc:acff3ea4a0700643aedfe199133e81084"><td class="mdescLeft">&#160;</td><td class="mdescRight">get vertices of a unit sphere  <a href="#acff3ea4a0700643aedfe199133e81084">More...</a><br /></td></tr>
<tr class="separator:acff3ea4a0700643aedfe199133e81084"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6724f50b4207f54aefbc744ef88ec0fd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a6724f50b4207f54aefbc744ef88ec0fd">setPointSize</a> (float size)</td></tr>
<tr class="memdesc:a6724f50b4207f54aefbc744ef88ec0fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the size of points relative to model size  <a href="#a6724f50b4207f54aefbc744ef88ec0fd">More...</a><br /></td></tr>
<tr class="separator:a6724f50b4207f54aefbc744ef88ec0fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43770b9c600b78afa660ac9d40c723cb"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a43770b9c600b78afa660ac9d40c723cb">getPointSize</a> ()</td></tr>
<tr class="memdesc:a43770b9c600b78afa660ac9d40c723cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the size of points relative to model size  <a href="#a43770b9c600b78afa660ac9d40c723cb">More...</a><br /></td></tr>
<tr class="separator:a43770b9c600b78afa660ac9d40c723cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ee56e4b222eb79feb5fc73ce1528d10"><td class="memItemLeft" align="right" valign="top">Eigen::MatrixXf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a1ee56e4b222eb79feb5fc73ce1528d10">getSphereNormals</a> ()</td></tr>
<tr class="memdesc:a1ee56e4b222eb79feb5fc73ce1528d10"><td class="mdescLeft">&#160;</td><td class="mdescRight">get normals of a unit sphere  <a href="#a1ee56e4b222eb79feb5fc73ce1528d10">More...</a><br /></td></tr>
<tr class="separator:a1ee56e4b222eb79feb5fc73ce1528d10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0b580012767de6b9cee6550fa1f1913"><td class="memItemLeft" align="right" valign="top">number&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ac0b580012767de6b9cee6550fa1f1913">getNumPoints</a> ()</td></tr>
<tr class="memdesc:ac0b580012767de6b9cee6550fa1f1913"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the number points  <a href="#ac0b580012767de6b9cee6550fa1f1913">More...</a><br /></td></tr>
<tr class="separator:ac0b580012767de6b9cee6550fa1f1913"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00fe2a48f2c8a282aada8a4c00914f45"><td class="memItemLeft" align="right" valign="top">VectorXuc&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a00fe2a48f2c8a282aada8a4c00914f45">getPointColors</a> ()</td></tr>
<tr class="memdesc:a00fe2a48f2c8a282aada8a4c00914f45"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the colors of all points  <a href="#a00fe2a48f2c8a282aada8a4c00914f45">More...</a><br /></td></tr>
<tr class="separator:a00fe2a48f2c8a282aada8a4c00914f45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f2f412f1b1b00f95a58f28b6d231526"><td class="memItemLeft" align="right" valign="top"><a id="a7f2f412f1b1b00f95a58f28b6d231526"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a7f2f412f1b1b00f95a58f28b6d231526">PrepareVBOSelected</a> ()</td></tr>
<tr class="memdesc:a7f2f412f1b1b00f95a58f28b6d231526"><td class="mdescLeft">&#160;</td><td class="mdescRight">prepare vertices/normals for selected entities <br /></td></tr>
<tr class="separator:a7f2f412f1b1b00f95a58f28b6d231526"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2719053695b348b09a0587debc6e4b4"><td class="memItemLeft" align="right" valign="top"><a id="ab2719053695b348b09a0587debc6e4b4"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ab2719053695b348b09a0587debc6e4b4">getModelCenter</a> (float x, float y, float z)</td></tr>
<tr class="memdesc:ab2719053695b348b09a0587debc6e4b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">writes the center coordinates to input coordinates x,y and z <br /></td></tr>
<tr class="separator:ab2719053695b348b09a0587debc6e4b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3807ab35d2750410be14663334ef944"><td class="memItemLeft" align="right" valign="top">MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ae3807ab35d2750410be14663334ef944">getVisibleTetCoordinates</a> ()</td></tr>
<tr class="memdesc:ae3807ab35d2750410be14663334ef944"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the coordinates of all visible tet vertices  <a href="#ae3807ab35d2750410be14663334ef944">More...</a><br /></td></tr>
<tr class="separator:ae3807ab35d2750410be14663334ef944"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a94ab4fe712f7c09489246cd5d476de"><td class="memItemLeft" align="right" valign="top">MatrixXhf&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a6a94ab4fe712f7c09489246cd5d476de">getVisibleCoordinates</a> ()</td></tr>
<tr class="memdesc:a6a94ab4fe712f7c09489246cd5d476de"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the coordinates of all visible vertices  <a href="#a6a94ab4fe712f7c09489246cd5d476de">More...</a><br /></td></tr>
<tr class="separator:a6a94ab4fe712f7c09489246cd5d476de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88a7807fd65fd5bf216310aaf1c74c10"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a88a7807fd65fd5bf216310aaf1c74c10">isVertexSelected</a> (int i)</td></tr>
<tr class="memdesc:a88a7807fd65fd5bf216310aaf1c74c10"><td class="mdescLeft">&#160;</td><td class="mdescRight">determine if a given vertex is currently selected  <a href="#a88a7807fd65fd5bf216310aaf1c74c10">More...</a><br /></td></tr>
<tr class="separator:a88a7807fd65fd5bf216310aaf1c74c10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a611fb42d6a8703d5e701b794db9d1848"><td class="memItemLeft" align="right" valign="top"><a id="a611fb42d6a8703d5e701b794db9d1848"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a611fb42d6a8703d5e701b794db9d1848">ImageMargins</a> (int leftm, int rightm, int topm, int bottomm)</td></tr>
<tr class="memdesc:a611fb42d6a8703d5e701b794db9d1848"><td class="mdescLeft">&#160;</td><td class="mdescRight">get margins of structure rendering for current settings using image <br /></td></tr>
<tr class="separator:a611fb42d6a8703d5e701b794db9d1848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dbe08127b637b3781091ce9adb23f36"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a8dbe08127b637b3781091ce9adb23f36">exportTNG</a> (string file)</td></tr>
<tr class="memdesc:a8dbe08127b637b3781091ce9adb23f36"><td class="mdescLeft">&#160;</td><td class="mdescRight">export to <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> for use in slangTNG  <a href="#a8dbe08127b637b3781091ce9adb23f36">More...</a><br /></td></tr>
<tr class="separator:a8dbe08127b637b3781091ce9adb23f36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac73ebf9c7288c54301a0e6e1347cf641"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ac73ebf9c7288c54301a0e6e1347cf641">exportIsosurface_STL</a> (string file, bool replace_files=false)</td></tr>
<tr class="memdesc:ac73ebf9c7288c54301a0e6e1347cf641"><td class="mdescLeft">&#160;</td><td class="mdescRight">exports the curent isosurface to STL file  <a href="#ac73ebf9c7288c54301a0e6e1347cf641">More...</a><br /></td></tr>
<tr class="separator:ac73ebf9c7288c54301a0e6e1347cf641"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15f408f0a7dce9bd2acd6936325aca48"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a15f408f0a7dce9bd2acd6936325aca48">importTNG</a> (string file)</td></tr>
<tr class="memdesc:a15f408f0a7dce9bd2acd6936325aca48"><td class="mdescLeft">&#160;</td><td class="mdescRight">import from <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> as used in slangTNG  <a href="#a15f408f0a7dce9bd2acd6936325aca48">More...</a><br /></td></tr>
<tr class="separator:a15f408f0a7dce9bd2acd6936325aca48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0675ad75eaeb98f423bf9acb486d912"><td class="memItemLeft" align="right" valign="top">number&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#aa0675ad75eaeb98f423bf9acb486d912">getMinValue</a> ()</td></tr>
<tr class="memdesc:aa0675ad75eaeb98f423bf9acb486d912"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the the minimum data value of m_val_[node,element].dataobject_value.  <a href="#aa0675ad75eaeb98f423bf9acb486d912">More...</a><br /></td></tr>
<tr class="separator:aa0675ad75eaeb98f423bf9acb486d912"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af08e7d34c0d2c3885b2fd1279302adfe"><td class="memItemLeft" align="right" valign="top">number&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#af08e7d34c0d2c3885b2fd1279302adfe">getMaxValue</a> ()</td></tr>
<tr class="memdesc:af08e7d34c0d2c3885b2fd1279302adfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the the maximum data value of m_val_[node,element].dataobject_value.  <a href="#af08e7d34c0d2c3885b2fd1279302adfe">More...</a><br /></td></tr>
<tr class="separator:af08e7d34c0d2c3885b2fd1279302adfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada72656221408e3a4e178f7d2be87d03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ada72656221408e3a4e178f7d2be87d03">SetTetCoordinates</a> (<a class="el" href="class_matrix.xhtml">Matrix</a> coor)</td></tr>
<tr class="memdesc:ada72656221408e3a4e178f7d2be87d03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets all coordinates of tet vertices.  <a href="#ada72656221408e3a4e178f7d2be87d03">More...</a><br /></td></tr>
<tr class="separator:ada72656221408e3a4e178f7d2be87d03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b1f381d1e2ebb2299830502c5744a5f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a1b1f381d1e2ebb2299830502c5744a5f">SetCoordinates</a> (<a class="el" href="class_matrix.xhtml">Matrix</a> coor)</td></tr>
<tr class="memdesc:a1b1f381d1e2ebb2299830502c5744a5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets all coordinates of vertices.  <a href="#a1b1f381d1e2ebb2299830502c5744a5f">More...</a><br /></td></tr>
<tr class="separator:a1b1f381d1e2ebb2299830502c5744a5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a544f8832a1a54cd179d61444be0c9273"><td class="memItemLeft" align="right" valign="top"><a id="a544f8832a1a54cd179d61444be0c9273"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a544f8832a1a54cd179d61444be0c9273">ComputeCurrentNormals</a> ()</td></tr>
<tr class="memdesc:a544f8832a1a54cd179d61444be0c9273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the normals for the current visible vertex coordinates. <br /></td></tr>
<tr class="separator:a544f8832a1a54cd179d61444be0c9273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3554580ac57bae2fbad94162e999d38"><td class="memItemLeft" align="right" valign="top"><a id="ad3554580ac57bae2fbad94162e999d38"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#ad3554580ac57bae2fbad94162e999d38">ComputeCurrentOutlines</a> ()</td></tr>
<tr class="memdesc:ad3554580ac57bae2fbad94162e999d38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the values for the current visible outline coordinates. <br /></td></tr>
<tr class="separator:ad3554580ac57bae2fbad94162e999d38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69df9bda37ff69f6d979346178cc0a73"><td class="memItemLeft" align="right" valign="top"><a id="a69df9bda37ff69f6d979346178cc0a73"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>SetRange</b> (float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)</td></tr>
<tr class="separator:a69df9bda37ff69f6d979346178cc0a73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a549db152af52f31581cd7f068419dca4"><td class="memItemLeft" align="right" valign="top"><a id="a549db152af52f31581cd7f068419dca4"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>GetSize</b> (int w, int h)</td></tr>
<tr class="separator:a549db152af52f31581cd7f068419dca4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0875fff292d0ca4f436d7bed4a9a7fa7"><td class="memItemLeft" align="right" valign="top"><a id="a0875fff292d0ca4f436d7bed4a9a7fa7"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>SetSize</b> (int w, int h)</td></tr>
<tr class="separator:a0875fff292d0ca4f436d7bed4a9a7fa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7af4dba2de8ab52494d821a1b19361"><td class="memItemLeft" align="right" valign="top"><a id="a6f7af4dba2de8ab52494d821a1b19361"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a6f7af4dba2de8ab52494d821a1b19361">setSceneScaleRelative</a> (float x, float y, float z)</td></tr>
<tr class="memdesc:a6f7af4dba2de8ab52494d821a1b19361"><td class="mdescLeft">&#160;</td><td class="mdescRight">set different scaling for all three axes <br /></td></tr>
<tr class="separator:a6f7af4dba2de8ab52494d821a1b19361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a420ca3ea70a24860d44711a6b817265c"><td class="memItemLeft" align="right" valign="top"><a id="a420ca3ea70a24860d44711a6b817265c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_scene.xhtml#a420ca3ea70a24860d44711a6b817265c">getSceneScaleRelative</a> (float x, float y, float z)</td></tr>
<tr class="memdesc:a420ca3ea70a24860d44711a6b817265c"><td class="mdescLeft">&#160;</td><td class="mdescRight">get different scaling for all three axes <br /></td></tr>
<tr class="separator:a420ca3ea70a24860d44711a6b817265c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class for 3D visualization of a structure Additionally, it can display palettes and text annotations as well as rich text labels. Internally, a representation in terms of triangles only is used. Qt separation: This class contains no functionality relying on Qt classes. All methods using Qt classes are virtual and have no implementation, calling DYNARDO_LOG_WARN instead. Their implementation is done in SceneQt, part of the sos_qt_extensions module. Class <a class="el" href="class_scene.xhtml" title="A class for 3D visualization of a structure Additionally, it can display palettes and text annotation...">Scene</a> is NO QObject, but SceneQt is. Instances of <a class="el" href="class_scene.xhtml" title="A class for 3D visualization of a structure Additionally, it can display palettes and text annotation...">Scene</a> or SceneQt are created with application_makeScene(), implemented in the sos_qt_extensions or sos_noqt_extensions module respectively. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a44b8695185991dcda6a8d707f6342f70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44b8695185991dcda6a8d707f6342f70">&#9670;&nbsp;</a></span>Scene()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_scene.xhtml">Scene</a> </td>
          <td>(</td>
          <td class="paramtype">graphics::VerticesNormalsVisibility&#160;</td>
          <td class="paramname"><em>vnv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor, requires the description of the structure in terms of a <a class="el" href="struct_vertices_normals_visibility.xhtml" title="Data containing information about the structure in simplified form. ">VerticesNormalsVisibility</a> object. Initializes some defaults. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vnv</td><td>The description of the structure in terms of a <a class="el" href="struct_vertices_normals_visibility.xhtml" title="Data containing information about the structure in simplified form. ">VerticesNormalsVisibility</a> object </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a7ae6619ae28358041ab7261d57377bcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ae6619ae28358041ab7261d57377bcb">&#9670;&nbsp;</a></span>ActivateNodeValues()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ActivateNodeValues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Render the scene into a QPaintDevice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">device</td><td>QPaintDevice used for rendering </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3188f4e6122602d4fe6379b9fdf99dd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3188f4e6122602d4fe6379b9fdf99dd5">&#9670;&nbsp;</a></span>AddRotation() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">AddRotation </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the given angle to the actual rotation The rotation axis is determined by GetRotation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>The angle in grad to add </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3ad20e2855d48cab373d7f054207f8cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ad20e2855d48cab373d7f054207f8cb">&#9670;&nbsp;</a></span>AddRotation() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">AddRotation </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the given angle to the actual rotation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>x-component of rotation axis </td></tr>
    <tr><td class="paramname">y</td><td>y-component of rotation axis </td></tr>
    <tr><td class="paramname">z</td><td>z-component of rotation axis </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0c458cbcacccfd574f0c16bf306390fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c458cbcacccfd574f0c16bf306390fc">&#9670;&nbsp;</a></span>addVal2String()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addVal2String </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>the_string</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>adds a value pair to the container storing information on mapping discrete number values into strings </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the number value to be translated </td></tr>
    <tr><td class="paramname">the_string</td><td>the string to be shown in the label instead of the number value </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac30a5c478071bddc29e58719b422171e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac30a5c478071bddc29e58719b422171e">&#9670;&nbsp;</a></span>AssignValues()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">AssignValues </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_all_render_data.xhtml">AllRenderData</a>&#160;</td>
          <td class="paramname"><em>p_render_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_scene_manager.xhtml">SceneManager</a> *&#160;</td>
          <td class="paramname"><em>scene_manager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>defines data to be rendered </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_render_data</td><td>the render data </td></tr>
    <tr><td class="paramname">database</td><td>the database we refer to </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a187466469cfb07571f9f494a236d8466"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a187466469cfb07571f9f494a236d8466">&#9670;&nbsp;</a></span>currentCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MatrixXhf currentCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const-reference to m_current_scene_coordinates </dd></dl>

</div>
</div>
<a id="a324de892023edd0712d2c2d5d9a9645d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a324de892023edd0712d2c2d5d9a9645d">&#9670;&nbsp;</a></span>currentNormals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MatrixXhf currentNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const-reference to m_current_scene_normals </dd></dl>

</div>
</div>
<a id="a48d519bbc7d9edcff9ad8e3a16098fab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48d519bbc7d9edcff9ad8e3a16098fab">&#9670;&nbsp;</a></span>currentOutlineCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MatrixXhf currentOutlineCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const-reference to m_current_scene_outline_coordinates </dd></dl>

</div>
</div>
<a id="a4f7cd78b0ef0471105b44151e6e0868f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f7cd78b0ef0471105b44151e6e0868f">&#9670;&nbsp;</a></span>currentTetCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MatrixXhf currentTetCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const-reference to m_current_scene_tet_coordinates </dd></dl>

</div>
</div>
<a id="aedfcd60db2f81881828ddf066c08f2a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedfcd60db2f81881828ddf066c08f2a4">&#9670;&nbsp;</a></span>databaseImage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual databaseImage </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; char &gt;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>image_resolution_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>image_resolution_y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the small mesh image to save with the database header, without Qt: returns empty image! </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>byte array, pass by reference, will be modified to contain the QImage in a QByteArray format. </td></tr>
    <tr><td class="paramname">image_resolution_x</td><td>resolution in pixel </td></tr>
    <tr><td class="paramname">image_resolution_y</td><td>resolution in pixel </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac73ebf9c7288c54301a0e6e1347cf641"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac73ebf9c7288c54301a0e6e1347cf641">&#9670;&nbsp;</a></span>exportIsosurface_STL()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">exportIsosurface_STL </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>replace_files</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>exports the curent isosurface to STL file </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">file</td><td>name of text file for export </td></tr>
    <tr><td class="paramname">replace_files</td><td>if true, then existing files will be replace, else an error occurs </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8dbe08127b637b3781091ce9adb23f36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dbe08127b637b3781091ce9adb23f36">&#9670;&nbsp;</a></span>exportTNG()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">exportTNG </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>file</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>export to <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> for use in slangTNG </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">file</td><td>name of text file for export </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac12402e165f10a89aee0167f6d392564"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac12402e165f10a89aee0167f6d392564">&#9670;&nbsp;</a></span>File() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">File </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Renders the scene into a QImage of current size. </p>
<dl class="section return"><dt>Returns</dt><dd>a QImage Renders the scene into a QImage of given size </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">width</td><td>The width of the requested QImage </td></tr>
    <tr><td class="paramname">height</td><td>The height of the requested QImage</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a QImage Renders the finite element model of a scene into a QImage of given size</dd>
<dd>
a QImage <br />
Renders the contents of the scene to an image file using current size of the scene </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>the file name (including extension defining type of image) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5bd2e6ade908831beb8f828d9a5f2d4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bd2e6ade908831beb8f828d9a5f2d4b">&#9670;&nbsp;</a></span>File() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual File </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ww</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>hh</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Renders the contents of the scene to an image file of given size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>the file name (including extension defining type of image) </td></tr>
    <tr><td class="paramname">w</td><td>width of image </td></tr>
    <tr><td class="paramname">h</td><td>height of image </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0c20b047e7c89c25e95ad212000a64d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c20b047e7c89c25e95ad212000a64d0">&#9670;&nbsp;</a></span>font()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual font </td>
          <td>(</td>
          <td class="paramtype">QFont&#160;</td>
          <td class="paramname"><em>font</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reference to </dd></dl>
<dl class="section see"><dt>See also</dt><dd>m_font </dd></dl>

</div>
</div>
<a id="a3eb860f4f2e9a8c1964064ba259beb82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3eb860f4f2e9a8c1964064ba259beb82">&#9670;&nbsp;</a></span>GetBackground()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">GetBackground </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>red</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>green</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>blue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the first background color for the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">red</td><td>red color component (0 to 255) </td></tr>
    <tr><td class="paramname">green</td><td>green color component (0 to 255) </td></tr>
    <tr><td class="paramname">blue</td><td>blue color component (0 to 255) </td></tr>
    <tr><td class="paramname">alpha</td><td>alpha color component (0 to 255) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4254e5b8f8d3af416333fe1f7ba7cd90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4254e5b8f8d3af416333fe1f7ba7cd90">&#9670;&nbsp;</a></span>GetBackground2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">GetBackground2 </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>red</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>green</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>blue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the second background color for the scene. This defines a vertical color gradient together with the first background color. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">red</td><td>red color component (0 to 255) </td></tr>
    <tr><td class="paramname">green</td><td>green color component (0 to 255) </td></tr>
    <tr><td class="paramname">blue</td><td>blue color component (0 to 255) </td></tr>
    <tr><td class="paramname">alpha</td><td>alpha color component (0 to 255) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aeac36bc4124c2674fcb3ecf2a783afab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeac36bc4124c2674fcb3ecf2a783afab">&#9670;&nbsp;</a></span>getContours()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::VectorXf getContours </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get contour levels </p>
<dl class="section return"><dt>Returns</dt><dd>contour levels </dd></dl>

</div>
</div>
<a id="aad41fa1a2627ed00f1c0f139548772f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad41fa1a2627ed00f1c0f139548772f8">&#9670;&nbsp;</a></span>getContourSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">number getContourSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get numnber of contour levels </p>
<dl class="section return"><dt>Returns</dt><dd>number of contour levels </dd></dl>

</div>
</div>
<a id="a1d561084bb7c615c3373c4403a164046"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d561084bb7c615c3373c4403a164046">&#9670;&nbsp;</a></span>GetContourType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">graphics::Scene::contourType GetContourType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GetContourType. </p>
<dl class="section return"><dt>Returns</dt><dd>contour type of scene </dd></dl>

</div>
</div>
<a id="a5c2a32ef93b413945ed7fff804e1e76a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c2a32ef93b413945ed7fff804e1e76a">&#9670;&nbsp;</a></span>getCoordinateAxes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool getCoordinateAxes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the state of rendering coordinate axes </p><dl class="section return"><dt>Returns</dt><dd>True if drawing of axes is activated, false otherwise </dd></dl>

</div>
</div>
<a id="a48b4d34cfd3c3176c6ebbc0f2dc4e2c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48b4d34cfd3c3176c6ebbc0f2dc4e2c3">&#9670;&nbsp;</a></span>getElementDistance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float getElementDistance </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_element.xhtml">Element</a> *&#160;</td>
          <td class="paramname"><em>element</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QRect&#160;</td>
          <td class="paramname"><em>rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QMatrix4x4&#160;</td>
          <td class="paramname"><em>mat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the distance between the mapped mean value of the elements nodal coordinates and the midpoint of the selection rectangle given Maps the mean value of the elements nodal coordinates components given to window coordinates and returns the distance between this point and the midpoint of the window selection rectangle given. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">element</td><td>An element of the displayed structure </td></tr>
    <tr><td class="paramname">rect</td><td>The selection rectangle </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The distance between the mapped mean value of the elements nodal coordinates given and the midpoint of the selection rectangle given if the mapped point is inside or on the edge of the selection rectangle given. 1e33 otherwise. </dd></dl>

</div>
</div>
<a id="af08e7d34c0d2c3885b2fd1279302adfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af08e7d34c0d2c3885b2fd1279302adfe">&#9670;&nbsp;</a></span>getMaxValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">number getMaxValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the the maximum data value of m_val_[node,element].dataobject_value. </p>
<dl class="section return"><dt>Returns</dt><dd>The maximum data value of the total scene dataobject or 1 if m_val_[node,element].dataobect_value is empty </dd></dl>

</div>
</div>
<a id="aa0675ad75eaeb98f423bf9acb486d912"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0675ad75eaeb98f423bf9acb486d912">&#9670;&nbsp;</a></span>getMinValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">number getMinValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the the minimum data value of m_val_[node,element].dataobject_value. </p>
<dl class="section return"><dt>Returns</dt><dd>The minimum data value of the total scene dataobject or 0 if m_val_[node,element].dataobect_value is empty </dd></dl>

</div>
</div>
<a id="a089be830d387c1aa3930bd8b00a5bbbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a089be830d387c1aa3930bd8b00a5bbbe">&#9670;&nbsp;</a></span>getNodeDistance() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float getNodeDistance </td>
          <td>(</td>
          <td class="paramtype">MatrixXhf&#160;</td>
          <td class="paramname"><em>coor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QRect&#160;</td>
          <td class="paramname"><em>rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>surfaceOnly</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QMatrix4x4&#160;</td>
          <td class="paramname"><em>mat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the distance between the mapped nodal coordinates and the midpoint of the selection rectangle given. Maps the nodal coordinates given to window coordinates and returns the distance between this point and the midpoint of the window selection rectangle given. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coor</td><td>The coordinates of a point of the displayed structure </td></tr>
    <tr><td class="paramname">rect</td><td>The selection rectangle </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The distance between the mapped nodal coordinates and the midpoint of the rectangle given if the mapped point is inside or on the edge of the selection rectangle given. 1e33 otherwise. </dd></dl>

</div>
</div>
<a id="a0c2b6fa2fcf5d4c04a16bea9324bee98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c2b6fa2fcf5d4c04a16bea9324bee98">&#9670;&nbsp;</a></span>getNodeDistance() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float getNodeDistance </td>
          <td>(</td>
          <td class="paramtype">Point *&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QRect&#160;</td>
          <td class="paramname"><em>rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>surfaceOnly</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QMatrix4x4&#160;</td>
          <td class="paramname"><em>mat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the distance between the mapped nodal coordinates and the midpoint of the selection rectangle given. Maps the nodal coordinates given to window coordinates and returns the distance between this point and the midpoint of the window selection rectangle given. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>A point of the displayed structure </td></tr>
    <tr><td class="paramname">rect</td><td>The selection rectangle </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The distance between the mapped nodal coordinates and the midpoint of the rectangle given if the mapped point is inside or on the edge of the selection rectangle given. 1e33 otherwise. </dd></dl>

</div>
</div>
<a id="ac0b580012767de6b9cee6550fa1f1913"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0b580012767de6b9cee6550fa1f1913">&#9670;&nbsp;</a></span>getNumPoints()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">number getNumPoints </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the number points </p>
<dl class="section return"><dt>Returns</dt><dd>number of points </dd></dl>

</div>
</div>
<a id="a67d1de4455103bb4997c22ba7a4c31eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67d1de4455103bb4997c22ba7a4c31eb">&#9670;&nbsp;</a></span>GetPan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">GetPan </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the current pan values </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">x</td><td>x value of pan </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">y</td><td>y value of pan </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a00fe2a48f2c8a282aada8a4c00914f45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00fe2a48f2c8a282aada8a4c00914f45">&#9670;&nbsp;</a></span>getPointColors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">VectorXuc getPointColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the colors of all points </p>
<dl class="section return"><dt>Returns</dt><dd>colors </dd></dl>

</div>
</div>
<a id="a43770b9c600b78afa660ac9d40c723cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43770b9c600b78afa660ac9d40c723cb">&#9670;&nbsp;</a></span>getPointSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float getPointSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set the size of points relative to model size </p>
<dl class="section return"><dt>Returns</dt><dd>point size </dd></dl>

</div>
</div>
<a id="af87422e6ef851dcb428af7948c77d7e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af87422e6ef851dcb428af7948c77d7e2">&#9670;&nbsp;</a></span>GetRichLabel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual GetRichLabel </td>
          <td>(</td>
          <td class="paramtype">RichLabel&#160;</td>
          <td class="paramname"><em>richlabel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>GetRichLabel. </p>
<dl class="section return"><dt>Returns</dt><dd>the current rich label (legend) from the scene </dd></dl>

</div>
</div>
<a id="acf7d622731c0777294b1ed09e7a610b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf7d622731c0777294b1ed09e7a610b5">&#9670;&nbsp;</a></span>GetRotation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">GetRotation </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get current rotation expressed in angle/axis form </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>Angle of rotation </td></tr>
    <tr><td class="paramname">x</td><td>x-component of rotation axis </td></tr>
    <tr><td class="paramname">y</td><td>y-component of rotation axis </td></tr>
    <tr><td class="paramname">z</td><td>z-component of rotation axis </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4a6db54dad5010ed5efc232966141ec5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a6db54dad5010ed5efc232966141ec5">&#9670;&nbsp;</a></span>getSelectedElementIndices()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="class_matrix.xhtml">Matrix</a> getSelectedElementIndices </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the indices in index mapper of selected elements as column vector </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database,the</td><td>database of this scene </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae604ebacbf443a780c7f3b08011c57ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae604ebacbf443a780c7f3b08011c57ad">&#9670;&nbsp;</a></span>getSelectedNodeIndices()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="class_matrix.xhtml">Matrix</a> getSelectedNodeIndices </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the indices in index mapper of selected nodes as column vector </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database,the</td><td>database of this scene </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a01f31efb33bd550d6e61d7698ecbefd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01f31efb33bd550d6e61d7698ecbefd5">&#9670;&nbsp;</a></span>getSlice()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">getSlice </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get current slicing plane in Hessian normal form given by the equation <img class="formulaInl" alt="$\hat{n}x = -p$" src="form_2.png"/>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>coeffcient $n_x$ in the plane equation </td></tr>
    <tr><td class="paramname">b</td><td>coeffcient $n_y$ in the plane equation </td></tr>
    <tr><td class="paramname">c</td><td>coeffcient $n_z$ in the plane equation </td></tr>
    <tr><td class="paramname">d</td><td>coeffcient $p$ in the plane equation </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1ee56e4b222eb79feb5fc73ce1528d10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ee56e4b222eb79feb5fc73ce1528d10">&#9670;&nbsp;</a></span>getSphereNormals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::MatrixXf getSphereNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get normals of a unit sphere </p>
<dl class="section return"><dt>Returns</dt><dd>normals </dd></dl>

</div>
</div>
<a id="acff3ea4a0700643aedfe199133e81084"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acff3ea4a0700643aedfe199133e81084">&#9670;&nbsp;</a></span>getSphereVertices()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::MatrixXf getSphereVertices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get vertices of a unit sphere </p>
<dl class="section return"><dt>Returns</dt><dd>vertices </dd></dl>

</div>
</div>
<a id="af2dd43e7fcc9b0712604a7c65b8346b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2dd43e7fcc9b0712604a7c65b8346b4">&#9670;&nbsp;</a></span>getValues()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">graphics::VertexValues getValues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a reference to the original scene data. </p>
<dl class="section return"><dt>Returns</dt><dd>A reference to the original (node/element) scene data </dd></dl>

</div>
</div>
<a id="a6a94ab4fe712f7c09489246cd5d476de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a94ab4fe712f7c09489246cd5d476de">&#9670;&nbsp;</a></span>getVisibleCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MatrixXhf getVisibleCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the coordinates of all visible vertices </p>
<dl class="section return"><dt>Returns</dt><dd>coordinates </dd></dl>

</div>
</div>
<a id="ae3807ab35d2750410be14663334ef944"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3807ab35d2750410be14663334ef944">&#9670;&nbsp;</a></span>getVisibleTetCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MatrixXhf getVisibleTetCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the coordinates of all visible tet vertices </p>
<dl class="section return"><dt>Returns</dt><dd>coordinates </dd></dl>

</div>
</div>
<a id="a3254afc12d576278d55c2d3d28f78189"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3254afc12d576278d55c2d3d28f78189">&#9670;&nbsp;</a></span>GetZoom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float GetZoom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get current zoom factor </p>
<dl class="section return"><dt>Returns</dt><dd>current zoom factor </dd></dl>

</div>
</div>
<a id="a7719777eeb3c9b36b8df97eb00975286"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7719777eeb3c9b36b8df97eb00975286">&#9670;&nbsp;</a></span>haveCurrentCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool haveCurrentCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>bool to indicated deformed coordinates </dd></dl>

</div>
</div>
<a id="a15f408f0a7dce9bd2acd6936325aca48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15f408f0a7dce9bd2acd6936325aca48">&#9670;&nbsp;</a></span>importTNG()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual importTNG </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>file</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>import from <a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> as used in slangTNG </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">file</td><td>name of text file for export </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab4562daf9688f00502b7de9b2ae3d9b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4562daf9688f00502b7de9b2ae3d9b0">&#9670;&nbsp;</a></span>isSelected() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool isSelected </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_element.xhtml">Element</a> *&#160;</td>
          <td class="paramname"><em>element</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>isSelected </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">element</td><td>Pointer to the chosen element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool indicating if chosen element is selected </dd></dl>

</div>
</div>
<a id="ab3bdf9b1987b1fb7cab665ce1c9d086a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3bdf9b1987b1fb7cab665ce1c9d086a">&#9670;&nbsp;</a></span>isSelected() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool isSelected </td>
          <td>(</td>
          <td class="paramtype">Point *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>isSelected </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>Pointer to the chosen node </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool indicating if chosen node is selected </dd></dl>

</div>
</div>
<a id="aaa9bdea86739707baeafce9b104ebad5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa9bdea86739707baeafce9b104ebad5">&#9670;&nbsp;</a></span>isSliced()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isSliced </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>true if a slice area is defined </dd></dl>

</div>
</div>
<a id="a88a7807fd65fd5bf216310aaf1c74c10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88a7807fd65fd5bf216310aaf1c74c10">&#9670;&nbsp;</a></span>isVertexSelected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool isVertexSelected </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>determine if a given vertex is currently selected </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>index of vertex </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean idicating if selected </dd></dl>

</div>
</div>
<a id="aaa30a3648e39044563841842c7e204ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa30a3648e39044563841842c7e204ae">&#9670;&nbsp;</a></span>mappedVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3f mappedVector </td>
          <td>(</td>
          <td class="paramtype">Eigen::Vector3f&#160;</td>
          <td class="paramname"><em>orig</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Maps actual position vector into view space (-32767 - 32767) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">orig</td><td>Origianl position vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Mapped vector </dd></dl>

</div>
</div>
<a id="a181f4d63c649e319f7f6ac56a905554e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a181f4d63c649e319f7f6ac56a905554e">&#9670;&nbsp;</a></span>palette()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual palette </td>
          <td>(</td>
          <td class="paramtype">Palette&#160;</td>
          <td class="paramname"><em>palette</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get current palette. </p>
<dl class="section return"><dt>Returns</dt><dd>palette object containing the definition of the palette. </dd></dl>

</div>
</div>
<a id="aab2df1ee76ffef04e39be521fe300522"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab2df1ee76ffef04e39be521fe300522">&#9670;&nbsp;</a></span>palettePercentageRange()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool palettePercentageRange </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Returns true if the palette has set relative values. Otherwise false </dd></dl>

</div>
</div>
<a id="a06d769b7b9a4271a48eb4774da7d82c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06d769b7b9a4271a48eb4774da7d82c8">&#9670;&nbsp;</a></span>Prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Prepare </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clears all OpenGL Vertex Buffers first and re-initializes them afterwards. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fast</td><td>If fast is set to true ( intended in GUI-Mode to move even big structures smoothly) then only the VBO's for outline vertices as well as for elements are prepared. Otherwise all VOB's neccessary to render the chosen contour type are prepared additionally. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af4f042c5b46694ad58ac461ff82d8f30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4f042c5b46694ad58ac461ff82d8f30">&#9670;&nbsp;</a></span>printSelectionInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual printSelectionInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>prints some limited information on the current selection </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database,the</td><td>database of this scene </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a05abf562d065b7fd4657ade1385c8bca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05abf562d065b7fd4657ade1385c8bca">&#9670;&nbsp;</a></span>removeSlice()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">removeSlice </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove the slicing plane </p>

</div>
</div>
<a id="a287f51df5268007e4828159bcff3079c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a287f51df5268007e4828159bcff3079c">&#9670;&nbsp;</a></span>select() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int select </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_element.xhtml">Element</a> *&#160;</td>
          <td class="paramname"><em>element</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>showLabel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests if the given element is in FEM set and if so marks it with value given as selected. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The <a class="el" href="class_structure.xhtml" title="The central data structure for SoS. ">Structure</a> database containing all the information about the FEM structure </td></tr>
    <tr><td class="paramname">node</td><td>The element to be tested and selected </td></tr>
    <tr><td class="paramname">value</td><td>The data value associated with it </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of new selected elements, which is at most 1, ignoring the original selection state </dd></dl>

</div>
</div>
<a id="a5798cbc7576fa42d09c369280a82c571"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5798cbc7576fa42d09c369280a82c571">&#9670;&nbsp;</a></span>select() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int select </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Point *&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>showLabel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests if the given node is in an active FEM set and if so marks it with value given as selected. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The <a class="el" href="class_structure.xhtml" title="The central data structure for SoS. ">Structure</a> database containing all the information about the FEM structure </td></tr>
    <tr><td class="paramname">node</td><td>The node to be tested and selected </td></tr>
    <tr><td class="paramname">value</td><td>The data value associated with it </td></tr>
    <tr><td class="paramname">isPoint</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of new selected nodes, which is at most 1, ignoring the original selection state </dd></dl>

</div>
</div>
<a id="a2c62fd0ee90f6a105651e10e8948c539"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c62fd0ee90f6a105651e10e8948c539">&#9670;&nbsp;</a></span>selectEntitiesInRect()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual selectEntitiesInRect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">QRect&#160;</td>
          <td class="paramname"><em>rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep_selection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>max_selectable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>showLabel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calls the select method for all visible mapped vertices/nodes and triangles/elements in a selection rectangle on the screen The called select method ensures that only items within an active FEM set will be selectable. See select for further information. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The <a class="el" href="class_structure.xhtml" title="The central data structure for SoS. ">Structure</a> database containing all the information about the FEM structure </td></tr>
    <tr><td class="paramname">rect</td><td>QRect describing the selection area </td></tr>
    <tr><td class="paramname">keep_selection</td><td>True if existing selection should be kept </td></tr>
    <tr><td class="paramname">max_selectable</td><td>Limits the selection to a maximum number of selected entities(?). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5b89a1b148f14e71c185082060849d35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b89a1b148f14e71c185082060849d35">&#9670;&nbsp;</a></span>SetBackground()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetBackground </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>red</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>green</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>blue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the first background color for the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">red</td><td>red color component (0 to 255) </td></tr>
    <tr><td class="paramname">green</td><td>green color component (0 to 255) </td></tr>
    <tr><td class="paramname">blue</td><td>blue color component (0 to 255) </td></tr>
    <tr><td class="paramname">alpha</td><td>alpha color component (0 to 255) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a903ffdb01a728c442b01876f25d6dfba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a903ffdb01a728c442b01876f25d6dfba">&#9670;&nbsp;</a></span>SetBackground2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetBackground2 </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>red</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>green</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>blue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the second background color for the scene. This defines a vertical color gradient together with the first background color. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">red</td><td>red color component (0 to 255) </td></tr>
    <tr><td class="paramname">green</td><td>green color component (0 to 255) </td></tr>
    <tr><td class="paramname">blue</td><td>blue color component (0 to 255) </td></tr>
    <tr><td class="paramname">alpha</td><td>alpha color component (0 to 255) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a22c9ec48ade46ce4b5ac8ae2faca0c74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22c9ec48ade46ce4b5ac8ae2faca0c74">&#9670;&nbsp;</a></span>SetCoorAxesPosition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SetCoorAxesPosition </td>
          <td>(</td>
          <td class="paramtype">graphics::Position&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the position for the coordinate axes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>contains the position of the coordinate system. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7c0815264ec971f6464513386bdf6245"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c0815264ec971f6464513386bdf6245">&#9670;&nbsp;</a></span>setCoordinateAxes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setCoordinateAxes </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>persp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Enable/Disable rendering of coordinate axes </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">persp</td><td>if true, enable; if false disable </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad0b92d97141bfb67678abdab74c2b71c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0b92d97141bfb67678abdab74c2b71c">&#9670;&nbsp;</a></span>setCoordinateAxesLabels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setCoordinateAxesLabels </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the state of the perspective property in rendering scene </p><dl class="section return"><dt>Returns</dt><dd>True if perspective is activated, false otherwise </dd></dl>

</div>
</div>
<a id="a1b1f381d1e2ebb2299830502c5744a5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b1f381d1e2ebb2299830502c5744a5f">&#9670;&nbsp;</a></span>SetCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetCoordinates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td>
          <td class="paramname"><em>coor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets all coordinates of vertices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coor</td><td><a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> containing the coordinates </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa14ba183af3e666e498c4e6c5fdbf3ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa14ba183af3e666e498c4e6c5fdbf3ae">&#9670;&nbsp;</a></span>SetCoorSystemPosition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SetCoorSystemPosition </td>
          <td>(</td>
          <td class="paramtype">graphics::Position&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the position for the coordinate system. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>contains the position of the coordinate system. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="addd456f71665ba4ffed7167e33b5e183"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addd456f71665ba4ffed7167e33b5e183">&#9670;&nbsp;</a></span>SetFont() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SetFont </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>font</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>fontsize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the font for all text to be shown in the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">font</td><td>the font name </td></tr>
    <tr><td class="paramname">fontsize</td><td>the size of the font in points </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ababbd02caffc98e21bdd737de704e921"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ababbd02caffc98e21bdd737de704e921">&#9670;&nbsp;</a></span>SetFont() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SetFont </td>
          <td>(</td>
          <td class="paramtype">QFont&#160;</td>
          <td class="paramname"><em>font</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the font for all text to be shown in the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">font</td><td>the font </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6b808aad5a0ae3633f3a8f7996fd54f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b808aad5a0ae3633f3a8f7996fd54f4">&#9670;&nbsp;</a></span>SetGeometricScaling()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetGeometricScaling </td>
          <td>(</td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>scaling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_scene_manager.xhtml">SceneManager</a> *&#160;</td>
          <td class="paramname"><em>scene_manager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>defines the scaling factor for geometric variations </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scaling</td><td>the scaling factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a27c842466c304c3af705ef763e9d3227"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27c842466c304c3af705ef763e9d3227">&#9670;&nbsp;</a></span>SetGeometricStabilization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetGeometricStabilization </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable_flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_scene_manager.xhtml">SceneManager</a> *&#160;</td>
          <td class="paramname"><em>scene_manager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>enables/disables mesh smoothening for gemetric imperfections </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>the enable state </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae359d9f8147e0cfb7eb7565d2506348b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae359d9f8147e0cfb7eb7565d2506348b">&#9670;&nbsp;</a></span>SetLegendPosition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SetLegendPosition </td>
          <td>(</td>
          <td class="paramtype">graphics::Position&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the position for the legend. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>contains the position of the legend. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2336f6b9901c23c398f9a29a7d031f41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2336f6b9901c23c398f9a29a7d031f41">&#9670;&nbsp;</a></span>SetMarkPosition()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetMarkPosition </td>
          <td>(</td>
          <td class="paramtype">graphics::Position&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the position for the watermark. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>contains the position of the water mark. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a64acf2cdfcf625cf407b9081f0410ce1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64acf2cdfcf625cf407b9081f0410ce1">&#9670;&nbsp;</a></span>setPalettePercentageRange()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual setPalettePercentageRange </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>percentage_range</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a relative, percentage palette range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">percentage_range</td><td>If set to true, the palette range will be scaled to the maximum palette value </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aff517029b952bf157f2bf8bcc11a107e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff517029b952bf157f2bf8bcc11a107e">&#9670;&nbsp;</a></span>setPalettePosition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual setPalettePosition </td>
          <td>(</td>
          <td class="paramtype">graphics::Position&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the position for the current palette. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>contains the position of the palette. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a45647fa73b7519f83aa151af826fdf77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45647fa73b7519f83aa151af826fdf77">&#9670;&nbsp;</a></span>setPaletteType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual setPaletteType </td>
          <td>(</td>
          <td class="paramtype">PaletteTypePtr&#160;</td>
          <td class="paramname"><em>palette</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assign a color/value palette to the scene. Only one palette can be assigned. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">palette</td><td>contains the definition of the palette. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac7d59fffd8b830f1e34093328b47824c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7d59fffd8b830f1e34093328b47824c">&#9670;&nbsp;</a></span>SetPan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetPan </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the current pan values in (pixel, coordinate system?) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>x value of pan </td></tr>
    <tr><td class="paramname">y</td><td>y value of pan </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7aef90b83a24d2a1ea4d8729afc3cfc5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7aef90b83a24d2a1ea4d8729afc3cfc5">&#9670;&nbsp;</a></span>setPerspective()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setPerspective </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>persp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Enable/Disable use of perspective in rendering scene </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">persp</td><td>if true, enable use of perspective, if false disable perspective </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6724f50b4207f54aefbc744ef88ec0fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6724f50b4207f54aefbc744ef88ec0fd">&#9670;&nbsp;</a></span>setPointSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setPointSize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set the size of points relative to model size </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>the size of points </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa129dfdc61a2fe7267b6c25b32009871"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa129dfdc61a2fe7267b6c25b32009871">&#9670;&nbsp;</a></span>SetRotation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetRotation </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resetting all rotatation information to its origin setting the new definition afterwards. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>The rotation angle in [°] </td></tr>
    <tr><td class="paramname">x</td><td>x-component of rotation axis </td></tr>
    <tr><td class="paramname">y</td><td>y-component of rotation axis </td></tr>
    <tr><td class="paramname">z</td><td>z-component of rotation axis </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a07454bde8fde4da8663bf1c11af4bfd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07454bde8fde4da8663bf1c11af4bfd2">&#9670;&nbsp;</a></span>setRuler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setRuler </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>on</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets visibility of ruler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">on</td><td>the visibility of the ruler </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a10665bbab8fb55ce789916651c2656f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10665bbab8fb55ce789916651c2656f4">&#9670;&nbsp;</a></span>SetScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetScale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets current length scale and zoom factor accordingly. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Length</td><td>scale </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acd45c2ddbf316f7650c7ff2817759d0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd45c2ddbf316f7650c7ff2817759d0c">&#9670;&nbsp;</a></span>SetSlice() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetSlice </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; float &gt;&#160;</td>
          <td class="paramname"><em>pt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; float &gt;&#160;</td>
          <td class="paramname"><em>dir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Defines a slicing plane in Hessian normal form in terms of a point and a direction vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pt</td><td>point through which the slicing plane passes </td></tr>
    <tr><td class="paramname">dir</td><td>direction of visibility (normal of the slicing plane) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This is just a convenience method computing the coefficients for the euclidean plane equation and calling the overloaded version afterwards.<br />
 Refer to <a href="http://mathworld.wolfram.com/Plane.html">Wolfram: Plane</a> for an explanation of the plane definition </dd></dl>

</div>
</div>
<a id="a38dd17334b3049e6973e3c90f373f970"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38dd17334b3049e6973e3c90f373f970">&#9670;&nbsp;</a></span>SetSlice() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetSlice </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Defines a slicing plane in Hessian normal form by normalizing the paramters $a$, $b$, $c$, and $d$ given Only points with coordinates satisfying $ax+by+cz+d &gt; 0$ are shown, the rest is suppressed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>coeffcient $a$ in the plane equation </td></tr>
    <tr><td class="paramname">b</td><td>coeffcient $b$ in the plane equation </td></tr>
    <tr><td class="paramname">c</td><td>coeffcient $c$ in the plane equation </td></tr>
    <tr><td class="paramname">d</td><td>coeffcient $d$ in the plane equation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Refer to <a href="http://mathworld.wolfram.com/Plane.html">Wolfram: Plane</a> for an explanation of the plane definition </dd></dl>

</div>
</div>
<a id="ada72656221408e3a4e178f7d2be87d03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada72656221408e3a4e178f7d2be87d03">&#9670;&nbsp;</a></span>SetTetCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetTetCoordinates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td>
          <td class="paramname"><em>coor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets all coordinates of tet vertices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coor</td><td><a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> containing the coordinates </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7b325a6f280742d3b06a20196c57f01e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b325a6f280742d3b06a20196c57f01e">&#9670;&nbsp;</a></span>SetUnconnectedPointCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetUnconnectedPointCoordinates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_matrix.xhtml">Matrix</a>&#160;</td>
          <td class="paramname"><em>coor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets morphed coordinates of unconnected points. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coor</td><td><a class="el" href="class_matrix.xhtml" title="Standard matrix class. ">Matrix</a> containing the coordinates </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a19f2ead60d9392ab7ca45217412733e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19f2ead60d9392ab7ca45217412733e1">&#9670;&nbsp;</a></span>SetValues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SetValues </td>
          <td>(</td>
          <td class="paramtype">Eigen::VectorXd&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reset_scene_options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_scene_manager.xhtml">SceneManager</a> *&#160;</td>
          <td class="paramname"><em>scene_manager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assign values to the vertices of the structure which are then used for coloring. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inputs</td><td>the given random field amplitudes or FMOP inputs </td></tr>
    <tr><td class="paramname">database</td><td>the database we refer to </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abc373e739b0f1a7a6e4ac8feff19f3c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc373e739b0f1a7a6e4ac8feff19f3c1">&#9670;&nbsp;</a></span>SetZoom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SetZoom </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets current zoom factor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Current</td><td>zoom factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae103953ef85891c75590ac14875409b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae103953ef85891c75590ac14875409b8">&#9670;&nbsp;</a></span>showRuler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool showRuler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>m_show_ruler </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
