<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): ReferenceDesign Class Reference</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('class_reference_design.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="class_reference_design-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ReferenceDesign Class Reference<div class="ingroups"><a class="el" href="group__import.xhtml">Import</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>defines information on imported data and files given a reference design  
 <a href="class_reference_design.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a41044fbbae50b73ea1a54077da1e0c9c"><td class="memItemLeft" align="right" valign="top"><a id="a41044fbbae50b73ea1a54077da1e0c9c"></a>
typedef std::vector&lt; <a class="el" href="struct_import_item_info.xhtml">ImportItemInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a41044fbbae50b73ea1a54077da1e0c9c">ImportItemInfoVector</a></td></tr>
<tr class="memdesc:a41044fbbae50b73ea1a54077da1e0c9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">a set of data items <br /></td></tr>
<tr class="separator:a41044fbbae50b73ea1a54077da1e0c9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134ae1c682574d00349ec0bdb8d7fe42"><td class="memItemLeft" align="right" valign="top"><a id="a134ae1c682574d00349ec0bdb8d7fe42"></a>
typedef boost::shared_ptr&lt; <a class="el" href="class_mesh_mapper_base.xhtml">MeshMapperBase</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a134ae1c682574d00349ec0bdb8d7fe42">MeshMapperBasePtr</a></td></tr>
<tr class="memdesc:a134ae1c682574d00349ec0bdb8d7fe42"><td class="mdescLeft">&#160;</td><td class="mdescRight">a shared pointer type for <a class="el" href="class_mesh_mapper_base.xhtml" title="An abstract base class that provides a generic API for different methods that import matching or non-...">MeshMapperBase</a> <br /></td></tr>
<tr class="separator:a134ae1c682574d00349ec0bdb8d7fe42"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a47c34ec1e578c2ce27cf1c5fcd0d1704"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a47c34ec1e578c2ce27cf1c5fcd0d1704">check</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>)</td></tr>
<tr class="memdesc:a47c34ec1e578c2ce27cf1c5fcd0d1704"><td class="mdescLeft">&#160;</td><td class="mdescRight">checks if the settings are valid and produces an error.  <a href="#a47c34ec1e578c2ce27cf1c5fcd0d1704">More...</a><br /></td></tr>
<tr class="separator:a47c34ec1e578c2ce27cf1c5fcd0d1704"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b231c5114f13957397147c8d2e73b6a"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a2b231c5114f13957397147c8d2e73b6a">generateScriptOfSettingsDefinition</a> ()</td></tr>
<tr class="memdesc:a2b231c5114f13957397147c8d2e73b6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a Lua script that is used to build up this object.  <a href="#a2b231c5114f13957397147c8d2e73b6a">More...</a><br /></td></tr>
<tr class="separator:a2b231c5114f13957397147c8d2e73b6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a979a02f7e23e0bce25332c3fe725f76c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a979a02f7e23e0bce25332c3fe725f76c">import</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, int sample_number, string design_path=&quot;&quot;, bool do_not_check_settings=false)</td></tr>
<tr class="memdesc:a979a02f7e23e0bce25332c3fe725f76c"><td class="mdescLeft">&#160;</td><td class="mdescRight">imports a design from disk  <a href="#a979a02f7e23e0bce25332c3fe725f76c">More...</a><br /></td></tr>
<tr class="separator:a979a02f7e23e0bce25332c3fe725f76c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a747693ad8a1ff2ac0aa9ef1d0fe4b70f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a747693ad8a1ff2ac0aa9ef1d0fe4b70f">ReferenceDesign</a> (string the_base_path)</td></tr>
<tr class="memdesc:a747693ad8a1ff2ac0aa9ef1d0fe4b70f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the object with the base path given and sets further defaults.  <a href="#a747693ad8a1ff2ac0aa9ef1d0fe4b70f">More...</a><br /></td></tr>
<tr class="separator:a747693ad8a1ff2ac0aa9ef1d0fe4b70f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ba2b1794ac9bad08da653ea8c99eda"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#aa2ba2b1794ac9bad08da653ea8c99eda">setBasePath</a> (string path)</td></tr>
<tr class="memdesc:aa2ba2b1794ac9bad08da653ea8c99eda"><td class="mdescLeft">&#160;</td><td class="mdescRight">sets a new base path. This includes changing the relative path definition of the already parsed files.  <a href="#aa2ba2b1794ac9bad08da653ea8c99eda">More...</a><br /></td></tr>
<tr class="separator:aa2ba2b1794ac9bad08da653ea8c99eda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Modify file list</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods to modify the file list </p>
</div></td></tr>
<tr class="memitem:a3f531f9141854fb6e661f8aa66329f96"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a3f531f9141854fb6e661f8aa66329f96">addFile_2dGrid</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a3f531f9141854fb6e661f8aa66329f96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a CSV file with Grid information.  <a href="#a3f531f9141854fb6e661f8aa66329f96">More...</a><br /></td></tr>
<tr class="separator:a3f531f9141854fb6e661f8aa66329f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54f99da4a501ea028ec621577ff149cb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a54f99da4a501ea028ec621577ff149cb">addFile_3dGrid</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a54f99da4a501ea028ec621577ff149cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a CSV file with Grid information.  <a href="#a54f99da4a501ea028ec621577ff149cb">More...</a><br /></td></tr>
<tr class="separator:a54f99da4a501ea028ec621577ff149cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5c422a5396fc7f6fc9d67639056f22"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#afd5c422a5396fc7f6fc9d67639056f22">addFile_Abaqus</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:afd5c422a5396fc7f6fc9d67639056f22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a file in Abaqus format.  <a href="#afd5c422a5396fc7f6fc9d67639056f22">More...</a><br /></td></tr>
<tr class="separator:afd5c422a5396fc7f6fc9d67639056f22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad910539acbf3b9335eb049ead8d0eab1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#ad910539acbf3b9335eb049ead8d0eab1">addFile_ANSYS_APDL</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:ad910539acbf3b9335eb049ead8d0eab1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from an ANSYS Mechanical APDL file either in APDL-style format, or in cdb blocked as well as unblocked format.  <a href="#ad910539acbf3b9335eb049ead8d0eab1">More...</a><br /></td></tr>
<tr class="separator:ad910539acbf3b9335eb049ead8d0eab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b5ff1759d329f5a852a0e14e29343c0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a1b5ff1759d329f5a852a0e14e29343c0">addFile_ANSYS_RST</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a1b5ff1759d329f5a852a0e14e29343c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from an ANSYS binary structural or coupled-field analysis file.  <a href="#a1b5ff1759d329f5a852a0e14e29343c0">More...</a><br /></td></tr>
<tr class="separator:a1b5ff1759d329f5a852a0e14e29343c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1275367105e2c8901916e138e7cfca39"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a1275367105e2c8901916e138e7cfca39">addFile_Image</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a1275367105e2c8901916e138e7cfca39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a file in a pixel image format.  <a href="#a1275367105e2c8901916e138e7cfca39">More...</a><br /></td></tr>
<tr class="separator:a1275367105e2c8901916e138e7cfca39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b8a91fa4a2873763aa6cc4ab27527c6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a1b8a91fa4a2873763aa6cc4ab27527c6">addFile_LSDyna_Dynain</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a1b8a91fa4a2873763aa6cc4ab27527c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">adds information from a file in LS-DYNA Dynain format.  <a href="#a1b8a91fa4a2873763aa6cc4ab27527c6">More...</a><br /></td></tr>
<tr class="separator:a1b8a91fa4a2873763aa6cc4ab27527c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4b1f9b78214f1ad46dead046c98659e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#ac4b1f9b78214f1ad46dead046c98659e">addFile_LSPrePost</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:ac4b1f9b78214f1ad46dead046c98659e"><td class="mdescLeft">&#160;</td><td class="mdescRight">adds information from a file in LS-PrePost (LS-DYNA) format.  <a href="#ac4b1f9b78214f1ad46dead046c98659e">More...</a><br /></td></tr>
<tr class="separator:ac4b1f9b78214f1ad46dead046c98659e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65b79da7516c43d19afddd630376e478"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a65b79da7516c43d19afddd630376e478">addFile_NastranInput</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a65b79da7516c43d19afddd630376e478"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a file in NASTRAN format.  <a href="#a65b79da7516c43d19afddd630376e478">More...</a><br /></td></tr>
<tr class="separator:a65b79da7516c43d19afddd630376e478"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb1734d74f4c44bea421e20aa23e963b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#abb1734d74f4c44bea421e20aa23e963b">addFile_PamstampDataAsc</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:abb1734d74f4c44bea421e20aa23e963b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a file in NASTRAN format.  <a href="#abb1734d74f4c44bea421e20aa23e963b">More...</a><br /></td></tr>
<tr class="separator:abb1734d74f4c44bea421e20aa23e963b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab673c9293b5fc4fc3c8c2cbd5e663adb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#ab673c9293b5fc4fc3c8c2cbd5e663adb">addFile_PERMAS</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:ab673c9293b5fc4fc3c8c2cbd5e663adb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a file in PERMAS format.  <a href="#ab673c9293b5fc4fc3c8c2cbd5e663adb">More...</a><br /></td></tr>
<tr class="separator:ab673c9293b5fc4fc3c8c2cbd5e663adb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5c4c8b3993209b6356f59233da1da48"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#ad5c4c8b3993209b6356f59233da1da48">addFile_STL</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:ad5c4c8b3993209b6356f59233da1da48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a file in STL format.  <a href="#ad5c4c8b3993209b6356f59233da1da48">More...</a><br /></td></tr>
<tr class="separator:ad5c4c8b3993209b6356f59233da1da48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69cfbc9c84840bb99ee4c2406e8982ca"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a69cfbc9c84840bb99ee4c2406e8982ca">addFile_ElementDataCSV</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a69cfbc9c84840bb99ee4c2406e8982ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds element data information from a file in CSV format.  <a href="#a69cfbc9c84840bb99ee4c2406e8982ca">More...</a><br /></td></tr>
<tr class="separator:a69cfbc9c84840bb99ee4c2406e8982ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a897d79d7afae207e2a37efe46cf6e099"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a897d79d7afae207e2a37efe46cf6e099">addFile_NodeDataCSV</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a897d79d7afae207e2a37efe46cf6e099"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds node data information from a file in CSV format.  <a href="#a897d79d7afae207e2a37efe46cf6e099">More...</a><br /></td></tr>
<tr class="separator:a897d79d7afae207e2a37efe46cf6e099"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65638c0dc45c447e1ce31c172c4e568a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a65638c0dc45c447e1ce31c172c4e568a">addFile_SignalMeshCSV</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a65638c0dc45c447e1ce31c172c4e568a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds node data information from a signal file in CSV format.  <a href="#a65638c0dc45c447e1ce31c172c4e568a">More...</a><br /></td></tr>
<tr class="separator:a65638c0dc45c447e1ce31c172c4e568a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac610b2839029ab3554d6b8961cd74f0b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#ac610b2839029ab3554d6b8961cd74f0b">addFile_SignalDataCSV</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:ac610b2839029ab3554d6b8961cd74f0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds node data information from a signal file in CSV format.  <a href="#ac610b2839029ab3554d6b8961cd74f0b">More...</a><br /></td></tr>
<tr class="separator:ac610b2839029ab3554d6b8961cd74f0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cbe5b36f92cdfe01c6f2acbaf34d590"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a1cbe5b36f92cdfe01c6f2acbaf34d590">addFile_FLUENT_CSV</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a1cbe5b36f92cdfe01c6f2acbaf34d590"><td class="mdescLeft">&#160;</td><td class="mdescRight">adds information from a file in FLUENT result CSV format.  <a href="#a1cbe5b36f92cdfe01c6f2acbaf34d590">More...</a><br /></td></tr>
<tr class="separator:a1cbe5b36f92cdfe01c6f2acbaf34d590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34d895ea81537ef302bc29c126356eb9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a34d895ea81537ef302bc29c126356eb9">addFile_VTK</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, string filename)</td></tr>
<tr class="memdesc:a34d895ea81537ef302bc29c126356eb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds information from a file in VTK format.  <a href="#a34d895ea81537ef302bc29c126356eb9">More...</a><br /></td></tr>
<tr class="separator:a34d895ea81537ef302bc29c126356eb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5b63f5d31ab0a4abf354b4934514f7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#adc5b63f5d31ab0a4abf354b4934514f7">removeFileFromList</a> (string filename)</td></tr>
<tr class="memdesc:adc5b63f5d31ab0a4abf354b4934514f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">removes all import data from item list which is associated with the sepcified file  <a href="#adc5b63f5d31ab0a4abf354b4934514f7">More...</a><br /></td></tr>
<tr class="separator:adc5b63f5d31ab0a4abf354b4934514f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a933cb1c407847079e005bdb46056cbfd"><td class="memItemLeft" align="right" valign="top">std::vector&lt; string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a933cb1c407847079e005bdb46056cbfd">getFiles</a> ()</td></tr>
<tr class="memdesc:a933cb1c407847079e005bdb46056cbfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">assembles the complete list of files being known to this class  <a href="#a933cb1c407847079e005bdb46056cbfd">More...</a><br /></td></tr>
<tr class="separator:a933cb1c407847079e005bdb46056cbfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a834da9fe4249630dcb02fff987c41a22"><td class="memItemLeft" align="right" valign="top">std::vector&lt; string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a834da9fe4249630dcb02fff987c41a22">getFilesToImport</a> ()</td></tr>
<tr class="memdesc:a834da9fe4249630dcb02fff987c41a22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assembles a list of files which are to be imported (only the files for which one selected "import" are exported here)  <a href="#a834da9fe4249630dcb02fff987c41a22">More...</a><br /></td></tr>
<tr class="separator:a834da9fe4249630dcb02fff987c41a22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Modify file item properties</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods to modify file item properties </p>
</div></td></tr>
<tr class="memitem:a51da3543fdd29777389205577f4a2849"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a51da3543fdd29777389205577f4a2849">addItem</a> (<a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>, <a class="el" href="struct_import_item_info.xhtml">ImportItemInfo</a> new_item)</td></tr>
<tr class="memdesc:a51da3543fdd29777389205577f4a2849"><td class="mdescLeft">&#160;</td><td class="mdescRight">adds a single item to trhe list of import data  <a href="#a51da3543fdd29777389205577f4a2849">More...</a><br /></td></tr>
<tr class="separator:a51da3543fdd29777389205577f4a2849"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39cc40da8396870fcb5ffce2732ad45a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a39cc40da8396870fcb5ffce2732ad45a">setImportItem</a> (number item, bool do_import)</td></tr>
<tr class="memdesc:a39cc40da8396870fcb5ffce2732ad45a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets if the item is to be imported There is no error checking!  <a href="#a39cc40da8396870fcb5ffce2732ad45a">More...</a><br /></td></tr>
<tr class="separator:a39cc40da8396870fcb5ffce2732ad45a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16c93a180125b6a7d85a41bba4cbff04"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a16c93a180125b6a7d85a41bba4cbff04">setImportIdent</a> (number item, string ident, <a class="el" href="class_structure.xhtml">Structure</a> <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database</a>)</td></tr>
<tr class="memdesc:a16c93a180125b6a7d85a41bba4cbff04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the new ident used for import The ident is automatically modified to be unique and allowed. Further, the list of items is resorted!  <a href="#a16c93a180125b6a7d85a41bba4cbff04">More...</a><br /></td></tr>
<tr class="separator:a16c93a180125b6a7d85a41bba4cbff04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab71d843a916619570506d44ba030f4c2"><td class="memItemLeft" align="right" valign="top"><a id="ab71d843a916619570506d44ba030f4c2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#ab71d843a916619570506d44ba030f4c2">sortItems</a> ()</td></tr>
<tr class="memdesc:ab71d843a916619570506d44ba030f4c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">sorts the vector of item information <br /></td></tr>
<tr class="separator:ab71d843a916619570506d44ba030f4c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accd09dc4f762c4b4b2e533e625b1a0ea"><td class="memItemLeft" align="right" valign="top">std::vector&lt; number &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#accd09dc4f762c4b4b2e533e625b1a0ea">getItemsForFile</a> (string filename)</td></tr>
<tr class="memdesc:accd09dc4f762c4b4b2e533e625b1a0ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">assembles a list of items which are to be imported from a specific file  <a href="#accd09dc4f762c4b4b2e533e625b1a0ea">More...</a><br /></td></tr>
<tr class="separator:accd09dc4f762c4b4b2e533e625b1a0ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5edf7e140f1826d224c8d7a2417b2cb"><td class="memItemLeft" align="right" valign="top">number&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#af5edf7e140f1826d224c8d7a2417b2cb">getItemIndex</a> (string filename, <a class="el" href="struct_import_item_info.xhtml#a1d1cfd8ffb84e947f82999c682b666a7">ImportItemInfo::Type</a> data_type, string input_ident, number column=0)</td></tr>
<tr class="memdesc:af5edf7e140f1826d224c8d7a2417b2cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">gets the index of the respective item if existing  <a href="#af5edf7e140f1826d224c8d7a2417b2cb">More...</a><br /></td></tr>
<tr class="separator:af5edf7e140f1826d224c8d7a2417b2cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa821bec12eaa7e0f649397c9675ff505"><td class="memItemLeft" align="right" valign="top"><a id="aa821bec12eaa7e0f649397c9675ff505"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#aa821bec12eaa7e0f649397c9675ff505">clear</a> ()</td></tr>
<tr class="memdesc:aa821bec12eaa7e0f649397c9675ff505"><td class="mdescLeft">&#160;</td><td class="mdescRight">deletes all import items <br /></td></tr>
<tr class="separator:aa821bec12eaa7e0f649397c9675ff505"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Modify mesh mapper</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Methods to control mesh mapper settings </p>
</div></td></tr>
<tr class="memitem:a74b36e749ed3b693b484d81e53d1f711"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a74b36e749ed3b693b484d81e53d1f711">setMeshMapper</a> (<a class="el" href="class_mesh_mapper_base.xhtml">MeshMapperBase</a> mapper)</td></tr>
<tr class="memdesc:a74b36e749ed3b693b484d81e53d1f711"><td class="mdescLeft">&#160;</td><td class="mdescRight">sets the (in)compatible mesh mapper object  <a href="#a74b36e749ed3b693b484d81e53d1f711">More...</a><br /></td></tr>
<tr class="separator:a74b36e749ed3b693b484d81e53d1f711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34271ccf735c92b0a624cd9ec42e3988"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_mesh_mapper_base.xhtml">MeshMapperBase</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a34271ccf735c92b0a624cd9ec42e3988">meshMapper</a> ()</td></tr>
<tr class="separator:a34271ccf735c92b0a624cd9ec42e3988"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a135afdadbeabf58cddabd5936c3d4f62"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_mesh_mapper_base.xhtml">MeshMapperBase</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a135afdadbeabf58cddabd5936c3d4f62">meshMapperRef</a> ()</td></tr>
<tr class="separator:a135afdadbeabf58cddabd5936c3d4f62"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a1be53c8e392d898f99ddc804ff403c84"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a1be53c8e392d898f99ddc804ff403c84">base_path</a></td></tr>
<tr class="memdesc:a1be53c8e392d898f99ddc804ff403c84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies the base path. Must be changed only via <a class="el" href="class_reference_design.xhtml#aa2ba2b1794ac9bad08da653ea8c99eda" title="sets a new base path. This includes changing the relative path definition of the already parsed files...">setBasePath()</a>!  <a href="#a1be53c8e392d898f99ddc804ff403c84">More...</a><br /></td></tr>
<tr class="separator:a1be53c8e392d898f99ddc804ff403c84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5607495ca904981a64eba8a947560b8"><td class="memItemLeft" align="right" valign="top"><a id="ab5607495ca904981a64eba8a947560b8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#ab5607495ca904981a64eba8a947560b8">check_on_duplicate_idents_in_database</a></td></tr>
<tr class="memdesc:ab5607495ca904981a64eba8a947560b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">defines if quantities to be imported must not exist in the global database In this case, all methods will propose idents which make the new imported data unique. <br /></td></tr>
<tr class="separator:ab5607495ca904981a64eba8a947560b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ae81b54d8b4c8017039fde932ea27d9"><td class="memItemLeft" align="right" valign="top"><a id="a6ae81b54d8b4c8017039fde932ea27d9"></a>
<a class="el" href="class_reference_design.xhtml#a41044fbbae50b73ea1a54077da1e0c9c">ImportItemInfoVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_reference_design.xhtml#a6ae81b54d8b4c8017039fde932ea27d9">items</a></td></tr>
<tr class="memdesc:a6ae81b54d8b4c8017039fde932ea27d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">stores all parsed data item information <br /></td></tr>
<tr class="separator:a6ae81b54d8b4c8017039fde932ea27d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>defines information on imported data and files given a reference design </p>
<p>This class contains settings for an example design directory (the base_path). These settings include file formats, data items to be imported etc.</p>
<p>Note, the currently stored data must be kept "functional" at all times. If you add a new file using the appropriate function, this will take care for you. If you change the data items from outside (GUI etc.) you must use the function <a class="el" href="class_reference_design.xhtml#a47c34ec1e578c2ce27cf1c5fcd0d1704" title="checks if the settings are valid and produces an error. ">check()</a> in order to approve the changes. If the changes are erroneous, the next addFIle-method call may lead to undefined behaviour. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a747693ad8a1ff2ac0aa9ef1d0fe4b70f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a747693ad8a1ff2ac0aa9ef1d0fe4b70f">&#9670;&nbsp;</a></span>ReferenceDesign()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_reference_design.xhtml">ReferenceDesign</a> </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>the_base_path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the object with the base path given and sets further defaults. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">the_base_path</td><td>Defines the base path. Refer to base_path for further remarks, </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3f531f9141854fb6e661f8aa66329f96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f531f9141854fb6e661f8aa66329f96">&#9670;&nbsp;</a></span>addFile_2dGrid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_2dGrid </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a CSV file with Grid information. </p>
<p>Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory. Otherwise it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a54f99da4a501ea028ec621577ff149cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54f99da4a501ea028ec621577ff149cb">&#9670;&nbsp;</a></span>addFile_3dGrid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_3dGrid </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a CSV file with Grid information. </p>
<p>Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory. Otherwise it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="afd5c422a5396fc7f6fc9d67639056f22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd5c422a5396fc7f6fc9d67639056f22">&#9670;&nbsp;</a></span>addFile_Abaqus()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_Abaqus </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a file in Abaqus format. </p>
<p>Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory. Otherwise it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad910539acbf3b9335eb049ead8d0eab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad910539acbf3b9335eb049ead8d0eab1">&#9670;&nbsp;</a></span>addFile_ANSYS_APDL()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_ANSYS_APDL </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from an ANSYS Mechanical APDL file either in APDL-style format, or in cdb blocked as well as unblocked format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Interpred either relative to the base path or to the working directory, or interpreted as absolute path. If none of these options match an exsisting file, an exception will be thrown </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1b5ff1759d329f5a852a0e14e29343c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b5ff1759d329f5a852a0e14e29343c0">&#9670;&nbsp;</a></span>addFile_ANSYS_RST()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_ANSYS_RST </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from an ANSYS binary structural or coupled-field analysis file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Interpred either relative to the base path or to the working directory, or interpreted as absolute path. If none of these options match an exsisting file, an exception will be thrown </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a69cfbc9c84840bb99ee4c2406e8982ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69cfbc9c84840bb99ee4c2406e8982ca">&#9670;&nbsp;</a></span>addFile_ElementDataCSV()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_ElementDataCSV </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds element data information from a file in CSV format. </p>
<p>Only element data items are supported. If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>the current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>the file to be parsed. Is relative the base_path or (if this is not existing, take it as absolute path or relative to working dir) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1cbe5b36f92cdfe01c6f2acbaf34d590"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cbe5b36f92cdfe01c6f2acbaf34d590">&#9670;&nbsp;</a></span>addFile_FLUENT_CSV()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_FLUENT_CSV </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>adds information from a file in FLUENT result CSV format. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory or it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1275367105e2c8901916e138e7cfca39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1275367105e2c8901916e138e7cfca39">&#9670;&nbsp;</a></span>addFile_Image()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_Image </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a file in a pixel image format. </p>
<p>Multiple data items per file are supported. It is checked on validity using the pixel dimensions (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Interpred either relative to the base path or to the working directory, or interpreted as absolute path. If none of these options match an exsisting file, an exception will be thrown </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1b8a91fa4a2873763aa6cc4ab27527c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b8a91fa4a2873763aa6cc4ab27527c6">&#9670;&nbsp;</a></span>addFile_LSDyna_Dynain()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_LSDyna_Dynain </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>adds information from a file in LS-DYNA Dynain format. </p>
<p>Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory or it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac4b1f9b78214f1ad46dead046c98659e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4b1f9b78214f1ad46dead046c98659e">&#9670;&nbsp;</a></span>addFile_LSPrePost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_LSPrePost </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>adds information from a file in LS-PrePost (LS-DYNA) format. </p>
<p>Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory or it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a65b79da7516c43d19afddd630376e478"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65b79da7516c43d19afddd630376e478">&#9670;&nbsp;</a></span>addFile_NastranInput()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_NastranInput </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a file in NASTRAN format. </p>
<p>The file will be read and interpreted as input file (*.dat, *bdf) with a clearly and reliable defined data structure described in <a href="http://simcompanion.mscsoftware.com/infocenter/index?page=contentchannel=DOCUMENTATIONcat=MSC__MD_NASTRAN_DOCUMENTATION">MSC Nastran Quick Reference Guide</a> Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Is relative to the base_path or if this is not existing, try to take it as absolute path or relative to the working dir. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a897d79d7afae207e2a37efe46cf6e099"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a897d79d7afae207e2a37efe46cf6e099">&#9670;&nbsp;</a></span>addFile_NodeDataCSV()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_NodeDataCSV </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds node data information from a file in CSV format. </p>
<p>Only node data items are supported. If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>the current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>the file to be parsed. Is relative the base_path or (if this is not existing, take it as absolute path or relative to working dir) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abb1734d74f4c44bea421e20aa23e963b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb1734d74f4c44bea421e20aa23e963b">&#9670;&nbsp;</a></span>addFile_PamstampDataAsc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_PamstampDataAsc </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a file in NASTRAN format. </p>
<p>The file will be read and interpreted as data file. At this time we don't know any standard or at least a common format for Nastran output data. In fact, we don't know where the data format comes from... Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Is relative to the base_path or if this is not existing, try to take it as absolute path or relative to the working dir. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab673c9293b5fc4fc3c8c2cbd5e663adb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab673c9293b5fc4fc3c8c2cbd5e663adb">&#9670;&nbsp;</a></span>addFile_PERMAS()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_PERMAS </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a file in PERMAS format. </p>
<p>Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory or it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac610b2839029ab3554d6b8961cd74f0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac610b2839029ab3554d6b8961cd74f0b">&#9670;&nbsp;</a></span>addFile_SignalDataCSV()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_SignalDataCSV </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds node data information from a signal file in CSV format. </p>
<p>Only node data items are supported. If the data items are already existing, their names will be changed. The vector is reordered.</p>
<p>Only the data and not the mesh will be imported.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. As first guess, the path is interpreted relative to the base_path. If this fails, the path is read as absolute path or - as last option - relative to the working dir. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a65638c0dc45c447e1ce31c172c4e568a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65638c0dc45c447e1ce31c172c4e568a">&#9670;&nbsp;</a></span>addFile_SignalMeshCSV()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_SignalMeshCSV </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds node data information from a signal file in CSV format. </p>
<p>Only node data items are supported. If the data items are already existing, their names will be changed. The vector is reordered.</p>
<p>Both data and mesh will be imported.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. As first guess, the path is interpreted relative to the base_path. If this fails, the path is read as absolute path or - as last option - relative to the working dir. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad5c4c8b3993209b6356f59233da1da48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5c4c8b3993209b6356f59233da1da48">&#9670;&nbsp;</a></span>addFile_STL()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_STL </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a file in STL format. </p>
<p>Only geometric information can be imported. STL import makes only sense in combination with incompatible mesh mappers.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>the current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory or it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a34d895ea81537ef302bc29c126356eb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34d895ea81537ef302bc29c126356eb9">&#9670;&nbsp;</a></span>addFile_VTK()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addFile_VTK </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds information from a file in VTK format. </p>
<p>Multiple data items per file are supported. If the file consists geometric information, it is checked on validity (with a warning and being added inactive). If the data items are already existing, their names will be changed. The vector is reordered.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>The current database where the items are to be imported </td></tr>
    <tr><td class="paramname">filename</td><td>The file to be parsed. Relative to the base path, or if not existing, relative to the working directory. Otherwise it will be tried to interpret the filename as absolute path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a51da3543fdd29777389205577f4a2849"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51da3543fdd29777389205577f4a2849">&#9670;&nbsp;</a></span>addItem()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">addItem </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_import_item_info.xhtml">ImportItemInfo</a>&#160;</td>
          <td class="paramname"><em>new_item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>adds a single item to trhe list of import data </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>the database we refer to </td></tr>
    <tr><td class="paramname">new_item</td><td>the new item </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This method is used for directly modifying the data. It is not intended to be used by the user/GUI, but by <a class="el" href="class_reference_design.xhtml#a2b231c5114f13957397147c8d2e73b6a" title="Generates a Lua script that is used to build up this object. ">generateScriptOfSettingsDefinition()</a>. </dd></dl>

</div>
</div>
<a id="a47c34ec1e578c2ce27cf1c5fcd0d1704"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47c34ec1e578c2ce27cf1c5fcd0d1704">&#9670;&nbsp;</a></span>check()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">check </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>checks if the settings are valid and produces an error. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>the data base </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2b231c5114f13957397147c8d2e73b6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b231c5114f13957397147c8d2e73b6a">&#9670;&nbsp;</a></span>generateScriptOfSettingsDefinition()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string generateScriptOfSettingsDefinition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates a Lua script that is used to build up this object. </p>
<dl class="section return"><dt>Returns</dt><dd>The script code. Ends with a newline. </dd></dl>
<dl class="section note"><dt>Note</dt><dd>This script works only for the global reference design (due to restrictions in itself and other classes) </dd></dl>

</div>
</div>
<a id="a933cb1c407847079e005bdb46056cbfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a933cb1c407847079e005bdb46056cbfd">&#9670;&nbsp;</a></span>getFiles()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; string &gt; getFiles </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>assembles the complete list of files being known to this class </p>
<p>This is a compact view onto the contained data, since multiple items may be imported from a single file.</p>
<dl class="section return"><dt>Returns</dt><dd>a list of filenames. The file names are relative to the base path. </dd></dl>

</div>
</div>
<a id="a834da9fe4249630dcb02fff987c41a22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a834da9fe4249630dcb02fff987c41a22">&#9670;&nbsp;</a></span>getFilesToImport()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; string &gt; getFilesToImport </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assembles a list of files which are to be imported (only the files for which one selected "import" are exported here) </p>
<p>This is a compact view onto the contained data, since multiple items may be imported from a single file and some files may be inactive.</p>
<dl class="section return"><dt>Returns</dt><dd>a list of filenames. The file names are relative to the base path. </dd></dl>

</div>
</div>
<a id="af5edf7e140f1826d224c8d7a2417b2cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5edf7e140f1826d224c8d7a2417b2cb">&#9670;&nbsp;</a></span>getItemIndex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">number getItemIndex </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_import_item_info.xhtml#a1d1cfd8ffb84e947f82999c682b666a7">ImportItemInfo::Type</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>input_ident</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>column</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>gets the index of the respective item if existing </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>the filename relative to the base directory </td></tr>
    <tr><td class="paramname">data_type</td><td>the data type, e.g. "coordinate along x direction" </td></tr>
    <tr><td class="paramname">input_ident</td><td>the input ident, e.g. "thickness" </td></tr>
    <tr><td class="paramname">column</td><td>the column index for tensor fields (else 0) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>index to the item in the vector items. Throws an exception if not existing </dd></dl>

</div>
</div>
<a id="accd09dc4f762c4b4b2e533e625b1a0ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accd09dc4f762c4b4b2e533e625b1a0ea">&#9670;&nbsp;</a></span>getItemsForFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; number &gt; getItemsForFile </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>assembles a list of items which are to be imported from a specific file </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>the file name for which all items to be imported are searched. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a list of integer indices in ascending order. Each index refers to an Item in the vector items. If no data is to be imported from the requested file, an empty list is returned. </dd></dl>

</div>
</div>
<a id="a979a02f7e23e0bce25332c3fe725f76c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a979a02f7e23e0bce25332c3fe725f76c">&#9670;&nbsp;</a></span>import()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void import </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sample_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>design_path</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_not_check_settings</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>imports a design from disk </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">database</td><td>the data base where all data is to be added </td></tr>
    <tr><td class="paramname">sample_number</td><td>the design number which is used to define the design ident string for all new data in the database </td></tr>
    <tr><td class="paramname">design_path</td><td>if this is empty, one takes the base_path. Else one takes this string instead of this-&gt;base_path </td></tr>
    <tr><td class="paramname">do_not_check_settings</td><td>If this is true, then the contents of design_info will not be checked on validity before starting the import. This is helpful when importing multiple designs at once. If this settings object is configured to check on duplicates in the global database, then a duplicate would be found after import of the first design always leading to an error! In this case, set this parameter to true. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns an projection error report for each imported quantity. If no projection error occured during import, an empty quantity report will be returned. See <a class="el" href="struct_design_projection_error_report.xhtml" title="The DesignProjectionError struct. ">DesignProjectionErrorReport</a> for further details If an error appears during import, an exception is thrown. Nevertheless, the method tries to import as much data as possible before quit. </dd></dl>

</div>
</div>
<a id="a34271ccf735c92b0a624cd9ec42e3988"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34271ccf735c92b0a624cd9ec42e3988">&#9670;&nbsp;</a></span>meshMapper()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_mesh_mapper_base.xhtml">MeshMapperBase</a> meshMapper </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reference to the (in)compatible mesh mapper object </dd></dl>

</div>
</div>
<a id="a135afdadbeabf58cddabd5936c3d4f62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a135afdadbeabf58cddabd5936c3d4f62">&#9670;&nbsp;</a></span>meshMapperRef()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_mesh_mapper_base.xhtml">MeshMapperBase</a> meshMapperRef </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a modifyable reference to the (in)compatible mesh mapper object </dd></dl>

</div>
</div>
<a id="adc5b63f5d31ab0a4abf354b4934514f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5b63f5d31ab0a4abf354b4934514f7">&#9670;&nbsp;</a></span>removeFileFromList()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">removeFileFromList </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>removes all import data from item list which is associated with the sepcified file </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>the file name of the file which is to be removed from import item list (exact match!). </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::exception</td><td>if the file does not exist in the list. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa2ba2b1794ac9bad08da653ea8c99eda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2ba2b1794ac9bad08da653ea8c99eda">&#9670;&nbsp;</a></span>setBasePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setBasePath </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>sets a new base path. This includes changing the relative path definition of the already parsed files. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">path</td><td>the base path </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a16c93a180125b6a7d85a41bba4cbff04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16c93a180125b6a7d85a41bba4cbff04">&#9670;&nbsp;</a></span>setImportIdent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setImportIdent </td>
          <td>(</td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>item</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>ident</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_structure.xhtml">Structure</a>&#160;</td>
          <td class="paramname"><em>database</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the new ident used for import The ident is automatically modified to be unique and allowed. Further, the list of items is resorted! </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">item</td><td>the index in items vector </td></tr>
    <tr><td class="paramname">ident</td><td>the new value of "imported_ident" </td></tr>
    <tr><td class="paramname">database</td><td>the database (used for checking the ident on being allowed). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a39cc40da8396870fcb5ffce2732ad45a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39cc40da8396870fcb5ffce2732ad45a">&#9670;&nbsp;</a></span>setImportItem()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setImportItem </td>
          <td>(</td>
          <td class="paramtype">number&#160;</td>
          <td class="paramname"><em>item</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_import</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets if the item is to be imported There is no error checking! </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">item</td><td>the index in items vector </td></tr>
    <tr><td class="paramname">do_import</td><td>the new value of "do_import". </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a74b36e749ed3b693b484d81e53d1f711"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74b36e749ed3b693b484d81e53d1f711">&#9670;&nbsp;</a></span>setMeshMapper()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">setMeshMapper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_mesh_mapper_base.xhtml">MeshMapperBase</a>&#160;</td>
          <td class="paramname"><em>mapper</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>sets the (in)compatible mesh mapper object </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mapper</td><td>the new mapping handler </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a1be53c8e392d898f99ddc804ff403c84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1be53c8e392d898f99ddc804ff403c84">&#9670;&nbsp;</a></span>base_path</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string base_path</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Specifies the base path. Must be changed only via <a class="el" href="class_reference_design.xhtml#aa2ba2b1794ac9bad08da653ea8c99eda" title="sets a new base path. This includes changing the relative path definition of the already parsed files...">setBasePath()</a>! </p>
<p>base_path should always point to an existing absolute filesystem directory otherwise an exception may occour during program execution. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
