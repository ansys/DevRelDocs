<!-- HTML header for doxygen 1.9.2-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>optiSLang 3D Postprocessing Script API Documentation (Beta): Overview</title>
<!-- <link href="tabs.css" rel="stylesheet" type="text/css"/> -->
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="ansys_customdoxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr>
  <!--BEGIN PROJECT_LOGO-->
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('index.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Overview </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>** This documentation is BETA, not yet fully reviewed and may not reflect the true script documentation! **</p>
<p>oSP3D provides embedded scripting. Nearly any command, including visualization, triggers a script execution. Hence, you can store the log of a session in a Lua script. By executing a previously stored script, you can:</p><ul>
<li>Execute a session to change input data</li>
<li>Change certain session parameters</li>
<li>Debug the application in case of an unforeseen event (crash)</li>
<li>Theoretically, you can even use the script engine to enhance oSP3D functionality.</li>
</ul>
<p>Features of Interest:</p><ul>
<li>oSP3D makes the Lua language (version 5.3) and Python fully available.</li>
<li>Execute individual commands using the Lua console at the bottom of the main window.</li>
<li>Execute multiple commands by copying and pasting them. Insert a block of commands from the clipboard or press Shift + Enter in the Lua console.</li>
<li>Execute Lua script files from the command line using the command line parameter -s.</li>
<li>oSP3D enhances the Lua language by adding methods to the Lua table "sos".</li>
<li>Compatibility of the oSP3D script API cannot be guaranteed among different versions of oSP3D (as opposed to the binary data base format).</li>
</ul>
<p>oSP3D currently supports two script languages:</p>
<ul>
<li><p class="startli">Python</p>
<p class="startli">The optiSLang Python executable is called when using the Python node in optiSLang, allowing you to execute oSP3D script code directly in optiSLang. Use the oSP3D Python package for seamless development of optiSLang custom integration nodes. <br />
</p>
</li>
<li><p class="startli">Lua</p>
<p class="startli">Lua is a simple and high performance embeddable programming language for real-time processing. It is used in the oSP3D GUI and oSP3D macro development. Further, the FMOPSolver.DLL provides embedded scripting for Lua (See SoSP3DoS C-API documentation).</p>
</li>
</ul>
<p>Both languages are extended using custom oSP3D functions and classes using the same API for both languages (with exception of a few language specific changes). Graphics commands (3D rendering) is supported only in oSP3D GUI. </p><hr/>
<h1>Introduction to oSP3D Python</h1>
<p>The optiSLang Python executable is called when using the Python node in optiSLang, allowing you to execute oSP3D script code directly in optiSLang. You use the oSP3D Python package for seamless development of optiSLang custom integration nodes.</p>
<h2>Licensing the oSP3D Python Package</h2>
<p>Importing the oSP3D Python module requires an optiSLang enterprise license. When using the module inside optiSLang, it shares the optiSLang Enterprise license.</p>
<p>See the [optiSLang Installation and Licensing Guide](<a href="https://ansyshelp.ansys.com/account/secured?returnurl=/Views/Secured/corp/v212/en/opti_inst_lic/opti_inst_lic.html">https://ansyshelp.ansys.com/account/secured?returnurl=/Views/Secured/corp/v212/en/opti_inst_lic/opti_inst_lic.html</a>]</p>
<p>The license remains locked for the lifetime of the Python program. There is no method for releasing it earlier.</p>
<h2>Using the oSP3D Python Package</h2>
<p>Here are some examples for using the oSP3D Python package:</p>
<p><b>Note: Always treat quotation marks (', ") carefully.</b></p>
<p>Load modules "sos" and "tmath" </p><div class="fragment"><div class="line">try:</div><div class="line">    from sos_package import sos, tmath</div><div class="line">except:</div><div class="line">    print(&quot;ERROR: failed to load SoS module. An optiSlang Enterprise license is required. An Ansys licensing client installation is required. Check your environment variables, see https://ansyshelp.ansys.com/account/secured?returnurl=/Views/Secured/corp/v212/en/opti_inst_lic/opti_inst_lic_config_requirements.html&quot;)</div></div><!-- fragment --><h3>Run oSP3D Lua code</h3>
<p>From Python, you can call any oSP3D Lua code that is generated by the oSP3D GUI and written to the command log: </p><div class="fragment"><div class="line">sos.execLua( &#39;settings = sos.LoadDataBaseSettings(&quot;myDatabase.sdb&quot;); sos.loadDataBase(sos.database(), settings)&#39; ) # load a database using Lua code</div><div class="line">sos.printMeshInfo(sos.database()) # print mesh information of the loaded database using Python code</div></div><!-- fragment --><h3>Lua versus Python oSP3D script</h3>
<p>To call class member methods, Lua uses ":" while Python uses ".".</p>
<p>Lua code: </p><div class="fragment"><div class="line">-- select all field data objects of quantity &quot;pstrain&quot;</div><div class="line">pstrainDataObjects = sos.database():data():filterQuantity(&quot;pstrain&quot;)</div></div><!-- fragment --><p>Python code: </p><div class="fragment"><div class="line"># select all field data objects of quantity &quot;pstrain&quot;</div><div class="line">pstrainDataObjects = sos.database().data().filterQuantity(&quot;pstrain&quot;)</div></div><!-- fragment --><p>Some reserved words in Python can not be wrapped directly, for example <em>import</em> or <em>clear</em>. Append an underscore to call such oSP3D functions, e.g. </p><div class="fragment"><div class="line">sos.database()._clear()</div></div><!-- fragment --><h3>Python lists and sos.StringVector</h3>
<p>Input arguments of type sos.StringVector are compatible with Python lists of strings.</p>
<div class="fragment"><div class="line"># select all field data objects of quantities &quot;pstrain&quot; and &quot;thickness&quot;</div><div class="line">dataObjects = sos.database().data().filterQuantity([&quot;pstrain&quot;, &quot;thickness&quot;])</div></div><!-- fragment --><h3>Tmath Module and numpy</h3>
<p>The module tmath is a fast linear algebra library. It is based on the C++ library Eigen2 and exposes most of its API directly to scripts. The following examples illustrate the compatibility with Python lists and numpy arrays.</p>
<div class="fragment"><div class="line"># vector in numpy</div><div class="line">vec_np = numpy.array([1,2,3])</div><div class="line"></div><div class="line"># vector in tmath</div><div class="line">vec_tmath = tmath.Matrix([1,2,3]) # tmath.Matrix() constructor accepts lists and tuples</div><div class="line"></div><div class="line"># matrix in numpy</div><div class="line">mat_np = numpy.array([[1,2,3],[4,5,6]])</div><div class="line"></div><div class="line"># matrix in tmath</div><div class="line">mat_tmath = tmath.Matrix([[1,2,3],[4,5,6]]) # tmath.Matrix() constructor accepts lists of lists</div><div class="line"></div><div class="line"># numpy.array to tmath.Matrix</div><div class="line">mat_tmath = tmath.Matrix(mat_np.tolist())</div><div class="line"></div><div class="line"># tmath.Matrix to numpy.array</div><div class="line">mat_np = numpy.array(list(mat_tmath))</div><div class="line"></div><div class="line"># functions with tmath.Matrix input arguments</div><div class="line">dataObject = sos.createElementDataObject(sos.database(), vec_tmath)</div><div class="line">dataObject = sos.createElementDataObject(sos.database(), vec_np.tolist())</div><div class="line">dataObject = sos.createElementDataObject(sos.database(), [1,2,3])</div></div><!-- fragment --> <hr/>
<h1>Introduction to oSP3D Lua</h1>
<p>The oSP3D GUI script language is based on Lua 5.3, allowing execution of any Lua code. oSP3D script code is executed via</p><ul>
<li>the GUI's script command line</li>
<li>executing an .ssc script file at program start</li>
<li>by command line argument -s &lt;file.ssc&gt; (run script in GUI)</li>
<li>by command line argument -b &lt;file.ssc&gt; (run script in batch mode)</li>
</ul>
<h2>oSP3D Lua script examples</h2>
<h3>A function with return value</h3>
<blockquote class="doxtable">
<p><span class="comment">-- Load reference mesh</span><br />
 mesh = sos.<a class="el" href="group__import.xhtml#ga1b3d4d7a9aa07b994d5788f64dce55a3">importMesh_LSDynaK</a>("/path/to/reference_mesh.k"); </p>
</blockquote>
<p>In Lua, comments always begin with "--". The function <a class="el" href="group__import.xhtml#ga1b3d4d7a9aa07b994d5788f64dce55a3" title="imports the mesh from a single LS-DYNA K file ">importMesh_LSDynaK()</a> is defined in Lua table "sos" and returns a <a class="el" href="class_meta_structure.xhtml" title="Defines a meta structure which contains all data that is used to create a finite element mesh...">MetaStructure</a> object, stored in the <em>mesh</em> variable.</p>
<h3>A function without return value</h3>
<blockquote class="doxtable">
<p><span class="comment">-- Set reference mesh</span><br />
 sos.<a class="el" href="group__import.xhtml#ga380830b2ab7587d1c03c5ea245d0d139">setReferenceMesh</a>(sos.<a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database()</a>, mesh); </p>
</blockquote>
<p>The function <a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b" title="Gives access to the global database. ">database()</a> returns the global database <a class="el" href="class_structure.xhtml" title="The central data structure for SoS. ">Structure</a> object.</p>
<h3>Calling object member functions</h3>
<blockquote class="doxtable">
<p><span class="comment">-- Import field designs</span><br />
 sos.<a class="el" href="group__import.xhtml#gaeebdfe2e2b08f67a2a3e5c9873171679">referenceDesign()</a>:<a class="el" href="class_reference_design.xhtml#aa2ba2b1794ac9bad08da653ea8c99eda">setBasePath</a>("/path/to/Design0001"); <span class="comment">-- set location of reference design</span><br />
 sos.<a class="el" href="group__import.xhtml#gaeebdfe2e2b08f67a2a3e5c9873171679">referenceDesign()</a>:<a class="el" href="class_reference_design.xhtml#ac4b1f9b78214f1ad46dead046c98659e">addFile_LSPrePost</a>(sos.<a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database()</a>, "/path/to/Design0001/field.k");<br />
 importer = sos.<a class="el" href="class_import_designs.xhtml">ImportDesigns</a>(sos.<a class="el" href="group__import.xhtml#gaeebdfe2e2b08f67a2a3e5c9873171679">referenceDesign()</a>); <span class="comment">-- call the ImportDesigns class constructor</span><br />
 importer:<a class="el" href="class_import_designs.xhtml#a54f34c64e9326398eaaf5cdcb8127e08">scanDesignRanges()</a>; <span class="comment">-- search for folders named DesignXXXX</span><br />
 importer:<a class="el" href="class_import_designs.xhtml#a73dd3f56399568385400db0c3fc08295">import</a>(sos.<a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database()</a>) <span class="comment">-- store the field designs in the global database</span><br />
 </p>
</blockquote>
<p>Object member functions are called by the ":" syntax. The function <a class="el" href="group__import.xhtml#gaeebdfe2e2b08f67a2a3e5c9873171679" title="gives access to the reference design information ">referenceDesign()</a> returns the global <a class="el" href="class_reference_design.xhtml" title="defines information on imported data and files given a reference design ">ReferenceDesign</a> object.</p>
<h3>Calling static member functions</h3>
<blockquote class="doxtable">
<p>sortedIdentVector = sos.<a class="el" href="">ElementDataObjectFilter</a>.<a class="el" href="">sortDesignIdents(identVector)</a> </p>
</blockquote>
<p>Static member functions are called by the '.' syntax. No object instantiation is required.</p>
<h3>Lua script examples</h3>
<p>See <a class="el" href="lua_examples.xhtml">Scripting examples with Lua</a> </p><hr/>
<h2>Lua tables</h2>
<p>Functions and class constructors are collected in Lua tables.</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone" colspan="2">Table name   </th></tr>
<tr class="markdownTableBody" class="markdownTableRowOdd">
<td class="markdownTableBodyNone">sos.  </td><td class="markdownTableBodyNone"><a class="el" href="group__import.xhtml">Import</a>, <a class="el" href="group__export.xhtml">Export</a>, <a class="el" href="group__data.xhtml">Data</a>, <a class="el" href="group__fieldmodels.xhtml">Field models</a>, <a class="el" href="group__statistics.xhtml">Statistics</a>, <a class="el" href="group__toolbox.xhtml">Toolbox</a>, <a class="el" href="group__graphics.xhtml">Graphics</a>, <a class="el" href="group__meshmapper.xhtml">Mesh mapper</a>, <a class="el" href="group__mop.xhtml">Mop</a>, <a class="el" href="group__misc.xhtml">Miscellaneous</a>   </td></tr>
<tr class="markdownTableBody" class="markdownTableRowEven">
<td class="markdownTableBodyNone">fs.  </td><td class="markdownTableBodyNone"><a class="el" href="group__file.xhtml">File system</a>   </td></tr>
<tr class="markdownTableBody" class="markdownTableRowOdd">
<td class="markdownTableBodyNone">tmath.  </td><td class="markdownTableBodyNone"><a class="el" href="group__tmath.xhtml">tmath</a>   </td></tr>
</table>
<p>An especially helpful command is <em>info(object)</em>. You can use this command to list information on a given variable, table, or meta table (including methods and member variables). </p><hr/>
<h2>The &lt;TYPE&gt; Class Template</h2>
<p>The oSP3D script API provides four specializations. To use the class suitable for the desired data type, replace &lt;TYPE&gt; with:</p><ul>
<li>Scalar</li>
<li>Node</li>
<li><a class="el" href="class_element.xhtml" title="Repesents the geometry of a finite element within a mesh. ">Element</a></li>
<li>Intpt</li>
</ul>
<blockquote class="doxtable">
<p>sos.<a class="el" href="class_compute_mean.xhtml">ComputeMeanElement()</a><br />
 sos.<a class="el" href="class_compute_mean.xhtml">ComputeMeanNode()</a> </p>
</blockquote>
<dl class="section warning"><dt>Warning</dt><dd>In module <a class="el" href="group__data.xhtml">Data</a>, template specializations are <em>prepended</em>. <blockquote class="doxtable">
<p>filter1 = sos.<a class="el" href="">ElementDataObjectFilter</a>(sos.<a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database()</a>:<a class="el" href="class_structure.xhtml#ae5a367f5f54310b57d68222455e61e26">elementData()</a>)<br />
 filter2 = sos.<a class="el" href="">NodeDataObjectFilter</a>(sos.<a class="el" href="group__data.xhtml#gaebcac3a2836ec9fdf2e47bd812994b6b">database()</a>:<a class="el" href="class_structure.xhtml#a539f561c03982da57200d2ed47807d74">nodeData()</a>) </p>
</blockquote>
</dd></dl>
<hr/>
 </div></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.15-->
<!-- start footer part -->
<script>
	$('.contents').append('<footer><p class="legalfooter" align="center"><small><i>Contains proprietary and confidential information of ANSYS, Inc. and its subsidiaries and affiliates.</i></small></p></footer>');
</script>
<!--END !GENERATE_TREEVIEW-->
</body>
</html>
